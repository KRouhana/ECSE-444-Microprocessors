
Lab 1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a48  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000086c  08002c08  08002c08  00012c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003474  08003474  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003474  08003474  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003474  08003474  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003478  08003478  00013478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800347c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000005c  080034d8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080034d8  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d2cf  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000089  00000000  00000000  0002d413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   0000f60c  00000000  00000000  0002d49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000213d  00000000  00000000  0003caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000c20  00000000  00000000  0003ebe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104834  00000000  00000000  0003f808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000008b6  00000000  00000000  0014403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002a214  00000000  00000000  001448f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000031a0  00000000  00000000  0016eb08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000557  00000000  00000000  00171ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000030  00000000  00000000  001721ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08002bf0 	.word	0x08002bf0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	08002bf0 	.word	0x08002bf0

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__gedf2>:
 8000578:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800057c:	e006      	b.n	800058c <__cmpdf2+0x4>
 800057e:	bf00      	nop

08000580 <__ledf2>:
 8000580:	f04f 0c01 	mov.w	ip, #1
 8000584:	e002      	b.n	800058c <__cmpdf2+0x4>
 8000586:	bf00      	nop

08000588 <__cmpdf2>:
 8000588:	f04f 0c01 	mov.w	ip, #1
 800058c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800059c:	bf18      	it	ne
 800059e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005a2:	d01b      	beq.n	80005dc <__cmpdf2+0x54>
 80005a4:	b001      	add	sp, #4
 80005a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005aa:	bf0c      	ite	eq
 80005ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b0:	ea91 0f03 	teqne	r1, r3
 80005b4:	bf02      	ittt	eq
 80005b6:	ea90 0f02 	teqeq	r0, r2
 80005ba:	2000      	moveq	r0, #0
 80005bc:	4770      	bxeq	lr
 80005be:	f110 0f00 	cmn.w	r0, #0
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf58      	it	pl
 80005c8:	4299      	cmppl	r1, r3
 80005ca:	bf08      	it	eq
 80005cc:	4290      	cmpeq	r0, r2
 80005ce:	bf2c      	ite	cs
 80005d0:	17d8      	asrcs	r0, r3, #31
 80005d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005d6:	f040 0001 	orr.w	r0, r0, #1
 80005da:	4770      	bx	lr
 80005dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e4:	d102      	bne.n	80005ec <__cmpdf2+0x64>
 80005e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ea:	d107      	bne.n	80005fc <__cmpdf2+0x74>
 80005ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f4:	d1d6      	bne.n	80005a4 <__cmpdf2+0x1c>
 80005f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005fa:	d0d3      	beq.n	80005a4 <__cmpdf2+0x1c>
 80005fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <__aeabi_cdrcmple>:
 8000604:	4684      	mov	ip, r0
 8000606:	4610      	mov	r0, r2
 8000608:	4662      	mov	r2, ip
 800060a:	468c      	mov	ip, r1
 800060c:	4619      	mov	r1, r3
 800060e:	4663      	mov	r3, ip
 8000610:	e000      	b.n	8000614 <__aeabi_cdcmpeq>
 8000612:	bf00      	nop

08000614 <__aeabi_cdcmpeq>:
 8000614:	b501      	push	{r0, lr}
 8000616:	f7ff ffb7 	bl	8000588 <__cmpdf2>
 800061a:	2800      	cmp	r0, #0
 800061c:	bf48      	it	mi
 800061e:	f110 0f00 	cmnmi.w	r0, #0
 8000622:	bd01      	pop	{r0, pc}

08000624 <__aeabi_dcmpeq>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff fff4 	bl	8000614 <__aeabi_cdcmpeq>
 800062c:	bf0c      	ite	eq
 800062e:	2001      	moveq	r0, #1
 8000630:	2000      	movne	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmplt>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffea 	bl	8000614 <__aeabi_cdcmpeq>
 8000640:	bf34      	ite	cc
 8000642:	2001      	movcc	r0, #1
 8000644:	2000      	movcs	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmple>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffe0 	bl	8000614 <__aeabi_cdcmpeq>
 8000654:	bf94      	ite	ls
 8000656:	2001      	movls	r0, #1
 8000658:	2000      	movhi	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmpge>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffce 	bl	8000604 <__aeabi_cdrcmple>
 8000668:	bf94      	ite	ls
 800066a:	2001      	movls	r0, #1
 800066c:	2000      	movhi	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_dcmpgt>:
 8000674:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000678:	f7ff ffc4 	bl	8000604 <__aeabi_cdrcmple>
 800067c:	bf34      	ite	cc
 800067e:	2001      	movcc	r0, #1
 8000680:	2000      	movcs	r0, #0
 8000682:	f85d fb08 	ldr.w	pc, [sp], #8
 8000686:	bf00      	nop

08000688 <asmMax>:
 * R2 = pointer to max
 * R3 = pointer to maxIndex
 */

asmMax:
  PUSH 		{R4, R5}		// saving R4 and R5 according to calling convention
 8000688:	b430      	push	{r4, r5}
  VLDR.f32 	S0, [R0]		// max = array[0] (fp register S0 is used for max)
 800068a:	ed90 0a00 	vldr	s0, [r0]
  MOV 		R4, #0			// maxIndex = 0 (register R4 is used for maxIndex)
 800068e:	f04f 0400 	mov.w	r4, #0

08000692 <loop>:

loop:
  SUBS		R1, R1, #1		// size = size - 1
 8000692:	3901      	subs	r1, #1
  BLT		done			// loop finishes when R1 < 0
 8000694:	db0c      	blt.n	80006b0 <done>
  ADD		R5, R0, R1, LSL #2	// calculate base address (in R5) for array element
 8000696:	eb00 0581 	add.w	r5, r0, r1, lsl #2
  VLDR.f32	S1, [R5]		// load element into fp register S1 (from address in R5)
 800069a:	edd5 0a00 	vldr	s1, [r5]
  VCMP.f32	S0, S1			// compare new element with current max
 800069e:	eeb4 0a60 	vcmp.f32	s0, s1
  //Have to do this when branching with floating point
  VMRS		APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  BGT		continue		// if max > new element, on to the next element
 80006a6:	dc02      	bgt.n	80006ae <continue>
  VMOV.f32	S0, S1			// otherwise, max = new element
 80006a8:	eeb0 0a60 	vmov.f32	s0, s1
  MOV		R4, R1			// update maxIndex
 80006ac:	460c      	mov	r4, r1

080006ae <continue>:

continue:
  B		loop			// next iteration
 80006ae:	e7f0      	b.n	8000692 <loop>

080006b0 <done>:

done:
  VSTR.f32	S0, [R2]		// store max value in the pointer to max variable given
 80006b0:	ed82 0a00 	vstr	s0, [r2]
  STR		R4, [R3]		// store max index in the pointer to maxIndex given
 80006b4:	601c      	str	r4, [r3, #0]
  POP		{R4, R5}		// restore context
 80006b6:	bc30      	pop	{r4, r5}
  BX LR					// return
 80006b8:	4770      	bx	lr

080006ba <asmSqrt>:
 */

//I know the output should be pointed to R1, but it does not work, hence I used R3

asmSqrt:
	PUSH {R3}
 80006ba:	b408      	push	{r3}
	VSUB.F32 S20, S20, S20	//To get 0, we do S20 - S20
 80006bc:	ee3a aa4a 	vsub.f32	s20, s20, s20
	VCMP.F32 S0, S20		//Compare it with 0
 80006c0:	eeb4 0a4a 	vcmp.f32	s0, s20
	VMRS APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 80006c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	BLE negative
 80006c8:	dd05      	ble.n	80006d6 <negative>

080006ca <squareRoot>:

squareRoot:
	VSQRT.F32 S0, S0
 80006ca:	eeb1 0ac0 	vsqrt.f32	s0, s0
  	VSTR.f32  S0, [R3]
 80006ce:	ed83 0a00 	vstr	s0, [r3]

080006d2 <done>:

done:
	POP {R3}
 80006d2:	bc08      	pop	{r3}
	BX LR
 80006d4:	4770      	bx	lr

080006d6 <negative>:

negative:
	VSUB.F32 S0, S0, S0		//If the number is less than 0, return 0
 80006d6:	ee30 0a40 	vsub.f32	s0, s0, s0
	VSTR.f32  S0, [R3]
 80006da:	ed83 0a00 	vstr	s0, [r3]
	POP {R3}
 80006de:	bc08      	pop	{r3}
	BX LR
 80006e0:	4770      	bx	lr

080006e2 <asmTranscendental>:
 */


asmTranscendental:

PUSH {V8}
 80006e2:	f84d bd04 	str.w	fp, [sp, #-4]!

//Set S20 to be the tolerance and epsilon at 0.015625
VMOV S16, #4
 80006e6:	eeb1 8a00 	vmov.f32	s16, #16	; 0x40800000  4.0
VMOV S20, #1
 80006ea:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
VDIV.F32 S20, S20, S16
 80006ee:	ee8a aa08 	vdiv.f32	s20, s20, s16
VDIV.F32 S20, S20, S16
 80006f2:	ee8a aa08 	vdiv.f32	s20, s20, s16
VDIV.F32 S20, S20, S16
 80006f6:	ee8a aa08 	vdiv.f32	s20, s20, s16

//Set V8 to be the max iterations
MOV V8, #50
 80006fa:	f04f 0b32 	mov.w	fp, #50	; 0x32

080006fe <loop>:

loop:
//Check if it exceded the max iterations
CMP V8, #0
 80006fe:	f1bb 0f00 	cmp.w	fp, #0
SUB V8, V8, #1
 8000702:	f1ab 0b01 	sub.w	fp, fp, #1
BEQ end
 8000706:	d005      	beq.n	8000714 <end>

PUSH {LR}
 8000708:	b500      	push	{lr}
BL defunc
 800070a:	f000 f80b 	bl	8000724 <defunc>
POP {LR}
 800070e:	f85d eb04 	ldr.w	lr, [sp], #4

B loop
 8000712:	e7f4      	b.n	80006fe <loop>

08000714 <end>:

end:
POP {V8}
 8000714:	f85d bb04 	ldr.w	fp, [sp], #4
BX LR
 8000718:	4770      	bx	lr

0800071a <break>:

break:
POP {LR}
 800071a:	f85d eb04 	ldr.w	lr, [sp], #4
POP {V8}
 800071e:	f85d bb04 	ldr.w	fp, [sp], #4
BX LR
 8000722:	4770      	bx	lr

08000724 <defunc>:


defunc:

VMUL.F32 S3, S1, S0				//B = x0*w
 8000724:	ee60 1a80 	vmul.f32	s3, s1, s0
VADD.F32 S3, S3, S2				//B = B + phi
 8000728:	ee71 1a81 	vadd.f32	s3, s3, s2

VMOV S31, S3			//Store B into S31
 800072c:	eef0 fa61 	vmov.f32	s31, s3

VMOV S30, S0			//Store X0 into S30
 8000730:	eeb0 fa40 	vmov.f32	s30, s0

VMOV S0, S31			//Load B into S0
 8000734:	eeb0 0a6f 	vmov.f32	s0, s31

//Call ArmCosFunction with S0 as argument
PUSH {LR}
 8000738:	b500      	push	{lr}
BL arm_cos_f32
 800073a:	f002 f9bb 	bl	8002ab4 <arm_cos_f32>
POP {LR}
 800073e:	f85d eb04 	ldr.w	lr, [sp], #4

VMOV S5, S0					//Store cos(B) into S5
 8000742:	eef0 2a40 	vmov.f32	s5, s0

VMOV S0, S31				//Reload B into S0
 8000746:	eeb0 0a6f 	vmov.f32	s0, s31

//Call ArmSinFunction with S0 as argument
PUSH {LR}
 800074a:	b500      	push	{lr}
BL arm_sin_f32
 800074c:	f002 f96c 	bl	8002a28 <arm_sin_f32>
POP {LR}
 8000750:	f85d eb04 	ldr.w	lr, [sp], #4

VMOV S7, S0				//Store sin(B) into S7
 8000754:	eef0 3a40 	vmov.f32	s7, s0

VMOV S0, S30			//Load X0 from S30
 8000758:	eeb0 0a4f 	vmov.f32	s0, s30

VMOV S4, S0				//Set X0 into S4
 800075c:	eeb0 2a40 	vmov.f32	s4, s0

/**
 * f(x) = x^2 - cos(wx+φ) -> B = wx+φ
 */

VMUL.F32 S4, S4, S4		//X0*X0
 8000760:	ee22 2a02 	vmul.f32	s4, s4, s4
VSUB.F32 S4, S4, S5		//X0^2 - cos(B) (This is f(x))
 8000764:	ee32 2a62 	vsub.f32	s4, s4, s5

/**
 * f'(x) = 2x + wsin(wx+φ) -> B = wx+φ
 */

VMUL.F32 S6, S1, S7		//w*sin(b)
 8000768:	ee20 3aa3 	vmul.f32	s6, s1, s7
VMOV S8, S0				//Store X0 into S8
 800076c:	eeb0 4a40 	vmov.f32	s8, s0
VMOV S9, #2				//Store 2 into S9
 8000770:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
VMUL.F32 S8, S8, S9		//2*X0
 8000774:	ee24 4a24 	vmul.f32	s8, s8, s9
VADD.F32 S8, S8, S6		//2*X0 + w*sin(b) (This is f'(x))
 8000778:	ee34 4a03 	vadd.f32	s8, s8, s6
/**
* 	if(fabs(f'(x)) < epsilon)
*		break;
*
*/
VABS.F32 S21, S8		//Get |f'(x)|
 800077c:	eef0 aac4 	vabs.f32	s21, s8
VCMP.F32 S21, S20		//Compare it with epsilon
 8000780:	eef4 aa4a 	vcmp.f32	s21, s20
VMRS APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
BLT break				//If it's less than, we break out of the loop
 8000788:	dbc7      	blt.n	800071a <break>

/**
* x1 = x0 -  f(x)/f'(x)
*/

VDIV.F32 S9, S4, S8		//f(x)/f'(x)
 800078a:	eec2 4a04 	vdiv.f32	s9, s4, s8
VSUB.F32 S11, S0, S9 	//x0 - f(x)/f'(x)
 800078e:	ee70 5a64 	vsub.f32	s11, s0, s9
*	if(fabs(x1-x0) <= tolerance)
*		return x1;
*
*/

VSUB.F32 S12, S11, S0	//Get x1 - x0
 8000792:	ee35 6ac0 	vsub.f32	s12, s11, s0
VABS.F32 S12, S12		//Get |x1 - x0|
 8000796:	eeb0 6ac6 	vabs.f32	s12, s12
VCMP.F32 S12, S20		//Compare the difference with tolerance
 800079a:	eeb4 6a4a 	vcmp.f32	s12, s20
VMRS APSR_nzvc, FPSCR	// load the FP PSR to branch using FP conditions
 800079e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
BLE returnX1			//If it's less than or equal, we return x1 and break out of the loop
 80007a2:	dd02      	ble.n	80007aa <returnX1>

VMOV S0, S11			//x0 = x1
 80007a4:	eeb0 0a65 	vmov.f32	s0, s11
BX LR
 80007a8:	4770      	bx	lr

080007aa <returnX1>:


returnX1:
VMOV S0, S11			//x0 = x1
 80007aa:	eeb0 0a65 	vmov.f32	s0, s11
B break
 80007ae:	e7b4      	b.n	800071a <break>

080007b0 <cMax>:
 */

#include "main.h"


void cMax(float *array, uint32_t size, float *max, uint32_t *maxIndex) {
 80007b0:	b480      	push	{r7}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	60b9      	str	r1, [r7, #8]
 80007ba:	607a      	str	r2, [r7, #4]
 80007bc:	603b      	str	r3, [r7, #0]
	(*max) = array[0];
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
	(*maxIndex) = 0;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]

	for (uint32_t i = 1; i < size; i++) {
 80007cc:	2301      	movs	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	e01a      	b.n	8000808 <cMax+0x58>
		if (array[i] > (*max)) {
 80007d2:	697b      	ldr	r3, [r7, #20]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	4413      	add	r3, r2
 80007da:	ed93 7a00 	vldr	s14, [r3]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	edd3 7a00 	vldr	s15, [r3]
 80007e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ec:	dd09      	ble.n	8000802 <cMax+0x52>
			(*max) = array[i];
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	4413      	add	r3, r2
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	601a      	str	r2, [r3, #0]
			(*maxIndex) = i;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	697a      	ldr	r2, [r7, #20]
 8000800:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 1; i < size; i++) {
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	3301      	adds	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	429a      	cmp	r2, r3
 800080e:	d3e0      	bcc.n	80007d2 <cMax+0x22>
		} // if
	} // for
} // cMax
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	371c      	adds	r7, #28
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <cSqrt>:
 *      Author: karl
 */
#include "main.h"
#include "math.h"

void cSqrt(const float in, float *out){
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	ed87 0a01 	vstr	s0, [r7, #4]
 800082a:	6038      	str	r0, [r7, #0]


	if(in <=0){
 800082c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000830:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000838:	d804      	bhi.n	8000844 <cSqrt+0x24>
		*out = 0.0;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	f04f 0200 	mov.w	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
		return;
 8000842:	e02f      	b.n	80008a4 <cSqrt+0x84>
	}

	float guess = in;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	60fb      	str	r3, [r7, #12]

	 while( fabs((guess * guess) / in - 1) >= 0.00001 ) {
 8000848:	e00f      	b.n	800086a <cSqrt+0x4a>
	        guess = ((in/guess) + guess) / 2;
 800084a:	edd7 6a01 	vldr	s13, [r7, #4]
 800084e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000856:	edd7 7a03 	vldr	s15, [r7, #12]
 800085a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800085e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000866:	edc7 7a03 	vstr	s15, [r7, #12]
	 while( fabs((guess * guess) / in - 1) >= 0.00001 ) {
 800086a:	edd7 7a03 	vldr	s15, [r7, #12]
 800086e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8000872:	ed97 7a01 	vldr	s14, [r7, #4]
 8000876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800087a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800087e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000882:	eef0 7ae7 	vabs.f32	s15, s15
 8000886:	ee17 0a90 	vmov	r0, s15
 800088a:	f7ff fe1d 	bl	80004c8 <__aeabi_f2d>
 800088e:	a308      	add	r3, pc, #32	; (adr r3, 80008b0 <cSqrt+0x90>)
 8000890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000894:	f7ff fee4 	bl	8000660 <__aeabi_dcmpge>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1d5      	bne.n	800084a <cSqrt+0x2a>


	 }

	 *out = guess;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	601a      	str	r2, [r3, #0]

}
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	f3af 8000 	nop.w
 80008b0:	88e368f1 	.word	0x88e368f1
 80008b4:	3ee4f8b5 	.word	0x3ee4f8b5

080008b8 <defunc>:
#include "main.h"
#define ARM_MATH_CM4
#include "arm_math.h"
#include "math.h"

float defunc(float x0, float w, float phi, float B){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	ed2d 8b02 	vpush	{d8}
 80008be:	b086      	sub	sp, #24
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80008c6:	edc7 0a02 	vstr	s1, [r7, #8]
 80008ca:	ed87 1a01 	vstr	s2, [r7, #4]
 80008ce:	edc7 1a00 	vstr	s3, [r7]

/**
 * f(x) = x^2 - cos(wx+φ) -> B = wx+φ
 */

	float y = x0*x0 - arm_cos_f32(B);
 80008d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80008d6:	ee27 8aa7 	vmul.f32	s16, s15, s15
 80008da:	ed97 0a00 	vldr	s0, [r7]
 80008de:	f002 f8e9 	bl	8002ab4 <arm_cos_f32>
 80008e2:	eef0 7a40 	vmov.f32	s15, s0
 80008e6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80008ea:	edc7 7a05 	vstr	s15, [r7, #20]

	return y;
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	ee07 3a90 	vmov	s15, r3
}
 80008f4:	eeb0 0a67 	vmov.f32	s0, s15
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	ecbd 8b02 	vpop	{d8}
 8000900:	bd80      	pop	{r7, pc}

08000902 <firstDerivative>:

float firstDerivative(float x0, float w, float phi, float B){
 8000902:	b580      	push	{r7, lr}
 8000904:	ed2d 8b02 	vpush	{d8}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	ed87 0a03 	vstr	s0, [r7, #12]
 8000910:	edc7 0a02 	vstr	s1, [r7, #8]
 8000914:	ed87 1a01 	vstr	s2, [r7, #4]
 8000918:	edc7 1a00 	vstr	s3, [r7]

/**
 * f'(x) = 2x + wsin(wx+φ) -> B = wx+φ
 */

	float yPrime = 2*x0 + w*arm_sin_f32(B);
 800091c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000920:	ee37 8aa7 	vadd.f32	s16, s15, s15
 8000924:	ed97 0a00 	vldr	s0, [r7]
 8000928:	f002 f87e 	bl	8002a28 <arm_sin_f32>
 800092c:	eeb0 7a40 	vmov.f32	s14, s0
 8000930:	edd7 7a02 	vldr	s15, [r7, #8]
 8000934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000938:	ee78 7a27 	vadd.f32	s15, s16, s15
 800093c:	edc7 7a05 	vstr	s15, [r7, #20]

	return yPrime;
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	ee07 3a90 	vmov	s15, r3
}
 8000946:	eeb0 0a67 	vmov.f32	s0, s15
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	ecbd 8b02 	vpop	{d8}
 8000952:	bd80      	pop	{r7, pc}

08000954 <cnewtonsMethod>:

float cnewtonsMethod(float x0, float w, float phi){
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
 800095a:	ed87 0a03 	vstr	s0, [r7, #12]
 800095e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000962:	ed87 1a01 	vstr	s2, [r7, #4]

	int maxIteration = 50;
 8000966:	2332      	movs	r3, #50	; 0x32
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
	float tolerance = 0.015625;
 800096a:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
 800096e:	623b      	str	r3, [r7, #32]
	float epsilon = 0.015625;
 8000970:	f04f 5372 	mov.w	r3, #1015021568	; 0x3c800000
 8000974:	61fb      	str	r3, [r7, #28]
	float x1;

	for(int i =0; i< maxIteration; i++){
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
 800097a:	e050      	b.n	8000a1e <cnewtonsMethod+0xca>

		float B = x0*w + phi;
 800097c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000980:	edd7 7a02 	vldr	s15, [r7, #8]
 8000984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000988:	ed97 7a01 	vldr	s14, [r7, #4]
 800098c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000990:	edc7 7a06 	vstr	s15, [r7, #24]

		float y = defunc(x0, w, phi, B);
 8000994:	edd7 1a06 	vldr	s3, [r7, #24]
 8000998:	ed97 1a01 	vldr	s2, [r7, #4]
 800099c:	edd7 0a02 	vldr	s1, [r7, #8]
 80009a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80009a4:	f7ff ff88 	bl	80008b8 <defunc>
 80009a8:	ed87 0a05 	vstr	s0, [r7, #20]
		float yPrime = firstDerivative(x0, w, phi, B);
 80009ac:	edd7 1a06 	vldr	s3, [r7, #24]
 80009b0:	ed97 1a01 	vldr	s2, [r7, #4]
 80009b4:	edd7 0a02 	vldr	s1, [r7, #8]
 80009b8:	ed97 0a03 	vldr	s0, [r7, #12]
 80009bc:	f7ff ffa1 	bl	8000902 <firstDerivative>
 80009c0:	ed87 0a04 	vstr	s0, [r7, #16]

		if(fabs(yPrime) < epsilon){
 80009c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80009c8:	eef0 7ae7 	vabs.f32	s15, s15
 80009cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80009d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d8:	dc26      	bgt.n	8000a28 <cnewtonsMethod+0xd4>
			break;
		}

		x1 = x0 - y/yPrime;
 80009da:	edd7 6a05 	vldr	s13, [r7, #20]
 80009de:	ed97 7a04 	vldr	s14, [r7, #16]
 80009e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80009ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ee:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

		if(fabs(x1-x0) <= tolerance){
 80009f2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80009f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80009fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fe:	eef0 7ae7 	vabs.f32	s15, s15
 8000a02:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a0e:	db01      	blt.n	8000a14 <cnewtonsMethod+0xc0>
			return x1;
 8000a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a12:	e00b      	b.n	8000a2c <cnewtonsMethod+0xd8>
		}
		x0 = x1;
 8000a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a16:	60fb      	str	r3, [r7, #12]
	for(int i =0; i< maxIteration; i++){
 8000a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	429a      	cmp	r2, r3
 8000a24:	dbaa      	blt.n	800097c <cnewtonsMethod+0x28>
 8000a26:	e000      	b.n	8000a2a <cnewtonsMethod+0xd6>
			break;
 8000a28:	bf00      	nop

	}
	return x1;
 8000a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eeb0 0a67 	vmov.f32	s0, s15
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b0a0      	sub	sp, #128	; 0x80
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f000 fa6c 	bl	8000f1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a46:	f000 f8f5 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4a:	f000 f993 	bl	8000d74 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a4e:	f000 f943 	bl	8000cd8 <MX_TIM2_Init>

  /*
   * Max array
   */

  float max = 0;
 8000a52:	f04f 0300 	mov.w	r3, #0
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t maxIndex;

  float maxAsm = 0;
 8000a58:	f04f 0300 	mov.w	r3, #0
 8000a5c:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t maxIndexAsm = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	63fb      	str	r3, [r7, #60]	; 0x3c

  float maxCMSIS = 0;
 8000a62:	f04f 0300 	mov.w	r3, #0
 8000a66:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t maxIndexCMSIS = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	637b      	str	r3, [r7, #52]	; 0x34

  float array[10] = {48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52, 82.70, 77.73};
 8000a6c:	4b6f      	ldr	r3, [pc, #444]	; (8000c2c <main+0x1f0>)
 8000a6e:	f107 040c 	add.w	r4, r7, #12
 8000a72:	461d      	mov	r5, r3
 8000a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a80:	e884 0003 	stmia.w	r4, {r0, r1}

  /*
   * Square root
   */

  float  square = 64;
 8000a84:	f04f 4385 	mov.w	r3, #1115684864	; 0x42800000
 8000a88:	65fb      	str	r3, [r7, #92]	; 0x5c

  float  rootC = 0.0;
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]

  float32_t rootAsm = 0.0;
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]

  float32_t rootCMSIS = 0.0;
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]

  /*
   * Newtons
   */

  float newtonC, newtonASM= 0.0;
 8000a9c:	f04f 0300 	mov.w	r3, #0
 8000aa0:	65bb      	str	r3, [r7, #88]	; 0x58

	/*
	 * Begin for Max of array
	 */

	ITM_Port32(31) = 1;
 8000aa2:	4b63      	ldr	r3, [pc, #396]	; (8000c30 <main+0x1f4>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]

	//C
	for (uint32_t i=0; i<1000; i++){
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000aac:	e00b      	b.n	8000ac6 <main+0x8a>
		cMax(&array, 10, &max, &maxIndex);
 8000aae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ab2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000ab6:	f107 000c 	add.w	r0, r7, #12
 8000aba:	210a      	movs	r1, #10
 8000abc:	f7ff fe78 	bl	80007b0 <cMax>
	for (uint32_t i=0; i<1000; i++){
 8000ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ac6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000acc:	d3ef      	bcc.n	8000aae <main+0x72>
	}

	ITM_Port32(31) = 2;
 8000ace:	4b58      	ldr	r3, [pc, #352]	; (8000c30 <main+0x1f4>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	601a      	str	r2, [r3, #0]

	//Assembly
	for (uint32_t i=0; i<1000; i++){
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	67bb      	str	r3, [r7, #120]	; 0x78
 8000ad8:	e00b      	b.n	8000af2 <main+0xb6>
		asmMax(&array, 10, &maxAsm, &maxIndexAsm);
 8000ada:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ade:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000ae2:	f107 000c 	add.w	r0, r7, #12
 8000ae6:	210a      	movs	r1, #10
 8000ae8:	f7ff fdce 	bl	8000688 <asmMax>
	for (uint32_t i=0; i<1000; i++){
 8000aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000aee:	3301      	adds	r3, #1
 8000af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8000af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000af4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000af8:	d3ef      	bcc.n	8000ada <main+0x9e>
	}

	ITM_Port32(31) = 3;
 8000afa:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <main+0x1f4>)
 8000afc:	2203      	movs	r2, #3
 8000afe:	601a      	str	r2, [r3, #0]

	//CMSIS
	for (uint32_t i=0; i<1000; i++){
 8000b00:	2300      	movs	r3, #0
 8000b02:	677b      	str	r3, [r7, #116]	; 0x74
 8000b04:	e00b      	b.n	8000b1e <main+0xe2>
		arm_max_f32(&array, 10, &maxCMSIS, &maxIndexCMSIS);
 8000b06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b0a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b0e:	f107 000c 	add.w	r0, r7, #12
 8000b12:	210a      	movs	r1, #10
 8000b14:	f001 ff1c 	bl	8002950 <arm_max_f32>
	for (uint32_t i=0; i<1000; i++){
 8000b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8000b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b24:	d3ef      	bcc.n	8000b06 <main+0xca>
	}

	ITM_Port32(31) = 4;
 8000b26:	4b42      	ldr	r3, [pc, #264]	; (8000c30 <main+0x1f4>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	601a      	str	r2, [r3, #0]
	 * Begin for Square root
	 */


	//C
	for (uint32_t i=0; i<1000; i++){
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	673b      	str	r3, [r7, #112]	; 0x70
 8000b30:	e009      	b.n	8000b46 <main+0x10a>
		cSqrt(square, &rootC);
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4618      	mov	r0, r3
 8000b38:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8000b3c:	f7ff fe70 	bl	8000820 <cSqrt>
	for (uint32_t i=0; i<1000; i++){
 8000b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b42:	3301      	adds	r3, #1
 8000b44:	673b      	str	r3, [r7, #112]	; 0x70
 8000b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b4c:	d3f1      	bcc.n	8000b32 <main+0xf6>
	}

	ITM_Port32(31) = 5;
 8000b4e:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <main+0x1f4>)
 8000b50:	2205      	movs	r2, #5
 8000b52:	601a      	str	r2, [r3, #0]

	//Assembly
	for (uint32_t i=0; i<1000; i++){
 8000b54:	2300      	movs	r3, #0
 8000b56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b58:	e008      	b.n	8000b6c <main+0x130>
		asmSqrt(square, &rootAsm);
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 8000b62:	f7ff fdaa 	bl	80006ba <asmSqrt>
	for (uint32_t i=0; i<1000; i++){
 8000b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b68:	3301      	adds	r3, #1
 8000b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b72:	d3f2      	bcc.n	8000b5a <main+0x11e>
	}

	ITM_Port32(31) = 6;
 8000b74:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <main+0x1f4>)
 8000b76:	2206      	movs	r2, #6
 8000b78:	601a      	str	r2, [r3, #0]

	//CMSIS
	for (uint32_t i=0; i<1000; i++){
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8000b7e:	e01c      	b.n	8000bba <main+0x17e>
 8000b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b82:	653b      	str	r3, [r7, #80]	; 0x50
 8000b84:	463b      	mov	r3, r7
 8000b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8000b88:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b94:	db09      	blt.n	8000baa <main+0x16e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8000b96:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8000b9a:	f002 f807 	bl	8002bac <sqrtf>
 8000b9e:	eef0 7a40 	vmov.f32	s15, s0
 8000ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ba4:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8000ba8:	e004      	b.n	8000bb4 <main+0x178>
    }
    else
    {
      *pOut = 0.0f;
 8000baa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8000bb2:	bf00      	nop
 8000bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8000bba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bc0:	d3de      	bcc.n	8000b80 <main+0x144>
		arm_sqrt_f32(square, &rootCMSIS);
	}

	ITM_Port32(31) = 7;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <main+0x1f4>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
	/*
	 * Begin for Newtons
	 */

	//C
	for (uint32_t i=0; i<1000; i++){
 8000bc8:	2300      	movs	r3, #0
 8000bca:	667b      	str	r3, [r7, #100]	; 0x64
 8000bcc:	e00c      	b.n	8000be8 <main+0x1ac>
		newtonC = cnewtonsMethod(10,11,12);
 8000bce:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8000bd2:	eef2 0a06 	vmov.f32	s1, #38	; 0x41300000  11.0
 8000bd6:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000bda:	f7ff febb 	bl	8000954 <cnewtonsMethod>
 8000bde:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
	for (uint32_t i=0; i<1000; i++){
 8000be2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000be4:	3301      	adds	r3, #1
 8000be6:	667b      	str	r3, [r7, #100]	; 0x64
 8000be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bee:	d3ee      	bcc.n	8000bce <main+0x192>

	}

	ITM_Port32(31) = 8;
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <main+0x1f4>)
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	601a      	str	r2, [r3, #0]


	//Assembly
	for (uint32_t i=0; i<1000; i++){
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	663b      	str	r3, [r7, #96]	; 0x60
 8000bfa:	e00c      	b.n	8000c16 <main+0x1da>
		newtonASM = asmTranscendental(10,11,12);
 8000bfc:	eeb2 1a08 	vmov.f32	s2, #40	; 0x41400000  12.0
 8000c00:	eef2 0a06 	vmov.f32	s1, #38	; 0x41300000  11.0
 8000c04:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000c08:	f7ff fd6b 	bl	80006e2 <asmTranscendental>
 8000c0c:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	for (uint32_t i=0; i<1000; i++){
 8000c10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c12:	3301      	adds	r3, #1
 8000c14:	663b      	str	r3, [r7, #96]	; 0x60
 8000c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c1c:	d3ee      	bcc.n	8000bfc <main+0x1c0>

	}

	ITM_Port32(31) = 9;
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <main+0x1f4>)
 8000c20:	2209      	movs	r2, #9
 8000c22:	601a      	str	r2, [r3, #0]

	ITM_Port32(31) = 10;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <main+0x1f4>)
 8000c26:	220a      	movs	r2, #10
 8000c28:	601a      	str	r2, [r3, #0]
	ITM_Port32(31) = 1;
 8000c2a:	e73a      	b.n	8000aa2 <main+0x66>
 8000c2c:	08002c08 	.word	0x08002c08
 8000c30:	e000007c 	.word	0xe000007c

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b096      	sub	sp, #88	; 0x58
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0314 	add.w	r3, r7, #20
 8000c3e:	2244      	movs	r2, #68	; 0x44
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 ff80 	bl	8002b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	463b      	mov	r3, r7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 fb08 	bl	800126c <HAL_PWREx_ControlVoltageScaling>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000c62:	f000 f89f 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c66:	2310      	movs	r3, #16
 8000c68:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c72:	2360      	movs	r3, #96	; 0x60
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c76:	2302      	movs	r3, #2
 8000c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000c82:	233c      	movs	r3, #60	; 0x3c
 8000c84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fb8c 	bl	80013b4 <HAL_RCC_OscConfig>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ca2:	f000 f87f 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca6:	230f      	movs	r3, #15
 8000ca8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000caa:	2303      	movs	r3, #3
 8000cac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 ff92 	bl	8001be8 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cca:	f000 f86b 	bl	8000da4 <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3758      	adds	r7, #88	; 0x58
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000cf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d1e:	4814      	ldr	r0, [pc, #80]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d20:	f001 f9e8 	bl	80020f4 <HAL_TIM_Base_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d2a:	f000 f83b 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d3c:	f001 fb33 	bl	80023a6 <HAL_TIM_ConfigClockSource>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d46:	f000 f82d 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_TIM2_Init+0x98>)
 8000d58:	f001 fd54 	bl	8002804 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d62:	f000 f81f 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3720      	adds	r7, #32
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000078 	.word	0x20000078

08000d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_GPIO_Init+0x2c>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <MX_GPIO_Init+0x2c>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_GPIO_Init+0x2c>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x8>
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x44>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_MspInit+0x44>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x44>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_MspInit+0x44>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e08:	d113      	bne.n	8000e32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_TIM_Base_MspInit+0x44>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_TIM_Base_MspInit+0x44>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6593      	str	r3, [r2, #88]	; 0x58
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_TIM_Base_MspInit+0x44>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	201c      	movs	r0, #28
 8000e28:	f000 f9c9 	bl	80011be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e2c:	201c      	movs	r0, #28
 8000e2e:	f000 f9e2 	bl	80011f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8c:	f000 f89c 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM2_IRQHandler+0x10>)
 8000e9a:	f001 f982 	bl	80021a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000078 	.word	0x20000078

08000ea8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <SystemInit+0x20>)
 8000eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb2:	4a05      	ldr	r2, [pc, #20]	; (8000ec8 <SystemInit+0x20>)
 8000eb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ecc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff ffea 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480c      	ldr	r0, [pc, #48]	; (8000f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ed6:	490d      	ldr	r1, [pc, #52]	; (8000f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <LoopForever+0xe>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eec:	4c0a      	ldr	r4, [pc, #40]	; (8000f18 <LoopForever+0x16>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f001 fe33 	bl	8002b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000efe:	f7ff fd9d 	bl	8000a3c <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f04:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f0c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f10:	0800347c 	.word	0x0800347c
  ldr r2, =_sbss
 8000f14:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f18:	20000200 	.word	0x20000200

08000f1c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f1c:	e7fe      	b.n	8000f1c <ADC1_IRQHandler>

08000f1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f93d 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2e:	200f      	movs	r0, #15
 8000f30:	f000 f80e 	bl	8000f50 <HAL_InitTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d002      	beq.n	8000f40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	71fb      	strb	r3, [r7, #7]
 8000f3e:	e001      	b.n	8000f44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f40:	f7ff ff36 	bl	8000db0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d023      	beq.n	8000fac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_InitTick+0x70>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f949 	bl	8001212 <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d809      	bhi.n	8000fa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f94:	f000 f913 	bl	80011be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_InitTick+0x74>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e007      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e004      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e001      	b.n	8000fb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	200000c4 	.word	0x200000c4

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	200000c4 	.word	0x200000c4

08001008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001024:	4013      	ands	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103a:	4a04      	ldr	r2, [pc, #16]	; (800104c <__NVIC_SetPriorityGrouping+0x44>)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	60d3      	str	r3, [r2, #12]
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_GetPriorityGrouping+0x18>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	f003 0307 	and.w	r3, r3, #7
}
 800105e:	4618      	mov	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db0b      	blt.n	8001096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f003 021f 	and.w	r2, r3, #31
 8001084:	4907      	ldr	r1, [pc, #28]	; (80010a4 <__NVIC_EnableIRQ+0x38>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	095b      	lsrs	r3, r3, #5
 800108c:	2001      	movs	r0, #1
 800108e:	fa00 f202 	lsl.w	r2, r0, r2
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100

080010a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	db0a      	blt.n	80010d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	490c      	ldr	r1, [pc, #48]	; (80010f4 <__NVIC_SetPriority+0x4c>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	440b      	add	r3, r1
 80010cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d0:	e00a      	b.n	80010e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	4908      	ldr	r1, [pc, #32]	; (80010f8 <__NVIC_SetPriority+0x50>)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	f003 030f 	and.w	r3, r3, #15
 80010de:	3b04      	subs	r3, #4
 80010e0:	0112      	lsls	r2, r2, #4
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	440b      	add	r3, r1
 80010e6:	761a      	strb	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f1c3 0307 	rsb	r3, r3, #7
 8001116:	2b04      	cmp	r3, #4
 8001118:	bf28      	it	cs
 800111a:	2304      	movcs	r3, #4
 800111c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3304      	adds	r3, #4
 8001122:	2b06      	cmp	r3, #6
 8001124:	d902      	bls.n	800112c <NVIC_EncodePriority+0x30>
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3b03      	subs	r3, #3
 800112a:	e000      	b.n	800112e <NVIC_EncodePriority+0x32>
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	401a      	ands	r2, r3
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001144:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43d9      	mvns	r1, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	4313      	orrs	r3, r2
         );
}
 8001156:	4618      	mov	r0, r3
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3b01      	subs	r3, #1
 8001170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001174:	d301      	bcc.n	800117a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <SysTick_Config+0x40>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001182:	210f      	movs	r1, #15
 8001184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001188:	f7ff ff8e 	bl	80010a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <SysTick_Config+0x40>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SysTick_Config+0x40>)
 8001194:	2207      	movs	r2, #7
 8001196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	e000e010 	.word	0xe000e010

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff29 	bl	8001008 <__NVIC_SetPriorityGrouping>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011d0:	f7ff ff3e 	bl	8001050 <__NVIC_GetPriorityGrouping>
 80011d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	68b9      	ldr	r1, [r7, #8]
 80011da:	6978      	ldr	r0, [r7, #20]
 80011dc:	f7ff ff8e 	bl	80010fc <NVIC_EncodePriority>
 80011e0:	4602      	mov	r2, r0
 80011e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e6:	4611      	mov	r1, r2
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff5d 	bl	80010a8 <__NVIC_SetPriority>
}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff31 	bl	800106c <__NVIC_EnableIRQ>
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ffa2 	bl	8001164 <SysTick_Config>
 8001220:	4603      	mov	r3, r0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123c:	d102      	bne.n	8001244 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	e00b      	b.n	800125c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001252:	d102      	bne.n	800125a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001254:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001258:	e000      	b.n	800125c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800125a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	40007000 	.word	0x40007000

0800126c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d141      	bne.n	80012fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800127a:	4b4b      	ldr	r3, [pc, #300]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001286:	d131      	bne.n	80012ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001288:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800128e:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001294:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012a0:	4a41      	ldr	r2, [pc, #260]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80012a8:	4b40      	ldr	r3, [pc, #256]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2232      	movs	r2, #50	; 0x32
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	4a3f      	ldr	r2, [pc, #252]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012b4:	fba2 2303 	umull	r2, r3, r2, r3
 80012b8:	0c9b      	lsrs	r3, r3, #18
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012be:	e002      	b.n	80012c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d2:	d102      	bne.n	80012da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f2      	bne.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012da:	4b33      	ldr	r3, [pc, #204]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e6:	d158      	bne.n	800139a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e057      	b.n	800139c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012ec:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012f2:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012fc:	e04d      	b.n	800139a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001304:	d141      	bne.n	800138a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800130e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001312:	d131      	bne.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800131a:	4a23      	ldr	r2, [pc, #140]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800132c:	4a1e      	ldr	r2, [pc, #120]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800132e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001332:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001334:	4b1d      	ldr	r3, [pc, #116]	; (80013ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2232      	movs	r2, #50	; 0x32
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001340:	fba2 2303 	umull	r2, r3, r2, r3
 8001344:	0c9b      	lsrs	r3, r3, #18
 8001346:	3301      	adds	r3, #1
 8001348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800134a:	e002      	b.n	8001352 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	3b01      	subs	r3, #1
 8001350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001354:	695b      	ldr	r3, [r3, #20]
 8001356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800135a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800135e:	d102      	bne.n	8001366 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f2      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001366:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001372:	d112      	bne.n	800139a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e011      	b.n	800139c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800137e:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001388:	e007      	b.n	800139a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001398:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	40007000 	.word	0x40007000
 80013ac:	20000000 	.word	0x20000000
 80013b0:	431bde83 	.word	0x431bde83

080013b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f000 bc08 	b.w	8001bd8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c8:	4b96      	ldr	r3, [pc, #600]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013d2:	4b94      	ldr	r3, [pc, #592]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 80e4 	beq.w	80015b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <HAL_RCC_OscConfig+0x4c>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	f040 808b 	bne.w	800150e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	f040 8087 	bne.w	800150e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001400:	4b88      	ldr	r3, [pc, #544]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_OscConfig+0x64>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e3df      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1a      	ldr	r2, [r3, #32]
 800141c:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d004      	beq.n	8001432 <HAL_RCC_OscConfig+0x7e>
 8001428:	4b7e      	ldr	r3, [pc, #504]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001430:	e005      	b.n	800143e <HAL_RCC_OscConfig+0x8a>
 8001432:	4b7c      	ldr	r3, [pc, #496]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800143e:	4293      	cmp	r3, r2
 8001440:	d223      	bcs.n	800148a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 fd94 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e3c0      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001456:	4b73      	ldr	r3, [pc, #460]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a72      	ldr	r2, [pc, #456]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	4b70      	ldr	r3, [pc, #448]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	496d      	ldr	r1, [pc, #436]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001474:	4b6b      	ldr	r3, [pc, #428]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	021b      	lsls	r3, r3, #8
 8001482:	4968      	ldr	r1, [pc, #416]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
 8001488:	e025      	b.n	80014d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148a:	4b66      	ldr	r3, [pc, #408]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a65      	ldr	r2, [pc, #404]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001490:	f043 0308 	orr.w	r3, r3, #8
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4960      	ldr	r1, [pc, #384]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	495b      	ldr	r1, [pc, #364]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d109      	bne.n	80014d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fd54 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e380      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014d6:	f000 fcc1 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 80014da:	4602      	mov	r2, r0
 80014dc:	4b51      	ldr	r3, [pc, #324]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	091b      	lsrs	r3, r3, #4
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	4950      	ldr	r1, [pc, #320]	; (8001628 <HAL_RCC_OscConfig+0x274>)
 80014e8:	5ccb      	ldrb	r3, [r1, r3]
 80014ea:	f003 031f 	and.w	r3, r3, #31
 80014ee:	fa22 f303 	lsr.w	r3, r2, r3
 80014f2:	4a4e      	ldr	r2, [pc, #312]	; (800162c <HAL_RCC_OscConfig+0x278>)
 80014f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014f6:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <HAL_RCC_OscConfig+0x27c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fd28 	bl	8000f50 <HAL_InitTick>
 8001500:	4603      	mov	r3, r0
 8001502:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001504:	7bfb      	ldrb	r3, [r7, #15]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d052      	beq.n	80015b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	e364      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d032      	beq.n	800157c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001516:	4b43      	ldr	r3, [pc, #268]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a42      	ldr	r2, [pc, #264]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001522:	f7ff fd65 	bl	8000ff0 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152a:	f7ff fd61 	bl	8000ff0 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e34d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001548:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a35      	ldr	r2, [pc, #212]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b33      	ldr	r3, [pc, #204]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4930      	ldr	r1, [pc, #192]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001566:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	492b      	ldr	r1, [pc, #172]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
 800157a:	e01a      	b.n	80015b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a28      	ldr	r2, [pc, #160]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001588:	f7ff fd32 	bl	8000ff0 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001590:	f7ff fd2e 	bl	8000ff0 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e31a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1dc>
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d073      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	2b08      	cmp	r3, #8
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_OscConfig+0x21c>
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d10e      	bne.n	80015e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d10b      	bne.n	80015e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d063      	beq.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d15f      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e2f7      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x24c>
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e025      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001608:	d114      	bne.n	8001634 <HAL_RCC_OscConfig+0x280>
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a05      	ldr	r2, [pc, #20]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b03      	ldr	r3, [pc, #12]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a02      	ldr	r2, [pc, #8]	; (8001624 <HAL_RCC_OscConfig+0x270>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e013      	b.n	800164c <HAL_RCC_OscConfig+0x298>
 8001624:	40021000 	.word	0x40021000
 8001628:	08002c30 	.word	0x08002c30
 800162c:	20000000 	.word	0x20000000
 8001630:	20000004 	.word	0x20000004
 8001634:	4ba0      	ldr	r3, [pc, #640]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a9f      	ldr	r2, [pc, #636]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b9d      	ldr	r3, [pc, #628]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a9c      	ldr	r2, [pc, #624]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fccc 	bl	8000ff0 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fcc8 	bl	8000ff0 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e2b4      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166e:	4b92      	ldr	r3, [pc, #584]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x2a8>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167c:	f7ff fcb8 	bl	8000ff0 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fcb4 	bl	8000ff0 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e2a0      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001696:	4b88      	ldr	r3, [pc, #544]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x2d0>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d060      	beq.n	8001774 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x310>
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b0c      	cmp	r3, #12
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d116      	bne.n	80016f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_OscConfig+0x328>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e27d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016dc:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	4973      	ldr	r1, [pc, #460]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f0:	e040      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d023      	beq.n	8001742 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fa:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001706:	f7ff fc73 	bl	8000ff0 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800170e:	f7ff fc6f 	bl	8000ff0 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e25b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001720:	4b65      	ldr	r3, [pc, #404]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b62      	ldr	r3, [pc, #392]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	495f      	ldr	r1, [pc, #380]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
 8001740:	e018      	b.n	8001774 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001742:	4b5d      	ldr	r3, [pc, #372]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a5c      	ldr	r2, [pc, #368]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001748:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800174c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174e:	f7ff fc4f 	bl	8000ff0 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001756:	f7ff fc4b 	bl	8000ff0 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e237      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d03c      	beq.n	80017fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d01c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800178a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178e:	4a4a      	ldr	r2, [pc, #296]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001798:	f7ff fc2a 	bl	8000ff0 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc26 	bl	8000ff0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e212      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b2:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ef      	beq.n	80017a0 <HAL_RCC_OscConfig+0x3ec>
 80017c0:	e01b      	b.n	80017fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c2:	4b3d      	ldr	r3, [pc, #244]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c8:	4a3b      	ldr	r2, [pc, #236]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017ca:	f023 0301 	bic.w	r3, r3, #1
 80017ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d2:	f7ff fc0d 	bl	8000ff0 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017da:	f7ff fc09 	bl	8000ff0 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e1f5      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80017ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1ef      	bne.n	80017da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 80a6 	beq.w	8001954 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800180c:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800180e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10d      	bne.n	8001834 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800181a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181c:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800181e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001822:	6593      	str	r3, [r2, #88]	; 0x58
 8001824:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001830:	2301      	movs	r3, #1
 8001832:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001834:	4b21      	ldr	r3, [pc, #132]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183c:	2b00      	cmp	r3, #0
 800183e:	d118      	bne.n	8001872 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1d      	ldr	r2, [pc, #116]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184c:	f7ff fbd0 	bl	8000ff0 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001854:	f7ff fbcc 	bl	8000ff0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e1b8      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_RCC_OscConfig+0x508>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d0f0      	beq.n	8001854 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_RCC_OscConfig+0x4d8>
 800187a:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800187c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001880:	4a0d      	ldr	r2, [pc, #52]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800188a:	e029      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d115      	bne.n	80018c0 <HAL_RCC_OscConfig+0x50c>
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 8001896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	4a03      	ldr	r2, [pc, #12]	; (80018b8 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b4:	e014      	b.n	80018e0 <HAL_RCC_OscConfig+0x52c>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	4b9d      	ldr	r3, [pc, #628]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 80018c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c6:	4a9c      	ldr	r2, [pc, #624]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d0:	4b99      	ldr	r3, [pc, #612]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	4a98      	ldr	r2, [pc, #608]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d016      	beq.n	8001916 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e8:	f7ff fb82 	bl	8000ff0 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff fb7e 	bl	8000ff0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e168      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001906:	4b8c      	ldr	r3, [pc, #560]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0ed      	beq.n	80018f0 <HAL_RCC_OscConfig+0x53c>
 8001914:	e015      	b.n	8001942 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001916:	f7ff fb6b 	bl	8000ff0 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800191e:	f7ff fb67 	bl	8000ff0 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	f241 3288 	movw	r2, #5000	; 0x1388
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e151      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001934:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d1ed      	bne.n	800191e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001948:	4b7b      	ldr	r3, [pc, #492]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	4a7a      	ldr	r2, [pc, #488]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 800194e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001952:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	2b00      	cmp	r3, #0
 800195e:	d03c      	beq.n	80019da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d01c      	beq.n	80019a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001968:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 800196a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800196e:	4a72      	ldr	r2, [pc, #456]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001978:	f7ff fb3a 	bl	8000ff0 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001980:	f7ff fb36 	bl	8000ff0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e122      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001992:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001994:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0ef      	beq.n	8001980 <HAL_RCC_OscConfig+0x5cc>
 80019a0:	e01b      	b.n	80019da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a2:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 80019a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a8:	4a63      	ldr	r2, [pc, #396]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 80019aa:	f023 0301 	bic.w	r3, r3, #1
 80019ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b2:	f7ff fb1d 	bl	8000ff0 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ba:	f7ff fb19 	bl	8000ff0 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e105      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019cc:	4b5a      	ldr	r3, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 80019ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1ef      	bne.n	80019ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f000 80f9 	beq.w	8001bd6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	f040 80cf 	bne.w	8001b8c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ee:	4b52      	ldr	r3, [pc, #328]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f003 0203 	and.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d12c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d123      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a1e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d11b      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d113      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	3b01      	subs	r3, #1
 8001a42:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d109      	bne.n	8001a5c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	085b      	lsrs	r3, r3, #1
 8001a54:	3b01      	subs	r3, #1
 8001a56:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d071      	beq.n	8001b40 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d068      	beq.n	8001b34 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0ac      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a7e:	4b2e      	ldr	r3, [pc, #184]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2d      	ldr	r2, [pc, #180]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8a:	f7ff fab1 	bl	8000ff0 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff faad 	bl	8000ff0 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e099      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001ab2:	68da      	ldr	r2, [r3, #12]
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCC_OscConfig+0x788>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ac0:	3a01      	subs	r2, #1
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	4311      	orrs	r1, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aca:	0212      	lsls	r2, r2, #8
 8001acc:	4311      	orrs	r1, r2
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ad2:	0852      	lsrs	r2, r2, #1
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	0552      	lsls	r2, r2, #21
 8001ad8:	4311      	orrs	r1, r2
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ade:	0852      	lsrs	r2, r2, #1
 8001ae0:	3a01      	subs	r2, #1
 8001ae2:	0652      	lsls	r2, r2, #25
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aea:	06d2      	lsls	r2, r2, #27
 8001aec:	430a      	orrs	r2, r1
 8001aee:	4912      	ldr	r1, [pc, #72]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af4:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001afe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b0c:	f7ff fa70 	bl	8000ff0 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b14:	f7ff fa6c 	bl	8000ff0 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e058      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_RCC_OscConfig+0x784>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b32:	e050      	b.n	8001bd6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e04f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b40:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d144      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b58:	4b21      	ldr	r3, [pc, #132]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a20      	ldr	r2, [pc, #128]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b64:	f7ff fa44 	bl	8000ff0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff fa40 	bl	8000ff0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e02c      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x7b8>
 8001b8a:	e024      	b.n	8001bd6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	2b0c      	cmp	r3, #12
 8001b90:	d01f      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b92:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fa27 	bl	8000ff0 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff fa23 	bl	8000ff0 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e00f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	4905      	ldr	r1, [pc, #20]	; (8001be0 <HAL_RCC_OscConfig+0x82c>)
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x830>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
 8001bd0:	e001      	b.n	8001bd6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	feeefffc 	.word	0xfeeefffc

08001be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e11d      	b.n	8001e3c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b90      	ldr	r3, [pc, #576]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b8d      	ldr	r3, [pc, #564]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 020f 	bic.w	r2, r3, #15
 8001c16:	498b      	ldr	r1, [pc, #556]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b89      	ldr	r3, [pc, #548]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e105      	b.n	8001e3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b81      	ldr	r3, [pc, #516]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b7e      	ldr	r3, [pc, #504]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	497b      	ldr	r1, [pc, #492]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d079      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d11e      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0dc      	b.n	8001e3c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001c82:	f000 f9d1 	bl	8002028 <RCC_GetSysClockFreqFromPLLSource>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4a70      	ldr	r2, [pc, #448]	; (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d946      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d140      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c9a:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ca2:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e035      	b.n	8001d1c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb8:	4b63      	ldr	r3, [pc, #396]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d115      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0b9      	b.n	8001e3c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d107      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd0:	4b5d      	ldr	r3, [pc, #372]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0ad      	b.n	8001e3c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce0:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0a5      	b.n	8001e3c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001cf0:	f000 f8b4 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a55      	ldr	r2, [pc, #340]	; (8001e4c <HAL_RCC_ClockConfig+0x264>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d90f      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001cfc:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d08:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d10:	4a4d      	ldr	r2, [pc, #308]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d16:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d1c:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 0203 	bic.w	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	4947      	ldr	r1, [pc, #284]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d2e:	f7ff f95f 	bl	8000ff0 <HAL_GetTick>
 8001d32:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d36:	f7ff f95b 	bl	8000ff0 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e077      	b.n	8001e3c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4c:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 020c 	and.w	r2, r3, #12
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d1eb      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b80      	cmp	r3, #128	; 0x80
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d64:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	4a37      	ldr	r2, [pc, #220]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d6e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d208      	bcs.n	8001d9e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	492b      	ldr	r1, [pc, #172]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d9e:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d210      	bcs.n	8001dce <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 020f 	bic.w	r2, r3, #15
 8001db4:	4923      	ldr	r1, [pc, #140]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_RCC_ClockConfig+0x25c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e036      	b.n	8001e3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d008      	beq.n	8001dec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4918      	ldr	r1, [pc, #96]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0308 	and.w	r3, r3, #8
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d009      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4910      	ldr	r1, [pc, #64]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e0c:	f000 f826 	bl	8001e5c <HAL_RCC_GetSysClockFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <HAL_RCC_ClockConfig+0x268>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <HAL_RCC_ClockConfig+0x26c>)
 8001e2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e2c:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_RCC_ClockConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f88d 	bl	8000f50 <HAL_InitTick>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73fb      	strb	r3, [r7, #15]

  return status;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40022000 	.word	0x40022000
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	04c4b400 	.word	0x04c4b400
 8001e50:	08002c30 	.word	0x08002c30
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004

08001e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b089      	sub	sp, #36	; 0x24
 8001e60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e74:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x34>
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d11e      	bne.n	8001ece <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e90:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	61fb      	str	r3, [r7, #28]
 8001eaa:	e005      	b.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	f003 030f 	and.w	r3, r3, #15
 8001eb6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10d      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d102      	bne.n	8001eda <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	e004      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	2b0c      	cmp	r3, #12
 8001ee8:	d134      	bne.n	8001f54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f003 0303 	and.w	r3, r3, #3
 8001ef2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d003      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0xac>
 8001f00:	e005      	b.n	8001f0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001f04:	617b      	str	r3, [r7, #20]
      break;
 8001f06:	e005      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f08:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0a:	617b      	str	r3, [r7, #20]
      break;
 8001f0c:	e002      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	617b      	str	r3, [r7, #20]
      break;
 8001f12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3301      	adds	r3, #1
 8001f20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	0e5b      	lsrs	r3, r3, #25
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	3301      	adds	r3, #1
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f54:	69bb      	ldr	r3, [r7, #24]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08002c40 	.word	0x08002c40
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f8c:	f7ff f94e 	bl	800122c <HAL_PWREx_GetVoltageRange>
 8001f90:	6178      	str	r0, [r7, #20]
 8001f92:	e014      	b.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b22      	ldr	r3, [pc, #136]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a21      	ldr	r2, [pc, #132]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fac:	f7ff f93e 	bl	800122c <HAL_PWREx_GetVoltageRange>
 8001fb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a1a      	ldr	r2, [pc, #104]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc4:	d10b      	bne.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d913      	bls.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2ba0      	cmp	r3, #160	; 0xa0
 8001fd0:	d902      	bls.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e00d      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e00a      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b7f      	cmp	r3, #127	; 0x7f
 8001fe2:	d902      	bls.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e004      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b70      	cmp	r3, #112	; 0x70
 8001fee:	d101      	bne.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 020f 	bic.w	r2, r3, #15
 8001ffc:	4909      	ldr	r1, [pc, #36]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002004:	4b07      	ldr	r3, [pc, #28]	; (8002024 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000
 8002024:	40022000 	.word	0x40022000

08002028 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800202e:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d00b      	beq.n	8002056 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d825      	bhi.n	8002090 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d008      	beq.n	800205c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d11f      	bne.n	8002090 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002050:	4b25      	ldr	r3, [pc, #148]	; (80020e8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002052:	613b      	str	r3, [r7, #16]
    break;
 8002054:	e01f      	b.n	8002096 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002058:	613b      	str	r3, [r7, #16]
    break;
 800205a:	e01c      	b.n	8002096 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e005      	b.n	8002084 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002084:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	613b      	str	r3, [r7, #16]
    break;
 800208e:	e002      	b.n	8002096 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
    break;
 8002094:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	091b      	lsrs	r3, r3, #4
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	3301      	adds	r3, #1
 80020a2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	0a1b      	lsrs	r3, r3, #8
 80020aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	fb03 f202 	mul.w	r2, r3, r2
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0e5b      	lsrs	r3, r3, #25
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	3301      	adds	r3, #1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80020d6:	683b      	ldr	r3, [r7, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	40021000 	.word	0x40021000
 80020e8:	00f42400 	.word	0x00f42400
 80020ec:	007a1200 	.word	0x007a1200
 80020f0:	08002c40 	.word	0x08002c40

080020f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e049      	b.n	800219a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fe6c 	bl	8000df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f000 fa32 	bl	800259c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d020      	beq.n	8002206 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d01b      	beq.n	8002206 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0202 	mvn.w	r2, #2
 80021d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f9b7 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 80021f2:	e005      	b.n	8002200 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f9a9 	bl	800254c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f9ba 	bl	8002574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01b      	beq.n	8002252 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f06f 0204 	mvn.w	r2, #4
 8002222:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 f991 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 800223e:	e005      	b.n	800224c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f983 	bl	800254c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f994 	bl	8002574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d020      	beq.n	800229e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d01b      	beq.n	800229e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f06f 0208 	mvn.w	r2, #8
 800226e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2204      	movs	r2, #4
 8002274:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f96b 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 800228a:	e005      	b.n	8002298 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 f95d 	bl	800254c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f96e 	bl	8002574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01b      	beq.n	80022ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f06f 0210 	mvn.w	r2, #16
 80022ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2208      	movs	r2, #8
 80022c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f945 	bl	8002560 <HAL_TIM_IC_CaptureCallback>
 80022d6:	e005      	b.n	80022e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f937 	bl	800254c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f948 	bl	8002574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00c      	beq.n	800230e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f06f 0201 	mvn.w	r2, #1
 8002306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f915 	bl	8002538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00c      	beq.n	8002332 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231e:	2b00      	cmp	r3, #0
 8002320:	d007      	beq.n	8002332 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800232a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 fafb 	bl	8002928 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00c      	beq.n	8002356 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800234e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 faf3 	bl	800293c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00c      	beq.n	800237a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f907 	bl	8002588 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00c      	beq.n	800239e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 0320 	and.w	r3, r3, #32
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0220 	mvn.w	r2, #32
 8002396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fabb 	bl	8002914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
 80023ae:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_TIM_ConfigClockSource+0x1c>
 80023be:	2302      	movs	r3, #2
 80023c0:	e0b6      	b.n	8002530 <HAL_TIM_ConfigClockSource+0x18a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fe:	d03e      	beq.n	800247e <HAL_TIM_ConfigClockSource+0xd8>
 8002400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002404:	f200 8087 	bhi.w	8002516 <HAL_TIM_ConfigClockSource+0x170>
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240c:	f000 8086 	beq.w	800251c <HAL_TIM_ConfigClockSource+0x176>
 8002410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002414:	d87f      	bhi.n	8002516 <HAL_TIM_ConfigClockSource+0x170>
 8002416:	2b70      	cmp	r3, #112	; 0x70
 8002418:	d01a      	beq.n	8002450 <HAL_TIM_ConfigClockSource+0xaa>
 800241a:	2b70      	cmp	r3, #112	; 0x70
 800241c:	d87b      	bhi.n	8002516 <HAL_TIM_ConfigClockSource+0x170>
 800241e:	2b60      	cmp	r3, #96	; 0x60
 8002420:	d050      	beq.n	80024c4 <HAL_TIM_ConfigClockSource+0x11e>
 8002422:	2b60      	cmp	r3, #96	; 0x60
 8002424:	d877      	bhi.n	8002516 <HAL_TIM_ConfigClockSource+0x170>
 8002426:	2b50      	cmp	r3, #80	; 0x50
 8002428:	d03c      	beq.n	80024a4 <HAL_TIM_ConfigClockSource+0xfe>
 800242a:	2b50      	cmp	r3, #80	; 0x50
 800242c:	d873      	bhi.n	8002516 <HAL_TIM_ConfigClockSource+0x170>
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d058      	beq.n	80024e4 <HAL_TIM_ConfigClockSource+0x13e>
 8002432:	2b40      	cmp	r3, #64	; 0x40
 8002434:	d86f      	bhi.n	8002516 <HAL_TIM_ConfigClockSource+0x170>
 8002436:	2b30      	cmp	r3, #48	; 0x30
 8002438:	d064      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0x15e>
 800243a:	2b30      	cmp	r3, #48	; 0x30
 800243c:	d86b      	bhi.n	8002516 <HAL_TIM_ConfigClockSource+0x170>
 800243e:	2b20      	cmp	r3, #32
 8002440:	d060      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0x15e>
 8002442:	2b20      	cmp	r3, #32
 8002444:	d867      	bhi.n	8002516 <HAL_TIM_ConfigClockSource+0x170>
 8002446:	2b00      	cmp	r3, #0
 8002448:	d05c      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0x15e>
 800244a:	2b10      	cmp	r3, #16
 800244c:	d05a      	beq.n	8002504 <HAL_TIM_ConfigClockSource+0x15e>
 800244e:	e062      	b.n	8002516 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002460:	f000 f9b0 	bl	80027c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002472:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	609a      	str	r2, [r3, #8]
      break;
 800247c:	e04f      	b.n	800251e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800248e:	f000 f999 	bl	80027c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024a0:	609a      	str	r2, [r3, #8]
      break;
 80024a2:	e03c      	b.n	800251e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b0:	461a      	mov	r2, r3
 80024b2:	f000 f90d 	bl	80026d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2150      	movs	r1, #80	; 0x50
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f966 	bl	800278e <TIM_ITRx_SetConfig>
      break;
 80024c2:	e02c      	b.n	800251e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024d0:	461a      	mov	r2, r3
 80024d2:	f000 f92c 	bl	800272e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2160      	movs	r1, #96	; 0x60
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f956 	bl	800278e <TIM_ITRx_SetConfig>
      break;
 80024e2:	e01c      	b.n	800251e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f0:	461a      	mov	r2, r3
 80024f2:	f000 f8ed 	bl	80026d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2140      	movs	r1, #64	; 0x40
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f946 	bl	800278e <TIM_ITRx_SetConfig>
      break;
 8002502:	e00c      	b.n	800251e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f000 f93d 	bl	800278e <TIM_ITRx_SetConfig>
      break;
 8002514:	e003      	b.n	800251e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
      break;
 800251a:	e000      	b.n	800251e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800251c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a40      	ldr	r2, [pc, #256]	; (80026b0 <TIM_Base_SetConfig+0x114>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ba:	d00f      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a3d      	ldr	r2, [pc, #244]	; (80026b4 <TIM_Base_SetConfig+0x118>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00b      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3c      	ldr	r2, [pc, #240]	; (80026b8 <TIM_Base_SetConfig+0x11c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d007      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a3b      	ldr	r2, [pc, #236]	; (80026bc <TIM_Base_SetConfig+0x120>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d003      	beq.n	80025dc <TIM_Base_SetConfig+0x40>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a3a      	ldr	r2, [pc, #232]	; (80026c0 <TIM_Base_SetConfig+0x124>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d108      	bne.n	80025ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a2f      	ldr	r2, [pc, #188]	; (80026b0 <TIM_Base_SetConfig+0x114>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01f      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d01b      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a2c      	ldr	r2, [pc, #176]	; (80026b4 <TIM_Base_SetConfig+0x118>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d017      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <TIM_Base_SetConfig+0x11c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <TIM_Base_SetConfig+0x120>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00f      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <TIM_Base_SetConfig+0x124>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <TIM_Base_SetConfig+0x128>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <TIM_Base_SetConfig+0x12c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <TIM_Base_SetConfig+0x9a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a26      	ldr	r2, [pc, #152]	; (80026cc <TIM_Base_SetConfig+0x130>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d108      	bne.n	8002648 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a10      	ldr	r2, [pc, #64]	; (80026b0 <TIM_Base_SetConfig+0x114>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00f      	beq.n	8002694 <TIM_Base_SetConfig+0xf8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <TIM_Base_SetConfig+0x124>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d00b      	beq.n	8002694 <TIM_Base_SetConfig+0xf8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <TIM_Base_SetConfig+0x128>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d007      	beq.n	8002694 <TIM_Base_SetConfig+0xf8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a10      	ldr	r2, [pc, #64]	; (80026c8 <TIM_Base_SetConfig+0x12c>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d003      	beq.n	8002694 <TIM_Base_SetConfig+0xf8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <TIM_Base_SetConfig+0x130>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d103      	bne.n	800269c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	615a      	str	r2, [r3, #20]
}
 80026a2:	bf00      	nop
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40012c00 	.word	0x40012c00
 80026b4:	40000400 	.word	0x40000400
 80026b8:	40000800 	.word	0x40000800
 80026bc:	40000c00 	.word	0x40000c00
 80026c0:	40013400 	.word	0x40013400
 80026c4:	40014000 	.word	0x40014000
 80026c8:	40014400 	.word	0x40014400
 80026cc:	40014800 	.word	0x40014800

080026d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	f023 0201 	bic.w	r2, r3, #1
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	693a      	ldr	r2, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f023 030a 	bic.w	r3, r3, #10
 800270c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4313      	orrs	r3, r2
 8002714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	621a      	str	r2, [r3, #32]
}
 8002722:	bf00      	nop
 8002724:	371c      	adds	r7, #28
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800272e:	b480      	push	{r7}
 8002730:	b087      	sub	sp, #28
 8002732:	af00      	add	r7, sp, #0
 8002734:	60f8      	str	r0, [r7, #12]
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f023 0210 	bic.w	r2, r3, #16
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	031b      	lsls	r3, r3, #12
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800276a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	621a      	str	r2, [r3, #32]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800278e:	b480      	push	{r7}
 8002790:	b085      	sub	sp, #20
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f043 0307 	orr.w	r3, r3, #7
 80027b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	021a      	lsls	r2, r3, #8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	609a      	str	r2, [r3, #8]
}
 80027f8:	bf00      	nop
 80027fa:	371c      	adds	r7, #28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002818:	2302      	movs	r3, #2
 800281a:	e068      	b.n	80028ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d004      	beq.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d108      	bne.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002856:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002868:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a1e      	ldr	r2, [pc, #120]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01d      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288e:	d018      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1b      	ldr	r2, [pc, #108]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a13      	ldr	r2, [pc, #76]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a14      	ldr	r2, [pc, #80]	; (8002910 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10c      	bne.n	80028dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40013400 	.word	0x40013400
 8002904:	40000400 	.word	0x40000400
 8002908:	40000800 	.word	0x40000800
 800290c:	40000c00 	.word	0x40000c00
 8002910:	40014000 	.word	0x40014000

08002914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <arm_max_f32>:
 8002950:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8002954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002956:	4607      	mov	r7, r0
 8002958:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800295c:	ecf7 7a01 	vldmia	r7!, {s15}
 8002960:	d060      	beq.n	8002a24 <arm_max_f32+0xd4>
 8002962:	2400      	movs	r4, #0
 8002964:	3014      	adds	r0, #20
 8002966:	4625      	mov	r5, r4
 8002968:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800296c:	ed10 7a04 	vldr	s14, [r0, #-16]
 8002970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002978:	bf48      	it	mi
 800297a:	eef0 7a47 	vmovmi.f32	s15, s14
 800297e:	ed10 7a03 	vldr	s14, [r0, #-12]
 8002982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002986:	bf48      	it	mi
 8002988:	1c65      	addmi	r5, r4, #1
 800298a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800298e:	bf48      	it	mi
 8002990:	eef0 7a47 	vmovmi.f32	s15, s14
 8002994:	ed10 7a02 	vldr	s14, [r0, #-8]
 8002998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800299c:	bf48      	it	mi
 800299e:	1ca5      	addmi	r5, r4, #2
 80029a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a4:	bf48      	it	mi
 80029a6:	eef0 7a47 	vmovmi.f32	s15, s14
 80029aa:	ed10 7a01 	vldr	s14, [r0, #-4]
 80029ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029b2:	bf48      	it	mi
 80029b4:	1ce5      	addmi	r5, r4, #3
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	f104 0404 	add.w	r4, r4, #4
 80029be:	bf44      	itt	mi
 80029c0:	eef0 7a47 	vmovmi.f32	s15, s14
 80029c4:	4625      	movmi	r5, r4
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	f100 0010 	add.w	r0, r0, #16
 80029cc:	d1ce      	bne.n	800296c <arm_max_f32+0x1c>
 80029ce:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80029d2:	f01c 0003 	ands.w	r0, ip, #3
 80029d6:	d021      	beq.n	8002a1c <arm_max_f32+0xcc>
 80029d8:	ed97 7a00 	vldr	s14, [r7]
 80029dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e4:	bfc4      	itt	gt
 80029e6:	eef0 7a47 	vmovgt.f32	s15, s14
 80029ea:	1a0d      	subgt	r5, r1, r0
 80029ec:	3801      	subs	r0, #1
 80029ee:	d015      	beq.n	8002a1c <arm_max_f32+0xcc>
 80029f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	bf44      	itt	mi
 80029fe:	eef0 7a47 	vmovmi.f32	s15, s14
 8002a02:	1a0d      	submi	r5, r1, r0
 8002a04:	2801      	cmp	r0, #1
 8002a06:	d009      	beq.n	8002a1c <arm_max_f32+0xcc>
 8002a08:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a14:	bfc4      	itt	gt
 8002a16:	eef0 7a47 	vmovgt.f32	s15, s14
 8002a1a:	4665      	movgt	r5, ip
 8002a1c:	edc2 7a00 	vstr	s15, [r2]
 8002a20:	601d      	str	r5, [r3, #0]
 8002a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a24:	4675      	mov	r5, lr
 8002a26:	e7d4      	b.n	80029d2 <arm_max_f32+0x82>

08002a28 <arm_sin_f32>:
 8002a28:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002aa8 <arm_sin_f32+0x80>
 8002a2c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002a30:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002a3c:	d504      	bpl.n	8002a48 <arm_sin_f32+0x20>
 8002a3e:	ee17 3a90 	vmov	r3, s15
 8002a42:	3b01      	subs	r3, #1
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002aac <arm_sin_f32+0x84>
 8002a50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002a54:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002a58:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002a5c:	ee17 3a90 	vmov	r3, s15
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a66:	d21a      	bcs.n	8002a9e <arm_sin_f32+0x76>
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a70:	1c59      	adds	r1, r3, #1
 8002a72:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002a76:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <arm_sin_f32+0x88>)
 8002a78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002a7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002a80:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002a84:	ed93 7a00 	vldr	s14, [r3]
 8002a88:	edd2 6a00 	vldr	s13, [r2]
 8002a8c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002a90:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a98:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002a9c:	4770      	bx	lr
 8002a9e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e7e6      	b.n	8002a76 <arm_sin_f32+0x4e>
 8002aa8:	3e22f983 	.word	0x3e22f983
 8002aac:	44000000 	.word	0x44000000
 8002ab0:	08002c70 	.word	0x08002c70

08002ab4 <arm_cos_f32>:
 8002ab4:	eddf 7a21 	vldr	s15, [pc, #132]	; 8002b3c <arm_cos_f32+0x88>
 8002ab8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002abc:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8002ac0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002ac4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002acc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8002ad0:	d504      	bpl.n	8002adc <arm_cos_f32+0x28>
 8002ad2:	ee17 3a90 	vmov	r3, s15
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	ee07 3a90 	vmov	s15, r3
 8002adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002b40 <arm_cos_f32+0x8c>
 8002ae4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002ae8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002aec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8002af0:	ee17 3a90 	vmov	r3, s15
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002afa:	d21a      	bcs.n	8002b32 <arm_cos_f32+0x7e>
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b04:	1c59      	adds	r1, r3, #1
 8002b06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002b0a:	4a0e      	ldr	r2, [pc, #56]	; (8002b44 <arm_cos_f32+0x90>)
 8002b0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002b10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002b14:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002b18:	ed93 7a00 	vldr	s14, [r3]
 8002b1c:	edd2 6a00 	vldr	s13, [r2]
 8002b20:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8002b24:	ee20 0a26 	vmul.f32	s0, s0, s13
 8002b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002b30:	4770      	bx	lr
 8002b32:	ee30 0a47 	vsub.f32	s0, s0, s14
 8002b36:	2101      	movs	r1, #1
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e7e6      	b.n	8002b0a <arm_cos_f32+0x56>
 8002b3c:	3e22f983 	.word	0x3e22f983
 8002b40:	44000000 	.word	0x44000000
 8002b44:	08002c70 	.word	0x08002c70

08002b48 <memset>:
 8002b48:	4402      	add	r2, r0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <memset+0xa>
 8002b50:	4770      	bx	lr
 8002b52:	f803 1b01 	strb.w	r1, [r3], #1
 8002b56:	e7f9      	b.n	8002b4c <memset+0x4>

08002b58 <__errno>:
 8002b58:	4b01      	ldr	r3, [pc, #4]	; (8002b60 <__errno+0x8>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000058 	.word	0x20000058

08002b64 <__libc_init_array>:
 8002b64:	b570      	push	{r4, r5, r6, lr}
 8002b66:	4d0d      	ldr	r5, [pc, #52]	; (8002b9c <__libc_init_array+0x38>)
 8002b68:	4c0d      	ldr	r4, [pc, #52]	; (8002ba0 <__libc_init_array+0x3c>)
 8002b6a:	1b64      	subs	r4, r4, r5
 8002b6c:	10a4      	asrs	r4, r4, #2
 8002b6e:	2600      	movs	r6, #0
 8002b70:	42a6      	cmp	r6, r4
 8002b72:	d109      	bne.n	8002b88 <__libc_init_array+0x24>
 8002b74:	4d0b      	ldr	r5, [pc, #44]	; (8002ba4 <__libc_init_array+0x40>)
 8002b76:	4c0c      	ldr	r4, [pc, #48]	; (8002ba8 <__libc_init_array+0x44>)
 8002b78:	f000 f83a 	bl	8002bf0 <_init>
 8002b7c:	1b64      	subs	r4, r4, r5
 8002b7e:	10a4      	asrs	r4, r4, #2
 8002b80:	2600      	movs	r6, #0
 8002b82:	42a6      	cmp	r6, r4
 8002b84:	d105      	bne.n	8002b92 <__libc_init_array+0x2e>
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b8c:	4798      	blx	r3
 8002b8e:	3601      	adds	r6, #1
 8002b90:	e7ee      	b.n	8002b70 <__libc_init_array+0xc>
 8002b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b96:	4798      	blx	r3
 8002b98:	3601      	adds	r6, #1
 8002b9a:	e7f2      	b.n	8002b82 <__libc_init_array+0x1e>
 8002b9c:	08003474 	.word	0x08003474
 8002ba0:	08003474 	.word	0x08003474
 8002ba4:	08003474 	.word	0x08003474
 8002ba8:	08003478 	.word	0x08003478

08002bac <sqrtf>:
 8002bac:	b508      	push	{r3, lr}
 8002bae:	ed2d 8b02 	vpush	{d8}
 8002bb2:	eeb0 8a40 	vmov.f32	s16, s0
 8002bb6:	f000 f817 	bl	8002be8 <__ieee754_sqrtf>
 8002bba:	eeb4 8a48 	vcmp.f32	s16, s16
 8002bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc2:	d60c      	bvs.n	8002bde <sqrtf+0x32>
 8002bc4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8002be4 <sqrtf+0x38>
 8002bc8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8002bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd0:	d505      	bpl.n	8002bde <sqrtf+0x32>
 8002bd2:	f7ff ffc1 	bl	8002b58 <__errno>
 8002bd6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8002bda:	2321      	movs	r3, #33	; 0x21
 8002bdc:	6003      	str	r3, [r0, #0]
 8002bde:	ecbd 8b02 	vpop	{d8}
 8002be2:	bd08      	pop	{r3, pc}
 8002be4:	00000000 	.word	0x00000000

08002be8 <__ieee754_sqrtf>:
 8002be8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8002bec:	4770      	bx	lr
	...

08002bf0 <_init>:
 8002bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf2:	bf00      	nop
 8002bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf6:	bc08      	pop	{r3}
 8002bf8:	469e      	mov	lr, r3
 8002bfa:	4770      	bx	lr

08002bfc <_fini>:
 8002bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfe:	bf00      	nop
 8002c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c02:	bc08      	pop	{r3}
 8002c04:	469e      	mov	lr, r3
 8002c06:	4770      	bx	lr
