
Lab 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005234  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  080053f4  080053f4  000153f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c38  08005c38  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c38  08005c38  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c38  08005c38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c3c  08005c3c  00015c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  08005c4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08005c4c  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000127ae  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002462  00000000  00000000  000328a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00034d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bed  00000000  00000000  00035cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bea3  00000000  00000000  000368a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010877  00000000  00000000  00062748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00117a69  00000000  00000000  00072fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000432c  00000000  00000000  0018aa28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0018ed54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  0018edaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  0018eea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080053dc 	.word	0x080053dc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	080053dc 	.word	0x080053dc

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__gedf2>:
 8000578:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800057c:	e006      	b.n	800058c <__cmpdf2+0x4>
 800057e:	bf00      	nop

08000580 <__ledf2>:
 8000580:	f04f 0c01 	mov.w	ip, #1
 8000584:	e002      	b.n	800058c <__cmpdf2+0x4>
 8000586:	bf00      	nop

08000588 <__cmpdf2>:
 8000588:	f04f 0c01 	mov.w	ip, #1
 800058c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000590:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000594:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000598:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800059c:	bf18      	it	ne
 800059e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005a2:	d01b      	beq.n	80005dc <__cmpdf2+0x54>
 80005a4:	b001      	add	sp, #4
 80005a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005aa:	bf0c      	ite	eq
 80005ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005b0:	ea91 0f03 	teqne	r1, r3
 80005b4:	bf02      	ittt	eq
 80005b6:	ea90 0f02 	teqeq	r0, r2
 80005ba:	2000      	moveq	r0, #0
 80005bc:	4770      	bxeq	lr
 80005be:	f110 0f00 	cmn.w	r0, #0
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf58      	it	pl
 80005c8:	4299      	cmppl	r1, r3
 80005ca:	bf08      	it	eq
 80005cc:	4290      	cmpeq	r0, r2
 80005ce:	bf2c      	ite	cs
 80005d0:	17d8      	asrcs	r0, r3, #31
 80005d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005d6:	f040 0001 	orr.w	r0, r0, #1
 80005da:	4770      	bx	lr
 80005dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e4:	d102      	bne.n	80005ec <__cmpdf2+0x64>
 80005e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ea:	d107      	bne.n	80005fc <__cmpdf2+0x74>
 80005ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f4:	d1d6      	bne.n	80005a4 <__cmpdf2+0x1c>
 80005f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005fa:	d0d3      	beq.n	80005a4 <__cmpdf2+0x1c>
 80005fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <__aeabi_cdrcmple>:
 8000604:	4684      	mov	ip, r0
 8000606:	4610      	mov	r0, r2
 8000608:	4662      	mov	r2, ip
 800060a:	468c      	mov	ip, r1
 800060c:	4619      	mov	r1, r3
 800060e:	4663      	mov	r3, ip
 8000610:	e000      	b.n	8000614 <__aeabi_cdcmpeq>
 8000612:	bf00      	nop

08000614 <__aeabi_cdcmpeq>:
 8000614:	b501      	push	{r0, lr}
 8000616:	f7ff ffb7 	bl	8000588 <__cmpdf2>
 800061a:	2800      	cmp	r0, #0
 800061c:	bf48      	it	mi
 800061e:	f110 0f00 	cmnmi.w	r0, #0
 8000622:	bd01      	pop	{r0, pc}

08000624 <__aeabi_dcmpeq>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff fff4 	bl	8000614 <__aeabi_cdcmpeq>
 800062c:	bf0c      	ite	eq
 800062e:	2001      	moveq	r0, #1
 8000630:	2000      	movne	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmplt>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffea 	bl	8000614 <__aeabi_cdcmpeq>
 8000640:	bf34      	ite	cc
 8000642:	2001      	movcc	r0, #1
 8000644:	2000      	movcs	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmple>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffe0 	bl	8000614 <__aeabi_cdcmpeq>
 8000654:	bf94      	ite	ls
 8000656:	2001      	movls	r0, #1
 8000658:	2000      	movhi	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_dcmpge>:
 8000660:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000664:	f7ff ffce 	bl	8000604 <__aeabi_cdrcmple>
 8000668:	bf94      	ite	ls
 800066a:	2001      	movls	r0, #1
 800066c:	2000      	movhi	r0, #0
 800066e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000672:	bf00      	nop

08000674 <__aeabi_dcmpgt>:
 8000674:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000678:	f7ff ffc4 	bl	8000604 <__aeabi_cdrcmple>
 800067c:	bf34      	ite	cc
 800067e:	2001      	movcc	r0, #1
 8000680:	2000      	movcs	r0, #0
 8000682:	f85d fb08 	ldr.w	pc, [sp], #8
 8000686:	bf00      	nop

08000688 <__aeabi_d2f>:
 8000688:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800068c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000690:	bf24      	itt	cs
 8000692:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000696:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800069a:	d90d      	bls.n	80006b8 <__aeabi_d2f+0x30>
 800069c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80006a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80006a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80006a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80006ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80006b0:	bf08      	it	eq
 80006b2:	f020 0001 	biceq.w	r0, r0, #1
 80006b6:	4770      	bx	lr
 80006b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80006bc:	d121      	bne.n	8000702 <__aeabi_d2f+0x7a>
 80006be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80006c2:	bfbc      	itt	lt
 80006c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80006c8:	4770      	bxlt	lr
 80006ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80006d2:	f1c2 0218 	rsb	r2, r2, #24
 80006d6:	f1c2 0c20 	rsb	ip, r2, #32
 80006da:	fa10 f30c 	lsls.w	r3, r0, ip
 80006de:	fa20 f002 	lsr.w	r0, r0, r2
 80006e2:	bf18      	it	ne
 80006e4:	f040 0001 	orrne.w	r0, r0, #1
 80006e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80006f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80006f4:	ea40 000c 	orr.w	r0, r0, ip
 80006f8:	fa23 f302 	lsr.w	r3, r3, r2
 80006fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000700:	e7cc      	b.n	800069c <__aeabi_d2f+0x14>
 8000702:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000706:	d107      	bne.n	8000718 <__aeabi_d2f+0x90>
 8000708:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800070c:	bf1e      	ittt	ne
 800070e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000712:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000716:	4770      	bxne	lr
 8000718:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800071c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000720:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop

08000728 <ADC_Voltage_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* ADC Voltage Initialization */
void ADC_Voltage_Init(){
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
	// ADC for voltage by using polling
	  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]
	  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800073e:	4b0a      	ldr	r3, [pc, #40]	; (8000768 <ADC_Voltage_Init+0x40>)
 8000740:	603b      	str	r3, [r7, #0]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000742:	2306      	movs	r3, #6
 8000744:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000746:	2306      	movs	r3, #6
 8000748:	607b      	str	r3, [r7, #4]

	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <ADC_Voltage_Init+0x44>)
 8000750:	f001 fa5e 	bl	8001c10 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <ADC_Voltage_Init+0x36>
		  Error_Handler();
 800075a:	f000 fbe1 	bl	8000f20 <Error_Handler>
	  }

}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	80000001 	.word	0x80000001
 800076c:	20000028 	.word	0x20000028

08000770 <ADC_Temperature_Init>:
/* ADC Temperature Initialization */
void ADC_Temperature_Init(){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000776:	463b      	mov	r3, r7
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
 8000784:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000786:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <ADC_Temperature_Init+0x40>)
 8000788:	603b      	str	r3, [r7, #0]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800078a:	2306      	movs	r3, #6
 800078c:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800078e:	2306      	movs	r3, #6
 8000790:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4807      	ldr	r0, [pc, #28]	; (80007b4 <ADC_Temperature_Init+0x44>)
 8000798:	f001 fa3a 	bl	8001c10 <HAL_ADC_ConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <ADC_Temperature_Init+0x36>
		Error_Handler();
 80007a2:	f000 fbbd 	bl	8000f20 <Error_Handler>
	}

}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	c7520000 	.word	0xc7520000
 80007b4:	20000028 	.word	0x20000028

080007b8 <getADCValue>:

uint32_t getADCValue(){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1); // Activates ADC peripheral and starts conversion
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <getADCValue+0x38>)
 80007c0:	f001 f8f4 	bl	80019ac <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK){ // Waits for ADC conversion to be done
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <getADCValue+0x38>)
 80007ca:	f001 f985 	bl	8001ad8 <HAL_ADC_PollForConversion>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <getADCValue+0x20>
		  Error_Handler();
 80007d4:	f000 fba4 	bl	8000f20 <Error_Handler>
	}

	uint32_t ADC_value = HAL_ADC_GetValue(&hadc1); // Retrieve the converted value
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <getADCValue+0x38>)
 80007da:	f001 fa0c 	bl	8001bf6 <HAL_ADC_GetValue>
 80007de:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1); // Stops conversion and disables the ADC peripherals
 80007e0:	4803      	ldr	r0, [pc, #12]	; (80007f0 <getADCValue+0x38>)
 80007e2:	f001 f946 	bl	8001a72 <HAL_ADC_Stop>

	return ADC_value;
 80007e6:	687b      	ldr	r3, [r7, #4]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000028 	.word	0x20000028

080007f4 <Voltage_Conversion>:

/*
 * Formula found in the Chip Document p692
 * @return value is in Volts
*/
float Voltage_Conversion(uint32_t raw_ADC_voltage_value){
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]

	return 3000 * (*VREFINT)/ raw_ADC_voltage_value;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <Voltage_Conversion+0x34>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000806:	fb02 f303 	mul.w	r3, r2, r3
 800080a:	461a      	mov	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	ee07 3a90 	vmov	s15, r3
 8000816:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800081a:	eeb0 0a67 	vmov.f32	s0, s15
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	1fff75aa 	.word	0x1fff75aa

0800082c <Temperature_Conversion>:

/*
 * Formula found in the Chip Document p690
 * @return value is in degrees Celsius
*/
float Temperature_Conversion(uint32_t raw_ADC_temperature_value, float VREF){
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	ed87 0a00 	vstr	s0, [r7]

	float ts_data = raw_ADC_temperature_value * VREF/3000;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000842:	edd7 7a00 	vldr	s15, [r7]
 8000846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800084a:	eddf 6a17 	vldr	s13, [pc, #92]	; 80008a8 <Temperature_Conversion+0x7c>
 800084e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000852:	edc7 7a03 	vstr	s15, [r7, #12]

	return (TS_CAL2_TEMP - TS_CAL1_TEMP)/ ((float)*TS_CAL2 - (float)*TS_CAL1) * ((float)ts_data - (float)*TS_CAL1) + 30;
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <Temperature_Conversion+0x80>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	ee07 3a90 	vmov	s15, r3
 800085e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <Temperature_Conversion+0x84>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	ee07 3a90 	vmov	s15, r3
 800086a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800086e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000872:	eddf 6a10 	vldr	s13, [pc, #64]	; 80008b4 <Temperature_Conversion+0x88>
 8000876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <Temperature_Conversion+0x84>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
 8000882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000886:	edd7 6a03 	vldr	s13, [r7, #12]
 800088a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800088e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000892:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000896:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 800089a:	eeb0 0a67 	vmov.f32	s0, s15
 800089e:	3714      	adds	r7, #20
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	453b8000 	.word	0x453b8000
 80008ac:	1fff75ca 	.word	0x1fff75ca
 80008b0:	1fff75a8 	.word	0x1fff75a8
 80008b4:	42c80000 	.word	0x42c80000

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008be:	f000 fc6e 	bl	800119e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c2:	f000 f8ad 	bl	8000a20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c6:	f000 f9ef 	bl	8000ca8 <MX_GPIO_Init>
  MX_DAC1_Init();
 80008ca:	f000 f95f 	bl	8000b8c <MX_DAC1_Init>
  MX_ADC1_Init();
 80008ce:	f000 f8f9 	bl	8000ac4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80008d2:	f000 f99b 	bl	8000c0c <MX_TIM2_Init>

  //Flag for state of button
  GPIO_PinState buttonState;

  //Variable to check which state we're in, to check if the button has been pressed once
  int flag, passedBy = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]

  //Variable at program boot
  int initialState = 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	613b      	str	r3, [r7, #16]

  //The output for the DAC
  uint16_t outputFrequency = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	81fb      	strh	r3, [r7, #14]


  //Launch the DAC channels
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80008e2:	2100      	movs	r1, #0
 80008e4:	4844      	ldr	r0, [pc, #272]	; (80009f8 <main+0x140>)
 80008e6:	f002 f864 	bl	80029b2 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80008ea:	2110      	movs	r1, #16
 80008ec:	4842      	ldr	r0, [pc, #264]	; (80009f8 <main+0x140>)
 80008ee:	f002 f860 	bl	80029b2 <HAL_DAC_Start>

  //Launch the timer
  HAL_TIM_Base_Start_IT(&htim2);
 80008f2:	4842      	ldr	r0, [pc, #264]	; (80009fc <main+0x144>)
 80008f4:	f004 f8c2 	bl	8004a7c <HAL_TIM_Base_Start_IT>

  //Start with the LED off
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fe:	4840      	ldr	r0, [pc, #256]	; (8000a00 <main+0x148>)
 8000900:	f002 fbc4 	bl	800308c <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Get state of button
	  buttonState =  HAL_GPIO_ReadPin(userButton_GPIO_Port, userButton_Pin);
 8000904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000908:	483e      	ldr	r0, [pc, #248]	; (8000a04 <main+0x14c>)
 800090a:	f002 fba7 	bl	800305c <HAL_GPIO_ReadPin>
 800090e:	4603      	mov	r3, r0
 8000910:	77fb      	strb	r3, [r7, #31]

	  //Check if the button has been pressed
  	  while(!buttonState){
 8000912:	e014      	b.n	800093e <main+0x86>

  		  //Switch states
  		  if(!passedBy){
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d108      	bne.n	800092c <main+0x74>
  			  flag = !flag;
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	2b00      	cmp	r3, #0
 800091e:	bf0c      	ite	eq
 8000920:	2301      	moveq	r3, #1
 8000922:	2300      	movne	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	61bb      	str	r3, [r7, #24]
  			  passedBy = 1;
 8000928:	2301      	movs	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
  		  }

  		  initialState = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  		  buttonState = HAL_GPIO_ReadPin(userButton_GPIO_Port, userButton_Pin);
 8000930:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000934:	4833      	ldr	r0, [pc, #204]	; (8000a04 <main+0x14c>)
 8000936:	f002 fb91 	bl	800305c <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	77fb      	strb	r3, [r7, #31]
  	  while(!buttonState){
 800093e:	7ffb      	ldrb	r3, [r7, #31]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d0e7      	beq.n	8000914 <main+0x5c>

  	  }

  	  passedBy = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]


  	    //Check which state we're in

	    //If we just started the program, play a dull sound
	  	  if(initialState){
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d003      	beq.n	8000956 <main+0x9e>

	  		  outputFrequency = sawValue;
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <main+0x150>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	81fb      	strh	r3, [r7, #14]
 8000954:	e042      	b.n	80009dc <main+0x124>

	    //If we pressed the button, cycle through sound waves
	  	  }else if(!flag){
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d11d      	bne.n	8000998 <main+0xe0>

	  		//Set the LED to Off
	  		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000962:	4827      	ldr	r0, [pc, #156]	; (8000a00 <main+0x148>)
 8000964:	f002 fb92 	bl	800308c <HAL_GPIO_WritePin>

	  		//Switch between sounds every second
			if(soundCounter == 0){
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <main+0x154>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d103      	bne.n	8000978 <main+0xc0>

						outputFrequency = sineValue;
 8000970:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <main+0x158>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	81fb      	strh	r3, [r7, #14]
 8000976:	e031      	b.n	80009dc <main+0x124>
			}

			else if(soundCounter == 1){
 8000978:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <main+0x154>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d103      	bne.n	8000988 <main+0xd0>
						outputFrequency = sawValue;
 8000980:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <main+0x150>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	81fb      	strh	r3, [r7, #14]
 8000986:	e029      	b.n	80009dc <main+0x124>
			}

			else if(soundCounter == 2){
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <main+0x154>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d125      	bne.n	80009dc <main+0x124>
						outputFrequency = triangleValue;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <main+0x15c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	81fb      	strh	r3, [r7, #14]
 8000996:	e021      	b.n	80009dc <main+0x124>

		//If we pressed the button again, change to temperature value
	  	  }else{

		  //Set the LED to On
		  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099e:	4818      	ldr	r0, [pc, #96]	; (8000a00 <main+0x148>)
 80009a0:	f002 fb74 	bl	800308c <HAL_GPIO_WritePin>

		  //Get measure temperature value
		  ADC_Temperature_Init();
 80009a4:	f7ff fee4 	bl	8000770 <ADC_Temperature_Init>
		  uint32_t raw_ADC_temperature_value = getADCValue(); // Retrieve the converted value
 80009a8:	f7ff ff06 	bl	80007b8 <getADCValue>
 80009ac:	60b8      	str	r0, [r7, #8]

		  //Get voltage reference value
		  ADC_Voltage_Init();
 80009ae:	f7ff febb 	bl	8000728 <ADC_Voltage_Init>
		  uint32_t raw_ADC_voltage_value = getADCValue(); // Retrieve the converted value
 80009b2:	f7ff ff01 	bl	80007b8 <getADCValue>
 80009b6:	6078      	str	r0, [r7, #4]

		  float VREF = Voltage_Conversion(raw_ADC_voltage_value);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff1b 	bl	80007f4 <Voltage_Conversion>
 80009be:	ed87 0a00 	vstr	s0, [r7]

		  temperatureMeasured = Temperature_Conversion(raw_ADC_temperature_value, VREF);
 80009c2:	ed97 0a00 	vldr	s0, [r7]
 80009c6:	68b8      	ldr	r0, [r7, #8]
 80009c8:	f7ff ff30 	bl	800082c <Temperature_Conversion>
 80009cc:	eef0 7a40 	vmov.f32	s15, s0
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <main+0x160>)
 80009d2:	edc3 7a00 	vstr	s15, [r3]


		  outputFrequency = temperatureValue;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <main+0x164>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	81fb      	strh	r3, [r7, #14]
  		 }


  	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, outputFrequency);
 80009dc:	89fb      	ldrh	r3, [r7, #14]
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <main+0x140>)
 80009e4:	f002 f837 	bl	8002a56 <HAL_DAC_SetValue>
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, outputFrequency);
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	2200      	movs	r2, #0
 80009ec:	2110      	movs	r1, #16
 80009ee:	4802      	ldr	r0, [pc, #8]	; (80009f8 <main+0x140>)
 80009f0:	f002 f831 	bl	8002a56 <HAL_DAC_SetValue>
	  buttonState =  HAL_GPIO_ReadPin(userButton_GPIO_Port, userButton_Pin);
 80009f4:	e786      	b.n	8000904 <main+0x4c>
 80009f6:	bf00      	nop
 80009f8:	20000090 	.word	0x20000090
 80009fc:	200000a4 	.word	0x200000a4
 8000a00:	48000400 	.word	0x48000400
 8000a04:	48000800 	.word	0x48000800
 8000a08:	200000f4 	.word	0x200000f4
 8000a0c:	2000010c 	.word	0x2000010c
 8000a10:	200000f8 	.word	0x200000f8
 8000a14:	200000f0 	.word	0x200000f0
 8000a18:	20000104 	.word	0x20000104
 8000a1c:	200000fc 	.word	0x200000fc

08000a20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b096      	sub	sp, #88	; 0x58
 8000a24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	2244      	movs	r2, #68	; 0x44
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f004 fca8 	bl	8005384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a34:	463b      	mov	r3, r7
 8000a36:	2200      	movs	r2, #0
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	605a      	str	r2, [r3, #4]
 8000a3c:	609a      	str	r2, [r3, #8]
 8000a3e:	60da      	str	r2, [r3, #12]
 8000a40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000a42:	2000      	movs	r0, #0
 8000a44:	f002 fb5a 	bl	80030fc <HAL_PWREx_ControlVoltageScaling>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000a4e:	f000 fa67 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a52:	2310      	movs	r3, #16
 8000a54:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a56:	2301      	movs	r3, #1
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a5e:	2360      	movs	r3, #96	; 0x60
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a62:	2302      	movs	r3, #2
 8000a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a66:	2301      	movs	r3, #1
 8000a68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000a6e:	233c      	movs	r3, #60	; 0x3c
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4618      	mov	r0, r3
 8000a84:	f002 fbde 	bl	8003244 <HAL_RCC_OscConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a8e:	f000 fa47 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a92:	230f      	movs	r3, #15
 8000a94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2303      	movs	r3, #3
 8000a98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	2105      	movs	r1, #5
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 ffe4 	bl	8003a78 <HAL_RCC_ClockConfig>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ab6:	f000 fa33 	bl	8000f20 <Error_Handler>
  }
}
 8000aba:	bf00      	nop
 8000abc:	3758      	adds	r7, #88	; 0x58
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aca:	463b      	mov	r3, r7
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
 8000ad8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ada:	4b29      	ldr	r3, [pc, #164]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000adc:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <MX_ADC1_Init+0xc0>)
 8000ade:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ae0:	4b27      	ldr	r3, [pc, #156]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae6:	4b26      	ldr	r3, [pc, #152]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aec:	4b24      	ldr	r3, [pc, #144]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af2:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af8:	4b21      	ldr	r3, [pc, #132]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000afe:	4b20      	ldr	r3, [pc, #128]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b04:	4b1e      	ldr	r3, [pc, #120]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000b0a:	4b1d      	ldr	r3, [pc, #116]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b18:	4b19      	ldr	r3, [pc, #100]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b2c:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000b32:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b3a:	4811      	ldr	r0, [pc, #68]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b3c:	f000 fdf0 	bl	8001720 <HAL_ADC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000b46:	f000 f9eb 	bl	8000f20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_ADC1_Init+0xc4>)
 8000b4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000b52:	2306      	movs	r3, #6
 8000b54:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b56:	237f      	movs	r3, #127	; 0x7f
 8000b58:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	463b      	mov	r3, r7
 8000b64:	4619      	mov	r1, r3
 8000b66:	4806      	ldr	r0, [pc, #24]	; (8000b80 <MX_ADC1_Init+0xbc>)
 8000b68:	f001 f852 	bl	8001c10 <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b72:	f000 f9d5 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	3718      	adds	r7, #24
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000028 	.word	0x20000028
 8000b84:	50040000 	.word	0x50040000
 8000b88:	c7520000 	.word	0xc7520000

08000b8c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2228      	movs	r2, #40	; 0x28
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f004 fbf3 	bl	8005384 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b9e:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <MX_DAC1_Init+0x78>)
 8000ba0:	4a19      	ldr	r2, [pc, #100]	; (8000c08 <MX_DAC1_Init+0x7c>)
 8000ba2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ba4:	4817      	ldr	r0, [pc, #92]	; (8000c04 <MX_DAC1_Init+0x78>)
 8000ba6:	f001 fee2 	bl	800296e <HAL_DAC_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000bb0:	f000 f9b6 	bl	8000f20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bc0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <MX_DAC1_Init+0x78>)
 8000bd6:	f001 ff63 	bl	8002aa0 <HAL_DAC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000be0:	f000 f99e 	bl	8000f20 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000be4:	463b      	mov	r3, r7
 8000be6:	2210      	movs	r2, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	4806      	ldr	r0, [pc, #24]	; (8000c04 <MX_DAC1_Init+0x78>)
 8000bec:	f001 ff58 	bl	8002aa0 <HAL_DAC_ConfigChannel>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8000bf6:	f000 f993 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000090 	.word	0x20000090
 8000c08:	40007400 	.word	0x40007400

08000c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c12:	f107 0310 	add.w	r3, r7, #16
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5000;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 6;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c42:	2206      	movs	r2, #6
 8000c44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b17      	ldr	r3, [pc, #92]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c52:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c54:	f003 feba 	bl	80049cc <HAL_TIM_Base_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c5e:	f000 f95f 	bl	8000f20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c70:	f004 f876 	bl	8004d60 <HAL_TIM_ConfigClockSource>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c7a:	f000 f951 	bl	8000f20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4806      	ldr	r0, [pc, #24]	; (8000ca4 <MX_TIM2_Init+0x98>)
 8000c8c:	f004 fa8e 	bl	80051ac <HAL_TIMEx_MasterConfigSynchronization>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c96:	f000 f943 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	3720      	adds	r7, #32
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000a4 	.word	0x200000a4

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a24      	ldr	r2, [pc, #144]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a18      	ldr	r2, [pc, #96]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b16      	ldr	r3, [pc, #88]	; (8000d54 <MX_GPIO_Init+0xac>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d0c:	4812      	ldr	r0, [pc, #72]	; (8000d58 <MX_GPIO_Init+0xb0>)
 8000d0e:	f002 f9bd 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8000d12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4619      	mov	r1, r3
 8000d26:	480d      	ldr	r0, [pc, #52]	; (8000d5c <MX_GPIO_Init+0xb4>)
 8000d28:	f002 f806 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000d2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	4619      	mov	r1, r3
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_GPIO_Init+0xb0>)
 8000d46:	f001 fff7 	bl	8002d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3720      	adds	r7, #32
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	48000800 	.word	0x48000800

08000d60 <HAL_TIM_PeriodElapsedCallback>:

/*
 * The timer interrupts every ~0.29ms (I tried to get a clock cycle of 0.25ms)
 * The period is 4 ms, which is why the step is 16
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	//ITM_Port32(31) = timer;


	//Get Triangle Value
	//I'm stopping at 4088 because it's the max int before getting to 4095 using integer division (4095/8 = 511.875 => 511)
	if(isIncreasing == 0){
 8000d68:	4b61      	ldr	r3, [pc, #388]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d110      	bne.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x32>
		if(triangleValue < 4088) {
 8000d70:	4b60      	ldr	r3, [pc, #384]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f640 72f7 	movw	r2, #4087	; 0xff7
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d806      	bhi.n	8000d8a <HAL_TIM_PeriodElapsedCallback+0x2a>
			triangleValue+= 4095/8;
 8000d7c:	4b5d      	ldr	r3, [pc, #372]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000d84:	4a5b      	ldr	r2, [pc, #364]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	e011      	b.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x4e>
		}else{
			isIncreasing = 1;
 8000d8a:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e00d      	b.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x4e>
			//check this
			}
	}else{
		if(triangleValue > 0) {
 8000d92:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d006      	beq.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x48>
			triangleValue-= 4095/8;
 8000d9a:	4b56      	ldr	r3, [pc, #344]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 8000da2:	4a54      	ldr	r2, [pc, #336]	; (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	e002      	b.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x4e>
		}else {
			isIncreasing = 0;
 8000da8:	4b51      	ldr	r3, [pc, #324]	; (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
	}


	//Get Saw Value
	//I'm stopping at 4080 because it's the max int before getting to 4095 using integer division (4095/16 = 255.9375 => 255)
	if(sawValue < 4080){
 8000dae:	4b52      	ldr	r3, [pc, #328]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8000db6:	d205      	bcs.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x64>
		sawValue+=4095/16;
 8000db8:	4b4f      	ldr	r3, [pc, #316]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	33ff      	adds	r3, #255	; 0xff
 8000dbe:	4a4e      	ldr	r2, [pc, #312]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000dc0:	6013      	str	r3, [r2, #0]
 8000dc2:	e002      	b.n	8000dca <HAL_TIM_PeriodElapsedCallback+0x6a>
	}else{
		sawValue = 0;
 8000dc4:	4b4c      	ldr	r3, [pc, #304]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
	}


	float twopi = 6.28319;
 8000dca:	4b4c      	ldr	r3, [pc, #304]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000dcc:	617b      	str	r3, [r7, #20]
	float period = 16.0;
 8000dce:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8000dd2:	613b      	str	r3, [r7, #16]

	float division = twopi/period;
 8000dd4:	edd7 6a05 	vldr	s13, [r7, #20]
 8000dd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de0:	edc7 7a03 	vstr	s15, [r7, #12]

	x = x + division;
 8000de4:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000de6:	ed93 7a00 	vldr	s14, [r3]
 8000dea:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000df2:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000df4:	edc3 7a00 	vstr	s15, [r3]

	//Get Sine Value
	float sin_wave = arm_sin_f32(x);
 8000df8:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000e02:	f004 fa79 	bl	80052f8 <arm_sin_f32>
 8000e06:	ed87 0a02 	vstr	s0, [r7, #8]


	if(x >= 6.28319){
 8000e0a:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fb5a 	bl	80004c8 <__aeabi_f2d>
 8000e14:	a334      	add	r3, pc, #208	; (adr r3, 8000ee8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	f7ff fc21 	bl	8000660 <__aeabi_dcmpge>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d012      	beq.n	8000e4a <HAL_TIM_PeriodElapsedCallback+0xea>
		x -= 6.28319;
 8000e24:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fb4d 	bl	80004c8 <__aeabi_f2d>
 8000e2e:	a32e      	add	r3, pc, #184	; (adr r3, 8000ee8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f7ff f9e8 	bl	8000208 <__aeabi_dsub>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f7ff fc22 	bl	8000688 <__aeabi_d2f>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000e48:	6013      	str	r3, [r2, #0]
	}

	sineValue = (uint16_t)((sin_wave * 2048) + 2048);
 8000e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e4e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000f04 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8000e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e56:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000f04 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8000e5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e62:	ee17 3a90 	vmov	r3, s15
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000e6c:	601a      	str	r2, [r3, #0]


	//Keep a counter
	timer++;
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	4a25      	ldr	r2, [pc, #148]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e76:	6013      	str	r3, [r2, #0]

	//When we get to one second, reset the timer counter (T = 29 ms, 1s ~ 3500*29ms)
	if(timer == 3500){
 8000e78:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d107      	bne.n	8000e94 <HAL_TIM_PeriodElapsedCallback+0x134>
		timer = 0;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
		soundCounter++;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e92:	6013      	str	r3, [r2, #0]
	}

	//When 3 seconds has elapsed, reset the cycle counter
	if(soundCounter == 3){
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d102      	bne.n	8000ea2 <HAL_TIM_PeriodElapsedCallback+0x142>
		soundCounter = 0;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
	}


	if(temperatureValue < 4095){
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d815      	bhi.n	8000eda <HAL_TIM_PeriodElapsedCallback+0x17a>
		temperatureValue+=4095/(temperatureMeasured);
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	ee07 3a90 	vmov	s15, r3
 8000eb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000ebc:	edd3 6a00 	vldr	s13, [r3]
 8000ec0:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8000f1c <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8000ec4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000ec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ed0:	ee17 2a90 	vmov	r2, s15
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000ed6:	601a      	str	r2, [r3, #0]
	}else{
		temperatureValue = 0;
	}


}
 8000ed8:	e002      	b.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x180>
		temperatureValue = 0;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	8f32378b 	.word	0x8f32378b
 8000eec:	401921fc 	.word	0x401921fc
 8000ef0:	20000108 	.word	0x20000108
 8000ef4:	200000f0 	.word	0x200000f0
 8000ef8:	200000f4 	.word	0x200000f4
 8000efc:	40c90fe4 	.word	0x40c90fe4
 8000f00:	20000100 	.word	0x20000100
 8000f04:	45000000 	.word	0x45000000
 8000f08:	200000f8 	.word	0x200000f8
 8000f0c:	20000110 	.word	0x20000110
 8000f10:	2000010c 	.word	0x2000010c
 8000f14:	200000fc 	.word	0x200000fc
 8000f18:	20000104 	.word	0x20000104
 8000f1c:	457ff000 	.word	0x457ff000

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x44>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x44>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x44>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a08      	ldr	r2, [pc, #32]	; (8000f70 <HAL_MspInit+0x44>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_MspInit+0x44>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b0a8      	sub	sp, #160	; 0xa0
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	f107 030c 	add.w	r3, r7, #12
 8000f80:	2294      	movs	r2, #148	; 0x94
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f004 f9fd 	bl	8005384 <memset>
  if(hadc->Instance==ADC1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <HAL_ADC_MspInit+0x80>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d12b      	bne.n	8000fec <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f98:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000f9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 40;
 8000faa:	2328      	movs	r3, #40	; 0x28
 8000fac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000fba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 ffe9 	bl	8003f9c <HAL_RCCEx_PeriphCLKConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 8000fd0:	f7ff ffa6 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <HAL_ADC_MspInit+0x84>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd8:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <HAL_ADC_MspInit+0x84>)
 8000fda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_ADC_MspInit+0x84>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fec:	bf00      	nop
 8000fee:	37a0      	adds	r7, #160	; 0xa0
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	50040000 	.word	0x50040000
 8000ff8:	40021000 	.word	0x40021000

08000ffc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_DAC_MspInit+0x74>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d124      	bne.n	8001068 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_DAC_MspInit+0x78>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <HAL_DAC_MspInit+0x78>)
 8001024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001028:	6593      	str	r3, [r2, #88]	; 0x58
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_DAC_MspInit+0x78>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_DAC_MspInit+0x78>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_DAC_MspInit+0x78>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_DAC_MspInit+0x78>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC_1_Pin|DAC_2_Pin;
 800104e:	2330      	movs	r3, #48	; 0x30
 8001050:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001064:	f001 fe68 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40007400 	.word	0x40007400
 8001074:	40021000 	.word	0x40021000

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d113      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_TIM_Base_MspInit+0x44>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_TIM_Base_MspInit+0x44>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6593      	str	r3, [r2, #88]	; 0x58
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_TIM_Base_MspInit+0x44>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	201c      	movs	r0, #28
 80010a8:	f001 fc2b 	bl	8002902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ac:	201c      	movs	r0, #28
 80010ae:	f001 fc44 	bl	800293a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800110c:	f000 f89c 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}

08001114 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001118:	4802      	ldr	r0, [pc, #8]	; (8001124 <TIM2_IRQHandler+0x10>)
 800111a:	f003 fd1f 	bl	8004b5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000a4 	.word	0x200000a4

08001128 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001150:	f7ff ffea 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	; (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117a:	f004 f90b 	bl	8005394 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117e:	f7ff fb9b 	bl	80008b8 <main>

08001182 <LoopForever>:

LoopForever:
    b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001184:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001190:	08005c40 	.word	0x08005c40
  ldr r2, =_sbss
 8001194:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001198:	20000118 	.word	0x20000118

0800119c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_IRQHandler>

0800119e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f001 fb9f 	bl	80028ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ae:	200f      	movs	r0, #15
 80011b0:	f000 f80e 	bl	80011d0 <HAL_InitTick>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	e001      	b.n	80011c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c0:	f7ff feb4 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c4:	79fb      	ldrb	r3, [r7, #7]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d8:	2300      	movs	r3, #0
 80011da:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <HAL_InitTick+0x6c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d023      	beq.n	800122c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_InitTick+0x70>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_InitTick+0x6c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	4619      	mov	r1, r3
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fbab 	bl	8002956 <HAL_SYSTICK_Config>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10f      	bne.n	8001226 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b0f      	cmp	r3, #15
 800120a:	d809      	bhi.n	8001220 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120c:	2200      	movs	r2, #0
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001214:	f001 fb75 	bl	8002902 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001218:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0x74>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e007      	b.n	8001230 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001220:	2301      	movs	r3, #1
 8001222:	73fb      	strb	r3, [r7, #15]
 8001224:	e004      	b.n	8001230 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e001      	b.n	8001230 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001230:	7bfb      	ldrb	r3, [r7, #15]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	20000000 	.word	0x20000000
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x20>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	461a      	mov	r2, r3
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <HAL_IncTick+0x24>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4413      	add	r3, r2
 8001258:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_IncTick+0x24>)
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000008 	.word	0x20000008
 800126c:	20000114 	.word	0x20000114

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b03      	ldr	r3, [pc, #12]	; (8001284 <HAL_GetTick+0x14>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000114 	.word	0x20000114

08001288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff ffee 	bl	8001270 <HAL_GetTick>
 8001294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012a0:	d005      	beq.n	80012ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012a2:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <HAL_Delay+0x44>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ae:	bf00      	nop
 80012b0:	f7ff ffde 	bl	8001270 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d8f7      	bhi.n	80012b0 <HAL_Delay+0x28>
  {
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000008 	.word	0x20000008

080012d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	609a      	str	r2, [r3, #8]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001338:	b480      	push	{r7}
 800133a:	b087      	sub	sp, #28
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	3360      	adds	r3, #96	; 0x60
 800134a:	461a      	mov	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <LL_ADC_SetOffset+0x44>)
 800135a:	4013      	ands	r3, r2
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	4313      	orrs	r3, r2
 8001368:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001370:	bf00      	nop
 8001372:	371c      	adds	r7, #28
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	03fff000 	.word	0x03fff000

08001380 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3360      	adds	r3, #96	; 0x60
 800138e:	461a      	mov	r2, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b087      	sub	sp, #28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	3360      	adds	r3, #96	; 0x60
 80013bc:	461a      	mov	r2, r3
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013d6:	bf00      	nop
 80013d8:	371c      	adds	r7, #28
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	615a      	str	r2, [r3, #20]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800142e:	b480      	push	{r7}
 8001430:	b087      	sub	sp, #28
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3330      	adds	r3, #48	; 0x30
 800143e:	461a      	mov	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	0a1b      	lsrs	r3, r3, #8
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	f003 030c 	and.w	r3, r3, #12
 800144a:	4413      	add	r3, r2
 800144c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f003 031f 	and.w	r3, r3, #31
 8001458:	211f      	movs	r1, #31
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	401a      	ands	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	0e9b      	lsrs	r3, r3, #26
 8001466:	f003 011f 	and.w	r1, r3, #31
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f003 031f 	and.w	r3, r3, #31
 8001470:	fa01 f303 	lsl.w	r3, r1, r3
 8001474:	431a      	orrs	r2, r3
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800147a:	bf00      	nop
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001486:	b480      	push	{r7}
 8001488:	b087      	sub	sp, #28
 800148a:	af00      	add	r7, sp, #0
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3314      	adds	r3, #20
 8001496:	461a      	mov	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	0e5b      	lsrs	r3, r3, #25
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	0d1b      	lsrs	r3, r3, #20
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	2107      	movs	r1, #7
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	0d1b      	lsrs	r3, r3, #20
 80014c0:	f003 031f 	and.w	r3, r3, #31
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	431a      	orrs	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f4:	43db      	mvns	r3, r3
 80014f6:	401a      	ands	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0318 	and.w	r3, r3, #24
 80014fe:	4908      	ldr	r1, [pc, #32]	; (8001520 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001500:	40d9      	lsrs	r1, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	400b      	ands	r3, r1
 8001506:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800150a:	431a      	orrs	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001512:	bf00      	nop
 8001514:	3714      	adds	r7, #20
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	0007ffff 	.word	0x0007ffff

08001524 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001534:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6093      	str	r3, [r2, #8]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800155c:	d101      	bne.n	8001562 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800155e:	2301      	movs	r3, #1
 8001560:	e000      	b.n	8001564 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001562:	2300      	movs	r3, #0
}
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001580:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001584:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015ac:	d101      	bne.n	80015b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015fc:	f043 0202 	orr.w	r2, r3, #2
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <LL_ADC_IsEnabled+0x18>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <LL_ADC_IsEnabled+0x1a>
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001636:	b480      	push	{r7}
 8001638:	b083      	sub	sp, #12
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b02      	cmp	r3, #2
 8001648:	d101      	bne.n	800164e <LL_ADC_IsDisableOngoing+0x18>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <LL_ADC_IsDisableOngoing+0x1a>
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800166c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001670:	f043 0204 	orr.w	r2, r3, #4
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001698:	f043 0210 	orr.w	r2, r3, #16
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d101      	bne.n	80016c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e6:	f043 0220 	orr.w	r2, r3, #32
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b08      	cmp	r3, #8
 800170c:	d101      	bne.n	8001712 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d101      	bne.n	800173a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e129      	b.n	800198e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f7ff fc13 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fef1 	bl	8001548 <LL_ADC_IsDeepPowerDownEnabled>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fed7 	bl	8001524 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ff0c 	bl	8001598 <LL_ADC_IsInternalRegulatorEnabled>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d115      	bne.n	80017b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fef0 	bl	8001570 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001790:	4b81      	ldr	r3, [pc, #516]	; (8001998 <HAL_ADC_Init+0x278>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	4a81      	ldr	r2, [pc, #516]	; (800199c <HAL_ADC_Init+0x27c>)
 8001798:	fba2 2303 	umull	r2, r3, r2, r3
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	3301      	adds	r3, #1
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017a4:	e002      	b.n	80017ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f9      	bne.n	80017a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff feee 	bl	8001598 <LL_ADC_IsInternalRegulatorEnabled>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10d      	bne.n	80017de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f043 0210 	orr.w	r2, r3, #16
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	f043 0201 	orr.w	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff ff62 	bl	80016ac <LL_ADC_REG_IsConversionOngoing>
 80017e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f040 80c2 	bne.w	800197c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f040 80be 	bne.w	800197c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001808:	f043 0202 	orr.w	r2, r3, #2
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fefb 	bl	8001610 <LL_ADC_IsEnabled>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10b      	bne.n	8001838 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001820:	485f      	ldr	r0, [pc, #380]	; (80019a0 <HAL_ADC_Init+0x280>)
 8001822:	f7ff fef5 	bl	8001610 <LL_ADC_IsEnabled>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4619      	mov	r1, r3
 8001832:	485c      	ldr	r0, [pc, #368]	; (80019a4 <HAL_ADC_Init+0x284>)
 8001834:	f7ff fd4c 	bl	80012d0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7e5b      	ldrb	r3, [r3, #25]
 800183c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001842:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001848:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800184e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001856:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d106      	bne.n	8001874 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	3b01      	subs	r3, #1
 800186c:	045b      	lsls	r3, r3, #17
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001880:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001888:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	4b44      	ldr	r3, [pc, #272]	; (80019a8 <HAL_ADC_Init+0x288>)
 8001898:	4013      	ands	r3, r2
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	6812      	ldr	r2, [r2, #0]
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff26 	bl	80016fa <LL_ADC_INJ_IsConversionOngoing>
 80018ae:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d140      	bne.n	8001938 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d13d      	bne.n	8001938 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7e1b      	ldrb	r3, [r3, #24]
 80018c4:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018c6:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018de:	f023 0306 	bic.w	r3, r3, #6
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d118      	bne.n	8001928 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800190c:	4311      	orrs	r1, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001912:	4311      	orrs	r1, r2
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001918:	430a      	orrs	r2, r1
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	611a      	str	r2, [r3, #16]
 8001926:	e007      	b.n	8001938 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	691a      	ldr	r2, [r3, #16]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d10c      	bne.n	800195a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f023 010f 	bic.w	r1, r3, #15
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	1e5a      	subs	r2, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	631a      	str	r2, [r3, #48]	; 0x30
 8001958:	e007      	b.n	800196a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 020f 	bic.w	r2, r2, #15
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	f023 0303 	bic.w	r3, r3, #3
 8001972:	f043 0201 	orr.w	r2, r3, #1
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	659a      	str	r2, [r3, #88]	; 0x58
 800197a:	e007      	b.n	800198c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	f043 0210 	orr.w	r2, r3, #16
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800198c:	7ffb      	ldrb	r3, [r7, #31]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3720      	adds	r7, #32
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000000 	.word	0x20000000
 800199c:	053e2d63 	.word	0x053e2d63
 80019a0:	50040000 	.word	0x50040000
 80019a4:	50040300 	.word	0x50040300
 80019a8:	fff0c007 	.word	0xfff0c007

080019ac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fe77 	bl	80016ac <LL_ADC_REG_IsConversionOngoing>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d14f      	bne.n	8001a64 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADC_Start+0x26>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e04b      	b.n	8001a6a <HAL_ADC_Start+0xbe>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 fdd0 	bl	8002580 <ADC_Enable>
 80019e0:	4603      	mov	r3, r0
 80019e2:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d137      	bne.n	8001a5a <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019f2:	f023 0301 	bic.w	r3, r3, #1
 80019f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a0a:	d106      	bne.n	8001a1a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	f023 0206 	bic.w	r2, r3, #6
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a18:	e002      	b.n	8001a20 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	221c      	movs	r2, #28
 8001a26:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fe02 	bl	800165c <LL_ADC_REG_StartConversion>
 8001a58:	e006      	b.n	8001a68 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001a62:	e001      	b.n	8001a68 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a64:	2302      	movs	r3, #2
 8001a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b084      	sub	sp, #16
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_ADC_Stop+0x16>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e023      	b.n	8001ad0 <HAL_ADC_Stop+0x5e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a90:	2103      	movs	r1, #3
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fcb8 	bl	8002408 <ADC_ConversionStop>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d111      	bne.n	8001ac6 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 fdf2 	bl	800268c <ADC_Disable>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d102      	bne.n	8001af0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001aea:	2308      	movs	r3, #8
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e010      	b.n	8001b12 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	f043 0220 	orr.w	r2, r3, #32
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06f      	b.n	8001bee <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001b0e:	2304      	movs	r3, #4
 8001b10:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b12:	f7ff fbad 	bl	8001270 <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b18:	e021      	b.n	8001b5e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b20:	d01d      	beq.n	8001b5e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001b22:	f7ff fba5 	bl	8001270 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d302      	bcc.n	8001b38 <HAL_ADC_PollForConversion+0x60>
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d112      	bne.n	8001b5e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d10b      	bne.n	8001b5e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f043 0204 	orr.w	r2, r3, #4
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e047      	b.n	8001bee <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0d6      	beq.n	8001b1a <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fc43 	bl	8001408 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d01c      	beq.n	8001bc2 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7e5b      	ldrb	r3, [r3, #25]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d118      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0308 	and.w	r3, r3, #8
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d111      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d105      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d104      	bne.n	8001bda <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2208      	movs	r2, #8
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	e008      	b.n	8001bec <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d103      	bne.n	8001bec <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	220c      	movs	r2, #12
 8001bea:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b0b6      	sub	sp, #216	; 0xd8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x22>
 8001c2e:	2302      	movs	r3, #2
 8001c30:	e3d5      	b.n	80023de <HAL_ADC_ConfigChannel+0x7ce>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fd34 	bl	80016ac <LL_ADC_REG_IsConversionOngoing>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f040 83ba 	bne.w	80023c0 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	d824      	bhi.n	8001ca6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	3b02      	subs	r3, #2
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d81b      	bhi.n	8001c9e <HAL_ADC_ConfigChannel+0x8e>
 8001c66:	a201      	add	r2, pc, #4	; (adr r2, 8001c6c <HAL_ADC_ConfigChannel+0x5c>)
 8001c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6c:	08001c7d 	.word	0x08001c7d
 8001c70:	08001c85 	.word	0x08001c85
 8001c74:	08001c8d 	.word	0x08001c8d
 8001c78:	08001c95 	.word	0x08001c95
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c82:	e010      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001c84:	2312      	movs	r3, #18
 8001c86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c8a:	e00c      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001c8c:	2318      	movs	r3, #24
 8001c8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c92:	e008      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001c9c:	e003      	b.n	8001ca6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ca4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001cb4:	f7ff fbbb 	bl	800142e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fcf5 	bl	80016ac <LL_ADC_REG_IsConversionOngoing>
 8001cc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fd15 	bl	80016fa <LL_ADC_INJ_IsConversionOngoing>
 8001cd0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f040 81bf 	bne.w	800205c <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f040 81ba 	bne.w	800205c <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cf0:	d10f      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6818      	ldr	r0, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7ff fbc2 	bl	8001486 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fb69 	bl	80013e2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d10:	e00e      	b.n	8001d30 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f7ff fbb1 	bl	8001486 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fb59 	bl	80013e2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	08db      	lsrs	r3, r3, #3
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d00a      	beq.n	8001d68 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	6919      	ldr	r1, [r3, #16]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001d62:	f7ff fae9 	bl	8001338 <LL_ADC_SetOffset>
 8001d66:	e179      	b.n	800205c <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fb06 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001d74:	4603      	mov	r3, r0
 8001d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10a      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x184>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fafb 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	f003 021f 	and.w	r2, r3, #31
 8001d92:	e01e      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x1c2>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff faf0 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001daa:	fa93 f3a3 	rbit	r3, r3
 8001dae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001dba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e004      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001dc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x1da>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	e018      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x20c>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001e06:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e004      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001e12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d106      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2200      	movs	r2, #0
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fabf 	bl	80013ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2101      	movs	r1, #1
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff faa3 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10a      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x24a>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fa98 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	e01e      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x288>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fa8d 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001e80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	e004      	b.n	8001e96 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001e8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x2a0>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	0e9b      	lsrs	r3, r3, #26
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	e018      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x2d2>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001ec4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001ed4:	2320      	movs	r3, #32
 8001ed6:	e004      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d106      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fa5c 	bl	80013ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fa40 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x310>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2102      	movs	r1, #2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fa35 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001f16:	4603      	mov	r3, r0
 8001f18:	0e9b      	lsrs	r3, r3, #26
 8001f1a:	f003 021f 	and.w	r2, r3, #31
 8001f1e:	e01e      	b.n	8001f5e <HAL_ADC_ConfigChannel+0x34e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2102      	movs	r1, #2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fa2a 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001f4e:	2320      	movs	r3, #32
 8001f50:	e004      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f56:	fab3 f383 	clz	r3, r3
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d105      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x366>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	0e9b      	lsrs	r3, r3, #26
 8001f70:	f003 031f 	and.w	r3, r3, #31
 8001f74:	e014      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x390>
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f7e:	fa93 f3a3 	rbit	r3, r3
 8001f82:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8001f92:	2320      	movs	r3, #32
 8001f94:	e004      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8001f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f9a:	fab3 f383 	clz	r3, r3
 8001f9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d106      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2102      	movs	r1, #2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff f9fd 	bl	80013ac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2103      	movs	r1, #3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff f9e1 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d10a      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x3ce>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2103      	movs	r1, #3
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f9d6 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	0e9b      	lsrs	r3, r3, #26
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	e017      	b.n	800200e <HAL_ADC_ConfigChannel+0x3fe>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f9cb 	bl	8001380 <LL_ADC_GetOffsetChannel>
 8001fea:	4603      	mov	r3, r0
 8001fec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ff8:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002000:	2320      	movs	r3, #32
 8002002:	e003      	b.n	800200c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002016:	2b00      	cmp	r3, #0
 8002018:	d105      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x416>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	e011      	b.n	800204a <HAL_ADC_ConfigChannel+0x43a>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002036:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 800203e:	2320      	movs	r3, #32
 8002040:	e003      	b.n	800204a <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800204a:	429a      	cmp	r2, r3
 800204c:	d106      	bne.n	800205c <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	2103      	movs	r1, #3
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff f9a8 	bl	80013ac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fad5 	bl	8001610 <LL_ADC_IsEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	f040 813f 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	6819      	ldr	r1, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	461a      	mov	r2, r3
 800207c:	f7ff fa2e 	bl	80014dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a8e      	ldr	r2, [pc, #568]	; (80022c0 <HAL_ADC_ConfigChannel+0x6b0>)
 8002086:	4293      	cmp	r3, r2
 8002088:	f040 8130 	bne.w	80022ec <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x4a4>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	3301      	adds	r3, #1
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	bf94      	ite	ls
 80020ac:	2301      	movls	r3, #1
 80020ae:	2300      	movhi	r3, #0
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	e019      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x4d8>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80020c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80020c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e003      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80020d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	2b09      	cmp	r3, #9
 80020e0:	bf94      	ite	ls
 80020e2:	2301      	movls	r3, #1
 80020e4:	2300      	movhi	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d079      	beq.n	80021e0 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d107      	bne.n	8002108 <HAL_ADC_ConfigChannel+0x4f8>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0e9b      	lsrs	r3, r3, #26
 80020fe:	3301      	adds	r3, #1
 8002100:	069b      	lsls	r3, r3, #26
 8002102:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002106:	e015      	b.n	8002134 <HAL_ADC_ConfigChannel+0x524>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002110:	fa93 f3a3 	rbit	r3, r3
 8002114:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002116:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002118:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800211a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002120:	2320      	movs	r3, #32
 8002122:	e003      	b.n	800212c <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002126:	fab3 f383 	clz	r3, r3
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3301      	adds	r3, #1
 800212e:	069b      	lsls	r3, r3, #26
 8002130:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213c:	2b00      	cmp	r3, #0
 800213e:	d109      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x544>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	0e9b      	lsrs	r3, r3, #26
 8002146:	3301      	adds	r3, #1
 8002148:	f003 031f 	and.w	r3, r3, #31
 800214c:	2101      	movs	r1, #1
 800214e:	fa01 f303 	lsl.w	r3, r1, r3
 8002152:	e017      	b.n	8002184 <HAL_ADC_ConfigChannel+0x574>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002164:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 800216c:	2320      	movs	r3, #32
 800216e:	e003      	b.n	8002178 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3301      	adds	r3, #1
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	ea42 0103 	orr.w	r1, r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10a      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x59a>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	3301      	adds	r3, #1
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	051b      	lsls	r3, r3, #20
 80021a8:	e018      	b.n	80021dc <HAL_ADC_ConfigChannel+0x5cc>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80021bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e003      	b.n	80021ce <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80021c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	f003 021f 	and.w	r2, r3, #31
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021dc:	430b      	orrs	r3, r1
 80021de:	e080      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x5ec>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	069b      	lsls	r3, r3, #26
 80021f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021fa:	e015      	b.n	8002228 <HAL_ADC_ConfigChannel+0x618>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800220e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e003      	b.n	8002220 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	069b      	lsls	r3, r3, #26
 8002224:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002230:	2b00      	cmp	r3, #0
 8002232:	d109      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x638>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0e9b      	lsrs	r3, r3, #26
 800223a:	3301      	adds	r3, #1
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	2101      	movs	r1, #1
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	e017      	b.n	8002278 <HAL_ADC_ConfigChannel+0x668>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	61bb      	str	r3, [r7, #24]
  return result;
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8002260:	2320      	movs	r3, #32
 8002262:	e003      	b.n	800226c <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
 800226c:	3301      	adds	r3, #1
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	ea42 0103 	orr.w	r1, r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10d      	bne.n	80022a4 <HAL_ADC_ConfigChannel+0x694>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	3301      	adds	r3, #1
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	3b1e      	subs	r3, #30
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a2:	e01d      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x6d0>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	60fb      	str	r3, [r7, #12]
  return result;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80022bc:	2320      	movs	r3, #32
 80022be:	e005      	b.n	80022cc <HAL_ADC_ConfigChannel+0x6bc>
 80022c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	3b1e      	subs	r3, #30
 80022da:	051b      	lsls	r3, r3, #20
 80022dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e6:	4619      	mov	r1, r3
 80022e8:	f7ff f8cd 	bl	8001486 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b3d      	ldr	r3, [pc, #244]	; (80023e8 <HAL_ADC_ConfigChannel+0x7d8>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d06c      	beq.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f8:	483c      	ldr	r0, [pc, #240]	; (80023ec <HAL_ADC_ConfigChannel+0x7dc>)
 80022fa:	f7ff f80f 	bl	800131c <LL_ADC_GetCommonPathInternalCh>
 80022fe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d127      	bne.n	800235c <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800230c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002310:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d121      	bne.n	800235c <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a35      	ldr	r2, [pc, #212]	; (80023f4 <HAL_ADC_ConfigChannel+0x7e4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d157      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002322:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800232a:	4619      	mov	r1, r3
 800232c:	482f      	ldr	r0, [pc, #188]	; (80023ec <HAL_ADC_ConfigChannel+0x7dc>)
 800232e:	f7fe ffe2 	bl	80012f6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002332:	4b31      	ldr	r3, [pc, #196]	; (80023f8 <HAL_ADC_ConfigChannel+0x7e8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	4a30      	ldr	r2, [pc, #192]	; (80023fc <HAL_ADC_ConfigChannel+0x7ec>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800234c:	e002      	b.n	8002354 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3b01      	subs	r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f9      	bne.n	800234e <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800235a:	e03a      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a27      	ldr	r2, [pc, #156]	; (8002400 <HAL_ADC_ConfigChannel+0x7f0>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d113      	bne.n	800238e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002366:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800236a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10d      	bne.n	800238e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_ADC_ConfigChannel+0x7e4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d12a      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800237c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002380:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002384:	4619      	mov	r1, r3
 8002386:	4819      	ldr	r0, [pc, #100]	; (80023ec <HAL_ADC_ConfigChannel+0x7dc>)
 8002388:	f7fe ffb5 	bl	80012f6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800238c:	e021      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1c      	ldr	r2, [pc, #112]	; (8002404 <HAL_ADC_ConfigChannel+0x7f4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d11c      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002398:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800239c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d116      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_ADC_ConfigChannel+0x7e4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d111      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023b6:	4619      	mov	r1, r3
 80023b8:	480c      	ldr	r0, [pc, #48]	; (80023ec <HAL_ADC_ConfigChannel+0x7dc>)
 80023ba:	f7fe ff9c 	bl	80012f6 <LL_ADC_SetCommonPathInternalCh>
 80023be:	e008      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	f043 0220 	orr.w	r2, r3, #32
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80023da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80023de:	4618      	mov	r0, r3
 80023e0:	37d8      	adds	r7, #216	; 0xd8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	80080000 	.word	0x80080000
 80023ec:	50040300 	.word	0x50040300
 80023f0:	c7520000 	.word	0xc7520000
 80023f4:	50040000 	.word	0x50040000
 80023f8:	20000000 	.word	0x20000000
 80023fc:	053e2d63 	.word	0x053e2d63
 8002400:	cb840000 	.word	0xcb840000
 8002404:	80000001 	.word	0x80000001

08002408 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff f944 	bl	80016ac <LL_ADC_REG_IsConversionOngoing>
 8002424:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f965 	bl	80016fa <LL_ADC_INJ_IsConversionOngoing>
 8002430:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8098 	beq.w	8002570 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d02a      	beq.n	80024a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	7e5b      	ldrb	r3, [r3, #25]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d126      	bne.n	80024a4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7e1b      	ldrb	r3, [r3, #24]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d122      	bne.n	80024a4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800245e:	2301      	movs	r3, #1
 8002460:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002462:	e014      	b.n	800248e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4a45      	ldr	r2, [pc, #276]	; (800257c <ADC_ConversionStop+0x174>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d90d      	bls.n	8002488 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	f043 0210 	orr.w	r2, r3, #16
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	f043 0201 	orr.w	r2, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e074      	b.n	8002572 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	3301      	adds	r3, #1
 800248c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002498:	2b40      	cmp	r3, #64	; 0x40
 800249a:	d1e3      	bne.n	8002464 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2240      	movs	r2, #64	; 0x40
 80024a2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d014      	beq.n	80024d4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f8fc 	bl	80016ac <LL_ADC_REG_IsConversionOngoing>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00c      	beq.n	80024d4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f8b9 	bl	8001636 <LL_ADC_IsDisableOngoing>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d104      	bne.n	80024d4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff f8d8 	bl	8001684 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d014      	beq.n	8002504 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff f90b 	bl	80016fa <LL_ADC_INJ_IsConversionOngoing>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00c      	beq.n	8002504 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff f8a1 	bl	8001636 <LL_ADC_IsDisableOngoing>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d104      	bne.n	8002504 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f8e7 	bl	80016d2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d005      	beq.n	8002516 <ADC_ConversionStop+0x10e>
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d105      	bne.n	800251c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002510:	230c      	movs	r3, #12
 8002512:	617b      	str	r3, [r7, #20]
        break;
 8002514:	e005      	b.n	8002522 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002516:	2308      	movs	r3, #8
 8002518:	617b      	str	r3, [r7, #20]
        break;
 800251a:	e002      	b.n	8002522 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800251c:	2304      	movs	r3, #4
 800251e:	617b      	str	r3, [r7, #20]
        break;
 8002520:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002522:	f7fe fea5 	bl	8001270 <HAL_GetTick>
 8002526:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002528:	e01b      	b.n	8002562 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800252a:	f7fe fea1 	bl	8001270 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b05      	cmp	r3, #5
 8002536:	d914      	bls.n	8002562 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	4013      	ands	r3, r2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00d      	beq.n	8002562 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254a:	f043 0210 	orr.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	f043 0201 	orr.w	r2, r3, #1
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e007      	b.n	8002572 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	4013      	ands	r3, r2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1dc      	bne.n	800252a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3720      	adds	r7, #32
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	a33fffff 	.word	0xa33fffff

08002580 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002588:	2300      	movs	r3, #0
 800258a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f83d 	bl	8001610 <LL_ADC_IsEnabled>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d169      	bne.n	8002670 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4b36      	ldr	r3, [pc, #216]	; (800267c <ADC_Enable+0xfc>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ae:	f043 0210 	orr.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	f043 0201 	orr.w	r2, r3, #1
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e055      	b.n	8002672 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe fff8 	bl	80015c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025d0:	482b      	ldr	r0, [pc, #172]	; (8002680 <ADC_Enable+0x100>)
 80025d2:	f7fe fea3 	bl	800131c <LL_ADC_GetCommonPathInternalCh>
 80025d6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d013      	beq.n	8002608 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <ADC_Enable+0x104>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	4a28      	ldr	r2, [pc, #160]	; (8002688 <ADC_Enable+0x108>)
 80025e8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ec:	099b      	lsrs	r3, r3, #6
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025fa:	e002      	b.n	8002602 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	3b01      	subs	r3, #1
 8002600:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f9      	bne.n	80025fc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002608:	f7fe fe32 	bl	8001270 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800260e:	e028      	b.n	8002662 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fe fffb 	bl	8001610 <LL_ADC_IsEnabled>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d104      	bne.n	800262a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe ffcb 	bl	80015c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800262a:	f7fe fe21 	bl	8001270 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d914      	bls.n	8002662 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d00d      	beq.n	8002662 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	f043 0201 	orr.w	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e007      	b.n	8002672 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b01      	cmp	r3, #1
 800266e:	d1cf      	bne.n	8002610 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	8000003f 	.word	0x8000003f
 8002680:	50040300 	.word	0x50040300
 8002684:	20000000 	.word	0x20000000
 8002688:	053e2d63 	.word	0x053e2d63

0800268c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe ffcc 	bl	8001636 <LL_ADC_IsDisableOngoing>
 800269e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe ffb3 	bl	8001610 <LL_ADC_IsEnabled>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d047      	beq.n	8002740 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d144      	bne.n	8002740 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030d 	and.w	r3, r3, #13
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d10c      	bne.n	80026de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fe ff8d 	bl	80015e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2203      	movs	r2, #3
 80026d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026d6:	f7fe fdcb 	bl	8001270 <HAL_GetTick>
 80026da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80026dc:	e029      	b.n	8002732 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	f043 0210 	orr.w	r2, r3, #16
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e023      	b.n	8002742 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026fa:	f7fe fdb9 	bl	8001270 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d914      	bls.n	8002732 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00d      	beq.n	8002732 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f043 0210 	orr.w	r2, r3, #16
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e007      	b.n	8002742 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1dc      	bne.n	80026fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002768:	4013      	ands	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002774:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277e:	4a04      	ldr	r2, [pc, #16]	; (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	60d3      	str	r3, [r2, #12]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	; (80027ac <__NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	db0b      	blt.n	80027da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c2:	79fb      	ldrb	r3, [r7, #7]
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	4907      	ldr	r1, [pc, #28]	; (80027e8 <__NVIC_EnableIRQ+0x38>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	095b      	lsrs	r3, r3, #5
 80027d0:	2001      	movs	r0, #1
 80027d2:	fa00 f202 	lsl.w	r2, r0, r2
 80027d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	e000e100 	.word	0xe000e100

080027ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0a      	blt.n	8002816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	490c      	ldr	r1, [pc, #48]	; (8002838 <__NVIC_SetPriority+0x4c>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	440b      	add	r3, r1
 8002810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002814:	e00a      	b.n	800282c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4908      	ldr	r1, [pc, #32]	; (800283c <__NVIC_SetPriority+0x50>)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3b04      	subs	r3, #4
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	440b      	add	r3, r1
 800282a:	761a      	strb	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f1c3 0307 	rsb	r3, r3, #7
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf28      	it	cs
 800285e:	2304      	movcs	r3, #4
 8002860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3304      	adds	r3, #4
 8002866:	2b06      	cmp	r3, #6
 8002868:	d902      	bls.n	8002870 <NVIC_EncodePriority+0x30>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3b03      	subs	r3, #3
 800286e:	e000      	b.n	8002872 <NVIC_EncodePriority+0x32>
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	401a      	ands	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	43d9      	mvns	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	4313      	orrs	r3, r2
         );
}
 800289a:	4618      	mov	r0, r3
 800289c:	3724      	adds	r7, #36	; 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b8:	d301      	bcc.n	80028be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00f      	b.n	80028de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <SysTick_Config+0x40>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c6:	210f      	movs	r1, #15
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028cc:	f7ff ff8e 	bl	80027ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <SysTick_Config+0x40>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d6:	4b04      	ldr	r3, [pc, #16]	; (80028e8 <SysTick_Config+0x40>)
 80028d8:	2207      	movs	r2, #7
 80028da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000e010 	.word	0xe000e010

080028ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff29 	bl	800274c <__NVIC_SetPriorityGrouping>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002914:	f7ff ff3e 	bl	8002794 <__NVIC_GetPriorityGrouping>
 8002918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	6978      	ldr	r0, [r7, #20]
 8002920:	f7ff ff8e 	bl	8002840 <NVIC_EncodePriority>
 8002924:	4602      	mov	r2, r0
 8002926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff5d 	bl	80027ec <__NVIC_SetPriority>
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	4603      	mov	r3, r0
 8002942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff31 	bl	80027b0 <__NVIC_EnableIRQ>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ffa2 	bl	80028a8 <SysTick_Config>
 8002964:	4603      	mov	r3, r0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d101      	bne.n	8002980 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e014      	b.n	80029aa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	791b      	ldrb	r3, [r3, #4]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fe fb33 	bl	8000ffc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2202      	movs	r2, #2
 800299a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	795b      	ldrb	r3, [r3, #5]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_DAC_Start+0x16>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e040      	b.n	8002a4a <HAL_DAC_Start+0x98>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2202      	movs	r2, #2
 80029d2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2201      	movs	r2, #1
 80029e2:	409a      	lsls	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d11d      	bne.n	8002a3c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0201 	orr.w	r2, r2, #1
 8002a0e:	605a      	str	r2, [r3, #4]
 8002a10:	e014      	b.n	8002a3c <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2102      	movs	r1, #2
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d107      	bne.n	8002a3c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0202 	orr.w	r2, r2, #2
 8002a3a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e004      	b.n	8002a8a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4413      	add	r3, r2
 8002a86:	3314      	adds	r3, #20
 8002a88:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b088      	sub	sp, #32
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	795b      	ldrb	r3, [r3, #5]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_DAC_ConfigChannel+0x1c>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e137      	b.n	8002d2c <HAL_DAC_ConfigChannel+0x28c>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	f040 8081 	bne.w	8002bd4 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fbcd 	bl	8001270 <HAL_GetTick>
 8002ad6:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d140      	bne.n	8002b60 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002ade:	e018      	b.n	8002b12 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ae0:	f7fe fbc6 	bl	8001270 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d911      	bls.n	8002b12 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f043 0208 	orr.w	r2, r3, #8
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e10c      	b.n	8002d2c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1df      	bne.n	8002ae0 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002b20:	2001      	movs	r0, #1
 8002b22:	f7fe fbb1 	bl	8001288 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	69d2      	ldr	r2, [r2, #28]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b30:	e023      	b.n	8002b7a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b32:	f7fe fb9d 	bl	8001270 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d90f      	bls.n	8002b60 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	da0a      	bge.n	8002b60 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f043 0208 	orr.w	r2, r3, #8
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2203      	movs	r2, #3
 8002b5a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0e5      	b.n	8002d2c <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	dbe3      	blt.n	8002b32 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7fe fb8c 	bl	8001288 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	69d2      	ldr	r2, [r2, #28]
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0310 	and.w	r3, r3, #16
 8002b86:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	ea02 0103 	and.w	r1, r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0310 	and.w	r3, r3, #16
 8002b9e:	409a      	lsls	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	21ff      	movs	r1, #255	; 0xff
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	ea02 0103 	and.w	r1, r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d11d      	bne.n	8002c18 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be2:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0310 	and.w	r3, r3, #16
 8002bea:	221f      	movs	r2, #31
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69fa      	ldr	r2, [r7, #28]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2207      	movs	r2, #7
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69fa      	ldr	r2, [r7, #28]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6819      	ldr	r1, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43da      	mvns	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f003 0310 	and.w	r3, r3, #16
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cbc:	d104      	bne.n	8002cc8 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e018      	b.n	8002cfa <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	e00f      	b.n	8002cfa <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002cda:	f001 f893 	bl	8003e04 <HAL_RCC_GetHCLKFreq>
 8002cde:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4a14      	ldr	r2, [pc, #80]	; (8002d34 <HAL_DAC_ConfigChannel+0x294>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d904      	bls.n	8002cf2 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cee:	61fb      	str	r3, [r7, #28]
 8002cf0:	e003      	b.n	8002cfa <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002cf8:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69fa      	ldr	r2, [r7, #28]
 8002d00:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	22c0      	movs	r2, #192	; 0xc0
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43da      	mvns	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3720      	adds	r7, #32
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	04c4b400 	.word	0x04c4b400

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d46:	e166      	b.n	8003016 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 8158 	beq.w	8003010 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d005      	beq.n	8002d78 <HAL_GPIO_Init+0x40>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0303 	and.w	r3, r3, #3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d130      	bne.n	8002dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dae:	2201      	movs	r2, #1
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	091b      	lsrs	r3, r3, #4
 8002dc4:	f003 0201 	and.w	r2, r3, #1
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d017      	beq.n	8002e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d123      	bne.n	8002e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f003 0307 	and.w	r3, r3, #7
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	220f      	movs	r2, #15
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	4013      	ands	r3, r2
 8002e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	691a      	ldr	r2, [r3, #16]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	08da      	lsrs	r2, r3, #3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3208      	adds	r2, #8
 8002e64:	6939      	ldr	r1, [r7, #16]
 8002e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80b2 	beq.w	8003010 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eac:	4b61      	ldr	r3, [pc, #388]	; (8003034 <HAL_GPIO_Init+0x2fc>)
 8002eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eb0:	4a60      	ldr	r2, [pc, #384]	; (8003034 <HAL_GPIO_Init+0x2fc>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8002eb8:	4b5e      	ldr	r3, [pc, #376]	; (8003034 <HAL_GPIO_Init+0x2fc>)
 8002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ec4:	4a5c      	ldr	r2, [pc, #368]	; (8003038 <HAL_GPIO_Init+0x300>)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	089b      	lsrs	r3, r3, #2
 8002eca:	3302      	adds	r3, #2
 8002ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	220f      	movs	r2, #15
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002eee:	d02b      	beq.n	8002f48 <HAL_GPIO_Init+0x210>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a52      	ldr	r2, [pc, #328]	; (800303c <HAL_GPIO_Init+0x304>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d025      	beq.n	8002f44 <HAL_GPIO_Init+0x20c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a51      	ldr	r2, [pc, #324]	; (8003040 <HAL_GPIO_Init+0x308>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d01f      	beq.n	8002f40 <HAL_GPIO_Init+0x208>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a50      	ldr	r2, [pc, #320]	; (8003044 <HAL_GPIO_Init+0x30c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d019      	beq.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a4f      	ldr	r2, [pc, #316]	; (8003048 <HAL_GPIO_Init+0x310>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_GPIO_Init+0x200>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a4e      	ldr	r2, [pc, #312]	; (800304c <HAL_GPIO_Init+0x314>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d00d      	beq.n	8002f34 <HAL_GPIO_Init+0x1fc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a4d      	ldr	r2, [pc, #308]	; (8003050 <HAL_GPIO_Init+0x318>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d007      	beq.n	8002f30 <HAL_GPIO_Init+0x1f8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a4c      	ldr	r2, [pc, #304]	; (8003054 <HAL_GPIO_Init+0x31c>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_GPIO_Init+0x1f4>
 8002f28:	2307      	movs	r3, #7
 8002f2a:	e00e      	b.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	e00c      	b.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f30:	2306      	movs	r3, #6
 8002f32:	e00a      	b.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f34:	2305      	movs	r3, #5
 8002f36:	e008      	b.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f38:	2304      	movs	r3, #4
 8002f3a:	e006      	b.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e004      	b.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f40:	2302      	movs	r3, #2
 8002f42:	e002      	b.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <HAL_GPIO_Init+0x212>
 8002f48:	2300      	movs	r3, #0
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	f002 0203 	and.w	r2, r2, #3
 8002f50:	0092      	lsls	r2, r2, #2
 8002f52:	4093      	lsls	r3, r2
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f5a:	4937      	ldr	r1, [pc, #220]	; (8003038 <HAL_GPIO_Init+0x300>)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f68:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	43db      	mvns	r3, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4013      	ands	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f8c:	4a32      	ldr	r2, [pc, #200]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fb6:	4a28      	ldr	r2, [pc, #160]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <HAL_GPIO_Init+0x320>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800300a:	4a13      	ldr	r2, [pc, #76]	; (8003058 <HAL_GPIO_Init+0x320>)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	3301      	adds	r3, #1
 8003014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	f47f ae91 	bne.w	8002d48 <HAL_GPIO_Init+0x10>
  }
}
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40021000 	.word	0x40021000
 8003038:	40010000 	.word	0x40010000
 800303c:	48000400 	.word	0x48000400
 8003040:	48000800 	.word	0x48000800
 8003044:	48000c00 	.word	0x48000c00
 8003048:	48001000 	.word	0x48001000
 800304c:	48001400 	.word	0x48001400
 8003050:	48001800 	.word	0x48001800
 8003054:	48001c00 	.word	0x48001c00
 8003058:	40010400 	.word	0x40010400

0800305c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e001      	b.n	800307e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
 8003098:	4613      	mov	r3, r2
 800309a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800309c:	787b      	ldrb	r3, [r7, #1]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030a8:	e002      	b.n	80030b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030cc:	d102      	bne.n	80030d4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80030ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030d2:	e00b      	b.n	80030ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030e2:	d102      	bne.n	80030ea <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80030e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030e8:	e000      	b.n	80030ec <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80030ea:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40007000 	.word	0x40007000

080030fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d141      	bne.n	800318e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800310a:	4b4b      	ldr	r3, [pc, #300]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d131      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003118:	4b47      	ldr	r3, [pc, #284]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800311a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311e:	4a46      	ldr	r2, [pc, #280]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003124:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003128:	4b43      	ldr	r3, [pc, #268]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003130:	4a41      	ldr	r2, [pc, #260]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003136:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003138:	4b40      	ldr	r3, [pc, #256]	; (800323c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2232      	movs	r2, #50	; 0x32
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	4a3f      	ldr	r2, [pc, #252]	; (8003240 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	0c9b      	lsrs	r3, r3, #18
 800314a:	3301      	adds	r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800314e:	e002      	b.n	8003156 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	3b01      	subs	r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003156:	4b38      	ldr	r3, [pc, #224]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003162:	d102      	bne.n	800316a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f2      	bne.n	8003150 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800316a:	4b33      	ldr	r3, [pc, #204]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d158      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e057      	b.n	800322c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800317c:	4b2e      	ldr	r3, [pc, #184]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800317e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003182:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003188:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800318c:	e04d      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003194:	d141      	bne.n	800321a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003196:	4b28      	ldr	r3, [pc, #160]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d131      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a4:	4b24      	ldr	r3, [pc, #144]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031aa:	4a23      	ldr	r2, [pc, #140]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b4:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031bc:	4a1e      	ldr	r2, [pc, #120]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031c4:	4b1d      	ldr	r3, [pc, #116]	; (800323c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2232      	movs	r2, #50	; 0x32
 80031ca:	fb02 f303 	mul.w	r3, r2, r3
 80031ce:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	0c9b      	lsrs	r3, r3, #18
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031da:	e002      	b.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3b01      	subs	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ee:	d102      	bne.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1f2      	bne.n	80031dc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003202:	d112      	bne.n	800322a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e011      	b.n	800322c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800320a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003218:	e007      	b.n	800322a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003222:	4a05      	ldr	r2, [pc, #20]	; (8003238 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003228:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	40007000 	.word	0x40007000
 800323c:	20000000 	.word	0x20000000
 8003240:	431bde83 	.word	0x431bde83

08003244 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d102      	bne.n	8003258 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f000 bc08 	b.w	8003a68 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003258:	4b96      	ldr	r3, [pc, #600]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003262:	4b94      	ldr	r3, [pc, #592]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80e4 	beq.w	8003442 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <HAL_RCC_OscConfig+0x4c>
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	2b0c      	cmp	r3, #12
 8003284:	f040 808b 	bne.w	800339e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b01      	cmp	r3, #1
 800328c:	f040 8087 	bne.w	800339e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003290:	4b88      	ldr	r3, [pc, #544]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_RCC_OscConfig+0x64>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e3df      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1a      	ldr	r2, [r3, #32]
 80032ac:	4b81      	ldr	r3, [pc, #516]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <HAL_RCC_OscConfig+0x7e>
 80032b8:	4b7e      	ldr	r3, [pc, #504]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032c0:	e005      	b.n	80032ce <HAL_RCC_OscConfig+0x8a>
 80032c2:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80032c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d223      	bcs.n	800331a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fda0 	bl	8003e1c <RCC_SetFlashLatencyFromMSIRange>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e3c0      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a72      	ldr	r2, [pc, #456]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80032ec:	f043 0308 	orr.w	r3, r3, #8
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	4b70      	ldr	r3, [pc, #448]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	496d      	ldr	r1, [pc, #436]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003300:	4313      	orrs	r3, r2
 8003302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003304:	4b6b      	ldr	r3, [pc, #428]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	4968      	ldr	r1, [pc, #416]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003314:	4313      	orrs	r3, r2
 8003316:	604b      	str	r3, [r1, #4]
 8003318:	e025      	b.n	8003366 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800331a:	4b66      	ldr	r3, [pc, #408]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a65      	ldr	r2, [pc, #404]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003320:	f043 0308 	orr.w	r3, r3, #8
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4960      	ldr	r1, [pc, #384]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003338:	4b5e      	ldr	r3, [pc, #376]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	495b      	ldr	r1, [pc, #364]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 fd60 	bl	8003e1c <RCC_SetFlashLatencyFromMSIRange>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e380      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003366:	f000 fcc1 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	4950      	ldr	r1, [pc, #320]	; (80034b8 <HAL_RCC_OscConfig+0x274>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	4a4e      	ldr	r2, [pc, #312]	; (80034bc <HAL_RCC_OscConfig+0x278>)
 8003384:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003386:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <HAL_RCC_OscConfig+0x27c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd ff20 	bl	80011d0 <HAL_InitTick>
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003394:	7bfb      	ldrb	r3, [r7, #15]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d052      	beq.n	8003440 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
 800339c:	e364      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d032      	beq.n	800340c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033a6:	4b43      	ldr	r3, [pc, #268]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a42      	ldr	r2, [pc, #264]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033b2:	f7fd ff5d 	bl	8001270 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033ba:	f7fd ff59 	bl	8001270 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e34d      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d8:	4b36      	ldr	r3, [pc, #216]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033de:	f043 0308 	orr.w	r3, r3, #8
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b33      	ldr	r3, [pc, #204]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	4930      	ldr	r1, [pc, #192]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033f6:	4b2f      	ldr	r3, [pc, #188]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	492b      	ldr	r1, [pc, #172]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003406:	4313      	orrs	r3, r2
 8003408:	604b      	str	r3, [r1, #4]
 800340a:	e01a      	b.n	8003442 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800340c:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003412:	f023 0301 	bic.w	r3, r3, #1
 8003416:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003418:	f7fd ff2a 	bl	8001270 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003420:	f7fd ff26 	bl	8001270 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e31a      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x1dc>
 800343e:	e000      	b.n	8003442 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003440:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d073      	beq.n	8003536 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d005      	beq.n	8003460 <HAL_RCC_OscConfig+0x21c>
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d10e      	bne.n	8003478 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d10b      	bne.n	8003478 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d063      	beq.n	8003534 <HAL_RCC_OscConfig+0x2f0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d15f      	bne.n	8003534 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e2f7      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d106      	bne.n	8003490 <HAL_RCC_OscConfig+0x24c>
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e025      	b.n	80034dc <HAL_RCC_OscConfig+0x298>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003498:	d114      	bne.n	80034c4 <HAL_RCC_OscConfig+0x280>
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80034a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a02      	ldr	r2, [pc, #8]	; (80034b4 <HAL_RCC_OscConfig+0x270>)
 80034ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e013      	b.n	80034dc <HAL_RCC_OscConfig+0x298>
 80034b4:	40021000 	.word	0x40021000
 80034b8:	080053f4 	.word	0x080053f4
 80034bc:	20000000 	.word	0x20000000
 80034c0:	20000004 	.word	0x20000004
 80034c4:	4ba0      	ldr	r3, [pc, #640]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a9f      	ldr	r2, [pc, #636]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b9d      	ldr	r3, [pc, #628]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a9c      	ldr	r2, [pc, #624]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fec4 	bl	8001270 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7fd fec0 	bl	8001270 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e2b4      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fe:	4b92      	ldr	r3, [pc, #584]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0x2a8>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fd feb0 	bl	8001270 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7fd feac 	bl	8001270 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e2a0      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x2d0>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d060      	beq.n	8003604 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d005      	beq.n	8003554 <HAL_RCC_OscConfig+0x310>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	d119      	bne.n	8003582 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d116      	bne.n	8003582 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003554:	4b7c      	ldr	r3, [pc, #496]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_OscConfig+0x328>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e27d      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b76      	ldr	r3, [pc, #472]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	061b      	lsls	r3, r3, #24
 800357a:	4973      	ldr	r1, [pc, #460]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800357c:	4313      	orrs	r3, r2
 800357e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	e040      	b.n	8003604 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d023      	beq.n	80035d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800358a:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a6e      	ldr	r2, [pc, #440]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fd fe6b 	bl	8001270 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359e:	f7fd fe67 	bl	8001270 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e25b      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b0:	4b65      	ldr	r3, [pc, #404]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035bc:	4b62      	ldr	r3, [pc, #392]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	061b      	lsls	r3, r3, #24
 80035ca:	495f      	ldr	r1, [pc, #380]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
 80035d0:	e018      	b.n	8003604 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d2:	4b5d      	ldr	r3, [pc, #372]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a5c      	ldr	r2, [pc, #368]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80035d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035de:	f7fd fe47 	bl	8001270 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e6:	f7fd fe43 	bl	8001270 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e237      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d03c      	beq.n	800368a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01c      	beq.n	8003652 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003618:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800361a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800361e:	4a4a      	ldr	r2, [pc, #296]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fd fe22 	bl	8001270 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fd fe1e 	bl	8001270 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e212      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0ef      	beq.n	8003630 <HAL_RCC_OscConfig+0x3ec>
 8003650:	e01b      	b.n	800368a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003654:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003658:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003662:	f7fd fe05 	bl	8001270 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800366a:	f7fd fe01 	bl	8001270 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1f5      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800367c:	4b32      	ldr	r3, [pc, #200]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ef      	bne.n	800366a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 80a6 	beq.w	80037e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003698:	2300      	movs	r3, #0
 800369a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800369e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10d      	bne.n	80036c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	4a26      	ldr	r2, [pc, #152]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80036ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6593      	str	r3, [r2, #88]	; 0x58
 80036b4:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 80036b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c0:	2301      	movs	r3, #1
 80036c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c4:	4b21      	ldr	r3, [pc, #132]	; (800374c <HAL_RCC_OscConfig+0x508>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d118      	bne.n	8003702 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d0:	4b1e      	ldr	r3, [pc, #120]	; (800374c <HAL_RCC_OscConfig+0x508>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a1d      	ldr	r2, [pc, #116]	; (800374c <HAL_RCC_OscConfig+0x508>)
 80036d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036dc:	f7fd fdc8 	bl	8001270 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fd fdc4 	bl	8001270 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e1b8      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <HAL_RCC_OscConfig+0x508>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <HAL_RCC_OscConfig+0x4d8>
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	4a0d      	ldr	r2, [pc, #52]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800371a:	e029      	b.n	8003770 <HAL_RCC_OscConfig+0x52c>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b05      	cmp	r3, #5
 8003722:	d115      	bne.n	8003750 <HAL_RCC_OscConfig+0x50c>
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372a:	4a07      	ldr	r2, [pc, #28]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800372c:	f043 0304 	orr.w	r3, r3, #4
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 8003736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373a:	4a03      	ldr	r2, [pc, #12]	; (8003748 <HAL_RCC_OscConfig+0x504>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003744:	e014      	b.n	8003770 <HAL_RCC_OscConfig+0x52c>
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	4b9d      	ldr	r3, [pc, #628]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	4a9c      	ldr	r2, [pc, #624]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003760:	4b99      	ldr	r3, [pc, #612]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	4a98      	ldr	r2, [pc, #608]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003768:	f023 0304 	bic.w	r3, r3, #4
 800376c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d016      	beq.n	80037a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003778:	f7fd fd7a 	bl	8001270 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800377e:	e00a      	b.n	8003796 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003780:	f7fd fd76 	bl	8001270 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e168      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003796:	4b8c      	ldr	r3, [pc, #560]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d0ed      	beq.n	8003780 <HAL_RCC_OscConfig+0x53c>
 80037a4:	e015      	b.n	80037d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7fd fd63 	bl	8001270 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037ac:	e00a      	b.n	80037c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ae:	f7fd fd5f 	bl	8001270 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037bc:	4293      	cmp	r3, r2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e151      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037c4:	4b80      	ldr	r3, [pc, #512]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 80037c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ed      	bne.n	80037ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d2:	7ffb      	ldrb	r3, [r7, #31]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d105      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d8:	4b7b      	ldr	r3, [pc, #492]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	4a7a      	ldr	r2, [pc, #488]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 80037de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d03c      	beq.n	800386a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01c      	beq.n	8003832 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037f8:	4b73      	ldr	r3, [pc, #460]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 80037fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037fe:	4a72      	ldr	r2, [pc, #456]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003808:	f7fd fd32 	bl	8001270 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003810:	f7fd fd2e 	bl	8001270 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e122      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003822:	4b69      	ldr	r3, [pc, #420]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0ef      	beq.n	8003810 <HAL_RCC_OscConfig+0x5cc>
 8003830:	e01b      	b.n	800386a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003832:	4b65      	ldr	r3, [pc, #404]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003834:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003838:	4a63      	ldr	r2, [pc, #396]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003842:	f7fd fd15 	bl	8001270 <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800384a:	f7fd fd11 	bl	8001270 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e105      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800385c:	4b5a      	ldr	r3, [pc, #360]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 800385e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1ef      	bne.n	800384a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 80f9 	beq.w	8003a66 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	2b02      	cmp	r3, #2
 800387a:	f040 80cf 	bne.w	8003a1c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800387e:	4b52      	ldr	r3, [pc, #328]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0203 	and.w	r2, r3, #3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	429a      	cmp	r2, r3
 8003890:	d12c      	bne.n	80038ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	3b01      	subs	r3, #1
 800389e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d123      	bne.n	80038ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038ae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d11b      	bne.n	80038ec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d113      	bne.n	80038ec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	3b01      	subs	r3, #1
 80038d2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d109      	bne.n	80038ec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	3b01      	subs	r3, #1
 80038e6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d071      	beq.n	80039d0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	d068      	beq.n	80039c4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038f2:	4b35      	ldr	r3, [pc, #212]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038fe:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e0ac      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800390e:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a2d      	ldr	r2, [pc, #180]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003918:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800391a:	f7fd fca9 	bl	8001270 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003922:	f7fd fca5 	bl	8001270 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e099      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003934:	4b24      	ldr	r3, [pc, #144]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f0      	bne.n	8003922 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	4b21      	ldr	r3, [pc, #132]	; (80039cc <HAL_RCC_OscConfig+0x788>)
 8003946:	4013      	ands	r3, r2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003950:	3a01      	subs	r2, #1
 8003952:	0112      	lsls	r2, r2, #4
 8003954:	4311      	orrs	r1, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800395a:	0212      	lsls	r2, r2, #8
 800395c:	4311      	orrs	r1, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003962:	0852      	lsrs	r2, r2, #1
 8003964:	3a01      	subs	r2, #1
 8003966:	0552      	lsls	r2, r2, #21
 8003968:	4311      	orrs	r1, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800396e:	0852      	lsrs	r2, r2, #1
 8003970:	3a01      	subs	r2, #1
 8003972:	0652      	lsls	r2, r2, #25
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800397a:	06d2      	lsls	r2, r2, #27
 800397c:	430a      	orrs	r2, r1
 800397e:	4912      	ldr	r1, [pc, #72]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003980:	4313      	orrs	r3, r2
 8003982:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a0f      	ldr	r2, [pc, #60]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 800398a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003990:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 8003996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800399a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800399c:	f7fd fc68 	bl	8001270 <HAL_GetTick>
 80039a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fd fc64 	bl	8001270 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e058      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b6:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <HAL_RCC_OscConfig+0x784>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d0f0      	beq.n	80039a4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039c2:	e050      	b.n	8003a66 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e04f      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
 80039c8:	40021000 	.word	0x40021000
 80039cc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d0:	4b27      	ldr	r3, [pc, #156]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d144      	bne.n	8003a66 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039dc:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 80039e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039e8:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4a20      	ldr	r2, [pc, #128]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 80039ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039f4:	f7fd fc3c 	bl	8001270 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fc:	f7fd fc38 	bl	8001270 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e02c      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0e:	4b18      	ldr	r3, [pc, #96]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0x7b8>
 8003a1a:	e024      	b.n	8003a66 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d01f      	beq.n	8003a62 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a22:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 8003a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fd fc1f 	bl	8001270 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a36:	f7fd fc1b 	bl	8001270 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e00f      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f0      	bne.n	8003a36 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	4905      	ldr	r1, [pc, #20]	; (8003a70 <HAL_RCC_OscConfig+0x82c>)
 8003a5a:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_RCC_OscConfig+0x830>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60cb      	str	r3, [r1, #12]
 8003a60:	e001      	b.n	8003a66 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	feeefffc 	.word	0xfeeefffc

08003a78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e11d      	b.n	8003ccc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a90:	4b90      	ldr	r3, [pc, #576]	; (8003cd4 <HAL_RCC_ClockConfig+0x25c>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 030f 	and.w	r3, r3, #15
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d910      	bls.n	8003ac0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a9e:	4b8d      	ldr	r3, [pc, #564]	; (8003cd4 <HAL_RCC_ClockConfig+0x25c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 020f 	bic.w	r2, r3, #15
 8003aa6:	498b      	ldr	r1, [pc, #556]	; (8003cd4 <HAL_RCC_ClockConfig+0x25c>)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aae:	4b89      	ldr	r3, [pc, #548]	; (8003cd4 <HAL_RCC_ClockConfig+0x25c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e105      	b.n	8003ccc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d010      	beq.n	8003aee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	4b81      	ldr	r3, [pc, #516]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d908      	bls.n	8003aee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003adc:	4b7e      	ldr	r3, [pc, #504]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	497b      	ldr	r1, [pc, #492]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d079      	beq.n	8003bee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d11e      	bne.n	8003b40 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b02:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0dc      	b.n	8003ccc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003b12:	f000 f9dd 	bl	8003ed0 <RCC_GetSysClockFreqFromPLLSource>
 8003b16:	4603      	mov	r3, r0
 8003b18:	4a70      	ldr	r2, [pc, #448]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d946      	bls.n	8003bac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b1e:	4b6e      	ldr	r3, [pc, #440]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d140      	bne.n	8003bac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b2a:	4b6b      	ldr	r3, [pc, #428]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b32:	4a69      	ldr	r2, [pc, #420]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e035      	b.n	8003bac <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b48:	4b63      	ldr	r3, [pc, #396]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d115      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e0b9      	b.n	8003ccc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d107      	bne.n	8003b70 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b60:	4b5d      	ldr	r3, [pc, #372]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d109      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0ad      	b.n	8003ccc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b70:	4b59      	ldr	r3, [pc, #356]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0a5      	b.n	8003ccc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003b80:	f000 f8b4 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4a55      	ldr	r2, [pc, #340]	; (8003cdc <HAL_RCC_ClockConfig+0x264>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d90f      	bls.n	8003bac <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b8c:	4b52      	ldr	r3, [pc, #328]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b98:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ba0:	4a4d      	ldr	r2, [pc, #308]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ba6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bac:	4b4a      	ldr	r3, [pc, #296]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f023 0203 	bic.w	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4947      	ldr	r1, [pc, #284]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bbe:	f7fd fb57 	bl	8001270 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc4:	e00a      	b.n	8003bdc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc6:	f7fd fb53 	bl	8001270 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e077      	b.n	8003ccc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bdc:	4b3e      	ldr	r3, [pc, #248]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 020c 	and.w	r2, r3, #12
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d1eb      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	2b80      	cmp	r3, #128	; 0x80
 8003bf2:	d105      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bf4:	4b38      	ldr	r3, [pc, #224]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4a37      	ldr	r2, [pc, #220]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d010      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d208      	bcs.n	8003c2e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c1c:	4b2e      	ldr	r3, [pc, #184]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	492b      	ldr	r1, [pc, #172]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2e:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_RCC_ClockConfig+0x25c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d210      	bcs.n	8003c5e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3c:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_RCC_ClockConfig+0x25c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 020f 	bic.w	r2, r3, #15
 8003c44:	4923      	ldr	r1, [pc, #140]	; (8003cd4 <HAL_RCC_ClockConfig+0x25c>)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4c:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <HAL_RCC_ClockConfig+0x25c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 030f 	and.w	r3, r3, #15
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e036      	b.n	8003ccc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0304 	and.w	r3, r3, #4
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	4918      	ldr	r1, [pc, #96]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d009      	beq.n	8003c9c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	4910      	ldr	r1, [pc, #64]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c9c:	f000 f826 	bl	8003cec <HAL_RCC_GetSysClockFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 030f 	and.w	r3, r3, #15
 8003cac:	490c      	ldr	r1, [pc, #48]	; (8003ce0 <HAL_RCC_ClockConfig+0x268>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <HAL_RCC_ClockConfig+0x26c>)
 8003cba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <HAL_RCC_ClockConfig+0x270>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fd fa85 	bl	80011d0 <HAL_InitTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40022000 	.word	0x40022000
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	04c4b400 	.word	0x04c4b400
 8003ce0:	080053f4 	.word	0x080053f4
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	20000004 	.word	0x20000004

08003cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b089      	sub	sp, #36	; 0x24
 8003cf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfa:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d04:	4b3b      	ldr	r3, [pc, #236]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0x34>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b0c      	cmp	r3, #12
 8003d18:	d121      	bne.n	8003d5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d11e      	bne.n	8003d5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d20:	4b34      	ldr	r3, [pc, #208]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0308 	and.w	r3, r3, #8
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d107      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d2c:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	e005      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d3c:	4b2d      	ldr	r3, [pc, #180]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	091b      	lsrs	r3, r3, #4
 8003d42:	f003 030f 	and.w	r3, r3, #15
 8003d46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d48:	4a2b      	ldr	r2, [pc, #172]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10d      	bne.n	8003d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d5c:	e00a      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d102      	bne.n	8003d6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d64:	4b25      	ldr	r3, [pc, #148]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	e004      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d70:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2b0c      	cmp	r3, #12
 8003d78:	d134      	bne.n	8003de4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d003      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0xa6>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d003      	beq.n	8003d98 <HAL_RCC_GetSysClockFreq+0xac>
 8003d90:	e005      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d92:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8003d94:	617b      	str	r3, [r7, #20]
      break;
 8003d96:	e005      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d9a:	617b      	str	r3, [r7, #20]
      break;
 8003d9c:	e002      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	617b      	str	r3, [r7, #20]
      break;
 8003da2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da4:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3301      	adds	r3, #1
 8003db0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	fb03 f202 	mul.w	r2, r3, r2
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003dca:	4b0a      	ldr	r3, [pc, #40]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	0e5b      	lsrs	r3, r3, #25
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003de4:	69bb      	ldr	r3, [r7, #24]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	08005404 	.word	0x08005404
 8003dfc:	00f42400 	.word	0x00f42400
 8003e00:	007a1200 	.word	0x007a1200

08003e04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	20000000 	.word	0x20000000

08003e1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e28:	4b27      	ldr	r3, [pc, #156]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e34:	f7ff f942 	bl	80030bc <HAL_PWREx_GetVoltageRange>
 8003e38:	6178      	str	r0, [r7, #20]
 8003e3a:	e014      	b.n	8003e66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e3c:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	4a21      	ldr	r2, [pc, #132]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e46:	6593      	str	r3, [r2, #88]	; 0x58
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e54:	f7ff f932 	bl	80030bc <HAL_PWREx_GetVoltageRange>
 8003e58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	4a1a      	ldr	r2, [pc, #104]	; (8003ec8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6c:	d10b      	bne.n	8003e86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b80      	cmp	r3, #128	; 0x80
 8003e72:	d913      	bls.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2ba0      	cmp	r3, #160	; 0xa0
 8003e78:	d902      	bls.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	613b      	str	r3, [r7, #16]
 8003e7e:	e00d      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e80:	2301      	movs	r3, #1
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	e00a      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b7f      	cmp	r3, #127	; 0x7f
 8003e8a:	d902      	bls.n	8003e92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	e004      	b.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b70      	cmp	r3, #112	; 0x70
 8003e96:	d101      	bne.n	8003e9c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e98:	2301      	movs	r3, #1
 8003e9a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f023 020f 	bic.w	r2, r3, #15
 8003ea4:	4909      	ldr	r1, [pc, #36]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003eac:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d001      	beq.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40022000 	.word	0x40022000

08003ed0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ed6:	4b2d      	ldr	r3, [pc, #180]	; (8003f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b03      	cmp	r3, #3
 8003ee4:	d00b      	beq.n	8003efe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d825      	bhi.n	8003f38 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d008      	beq.n	8003f04 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d11f      	bne.n	8003f38 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003efa:	613b      	str	r3, [r7, #16]
    break;
 8003efc:	e01f      	b.n	8003f3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003efe:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003f00:	613b      	str	r3, [r7, #16]
    break;
 8003f02:	e01c      	b.n	8003f3e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f04:	4b21      	ldr	r3, [pc, #132]	; (8003f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d107      	bne.n	8003f20 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f10:	4b1e      	ldr	r3, [pc, #120]	; (8003f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f16:	0a1b      	lsrs	r3, r3, #8
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	e005      	b.n	8003f2c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f20:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003f2c:	4a1a      	ldr	r2, [pc, #104]	; (8003f98 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f34:	613b      	str	r3, [r7, #16]
    break;
 8003f36:	e002      	b.n	8003f3e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]
    break;
 8003f3c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	091b      	lsrs	r3, r3, #4
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	3301      	adds	r3, #1
 8003f4a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	fb03 f202 	mul.w	r2, r3, r2
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	0e5b      	lsrs	r3, r3, #25
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	3301      	adds	r3, #1
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f7e:	683b      	ldr	r3, [r7, #0]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	371c      	adds	r7, #28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	00f42400 	.word	0x00f42400
 8003f94:	007a1200 	.word	0x007a1200
 8003f98:	08005404 	.word	0x08005404

08003f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fa8:	2300      	movs	r3, #0
 8003faa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d040      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fbc:	2b80      	cmp	r3, #128	; 0x80
 8003fbe:	d02a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d825      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fc4:	2b60      	cmp	r3, #96	; 0x60
 8003fc6:	d026      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fc8:	2b60      	cmp	r3, #96	; 0x60
 8003fca:	d821      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fcc:	2b40      	cmp	r3, #64	; 0x40
 8003fce:	d006      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d81d      	bhi.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d010      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003fdc:	e018      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fde:	4b89      	ldr	r3, [pc, #548]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a88      	ldr	r2, [pc, #544]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fea:	e015      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 fb02 	bl	80045fc <RCCEx_PLLSAI1_Config>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ffc:	e00c      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3320      	adds	r3, #32
 8004002:	2100      	movs	r1, #0
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fbed 	bl	80047e4 <RCCEx_PLLSAI2_Config>
 800400a:	4603      	mov	r3, r0
 800400c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800400e:	e003      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	74fb      	strb	r3, [r7, #19]
      break;
 8004014:	e000      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004016:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800401e:	4b79      	ldr	r3, [pc, #484]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004024:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800402c:	4975      	ldr	r1, [pc, #468]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004034:	e001      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d047      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404e:	d030      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004054:	d82a      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800405a:	d02a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800405c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004060:	d824      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004066:	d008      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800406c:	d81e      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x110>
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004076:	d010      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004078:	e018      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800407a:	4b62      	ldr	r3, [pc, #392]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	4a61      	ldr	r2, [pc, #388]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004086:	e015      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3304      	adds	r3, #4
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fab4 	bl	80045fc <RCCEx_PLLSAI1_Config>
 8004094:	4603      	mov	r3, r0
 8004096:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004098:	e00c      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3320      	adds	r3, #32
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fb9f 	bl	80047e4 <RCCEx_PLLSAI2_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040aa:	e003      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	74fb      	strb	r3, [r7, #19]
      break;
 80040b0:	e000      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80040b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10b      	bne.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040ba:	4b52      	ldr	r3, [pc, #328]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	494e      	ldr	r1, [pc, #312]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040d0:	e001      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d2:	7cfb      	ldrb	r3, [r7, #19]
 80040d4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 809f 	beq.w	8004222 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e4:	2300      	movs	r3, #0
 80040e6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040e8:	4b46      	ldr	r3, [pc, #280]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e000      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80040f8:	2300      	movs	r3, #0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00d      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040fe:	4b41      	ldr	r3, [pc, #260]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004102:	4a40      	ldr	r2, [pc, #256]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004108:	6593      	str	r3, [r2, #88]	; 0x58
 800410a:	4b3e      	ldr	r3, [pc, #248]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004112:	60bb      	str	r3, [r7, #8]
 8004114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004116:	2301      	movs	r3, #1
 8004118:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a3a      	ldr	r2, [pc, #232]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004126:	f7fd f8a3 	bl	8001270 <HAL_GetTick>
 800412a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800412c:	e009      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800412e:	f7fd f89f 	bl	8001270 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d902      	bls.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	74fb      	strb	r3, [r7, #19]
        break;
 8004140:	e005      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004142:	4b31      	ldr	r3, [pc, #196]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0ef      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800414e:	7cfb      	ldrb	r3, [r7, #19]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d15b      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004154:	4b2b      	ldr	r3, [pc, #172]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01f      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	429a      	cmp	r2, r3
 8004170:	d019      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004172:	4b24      	ldr	r3, [pc, #144]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800417e:	4b21      	ldr	r3, [pc, #132]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004184:	4a1f      	ldr	r2, [pc, #124]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800419e:	4a19      	ldr	r2, [pc, #100]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d016      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b0:	f7fd f85e 	bl	8001270 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041b6:	e00b      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f7fd f85a 	bl	8001270 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d902      	bls.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	74fb      	strb	r3, [r7, #19]
            break;
 80041ce:	e006      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d0:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0ec      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10c      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041e4:	4b07      	ldr	r3, [pc, #28]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	4903      	ldr	r1, [pc, #12]	; (8004204 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041fc:	e008      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041fe:	7cfb      	ldrb	r3, [r7, #19]
 8004200:	74bb      	strb	r3, [r7, #18]
 8004202:	e005      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004204:	40021000 	.word	0x40021000
 8004208:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004210:	7c7b      	ldrb	r3, [r7, #17]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d105      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004216:	4ba0      	ldr	r3, [pc, #640]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	4a9f      	ldr	r2, [pc, #636]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004220:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800422e:	4b9a      	ldr	r3, [pc, #616]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f023 0203 	bic.w	r2, r3, #3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800423c:	4996      	ldr	r1, [pc, #600]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004250:	4b91      	ldr	r3, [pc, #580]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 020c 	bic.w	r2, r3, #12
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	498e      	ldr	r1, [pc, #568]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004272:	4b89      	ldr	r3, [pc, #548]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004280:	4985      	ldr	r1, [pc, #532]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004294:	4b80      	ldr	r3, [pc, #512]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042a2:	497d      	ldr	r1, [pc, #500]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042b6:	4b78      	ldr	r3, [pc, #480]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c4:	4974      	ldr	r1, [pc, #464]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042d8:	4b6f      	ldr	r3, [pc, #444]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e6:	496c      	ldr	r1, [pc, #432]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042fa:	4b67      	ldr	r3, [pc, #412]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004308:	4963      	ldr	r1, [pc, #396]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800431c:	4b5e      	ldr	r3, [pc, #376]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432a:	495b      	ldr	r1, [pc, #364]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800433e:	4b56      	ldr	r3, [pc, #344]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434c:	4952      	ldr	r1, [pc, #328]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004360:	4b4d      	ldr	r3, [pc, #308]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	494a      	ldr	r1, [pc, #296]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004382:	4b45      	ldr	r3, [pc, #276]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004390:	4941      	ldr	r1, [pc, #260]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043a4:	4b3c      	ldr	r3, [pc, #240]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043aa:	f023 0203 	bic.w	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b2:	4939      	ldr	r1, [pc, #228]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d028      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043c6:	4b34      	ldr	r3, [pc, #208]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	4930      	ldr	r1, [pc, #192]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043e4:	d106      	bne.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043e6:	4b2c      	ldr	r3, [pc, #176]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	4a2b      	ldr	r2, [pc, #172]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f0:	60d3      	str	r3, [r2, #12]
 80043f2:	e011      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043fc:	d10c      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	2101      	movs	r1, #1
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f8f9 	bl	80045fc <RCCEx_PLLSAI1_Config>
 800440a:	4603      	mov	r3, r0
 800440c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800440e:	7cfb      	ldrb	r3, [r7, #19]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004414:	7cfb      	ldrb	r3, [r7, #19]
 8004416:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d04d      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800442c:	d108      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004434:	4a18      	ldr	r2, [pc, #96]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800443a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800443e:	e012      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004442:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004446:	4a14      	ldr	r2, [pc, #80]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004448:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800444c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800445e:	490e      	ldr	r1, [pc, #56]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800446a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446e:	d106      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a08      	ldr	r2, [pc, #32]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800447a:	60d3      	str	r3, [r2, #12]
 800447c:	e020      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004486:	d109      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	4a02      	ldr	r2, [pc, #8]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004492:	60d3      	str	r3, [r2, #12]
 8004494:	e014      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	3304      	adds	r3, #4
 80044aa:	2101      	movs	r1, #1
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 f8a5 	bl	80045fc <RCCEx_PLLSAI1_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80044bc:	7cfb      	ldrb	r3, [r7, #19]
 80044be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d028      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044cc:	4b4a      	ldr	r3, [pc, #296]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044da:	4947      	ldr	r1, [pc, #284]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ea:	d106      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044ec:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4a41      	ldr	r2, [pc, #260]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f6:	60d3      	str	r3, [r2, #12]
 80044f8:	e011      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004502:	d10c      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3304      	adds	r3, #4
 8004508:	2101      	movs	r1, #1
 800450a:	4618      	mov	r0, r3
 800450c:	f000 f876 	bl	80045fc <RCCEx_PLLSAI1_Config>
 8004510:	4603      	mov	r3, r0
 8004512:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004514:	7cfb      	ldrb	r3, [r7, #19]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01e      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800452a:	4b33      	ldr	r3, [pc, #204]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004530:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800453a:	492f      	ldr	r1, [pc, #188]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453c:	4313      	orrs	r3, r2
 800453e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004548:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800454c:	d10c      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2102      	movs	r1, #2
 8004554:	4618      	mov	r0, r3
 8004556:	f000 f851 	bl	80045fc <RCCEx_PLLSAI1_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00b      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004574:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004576:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800457a:	f023 0204 	bic.w	r2, r3, #4
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004584:	491c      	ldr	r1, [pc, #112]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00b      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004598:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800459e:	f023 0218 	bic.w	r2, r3, #24
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a8:	4913      	ldr	r1, [pc, #76]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d017      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045cc:	490a      	ldr	r1, [pc, #40]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045de:	d105      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000

080045fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800460a:	4b72      	ldr	r3, [pc, #456]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00e      	beq.n	8004634 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004616:	4b6f      	ldr	r3, [pc, #444]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0203 	and.w	r2, r3, #3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d103      	bne.n	800462e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
       ||
 800462a:	2b00      	cmp	r3, #0
 800462c:	d142      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	e03f      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d018      	beq.n	800466e <RCCEx_PLLSAI1_Config+0x72>
 800463c:	2b03      	cmp	r3, #3
 800463e:	d825      	bhi.n	800468c <RCCEx_PLLSAI1_Config+0x90>
 8004640:	2b01      	cmp	r3, #1
 8004642:	d002      	beq.n	800464a <RCCEx_PLLSAI1_Config+0x4e>
 8004644:	2b02      	cmp	r3, #2
 8004646:	d009      	beq.n	800465c <RCCEx_PLLSAI1_Config+0x60>
 8004648:	e020      	b.n	800468c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800464a:	4b62      	ldr	r3, [pc, #392]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d11d      	bne.n	8004692 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465a:	e01a      	b.n	8004692 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800465c:	4b5d      	ldr	r3, [pc, #372]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d116      	bne.n	8004696 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466c:	e013      	b.n	8004696 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800466e:	4b59      	ldr	r3, [pc, #356]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800467a:	4b56      	ldr	r3, [pc, #344]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800468a:	e006      	b.n	800469a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
      break;
 8004690:	e004      	b.n	800469c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004692:	bf00      	nop
 8004694:	e002      	b.n	800469c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004696:	bf00      	nop
 8004698:	e000      	b.n	800469c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800469a:	bf00      	nop
    }

    if(status == HAL_OK)
 800469c:	7bfb      	ldrb	r3, [r7, #15]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d108      	bne.n	80046b4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80046a2:	4b4c      	ldr	r3, [pc, #304]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	f023 0203 	bic.w	r2, r3, #3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4949      	ldr	r1, [pc, #292]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 8086 	bne.w	80047c8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046bc:	4b45      	ldr	r3, [pc, #276]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a44      	ldr	r2, [pc, #272]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c8:	f7fc fdd2 	bl	8001270 <HAL_GetTick>
 80046cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ce:	e009      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d0:	f7fc fdce 	bl	8001270 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d902      	bls.n	80046e4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	73fb      	strb	r3, [r7, #15]
        break;
 80046e2:	e005      	b.n	80046f0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046e4:	4b3b      	ldr	r3, [pc, #236]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1ef      	bne.n	80046d0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d168      	bne.n	80047c8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d113      	bne.n	8004724 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046fc:	4b35      	ldr	r3, [pc, #212]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004702:	4013      	ands	r3, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6892      	ldr	r2, [r2, #8]
 8004708:	0211      	lsls	r1, r2, #8
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68d2      	ldr	r2, [r2, #12]
 800470e:	06d2      	lsls	r2, r2, #27
 8004710:	4311      	orrs	r1, r2
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6852      	ldr	r2, [r2, #4]
 8004716:	3a01      	subs	r2, #1
 8004718:	0112      	lsls	r2, r2, #4
 800471a:	430a      	orrs	r2, r1
 800471c:	492d      	ldr	r1, [pc, #180]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800471e:	4313      	orrs	r3, r2
 8004720:	610b      	str	r3, [r1, #16]
 8004722:	e02d      	b.n	8004780 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d115      	bne.n	8004756 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	4b2b      	ldr	r3, [pc, #172]	; (80047dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004730:	4013      	ands	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6892      	ldr	r2, [r2, #8]
 8004736:	0211      	lsls	r1, r2, #8
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6912      	ldr	r2, [r2, #16]
 800473c:	0852      	lsrs	r2, r2, #1
 800473e:	3a01      	subs	r2, #1
 8004740:	0552      	lsls	r2, r2, #21
 8004742:	4311      	orrs	r1, r2
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	6852      	ldr	r2, [r2, #4]
 8004748:	3a01      	subs	r2, #1
 800474a:	0112      	lsls	r2, r2, #4
 800474c:	430a      	orrs	r2, r1
 800474e:	4921      	ldr	r1, [pc, #132]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004750:	4313      	orrs	r3, r2
 8004752:	610b      	str	r3, [r1, #16]
 8004754:	e014      	b.n	8004780 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004756:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	4b21      	ldr	r3, [pc, #132]	; (80047e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800475c:	4013      	ands	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6892      	ldr	r2, [r2, #8]
 8004762:	0211      	lsls	r1, r2, #8
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6952      	ldr	r2, [r2, #20]
 8004768:	0852      	lsrs	r2, r2, #1
 800476a:	3a01      	subs	r2, #1
 800476c:	0652      	lsls	r2, r2, #25
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6852      	ldr	r2, [r2, #4]
 8004774:	3a01      	subs	r2, #1
 8004776:	0112      	lsls	r2, r2, #4
 8004778:	430a      	orrs	r2, r1
 800477a:	4916      	ldr	r1, [pc, #88]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004786:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800478a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fc fd70 	bl	8001270 <HAL_GetTick>
 8004790:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004792:	e009      	b.n	80047a8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004794:	f7fc fd6c 	bl	8001270 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d902      	bls.n	80047a8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	73fb      	strb	r3, [r7, #15]
          break;
 80047a6:	e005      	b.n	80047b4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d0ef      	beq.n	8004794 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047b4:	7bfb      	ldrb	r3, [r7, #15]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047ba:	4b06      	ldr	r3, [pc, #24]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	4904      	ldr	r1, [pc, #16]	; (80047d4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
 80047d8:	07ff800f 	.word	0x07ff800f
 80047dc:	ff9f800f 	.word	0xff9f800f
 80047e0:	f9ff800f 	.word	0xf9ff800f

080047e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047f2:	4b72      	ldr	r3, [pc, #456]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00e      	beq.n	800481c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047fe:	4b6f      	ldr	r3, [pc, #444]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	f003 0203 	and.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	429a      	cmp	r2, r3
 800480c:	d103      	bne.n	8004816 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
       ||
 8004812:	2b00      	cmp	r3, #0
 8004814:	d142      	bne.n	800489c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	73fb      	strb	r3, [r7, #15]
 800481a:	e03f      	b.n	800489c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d018      	beq.n	8004856 <RCCEx_PLLSAI2_Config+0x72>
 8004824:	2b03      	cmp	r3, #3
 8004826:	d825      	bhi.n	8004874 <RCCEx_PLLSAI2_Config+0x90>
 8004828:	2b01      	cmp	r3, #1
 800482a:	d002      	beq.n	8004832 <RCCEx_PLLSAI2_Config+0x4e>
 800482c:	2b02      	cmp	r3, #2
 800482e:	d009      	beq.n	8004844 <RCCEx_PLLSAI2_Config+0x60>
 8004830:	e020      	b.n	8004874 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004832:	4b62      	ldr	r3, [pc, #392]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d11d      	bne.n	800487a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004842:	e01a      	b.n	800487a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004844:	4b5d      	ldr	r3, [pc, #372]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d116      	bne.n	800487e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004854:	e013      	b.n	800487e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004856:	4b59      	ldr	r3, [pc, #356]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004862:	4b56      	ldr	r3, [pc, #344]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d109      	bne.n	8004882 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004872:	e006      	b.n	8004882 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	73fb      	strb	r3, [r7, #15]
      break;
 8004878:	e004      	b.n	8004884 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800487a:	bf00      	nop
 800487c:	e002      	b.n	8004884 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800487e:	bf00      	nop
 8004880:	e000      	b.n	8004884 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004882:	bf00      	nop
    }

    if(status == HAL_OK)
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800488a:	4b4c      	ldr	r3, [pc, #304]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4949      	ldr	r1, [pc, #292]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004898:	4313      	orrs	r3, r2
 800489a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 8086 	bne.w	80049b0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048a4:	4b45      	ldr	r3, [pc, #276]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a44      	ldr	r2, [pc, #272]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80048aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b0:	f7fc fcde 	bl	8001270 <HAL_GetTick>
 80048b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048b6:	e009      	b.n	80048cc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048b8:	f7fc fcda 	bl	8001270 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d902      	bls.n	80048cc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	73fb      	strb	r3, [r7, #15]
        break;
 80048ca:	e005      	b.n	80048d8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048cc:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ef      	bne.n	80048b8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d168      	bne.n	80049b0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d113      	bne.n	800490c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048e4:	4b35      	ldr	r3, [pc, #212]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	4b35      	ldr	r3, [pc, #212]	; (80049c0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6892      	ldr	r2, [r2, #8]
 80048f0:	0211      	lsls	r1, r2, #8
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	68d2      	ldr	r2, [r2, #12]
 80048f6:	06d2      	lsls	r2, r2, #27
 80048f8:	4311      	orrs	r1, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6852      	ldr	r2, [r2, #4]
 80048fe:	3a01      	subs	r2, #1
 8004900:	0112      	lsls	r2, r2, #4
 8004902:	430a      	orrs	r2, r1
 8004904:	492d      	ldr	r1, [pc, #180]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004906:	4313      	orrs	r3, r2
 8004908:	614b      	str	r3, [r1, #20]
 800490a:	e02d      	b.n	8004968 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d115      	bne.n	800493e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004912:	4b2a      	ldr	r3, [pc, #168]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004914:	695a      	ldr	r2, [r3, #20]
 8004916:	4b2b      	ldr	r3, [pc, #172]	; (80049c4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004918:	4013      	ands	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6892      	ldr	r2, [r2, #8]
 800491e:	0211      	lsls	r1, r2, #8
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6912      	ldr	r2, [r2, #16]
 8004924:	0852      	lsrs	r2, r2, #1
 8004926:	3a01      	subs	r2, #1
 8004928:	0552      	lsls	r2, r2, #21
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6852      	ldr	r2, [r2, #4]
 8004930:	3a01      	subs	r2, #1
 8004932:	0112      	lsls	r2, r2, #4
 8004934:	430a      	orrs	r2, r1
 8004936:	4921      	ldr	r1, [pc, #132]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004938:	4313      	orrs	r3, r2
 800493a:	614b      	str	r3, [r1, #20]
 800493c:	e014      	b.n	8004968 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800493e:	4b1f      	ldr	r3, [pc, #124]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	4b21      	ldr	r3, [pc, #132]	; (80049c8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6892      	ldr	r2, [r2, #8]
 800494a:	0211      	lsls	r1, r2, #8
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6952      	ldr	r2, [r2, #20]
 8004950:	0852      	lsrs	r2, r2, #1
 8004952:	3a01      	subs	r2, #1
 8004954:	0652      	lsls	r2, r2, #25
 8004956:	4311      	orrs	r1, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6852      	ldr	r2, [r2, #4]
 800495c:	3a01      	subs	r2, #1
 800495e:	0112      	lsls	r2, r2, #4
 8004960:	430a      	orrs	r2, r1
 8004962:	4916      	ldr	r1, [pc, #88]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004964:	4313      	orrs	r3, r2
 8004966:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004968:	4b14      	ldr	r3, [pc, #80]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a13      	ldr	r2, [pc, #76]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 800496e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004972:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fc fc7c 	bl	8001270 <HAL_GetTick>
 8004978:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800497a:	e009      	b.n	8004990 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800497c:	f7fc fc78 	bl	8001270 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d902      	bls.n	8004990 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	73fb      	strb	r3, [r7, #15]
          break;
 800498e:	e005      	b.n	800499c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004990:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0ef      	beq.n	800497c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049a2:	4b06      	ldr	r3, [pc, #24]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a4:	695a      	ldr	r2, [r3, #20]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	4904      	ldr	r1, [pc, #16]	; (80049bc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ac:	4313      	orrs	r3, r2
 80049ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40021000 	.word	0x40021000
 80049c0:	07ff800f 	.word	0x07ff800f
 80049c4:	ff9f800f 	.word	0xff9f800f
 80049c8:	f9ff800f 	.word	0xf9ff800f

080049cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d101      	bne.n	80049de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e049      	b.n	8004a72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d106      	bne.n	80049f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f7fc fb40 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3304      	adds	r3, #4
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4610      	mov	r0, r2
 8004a0c:	f000 fa9a 	bl	8004f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d001      	beq.n	8004a94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e04f      	b.n	8004b34 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2202      	movs	r2, #2
 8004a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a23      	ldr	r2, [pc, #140]	; (8004b40 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d01d      	beq.n	8004af2 <HAL_TIM_Base_Start_IT+0x76>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004abe:	d018      	beq.n	8004af2 <HAL_TIM_Base_Start_IT+0x76>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_TIM_Base_Start_IT+0x76>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00e      	beq.n	8004af2 <HAL_TIM_Base_Start_IT+0x76>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_TIM_Base_Start_IT+0xd0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_TIM_Base_Start_IT+0x76>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d004      	beq.n	8004af2 <HAL_TIM_Base_Start_IT+0x76>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <HAL_TIM_Base_Start_IT+0xd8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d115      	bne.n	8004b1e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	4b17      	ldr	r3, [pc, #92]	; (8004b58 <HAL_TIM_Base_Start_IT+0xdc>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b06      	cmp	r3, #6
 8004b02:	d015      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0xb4>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0a:	d011      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b1c:	e008      	b.n	8004b30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0201 	orr.w	r2, r2, #1
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	e000      	b.n	8004b32 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800
 8004b4c:	40000c00 	.word	0x40000c00
 8004b50:	40013400 	.word	0x40013400
 8004b54:	40014000 	.word	0x40014000
 8004b58:	00010007 	.word	0x00010007

08004b5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d020      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01b      	beq.n	8004bc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0202 	mvn.w	r2, #2
 8004b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f9ad 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f99f 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f9b0 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 0304 	and.w	r3, r3, #4
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d020      	beq.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01b      	beq.n	8004c0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0204 	mvn.w	r2, #4
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f987 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f979 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f98a 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d020      	beq.n	8004c58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01b      	beq.n	8004c58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0208 	mvn.w	r2, #8
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f961 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f953 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f964 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 0310 	and.w	r3, r3, #16
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d020      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01b      	beq.n	8004ca4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0210 	mvn.w	r2, #16
 8004c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2208      	movs	r2, #8
 8004c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f93b 	bl	8004f06 <HAL_TIM_IC_CaptureCallback>
 8004c90:	e005      	b.n	8004c9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 f92d 	bl	8004ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 f93e 	bl	8004f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d007      	beq.n	8004cc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f06f 0201 	mvn.w	r2, #1
 8004cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fc f84c 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00c      	beq.n	8004cec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 faf2 	bl	80052d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d00c      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d007      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 faea 	bl	80052e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00c      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f8fd 	bl	8004f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d007      	beq.n	8004d58 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0220 	mvn.w	r2, #32
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fab2 	bl	80052bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d58:	bf00      	nop
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_TIM_ConfigClockSource+0x1c>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e0b6      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x18a>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db8:	d03e      	beq.n	8004e38 <HAL_TIM_ConfigClockSource+0xd8>
 8004dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dbe:	f200 8087 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x170>
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	f000 8086 	beq.w	8004ed6 <HAL_TIM_ConfigClockSource+0x176>
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d87f      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x170>
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d01a      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0xaa>
 8004dd4:	2b70      	cmp	r3, #112	; 0x70
 8004dd6:	d87b      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x170>
 8004dd8:	2b60      	cmp	r3, #96	; 0x60
 8004dda:	d050      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x11e>
 8004ddc:	2b60      	cmp	r3, #96	; 0x60
 8004dde:	d877      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x170>
 8004de0:	2b50      	cmp	r3, #80	; 0x50
 8004de2:	d03c      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0xfe>
 8004de4:	2b50      	cmp	r3, #80	; 0x50
 8004de6:	d873      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x170>
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d058      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x13e>
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d86f      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x170>
 8004df0:	2b30      	cmp	r3, #48	; 0x30
 8004df2:	d064      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x15e>
 8004df4:	2b30      	cmp	r3, #48	; 0x30
 8004df6:	d86b      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x170>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d060      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x15e>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d867      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x170>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05c      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x15e>
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d05a      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x15e>
 8004e08:	e062      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e1a:	f000 f9a7 	bl	800516c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	609a      	str	r2, [r3, #8]
      break;
 8004e36:	e04f      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e48:	f000 f990 	bl	800516c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e5a:	609a      	str	r2, [r3, #8]
      break;
 8004e5c:	e03c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 f904 	bl	8005078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2150      	movs	r1, #80	; 0x50
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 f95d 	bl	8005136 <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e02c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 f923 	bl	80050d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2160      	movs	r1, #96	; 0x60
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f94d 	bl	8005136 <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e01c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f000 f8e4 	bl	8005078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2140      	movs	r1, #64	; 0x40
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f93d 	bl	8005136 <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e00c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f000 f934 	bl	8005136 <TIM_ITRx_SetConfig>
      break;
 8004ece:	e003      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a40      	ldr	r2, [pc, #256]	; (8005058 <TIM_Base_SetConfig+0x114>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f62:	d00f      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3d      	ldr	r2, [pc, #244]	; (800505c <TIM_Base_SetConfig+0x118>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00b      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3c      	ldr	r2, [pc, #240]	; (8005060 <TIM_Base_SetConfig+0x11c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a3b      	ldr	r2, [pc, #236]	; (8005064 <TIM_Base_SetConfig+0x120>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0x40>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a3a      	ldr	r2, [pc, #232]	; (8005068 <TIM_Base_SetConfig+0x124>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d108      	bne.n	8004f96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2f      	ldr	r2, [pc, #188]	; (8005058 <TIM_Base_SetConfig+0x114>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01f      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fa4:	d01b      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2c      	ldr	r2, [pc, #176]	; (800505c <TIM_Base_SetConfig+0x118>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d017      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2b      	ldr	r2, [pc, #172]	; (8005060 <TIM_Base_SetConfig+0x11c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <TIM_Base_SetConfig+0x120>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00f      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a29      	ldr	r2, [pc, #164]	; (8005068 <TIM_Base_SetConfig+0x124>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a28      	ldr	r2, [pc, #160]	; (800506c <TIM_Base_SetConfig+0x128>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a27      	ldr	r2, [pc, #156]	; (8005070 <TIM_Base_SetConfig+0x12c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_Base_SetConfig+0x9a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a26      	ldr	r2, [pc, #152]	; (8005074 <TIM_Base_SetConfig+0x130>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a10      	ldr	r2, [pc, #64]	; (8005058 <TIM_Base_SetConfig+0x114>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00f      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a12      	ldr	r2, [pc, #72]	; (8005068 <TIM_Base_SetConfig+0x124>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a11      	ldr	r2, [pc, #68]	; (800506c <TIM_Base_SetConfig+0x128>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a10      	ldr	r2, [pc, #64]	; (8005070 <TIM_Base_SetConfig+0x12c>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_Base_SetConfig+0xf8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a0f      	ldr	r2, [pc, #60]	; (8005074 <TIM_Base_SetConfig+0x130>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d103      	bne.n	8005044 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	615a      	str	r2, [r3, #20]
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40000c00 	.word	0x40000c00
 8005068:	40013400 	.word	0x40013400
 800506c:	40014000 	.word	0x40014000
 8005070:	40014400 	.word	0x40014400
 8005074:	40014800 	.word	0x40014800

08005078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	f023 0201 	bic.w	r2, r3, #1
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	011b      	lsls	r3, r3, #4
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f023 030a 	bic.w	r3, r3, #10
 80050b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b087      	sub	sp, #28
 80050da:	af00      	add	r7, sp, #0
 80050dc:	60f8      	str	r0, [r7, #12]
 80050de:	60b9      	str	r1, [r7, #8]
 80050e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f023 0210 	bic.w	r2, r3, #16
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	031b      	lsls	r3, r3, #12
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005112:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	f043 0307 	orr.w	r3, r3, #7
 8005158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	609a      	str	r2, [r3, #8]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	021a      	lsls	r2, r3, #8
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	431a      	orrs	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4313      	orrs	r3, r2
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	609a      	str	r2, [r3, #8]
}
 80051a0:	bf00      	nop
 80051a2:	371c      	adds	r7, #28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d101      	bne.n	80051c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e068      	b.n	8005296 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a2e      	ldr	r2, [pc, #184]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2d      	ldr	r2, [pc, #180]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d108      	bne.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01d      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d018      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a1b      	ldr	r2, [pc, #108]	; (80052ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a1a      	ldr	r2, [pc, #104]	; (80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a18      	ldr	r2, [pc, #96]	; (80052b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a13      	ldr	r2, [pc, #76]	; (80052a8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d10c      	bne.n	8005284 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3714      	adds	r7, #20
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40013400 	.word	0x40013400
 80052ac:	40000400 	.word	0x40000400
 80052b0:	40000800 	.word	0x40000800
 80052b4:	40000c00 	.word	0x40000c00
 80052b8:	40014000 	.word	0x40014000

080052bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <arm_sin_f32>:
 80052f8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005378 <arm_sin_f32+0x80>
 80052fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005300:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005308:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800530c:	d504      	bpl.n	8005318 <arm_sin_f32+0x20>
 800530e:	ee17 3a90 	vmov	r3, s15
 8005312:	3b01      	subs	r3, #1
 8005314:	ee07 3a90 	vmov	s15, r3
 8005318:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800531c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800537c <arm_sin_f32+0x84>
 8005320:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005324:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005328:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800532c:	ee17 3a90 	vmov	r3, s15
 8005330:	b29b      	uxth	r3, r3
 8005332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005336:	d21a      	bcs.n	800536e <arm_sin_f32+0x76>
 8005338:	ee07 3a90 	vmov	s15, r3
 800533c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005340:	1c59      	adds	r1, r3, #1
 8005342:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005346:	4a0e      	ldr	r2, [pc, #56]	; (8005380 <arm_sin_f32+0x88>)
 8005348:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800534c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005350:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005354:	ed93 7a00 	vldr	s14, [r3]
 8005358:	edd2 6a00 	vldr	s13, [r2]
 800535c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005360:	ee20 0a26 	vmul.f32	s0, s0, s13
 8005364:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005368:	ee37 0a80 	vadd.f32	s0, s15, s0
 800536c:	4770      	bx	lr
 800536e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005372:	2101      	movs	r1, #1
 8005374:	2300      	movs	r3, #0
 8005376:	e7e6      	b.n	8005346 <arm_sin_f32+0x4e>
 8005378:	3e22f983 	.word	0x3e22f983
 800537c:	44000000 	.word	0x44000000
 8005380:	08005434 	.word	0x08005434

08005384 <memset>:
 8005384:	4402      	add	r2, r0
 8005386:	4603      	mov	r3, r0
 8005388:	4293      	cmp	r3, r2
 800538a:	d100      	bne.n	800538e <memset+0xa>
 800538c:	4770      	bx	lr
 800538e:	f803 1b01 	strb.w	r1, [r3], #1
 8005392:	e7f9      	b.n	8005388 <memset+0x4>

08005394 <__libc_init_array>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	4d0d      	ldr	r5, [pc, #52]	; (80053cc <__libc_init_array+0x38>)
 8005398:	4c0d      	ldr	r4, [pc, #52]	; (80053d0 <__libc_init_array+0x3c>)
 800539a:	1b64      	subs	r4, r4, r5
 800539c:	10a4      	asrs	r4, r4, #2
 800539e:	2600      	movs	r6, #0
 80053a0:	42a6      	cmp	r6, r4
 80053a2:	d109      	bne.n	80053b8 <__libc_init_array+0x24>
 80053a4:	4d0b      	ldr	r5, [pc, #44]	; (80053d4 <__libc_init_array+0x40>)
 80053a6:	4c0c      	ldr	r4, [pc, #48]	; (80053d8 <__libc_init_array+0x44>)
 80053a8:	f000 f818 	bl	80053dc <_init>
 80053ac:	1b64      	subs	r4, r4, r5
 80053ae:	10a4      	asrs	r4, r4, #2
 80053b0:	2600      	movs	r6, #0
 80053b2:	42a6      	cmp	r6, r4
 80053b4:	d105      	bne.n	80053c2 <__libc_init_array+0x2e>
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053bc:	4798      	blx	r3
 80053be:	3601      	adds	r6, #1
 80053c0:	e7ee      	b.n	80053a0 <__libc_init_array+0xc>
 80053c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c6:	4798      	blx	r3
 80053c8:	3601      	adds	r6, #1
 80053ca:	e7f2      	b.n	80053b2 <__libc_init_array+0x1e>
 80053cc:	08005c38 	.word	0x08005c38
 80053d0:	08005c38 	.word	0x08005c38
 80053d4:	08005c38 	.word	0x08005c38
 80053d8:	08005c3c 	.word	0x08005c3c

080053dc <_init>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	bf00      	nop
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr

080053e8 <_fini>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr
