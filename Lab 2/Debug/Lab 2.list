
Lab 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004934  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005338  08005338  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005338  08005338  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005338  08005338  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005338  08005338  00015338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  0800534c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  0800534c  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d0bd  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001dd7  00000000  00000000  0002d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  0002ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000766  00000000  00000000  0002f9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ad9c  00000000  00000000  0003010e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa9b  00000000  00000000  0005aeaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010cff1  00000000  00000000  00065945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002920  00000000  00000000  00172938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00175258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  001752ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  001753a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08004adc 	.word	0x08004adc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08004adc 	.word	0x08004adc

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2f>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a4:	bf24      	itt	cs
 80009a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ae:	d90d      	bls.n	80009cc <__aeabi_d2f+0x30>
 80009b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c4:	bf08      	it	eq
 80009c6:	f020 0001 	biceq.w	r0, r0, #1
 80009ca:	4770      	bx	lr
 80009cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009d0:	d121      	bne.n	8000a16 <__aeabi_d2f+0x7a>
 80009d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d6:	bfbc      	itt	lt
 80009d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	4770      	bxlt	lr
 80009de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e6:	f1c2 0218 	rsb	r2, r2, #24
 80009ea:	f1c2 0c20 	rsb	ip, r2, #32
 80009ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80009f2:	fa20 f002 	lsr.w	r0, r0, r2
 80009f6:	bf18      	it	ne
 80009f8:	f040 0001 	orrne.w	r0, r0, #1
 80009fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a08:	ea40 000c 	orr.w	r0, r0, ip
 8000a0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a14:	e7cc      	b.n	80009b0 <__aeabi_d2f+0x14>
 8000a16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a1a:	d107      	bne.n	8000a2c <__aeabi_d2f+0x90>
 8000a1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a20:	bf1e      	ittt	ne
 8000a22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a2a:	4770      	bxne	lr
 8000a2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <ADC_Voltage_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* ADC Voltage Initialization */
void ADC_Voltage_Init(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
	// ADC for voltage by using polling
	  ADC_ChannelConfTypeDef sConfig = {0};
 8000a42:	463b      	mov	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
 8000a50:	615a      	str	r2, [r3, #20]
	  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000a52:	4b0a      	ldr	r3, [pc, #40]	; (8000a7c <ADC_Voltage_Init+0x40>)
 8000a54:	603b      	str	r3, [r7, #0]
	  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000a56:	2306      	movs	r3, #6
 8000a58:	60bb      	str	r3, [r7, #8]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a5a:	2306      	movs	r3, #6
 8000a5c:	607b      	str	r3, [r7, #4]

	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <ADC_Voltage_Init+0x44>)
 8000a64:	f001 f916 	bl	8001c94 <HAL_ADC_ConfigChannel>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <ADC_Voltage_Init+0x36>
		  Error_Handler();
 8000a6e:	f000 fac7 	bl	8001000 <Error_Handler>
	  }

}
 8000a72:	bf00      	nop
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	80000001 	.word	0x80000001
 8000a80:	20000028 	.word	0x20000028

08000a84 <ADC_Temperature_Init>:
/* ADC Temperature Initialization */
void ADC_Temperature_Init(){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <ADC_Temperature_Init+0x40>)
 8000a9c:	603b      	str	r3, [r7, #0]
	sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	607b      	str	r3, [r7, #4]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK){
 8000aa6:	463b      	mov	r3, r7
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <ADC_Temperature_Init+0x44>)
 8000aac:	f001 f8f2 	bl	8001c94 <HAL_ADC_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <ADC_Temperature_Init+0x36>
		Error_Handler();
 8000ab6:	f000 faa3 	bl	8001000 <Error_Handler>
	}

}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	c7520000 	.word	0xc7520000
 8000ac8:	20000028 	.word	0x20000028

08000acc <Voltage_Conversion>:

/*
 * Formula found in the Chip Document p692
 * @return value is in Volts
*/
float Voltage_Conversion(uint32_t raw_ADC_voltage_value){
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

	return 3000 * (*VREFINT)/ raw_ADC_voltage_value;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <Voltage_Conversion+0x34>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	ee07 3a90 	vmov	s15, r3
 8000aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000af2:	eeb0 0a67 	vmov.f32	s0, s15
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	1fff75aa 	.word	0x1fff75aa

08000b04 <Temperature_Conversion>:

/*
 * Formula found in the Chip Document p690
 * @return value is in degrees Celsius
*/
float Temperature_Conversion(uint32_t raw_ADC_temperature_value, float VREF){
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	ed87 0a00 	vstr	s0, [r7]

	float ts_data = raw_ADC_temperature_value * VREF/3000;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b1a:	edd7 7a00 	vldr	s15, [r7]
 8000b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b22:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000b80 <Temperature_Conversion+0x7c>
 8000b26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b2a:	edc7 7a03 	vstr	s15, [r7, #12]

	return (TS_CAL2_TEMP - TS_CAL1_TEMP)/ ((float)*TS_CAL2 - (float)*TS_CAL1) * ((float)ts_data - (float)*TS_CAL1) + 30;
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <Temperature_Conversion+0x80>)
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	ee07 3a90 	vmov	s15, r3
 8000b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <Temperature_Conversion+0x84>)
 8000b3c:	881b      	ldrh	r3, [r3, #0]
 8000b3e:	ee07 3a90 	vmov	s15, r3
 8000b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b4a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8000b8c <Temperature_Conversion+0x88>
 8000b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <Temperature_Conversion+0x84>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	ee07 3a90 	vmov	s15, r3
 8000b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b5e:	edd7 6a03 	vldr	s13, [r7, #12]
 8000b62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b6a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000b6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000b72:	eeb0 0a67 	vmov.f32	s0, s15
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	453b8000 	.word	0x453b8000
 8000b84:	1fff75ca 	.word	0x1fff75ca
 8000b88:	1fff75a8 	.word	0x1fff75a8
 8000b8c:	42c80000 	.word	0x42c80000

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	; 0x28
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b96:	f000 fb44 	bl	8001222 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b9a:	f000 f8df 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9e:	f000 f9d3 	bl	8000f48 <MX_GPIO_Init>
  MX_DAC1_Init();
 8000ba2:	f000 f991 	bl	8000ec8 <MX_DAC1_Init>
  MX_ADC1_Init();
 8000ba6:	f000 f92b 	bl	8000e00 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  GPIO_PinState buttonState;

  uint16_t triangleValue, sawValue =0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	847b      	strh	r3, [r7, #34]	; 0x22
  float sineValue, step = 0;
 8000bae:	f04f 0300 	mov.w	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]

  int flag = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]


  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4863      	ldr	r0, [pc, #396]	; (8000d48 <main+0x1b8>)
 8000bbc:	f001 ff0f 	bl	80029de <HAL_DAC_Start>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8000bc0:	2110      	movs	r1, #16
 8000bc2:	4861      	ldr	r0, [pc, #388]	; (8000d48 <main+0x1b8>)
 8000bc4:	f001 ff0b 	bl	80029de <HAL_DAC_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, triangleValue);
 8000bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	485e      	ldr	r0, [pc, #376]	; (8000d48 <main+0x1b8>)
 8000bd0:	f001 ff57 	bl	8002a82 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, sawValue);
 8000bd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2110      	movs	r1, #16
 8000bda:	485b      	ldr	r0, [pc, #364]	; (8000d48 <main+0x1b8>)
 8000bdc:	f001 ff51 	bl	8002a82 <HAL_DAC_SetValue>

	  if(flag == 0){
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10b      	bne.n	8000bfe <main+0x6e>
		  if (triangleValue < 4095) {
 8000be6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000be8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d803      	bhi.n	8000bf8 <main+0x68>
		  		  triangleValue++;
 8000bf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000bf6:	e00b      	b.n	8000c10 <main+0x80>
		  	  } else {
		  		flag = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
 8000bfc:	e008      	b.n	8000c10 <main+0x80>
		  	  }
	  }else{
		  if(triangleValue > 0) {
 8000bfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <main+0x7c>
		  		  triangleValue--;
 8000c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c06:	3b01      	subs	r3, #1
 8000c08:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000c0a:	e001      	b.n	8000c10 <main+0x80>
		  	} else {
		  		  flag = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
		  		}
	  }


	  if(sawValue < 4095){
 8000c10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d803      	bhi.n	8000c22 <main+0x92>
		  sawValue++;
 8000c1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000c20:	e001      	b.n	8000c26 <main+0x96>
	  }else{
		  sawValue = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	847b      	strh	r3, [r7, #34]	; 0x22
		}

	  sineValue = 4096 * arm_sin_f32(step/3490.658);	//have to do  2*pi*f
 8000c26:	69f8      	ldr	r0, [r7, #28]
 8000c28:	f7ff fc4e 	bl	80004c8 <__aeabi_f2d>
 8000c2c:	a342      	add	r3, pc, #264	; (adr r3, 8000d38 <main+0x1a8>)
 8000c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c32:	f7ff fdcb 	bl	80007cc <__aeabi_ddiv>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f7ff fead 	bl	800099c <__aeabi_d2f>
 8000c42:	4603      	mov	r3, r0
 8000c44:	ee00 3a10 	vmov	s0, r3
 8000c48:	f003 fed6 	bl	80049f8 <arm_sin_f32>
 8000c4c:	eef0 7a40 	vmov.f32	s15, s0
 8000c50:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8000d4c <main+0x1bc>
 8000c54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c58:	edc7 7a05 	vstr	s15, [r7, #20]

	  step = step + 0.1;
 8000c5c:	69f8      	ldr	r0, [r7, #28]
 8000c5e:	f7ff fc33 	bl	80004c8 <__aeabi_f2d>
 8000c62:	a337      	add	r3, pc, #220	; (adr r3, 8000d40 <main+0x1b0>)
 8000c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c68:	f7ff fad0 	bl	800020c <__adddf3>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	460b      	mov	r3, r1
 8000c70:	4610      	mov	r0, r2
 8000c72:	4619      	mov	r1, r3
 8000c74:	f7ff fe92 	bl	800099c <__aeabi_d2f>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	61fb      	str	r3, [r7, #28]





	  HAL_Delay(0.0018);
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f000 fb45 	bl	800130c <HAL_Delay>



	  //Get state of button
	  buttonState =  HAL_GPIO_ReadPin(userButton_GPIO_Port, userButton_Pin);
 8000c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c86:	4832      	ldr	r0, [pc, #200]	; (8000d50 <main+0x1c0>)
 8000c88:	f002 f9fe 	bl	8003088 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	  	  while(!buttonState){
 8000c92:	e00d      	b.n	8000cb0 <main+0x120>
	  		  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

	  		  //Set the LED to On
	  		  	HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c9a:	482e      	ldr	r0, [pc, #184]	; (8000d54 <main+0x1c4>)
 8000c9c:	f002 fa0c 	bl	80030b8 <HAL_GPIO_WritePin>
	  		  //Get state of button
	  		  buttonState = HAL_GPIO_ReadPin(userButton_GPIO_Port, userButton_Pin);
 8000ca0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca4:	482a      	ldr	r0, [pc, #168]	; (8000d50 <main+0x1c0>)
 8000ca6:	f002 f9ef 	bl	8003088 <HAL_GPIO_ReadPin>
 8000caa:	4603      	mov	r3, r0
 8000cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  	  while(!buttonState){
 8000cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0ed      	beq.n	8000c94 <main+0x104>

	  	  }

	  //If the button is not pressed, set the LED to off
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cbe:	4825      	ldr	r0, [pc, #148]	; (8000d54 <main+0x1c4>)
 8000cc0:	f002 f9fa 	bl	80030b8 <HAL_GPIO_WritePin>




	  //Get measure temperature value
	  ADC_Temperature_Init();
 8000cc4:	f7ff fede 	bl	8000a84 <ADC_Temperature_Init>

	  HAL_ADC_Start(&hadc1); // Activates ADC peripheral and starts conversion
 8000cc8:	4823      	ldr	r0, [pc, #140]	; (8000d58 <main+0x1c8>)
 8000cca:	f000 feb1 	bl	8001a30 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK){ // Waits for ADC conversion to be done
 8000cce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cd2:	4821      	ldr	r0, [pc, #132]	; (8000d58 <main+0x1c8>)
 8000cd4:	f000 ff42 	bl	8001b5c <HAL_ADC_PollForConversion>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <main+0x152>
		  Error_Handler();
 8000cde:	f000 f98f 	bl	8001000 <Error_Handler>
	  }

	  uint32_t raw_ADC_temperature_value = HAL_ADC_GetValue(&hadc1); // Retrieve the converted value
 8000ce2:	481d      	ldr	r0, [pc, #116]	; (8000d58 <main+0x1c8>)
 8000ce4:	f000 ffc9 	bl	8001c7a <HAL_ADC_GetValue>
 8000ce8:	6138      	str	r0, [r7, #16]
	  HAL_ADC_Stop(&hadc1); // Stops conversion and disables the ADC peripherals
 8000cea:	481b      	ldr	r0, [pc, #108]	; (8000d58 <main+0x1c8>)
 8000cec:	f000 ff03 	bl	8001af6 <HAL_ADC_Stop>



	  //Get voltage reference value
	  ADC_Voltage_Init();
 8000cf0:	f7ff fea4 	bl	8000a3c <ADC_Voltage_Init>

	  HAL_ADC_Start(&hadc1); // Activates ADC peripheral and starts conversion
 8000cf4:	4818      	ldr	r0, [pc, #96]	; (8000d58 <main+0x1c8>)
 8000cf6:	f000 fe9b 	bl	8001a30 <HAL_ADC_Start>

	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK){ // Waits for ADC conversion to be done
 8000cfa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cfe:	4816      	ldr	r0, [pc, #88]	; (8000d58 <main+0x1c8>)
 8000d00:	f000 ff2c 	bl	8001b5c <HAL_ADC_PollForConversion>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <main+0x17e>
		  Error_Handler();
 8000d0a:	f000 f979 	bl	8001000 <Error_Handler>
	  }

	  uint32_t raw_ADC_voltage_value = HAL_ADC_GetValue(&hadc1); // Retrieve the converted value
 8000d0e:	4812      	ldr	r0, [pc, #72]	; (8000d58 <main+0x1c8>)
 8000d10:	f000 ffb3 	bl	8001c7a <HAL_ADC_GetValue>
 8000d14:	60f8      	str	r0, [r7, #12]
	  HAL_ADC_Stop(&hadc1); // Stops conversion and disables the ADC peripherals
 8000d16:	4810      	ldr	r0, [pc, #64]	; (8000d58 <main+0x1c8>)
 8000d18:	f000 feed 	bl	8001af6 <HAL_ADC_Stop>




	  float VREF = Voltage_Conversion(raw_ADC_voltage_value);
 8000d1c:	68f8      	ldr	r0, [r7, #12]
 8000d1e:	f7ff fed5 	bl	8000acc <Voltage_Conversion>
 8000d22:	ed87 0a02 	vstr	s0, [r7, #8]

	  float temperature = Temperature_Conversion(raw_ADC_temperature_value, VREF);
 8000d26:	ed97 0a02 	vldr	s0, [r7, #8]
 8000d2a:	6938      	ldr	r0, [r7, #16]
 8000d2c:	f7ff feea 	bl	8000b04 <Temperature_Conversion>
 8000d30:	ed87 0a01 	vstr	s0, [r7, #4]
  {
 8000d34:	e748      	b.n	8000bc8 <main+0x38>
 8000d36:	bf00      	nop
 8000d38:	e5604189 	.word	0xe5604189
 8000d3c:	40ab4550 	.word	0x40ab4550
 8000d40:	9999999a 	.word	0x9999999a
 8000d44:	3fb99999 	.word	0x3fb99999
 8000d48:	20000090 	.word	0x20000090
 8000d4c:	45800000 	.word	0x45800000
 8000d50:	48000800 	.word	0x48000800
 8000d54:	48000400 	.word	0x48000400
 8000d58:	20000028 	.word	0x20000028

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b096      	sub	sp, #88	; 0x58
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	2244      	movs	r2, #68	; 0x44
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f003 fe8a 	bl	8004a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d70:	463b      	mov	r3, r7
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f002 f9d2 	bl	8003128 <HAL_PWREx_ControlVoltageScaling>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000d8a:	f000 f939 	bl	8001000 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d8e:	2310      	movs	r3, #16
 8000d90:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d92:	2301      	movs	r3, #1
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d9a:	2360      	movs	r3, #96	; 0x60
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000da2:	2301      	movs	r3, #1
 8000da4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000da6:	2301      	movs	r3, #1
 8000da8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000daa:	233c      	movs	r3, #60	; 0x3c
 8000dac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f002 fa56 	bl	8003270 <HAL_RCC_OscConfig>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dca:	f000 f919 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dce:	230f      	movs	r3, #15
 8000dd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	2105      	movs	r1, #5
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fe5c 	bl	8003aa4 <HAL_RCC_ClockConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000df2:	f000 f905 	bl	8001000 <Error_Handler>
  }
}
 8000df6:	bf00      	nop
 8000df8:	3758      	adds	r7, #88	; 0x58
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e16:	4b29      	ldr	r3, [pc, #164]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e18:	4a29      	ldr	r2, [pc, #164]	; (8000ec0 <MX_ADC1_Init+0xc0>)
 8000e1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e1c:	4b27      	ldr	r3, [pc, #156]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e22:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e36:	2204      	movs	r2, #4
 8000e38:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e40:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e46:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e54:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e60:	4b16      	ldr	r3, [pc, #88]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e76:	4811      	ldr	r0, [pc, #68]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000e78:	f000 fc94 	bl	80017a4 <HAL_ADC_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000e82:	f000 f8bd 	bl	8001000 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_ADC1_Init+0xc4>)
 8000e88:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e8a:	2306      	movs	r3, #6
 8000e8c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000e8e:	2306      	movs	r3, #6
 8000e90:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e92:	237f      	movs	r3, #127	; 0x7f
 8000e94:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e96:	2304      	movs	r3, #4
 8000e98:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4806      	ldr	r0, [pc, #24]	; (8000ebc <MX_ADC1_Init+0xbc>)
 8000ea4:	f000 fef6 	bl	8001c94 <HAL_ADC_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000eae:	f000 f8a7 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000028 	.word	0x20000028
 8000ec0:	50040000 	.word	0x50040000
 8000ec4:	c7520000 	.word	0xc7520000

08000ec8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2228      	movs	r2, #40	; 0x28
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 fdd5 	bl	8004a84 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_DAC1_Init+0x78>)
 8000edc:	4a19      	ldr	r2, [pc, #100]	; (8000f44 <MX_DAC1_Init+0x7c>)
 8000ede:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ee0:	4817      	ldr	r0, [pc, #92]	; (8000f40 <MX_DAC1_Init+0x78>)
 8000ee2:	f001 fd5a 	bl	800299a <HAL_DAC_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000eec:	f000 f888 	bl	8001000 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000efc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <MX_DAC1_Init+0x78>)
 8000f12:	f001 fddb 	bl	8002acc <HAL_DAC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000f1c:	f000 f870 	bl	8001000 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	2210      	movs	r2, #16
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <MX_DAC1_Init+0x78>)
 8000f28:	f001 fdd0 	bl	8002acc <HAL_DAC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_DAC1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 f865 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	3728      	adds	r7, #40	; 0x28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000090 	.word	0x20000090
 8000f44:	40007400 	.word	0x40007400

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b088      	sub	sp, #32
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MX_GPIO_Init+0xac>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <MX_GPIO_Init+0xac>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_GPIO_Init+0xac>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_GPIO_Init+0xac>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <MX_GPIO_Init+0xac>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_GPIO_Init+0xac>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_GPIO_Init+0xac>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <MX_GPIO_Init+0xac>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <MX_GPIO_Init+0xac>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fac:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <MX_GPIO_Init+0xb0>)
 8000fae:	f002 f883 	bl	80030b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : userButton_Pin */
  GPIO_InitStruct.Pin = userButton_Pin;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(userButton_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_GPIO_Init+0xb4>)
 8000fc8:	f001 fecc 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MX_GPIO_Init+0xb0>)
 8000fe6:	f001 febd 	bl	8002d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fea:	bf00      	nop
 8000fec:	3720      	adds	r7, #32
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	48000800 	.word	0x48000800

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	e7fe      	b.n	8001008 <Error_Handler+0x8>
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_MspInit+0x44>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_MspInit+0x44>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6613      	str	r3, [r2, #96]	; 0x60
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_MspInit+0x44>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_MspInit+0x44>)
 800102c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102e:	4a08      	ldr	r2, [pc, #32]	; (8001050 <HAL_MspInit+0x44>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6593      	str	r3, [r2, #88]	; 0x58
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_MspInit+0x44>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b0a8      	sub	sp, #160	; 0xa0
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2294      	movs	r2, #148	; 0x94
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fd0d 	bl	8004a84 <memset>
  if(hadc->Instance==ADC1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_ADC_MspInit+0x80>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d12b      	bne.n	80010cc <HAL_ADC_MspInit+0x78>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001074:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001078:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800107a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800107e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001082:	2301      	movs	r3, #1
 8001084:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 40;
 800108a:	2328      	movs	r3, #40	; 0x28
 800108c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800109a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a0:	f107 030c 	add.w	r3, r7, #12
 80010a4:	4618      	mov	r0, r3
 80010a6:	f002 ff8f 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80010b0:	f7ff ffa6 	bl	8001000 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <HAL_ADC_MspInit+0x84>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <HAL_ADC_MspInit+0x84>)
 80010ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_ADC_MspInit+0x84>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010cc:	bf00      	nop
 80010ce:	37a0      	adds	r7, #160	; 0xa0
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	50040000 	.word	0x50040000
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_DAC_MspInit+0x74>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d124      	bne.n	8001148 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_DAC_MspInit+0x78>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	4a14      	ldr	r2, [pc, #80]	; (8001154 <HAL_DAC_MspInit+0x78>)
 8001104:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_DAC_MspInit+0x78>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_DAC_MspInit+0x78>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <HAL_DAC_MspInit+0x78>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <HAL_DAC_MspInit+0x78>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC_1_Pin|DAC_2_Pin;
 800112e:	2330      	movs	r3, #48	; 0x30
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001132:	2303      	movs	r3, #3
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f001 fe0e 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	; 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40007400 	.word	0x40007400
 8001154:	40021000 	.word	0x40021000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f892 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <SystemInit+0x20>)
 80011b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <SystemInit+0x20>)
 80011b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001208 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d4:	f7ff ffea 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011d8:	480c      	ldr	r0, [pc, #48]	; (800120c <LoopForever+0x6>)
  ldr r1, =_edata
 80011da:	490d      	ldr	r1, [pc, #52]	; (8001210 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011dc:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <LoopForever+0xe>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e0:	e002      	b.n	80011e8 <LoopCopyDataInit>

080011e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011e6:	3304      	adds	r3, #4

080011e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011ec:	d3f9      	bcc.n	80011e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f0:	4c0a      	ldr	r4, [pc, #40]	; (800121c <LoopForever+0x16>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f4:	e001      	b.n	80011fa <LoopFillZerobss>

080011f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f8:	3204      	adds	r2, #4

080011fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011fc:	d3fb      	bcc.n	80011f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011fe:	f003 fc49 	bl	8004a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001202:	f7ff fcc5 	bl	8000b90 <main>

08001206 <LoopForever>:

LoopForever:
    b LoopForever
 8001206:	e7fe      	b.n	8001206 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001208:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800120c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001210:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001214:	08005340 	.word	0x08005340
  ldr r2, =_sbss
 8001218:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800121c:	200000a8 	.word	0x200000a8

08001220 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001220:	e7fe      	b.n	8001220 <ADC1_IRQHandler>

08001222 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001228:	2300      	movs	r3, #0
 800122a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122c:	2003      	movs	r0, #3
 800122e:	f001 fb81 	bl	8002934 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001232:	200f      	movs	r0, #15
 8001234:	f000 f80e 	bl	8001254 <HAL_InitTick>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d002      	beq.n	8001244 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	e001      	b.n	8001248 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001244:	f7ff fee2 	bl	800100c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001248:	79fb      	ldrb	r3, [r7, #7]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_InitTick+0x6c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d023      	beq.n	80012b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <HAL_InitTick+0x70>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_InitTick+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f001 fb7f 	bl	8002982 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10f      	bne.n	80012aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d809      	bhi.n	80012a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001298:	f001 fb57 	bl	800294a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129c:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <HAL_InitTick+0x74>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e007      	b.n	80012b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e004      	b.n	80012b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e001      	b.n	80012b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000008 	.word	0x20000008
 80012f0:	200000a4 	.word	0x200000a4

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200000a4 	.word	0x200000a4

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008

08001354 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	609a      	str	r2, [r3, #8]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	431a      	orrs	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	609a      	str	r2, [r3, #8]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
 80013c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	3360      	adds	r3, #96	; 0x60
 80013ce:	461a      	mov	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <LL_ADC_SetOffset+0x44>)
 80013de:	4013      	ands	r3, r2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	4313      	orrs	r3, r2
 80013ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80013f4:	bf00      	nop
 80013f6:	371c      	adds	r7, #28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	03fff000 	.word	0x03fff000

08001404 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3360      	adds	r3, #96	; 0x60
 8001412:	461a      	mov	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3360      	adds	r3, #96	; 0x60
 8001440:	461a      	mov	r2, r3
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	431a      	orrs	r2, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800145a:	bf00      	nop
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001466:	b480      	push	{r7}
 8001468:	b083      	sub	sp, #12
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	615a      	str	r2, [r3, #20]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b087      	sub	sp, #28
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3330      	adds	r3, #48	; 0x30
 80014c2:	461a      	mov	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	0a1b      	lsrs	r3, r3, #8
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	4413      	add	r3, r2
 80014d0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f003 031f 	and.w	r3, r3, #31
 80014dc:	211f      	movs	r1, #31
 80014de:	fa01 f303 	lsl.w	r3, r1, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	401a      	ands	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	0e9b      	lsrs	r3, r3, #26
 80014ea:	f003 011f 	and.w	r1, r3, #31
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	f003 031f 	and.w	r3, r3, #31
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80014fe:	bf00      	nop
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800150a:	b480      	push	{r7}
 800150c:	b087      	sub	sp, #28
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3314      	adds	r3, #20
 800151a:	461a      	mov	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	0e5b      	lsrs	r3, r3, #25
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	f003 0304 	and.w	r3, r3, #4
 8001526:	4413      	add	r3, r2
 8001528:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	0d1b      	lsrs	r3, r3, #20
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	2107      	movs	r1, #7
 8001538:	fa01 f303 	lsl.w	r3, r1, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	401a      	ands	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	0d1b      	lsrs	r3, r3, #20
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	431a      	orrs	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001554:	bf00      	nop
 8001556:	371c      	adds	r7, #28
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001578:	43db      	mvns	r3, r3
 800157a:	401a      	ands	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0318 	and.w	r3, r3, #24
 8001582:	4908      	ldr	r1, [pc, #32]	; (80015a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001584:	40d9      	lsrs	r1, r3
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	400b      	ands	r3, r1
 800158a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800158e:	431a      	orrs	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	0007ffff 	.word	0x0007ffff

080015a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80015b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6093      	str	r3, [r2, #8]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015e0:	d101      	bne.n	80015e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001604:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001608:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001630:	d101      	bne.n	8001636 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001632:	2301      	movs	r3, #1
 8001634:	e000      	b.n	8001638 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001654:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800167c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001680:	f043 0202 	orr.w	r2, r3, #2
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <LL_ADC_IsEnabled+0x18>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <LL_ADC_IsEnabled+0x1a>
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d101      	bne.n	80016d2 <LL_ADC_IsDisableOngoing+0x18>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <LL_ADC_IsDisableOngoing+0x1a>
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016f4:	f043 0204 	orr.w	r2, r3, #4
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800171c:	f043 0210 	orr.w	r2, r3, #16
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b04      	cmp	r3, #4
 8001742:	d101      	bne.n	8001748 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001766:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800176a:	f043 0220 	orr.w	r2, r3, #32
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	2b08      	cmp	r3, #8
 8001790:	d101      	bne.n	8001796 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e129      	b.n	8001a12 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d109      	bne.n	80017e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fc41 	bl	8001054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fef1 	bl	80015cc <LL_ADC_IsDeepPowerDownEnabled>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fed7 	bl	80015a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff0c 	bl	800161c <LL_ADC_IsInternalRegulatorEnabled>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d115      	bne.n	8001836 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fef0 	bl	80015f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001814:	4b81      	ldr	r3, [pc, #516]	; (8001a1c <HAL_ADC_Init+0x278>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	099b      	lsrs	r3, r3, #6
 800181a:	4a81      	ldr	r2, [pc, #516]	; (8001a20 <HAL_ADC_Init+0x27c>)
 800181c:	fba2 2303 	umull	r2, r3, r2, r3
 8001820:	099b      	lsrs	r3, r3, #6
 8001822:	3301      	adds	r3, #1
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001828:	e002      	b.n	8001830 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3b01      	subs	r3, #1
 800182e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f9      	bne.n	800182a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff feee 	bl	800161c <LL_ADC_IsInternalRegulatorEnabled>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10d      	bne.n	8001862 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184a:	f043 0210 	orr.w	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff62 	bl	8001730 <LL_ADC_REG_IsConversionOngoing>
 800186c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 80c2 	bne.w	8001a00 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 80be 	bne.w	8001a00 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800188c:	f043 0202 	orr.w	r2, r3, #2
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fefb 	bl	8001694 <LL_ADC_IsEnabled>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10b      	bne.n	80018bc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018a4:	485f      	ldr	r0, [pc, #380]	; (8001a24 <HAL_ADC_Init+0x280>)
 80018a6:	f7ff fef5 	bl	8001694 <LL_ADC_IsEnabled>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4619      	mov	r1, r3
 80018b6:	485c      	ldr	r0, [pc, #368]	; (8001a28 <HAL_ADC_Init+0x284>)
 80018b8:	f7ff fd4c 	bl	8001354 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7e5b      	ldrb	r3, [r3, #25]
 80018c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d106      	bne.n	80018f8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	3b01      	subs	r3, #1
 80018f0:	045b      	lsls	r3, r3, #17
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001904:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68da      	ldr	r2, [r3, #12]
 800191a:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <HAL_ADC_Init+0x288>)
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	69b9      	ldr	r1, [r7, #24]
 8001924:	430b      	orrs	r3, r1
 8001926:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff26 	bl	800177e <LL_ADC_INJ_IsConversionOngoing>
 8001932:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d140      	bne.n	80019bc <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d13d      	bne.n	80019bc <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7e1b      	ldrb	r3, [r3, #24]
 8001948:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800194a:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001952:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001962:	f023 0306 	bic.w	r3, r3, #6
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	69b9      	ldr	r1, [r7, #24]
 800196c:	430b      	orrs	r3, r1
 800196e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001976:	2b01      	cmp	r3, #1
 8001978:	d118      	bne.n	80019ac <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001990:	4311      	orrs	r1, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001996:	4311      	orrs	r1, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800199c:	430a      	orrs	r2, r1
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0201 	orr.w	r2, r2, #1
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	e007      	b.n	80019bc <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	691a      	ldr	r2, [r3, #16]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0201 	bic.w	r2, r2, #1
 80019ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d10c      	bne.n	80019de <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f023 010f 	bic.w	r1, r3, #15
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
 80019dc:	e007      	b.n	80019ee <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 020f 	bic.w	r2, r2, #15
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	f023 0303 	bic.w	r3, r3, #3
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	659a      	str	r2, [r3, #88]	; 0x58
 80019fe:	e007      	b.n	8001a10 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	f043 0210 	orr.w	r2, r3, #16
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a10:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3720      	adds	r7, #32
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	053e2d63 	.word	0x053e2d63
 8001a24:	50040000 	.word	0x50040000
 8001a28:	50040300 	.word	0x50040300
 8001a2c:	fff0c007 	.word	0xfff0c007

08001a30 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe77 	bl	8001730 <LL_ADC_REG_IsConversionOngoing>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d14f      	bne.n	8001ae8 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Start+0x26>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e04b      	b.n	8001aee <HAL_ADC_Start+0xbe>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fdd0 	bl	8002604 <ADC_Enable>
 8001a64:	4603      	mov	r3, r0
 8001a66:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d137      	bne.n	8001ade <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a8e:	d106      	bne.n	8001a9e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	f023 0206 	bic.w	r2, r3, #6
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a9c:	e002      	b.n	8001aa4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	221c      	movs	r2, #28
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fe02 	bl	80016e0 <LL_ADC_REG_StartConversion>
 8001adc:	e006      	b.n	8001aec <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001ae6:	e001      	b.n	8001aec <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_ADC_Stop+0x16>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e023      	b.n	8001b54 <HAL_ADC_Stop+0x5e>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b14:	2103      	movs	r1, #3
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 fcb8 	bl	800248c <ADC_ConversionStop>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d111      	bne.n	8001b4a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 fdf2 	bl	8002710 <ADC_Disable>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b3e:	f023 0301 	bic.w	r3, r3, #1
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b08      	cmp	r3, #8
 8001b6c:	d102      	bne.n	8001b74 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b6e:	2308      	movs	r3, #8
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e010      	b.n	8001b96 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b86:	f043 0220 	orr.w	r2, r3, #32
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06f      	b.n	8001c72 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001b92:	2304      	movs	r3, #4
 8001b94:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b96:	f7ff fbad 	bl	80012f4 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b9c:	e021      	b.n	8001be2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba4:	d01d      	beq.n	8001be2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ba6:	f7ff fba5 	bl	80012f4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <HAL_ADC_PollForConversion+0x60>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d112      	bne.n	8001be2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10b      	bne.n	8001be2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	f043 0204 	orr.w	r2, r3, #4
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e047      	b.n	8001c72 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0d6      	beq.n	8001b9e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fc43 	bl	800148c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01c      	beq.n	8001c46 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7e5b      	ldrb	r3, [r3, #25]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d118      	bne.n	8001c46 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d111      	bne.n	8001c46 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d104      	bne.n	8001c5e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2208      	movs	r2, #8
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e008      	b.n	8001c70 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d103      	bne.n	8001c70 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b0b6      	sub	sp, #216	; 0xd8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x22>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e3d5      	b.n	8002462 <HAL_ADC_ConfigChannel+0x7ce>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fd34 	bl	8001730 <LL_ADC_REG_IsConversionOngoing>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 83ba 	bne.w	8002444 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d824      	bhi.n	8001d2a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	3b02      	subs	r3, #2
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d81b      	bhi.n	8001d22 <HAL_ADC_ConfigChannel+0x8e>
 8001cea:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <HAL_ADC_ConfigChannel+0x5c>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d01 	.word	0x08001d01
 8001cf4:	08001d09 	.word	0x08001d09
 8001cf8:	08001d11 	.word	0x08001d11
 8001cfc:	08001d19 	.word	0x08001d19
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d00:	230c      	movs	r3, #12
 8001d02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d06:	e010      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d08:	2312      	movs	r3, #18
 8001d0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d0e:	e00c      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d10:	2318      	movs	r3, #24
 8001d12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d16:	e008      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d20:	e003      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d22:	2306      	movs	r3, #6
 8001d24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d28:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001d38:	f7ff fbbb 	bl	80014b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fcf5 	bl	8001730 <LL_ADC_REG_IsConversionOngoing>
 8001d46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fd15 	bl	800177e <LL_ADC_INJ_IsConversionOngoing>
 8001d54:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f040 81bf 	bne.w	80020e0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f040 81ba 	bne.w	80020e0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d74:	d10f      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7ff fbc2 	bl	800150a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fb69 	bl	8001466 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d94:	e00e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	6819      	ldr	r1, [r3, #0]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	461a      	mov	r2, r3
 8001da4:	f7ff fbb1 	bl	800150a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fb59 	bl	8001466 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	08db      	lsrs	r3, r3, #3
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d00a      	beq.n	8001dec <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6919      	ldr	r1, [r3, #16]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001de6:	f7ff fae9 	bl	80013bc <LL_ADC_SetOffset>
 8001dea:	e179      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fb06 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10a      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x184>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fafb 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	0e9b      	lsrs	r3, r3, #26
 8001e12:	f003 021f 	and.w	r2, r3, #31
 8001e16:	e01e      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x1c2>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff faf0 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8001e46:	2320      	movs	r3, #32
 8001e48:	e004      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8001e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d105      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x1da>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	0e9b      	lsrs	r3, r3, #26
 8001e68:	f003 031f 	and.w	r3, r3, #31
 8001e6c:	e018      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x20c>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e7a:	fa93 f3a3 	rbit	r3, r3
 8001e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001e82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001e8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001e92:	2320      	movs	r3, #32
 8001e94:	e004      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8001e96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d106      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fabf 	bl	8001430 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff faa3 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x24a>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2101      	movs	r1, #1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fa98 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	0e9b      	lsrs	r3, r3, #26
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	e01e      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x288>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fa8d 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001efc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001f04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	e004      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001f10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x2a0>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0e9b      	lsrs	r3, r3, #26
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	e018      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x2d2>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f40:	fa93 f3a3 	rbit	r3, r3
 8001f44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001f48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	e004      	b.n	8001f66 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8001f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f60:	fab3 f383 	clz	r3, r3
 8001f64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d106      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2101      	movs	r1, #1
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fa5c 	bl	8001430 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2102      	movs	r1, #2
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff fa40 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10a      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x310>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2102      	movs	r1, #2
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fa35 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	0e9b      	lsrs	r3, r3, #26
 8001f9e:	f003 021f 	and.w	r2, r3, #31
 8001fa2:	e01e      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x34e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7ff fa2a 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e004      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8001fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d105      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x366>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	0e9b      	lsrs	r3, r3, #26
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	e014      	b.n	8002024 <HAL_ADC_ConfigChannel+0x390>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800200a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800200e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002016:	2320      	movs	r3, #32
 8002018:	e004      	b.n	8002024 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800201a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002024:	429a      	cmp	r2, r3
 8002026:	d106      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2200      	movs	r2, #0
 800202e:	2102      	movs	r1, #2
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff f9fd 	bl	8001430 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2103      	movs	r1, #3
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f9e1 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x3ce>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2103      	movs	r1, #3
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f9d6 	bl	8001404 <LL_ADC_GetOffsetChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	0e9b      	lsrs	r3, r3, #26
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	e017      	b.n	8002092 <HAL_ADC_ConfigChannel+0x3fe>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2103      	movs	r1, #3
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff f9cb 	bl	8001404 <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002074:	fa93 f3a3 	rbit	r3, r3
 8002078:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800207a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800207e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002084:	2320      	movs	r3, #32
 8002086:	e003      	b.n	8002090 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800208a:	fab3 f383 	clz	r3, r3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x416>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	f003 031f 	and.w	r3, r3, #31
 80020a8:	e011      	b.n	80020ce <HAL_ADC_ConfigChannel+0x43a>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80020b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ba:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80020bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e003      	b.n	80020ce <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80020c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020c8:	fab3 f383 	clz	r3, r3
 80020cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d106      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2103      	movs	r1, #3
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f9a8 	bl	8001430 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff fad5 	bl	8001694 <LL_ADC_IsEnabled>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 813f 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6819      	ldr	r1, [r3, #0]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	461a      	mov	r2, r3
 8002100:	f7ff fa2e 	bl	8001560 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a8e      	ldr	r2, [pc, #568]	; (8002344 <HAL_ADC_ConfigChannel+0x6b0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	f040 8130 	bne.w	8002370 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10b      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x4a4>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	3301      	adds	r3, #1
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2b09      	cmp	r3, #9
 800212e:	bf94      	ite	ls
 8002130:	2301      	movls	r3, #1
 8002132:	2300      	movhi	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	e019      	b.n	800216c <HAL_ADC_ConfigChannel+0x4d8>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002148:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800214a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e003      	b.n	800215c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3301      	adds	r3, #1
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	2b09      	cmp	r3, #9
 8002164:	bf94      	ite	ls
 8002166:	2301      	movls	r3, #1
 8002168:	2300      	movhi	r3, #0
 800216a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800216c:	2b00      	cmp	r3, #0
 800216e:	d079      	beq.n	8002264 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <HAL_ADC_ConfigChannel+0x4f8>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	0e9b      	lsrs	r3, r3, #26
 8002182:	3301      	adds	r3, #1
 8002184:	069b      	lsls	r3, r3, #26
 8002186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218a:	e015      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x524>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800219a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800219c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800219e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e003      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80021a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	069b      	lsls	r3, r3, #26
 80021b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d109      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x544>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	3301      	adds	r3, #1
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	2101      	movs	r1, #1
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	e017      	b.n	8002208 <HAL_ADC_ConfigChannel+0x574>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e0:	fa93 f3a3 	rbit	r3, r3
 80021e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80021e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80021ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80021f0:	2320      	movs	r3, #32
 80021f2:	e003      	b.n	80021fc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80021f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	ea42 0103 	orr.w	r1, r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10a      	bne.n	800222e <HAL_ADC_ConfigChannel+0x59a>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0e9b      	lsrs	r3, r3, #26
 800221e:	3301      	adds	r3, #1
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	051b      	lsls	r3, r3, #20
 800222c:	e018      	b.n	8002260 <HAL_ADC_ConfigChannel+0x5cc>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002236:	fa93 f3a3 	rbit	r3, r3
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800223c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800223e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002246:	2320      	movs	r3, #32
 8002248:	e003      	b.n	8002252 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800224a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224c:	fab3 f383 	clz	r3, r3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f003 021f 	and.w	r2, r3, #31
 8002258:	4613      	mov	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	4413      	add	r3, r2
 800225e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002260:	430b      	orrs	r3, r1
 8002262:	e080      	b.n	8002366 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226c:	2b00      	cmp	r3, #0
 800226e:	d107      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x5ec>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0e9b      	lsrs	r3, r3, #26
 8002276:	3301      	adds	r3, #1
 8002278:	069b      	lsls	r3, r3, #26
 800227a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800227e:	e015      	b.n	80022ac <HAL_ADC_ConfigChannel+0x618>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	069b      	lsls	r3, r3, #26
 80022a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x638>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	0e9b      	lsrs	r3, r3, #26
 80022be:	3301      	adds	r3, #1
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	2101      	movs	r1, #1
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	e017      	b.n	80022fc <HAL_ADC_ConfigChannel+0x668>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	61bb      	str	r3, [r7, #24]
  return result;
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80022e4:	2320      	movs	r3, #32
 80022e6:	e003      	b.n	80022f0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	fab3 f383 	clz	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	3301      	adds	r3, #1
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	2101      	movs	r1, #1
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	ea42 0103 	orr.w	r1, r2, r3
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10d      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x694>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0e9b      	lsrs	r3, r3, #26
 8002312:	3301      	adds	r3, #1
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4613      	mov	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4413      	add	r3, r2
 800231e:	3b1e      	subs	r3, #30
 8002320:	051b      	lsls	r3, r3, #20
 8002322:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002326:	e01d      	b.n	8002364 <HAL_ADC_ConfigChannel+0x6d0>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	60fb      	str	r3, [r7, #12]
  return result;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d103      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e005      	b.n	8002350 <HAL_ADC_ConfigChannel+0x6bc>
 8002344:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fab3 f383 	clz	r3, r3
 800234e:	b2db      	uxtb	r3, r3
 8002350:	3301      	adds	r3, #1
 8002352:	f003 021f 	and.w	r2, r3, #31
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	3b1e      	subs	r3, #30
 800235e:	051b      	lsls	r3, r3, #20
 8002360:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002364:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800236a:	4619      	mov	r1, r3
 800236c:	f7ff f8cd 	bl	800150a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_ADC_ConfigChannel+0x7d8>)
 8002376:	4013      	ands	r3, r2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d06c      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237c:	483c      	ldr	r0, [pc, #240]	; (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 800237e:	f7ff f80f 	bl	80013a0 <LL_ADC_GetCommonPathInternalCh>
 8002382:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3a      	ldr	r2, [pc, #232]	; (8002474 <HAL_ADC_ConfigChannel+0x7e0>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d127      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002390:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d121      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a35      	ldr	r2, [pc, #212]	; (8002478 <HAL_ADC_ConfigChannel+0x7e4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d157      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ae:	4619      	mov	r1, r3
 80023b0:	482f      	ldr	r0, [pc, #188]	; (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 80023b2:	f7fe ffe2 	bl	800137a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_ADC_ConfigChannel+0x7e8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	4a30      	ldr	r2, [pc, #192]	; (8002480 <HAL_ADC_ConfigChannel+0x7ec>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	099b      	lsrs	r3, r3, #6
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023d0:	e002      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1f9      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023de:	e03a      	b.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a27      	ldr	r2, [pc, #156]	; (8002484 <HAL_ADC_ConfigChannel+0x7f0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d113      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a1f      	ldr	r2, [pc, #124]	; (8002478 <HAL_ADC_ConfigChannel+0x7e4>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d12a      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002408:	4619      	mov	r1, r3
 800240a:	4819      	ldr	r0, [pc, #100]	; (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 800240c:	f7fe ffb5 	bl	800137a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002410:	e021      	b.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1c      	ldr	r2, [pc, #112]	; (8002488 <HAL_ADC_ConfigChannel+0x7f4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d11c      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800241c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d116      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a12      	ldr	r2, [pc, #72]	; (8002478 <HAL_ADC_ConfigChannel+0x7e4>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d111      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002432:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002436:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800243a:	4619      	mov	r1, r3
 800243c:	480c      	ldr	r0, [pc, #48]	; (8002470 <HAL_ADC_ConfigChannel+0x7dc>)
 800243e:	f7fe ff9c 	bl	800137a <LL_ADC_SetCommonPathInternalCh>
 8002442:	e008      	b.n	8002456 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002448:	f043 0220 	orr.w	r2, r3, #32
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800245e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002462:	4618      	mov	r0, r3
 8002464:	37d8      	adds	r7, #216	; 0xd8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	80080000 	.word	0x80080000
 8002470:	50040300 	.word	0x50040300
 8002474:	c7520000 	.word	0xc7520000
 8002478:	50040000 	.word	0x50040000
 800247c:	20000000 	.word	0x20000000
 8002480:	053e2d63 	.word	0x053e2d63
 8002484:	cb840000 	.word	0xcb840000
 8002488:	80000001 	.word	0x80000001

0800248c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff f944 	bl	8001730 <LL_ADC_REG_IsConversionOngoing>
 80024a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f965 	bl	800177e <LL_ADC_INJ_IsConversionOngoing>
 80024b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d103      	bne.n	80024c4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8098 	beq.w	80025f4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d02a      	beq.n	8002528 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7e5b      	ldrb	r3, [r3, #25]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d126      	bne.n	8002528 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	7e1b      	ldrb	r3, [r3, #24]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d122      	bne.n	8002528 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80024e6:	e014      	b.n	8002512 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4a45      	ldr	r2, [pc, #276]	; (8002600 <ADC_ConversionStop+0x174>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d90d      	bls.n	800250c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f043 0210 	orr.w	r2, r3, #16
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	f043 0201 	orr.w	r2, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e074      	b.n	80025f6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	3301      	adds	r3, #1
 8002510:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800251c:	2b40      	cmp	r3, #64	; 0x40
 800251e:	d1e3      	bne.n	80024e8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2240      	movs	r2, #64	; 0x40
 8002526:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d014      	beq.n	8002558 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff f8fc 	bl	8001730 <LL_ADC_REG_IsConversionOngoing>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00c      	beq.n	8002558 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff f8b9 	bl	80016ba <LL_ADC_IsDisableOngoing>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d104      	bne.n	8002558 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f8d8 	bl	8001708 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d014      	beq.n	8002588 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f90b 	bl	800177e <LL_ADC_INJ_IsConversionOngoing>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00c      	beq.n	8002588 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff f8a1 	bl	80016ba <LL_ADC_IsDisableOngoing>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d104      	bne.n	8002588 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f8e7 	bl	8001756 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d005      	beq.n	800259a <ADC_ConversionStop+0x10e>
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d105      	bne.n	80025a0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002594:	230c      	movs	r3, #12
 8002596:	617b      	str	r3, [r7, #20]
        break;
 8002598:	e005      	b.n	80025a6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800259a:	2308      	movs	r3, #8
 800259c:	617b      	str	r3, [r7, #20]
        break;
 800259e:	e002      	b.n	80025a6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80025a0:	2304      	movs	r3, #4
 80025a2:	617b      	str	r3, [r7, #20]
        break;
 80025a4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80025a6:	f7fe fea5 	bl	80012f4 <HAL_GetTick>
 80025aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025ac:	e01b      	b.n	80025e6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025ae:	f7fe fea1 	bl	80012f4 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d914      	bls.n	80025e6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00d      	beq.n	80025e6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	f043 0210 	orr.w	r2, r3, #16
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	f043 0201 	orr.w	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e007      	b.n	80025f6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1dc      	bne.n	80025ae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3720      	adds	r7, #32
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	a33fffff 	.word	0xa33fffff

08002604 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800260c:	2300      	movs	r3, #0
 800260e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff f83d 	bl	8001694 <LL_ADC_IsEnabled>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d169      	bne.n	80026f4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	4b36      	ldr	r3, [pc, #216]	; (8002700 <ADC_Enable+0xfc>)
 8002628:	4013      	ands	r3, r2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00d      	beq.n	800264a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	f043 0210 	orr.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e055      	b.n	80026f6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fff8 	bl	8001644 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002654:	482b      	ldr	r0, [pc, #172]	; (8002704 <ADC_Enable+0x100>)
 8002656:	f7fe fea3 	bl	80013a0 <LL_ADC_GetCommonPathInternalCh>
 800265a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800265c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002660:	2b00      	cmp	r3, #0
 8002662:	d013      	beq.n	800268c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <ADC_Enable+0x104>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	099b      	lsrs	r3, r3, #6
 800266a:	4a28      	ldr	r2, [pc, #160]	; (800270c <ADC_Enable+0x108>)
 800266c:	fba2 2303 	umull	r2, r3, r2, r3
 8002670:	099b      	lsrs	r3, r3, #6
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	4613      	mov	r3, r2
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800267e:	e002      	b.n	8002686 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3b01      	subs	r3, #1
 8002684:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f9      	bne.n	8002680 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800268c:	f7fe fe32 	bl	80012f4 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002692:	e028      	b.n	80026e6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7fe fffb 	bl	8001694 <LL_ADC_IsEnabled>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d104      	bne.n	80026ae <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe ffcb 	bl	8001644 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026ae:	f7fe fe21 	bl	80012f4 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d914      	bls.n	80026e6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d00d      	beq.n	80026e6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e007      	b.n	80026f6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d1cf      	bne.n	8002694 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	8000003f 	.word	0x8000003f
 8002704:	50040300 	.word	0x50040300
 8002708:	20000000 	.word	0x20000000
 800270c:	053e2d63 	.word	0x053e2d63

08002710 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe ffcc 	bl	80016ba <LL_ADC_IsDisableOngoing>
 8002722:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f7fe ffb3 	bl	8001694 <LL_ADC_IsEnabled>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d047      	beq.n	80027c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d144      	bne.n	80027c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 030d 	and.w	r3, r3, #13
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10c      	bne.n	8002762 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fe ff8d 	bl	800166c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2203      	movs	r2, #3
 8002758:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800275a:	f7fe fdcb 	bl	80012f4 <HAL_GetTick>
 800275e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002760:	e029      	b.n	80027b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002766:	f043 0210 	orr.w	r2, r3, #16
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	f043 0201 	orr.w	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e023      	b.n	80027c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800277e:	f7fe fdb9 	bl	80012f4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d914      	bls.n	80027b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d00d      	beq.n	80027b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	f043 0210 	orr.w	r2, r3, #16
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e007      	b.n	80027c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1dc      	bne.n	800277e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f003 0307 	and.w	r3, r3, #7
 80027de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027e0:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027ec:	4013      	ands	r3, r2
 80027ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002802:	4a04      	ldr	r2, [pc, #16]	; (8002814 <__NVIC_SetPriorityGrouping+0x44>)
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	60d3      	str	r3, [r2, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <__NVIC_GetPriorityGrouping+0x18>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0307 	and.w	r3, r3, #7
}
 8002826:	4618      	mov	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	2b00      	cmp	r3, #0
 8002846:	db0a      	blt.n	800285e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	490c      	ldr	r1, [pc, #48]	; (8002880 <__NVIC_SetPriority+0x4c>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	440b      	add	r3, r1
 8002858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800285c:	e00a      	b.n	8002874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4908      	ldr	r1, [pc, #32]	; (8002884 <__NVIC_SetPriority+0x50>)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	3b04      	subs	r3, #4
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	440b      	add	r3, r1
 8002872:	761a      	strb	r2, [r3, #24]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	e000e100 	.word	0xe000e100
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f1c3 0307 	rsb	r3, r3, #7
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	bf28      	it	cs
 80028a6:	2304      	movcs	r3, #4
 80028a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d902      	bls.n	80028b8 <NVIC_EncodePriority+0x30>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3b03      	subs	r3, #3
 80028b6:	e000      	b.n	80028ba <NVIC_EncodePriority+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43d9      	mvns	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	4313      	orrs	r3, r2
         );
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3b01      	subs	r3, #1
 80028fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002900:	d301      	bcc.n	8002906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002902:	2301      	movs	r3, #1
 8002904:	e00f      	b.n	8002926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <SysTick_Config+0x40>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290e:	210f      	movs	r1, #15
 8002910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002914:	f7ff ff8e 	bl	8002834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <SysTick_Config+0x40>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291e:	4b04      	ldr	r3, [pc, #16]	; (8002930 <SysTick_Config+0x40>)
 8002920:	2207      	movs	r2, #7
 8002922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000e010 	.word	0xe000e010

08002934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ff47 	bl	80027d0 <__NVIC_SetPriorityGrouping>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b086      	sub	sp, #24
 800294e:	af00      	add	r7, sp, #0
 8002950:	4603      	mov	r3, r0
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800295c:	f7ff ff5c 	bl	8002818 <__NVIC_GetPriorityGrouping>
 8002960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	6978      	ldr	r0, [r7, #20]
 8002968:	f7ff ff8e 	bl	8002888 <NVIC_EncodePriority>
 800296c:	4602      	mov	r2, r0
 800296e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002972:	4611      	mov	r1, r2
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff5d 	bl	8002834 <__NVIC_SetPriority>
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffb0 	bl	80028f0 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e014      	b.n	80029d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	791b      	ldrb	r3, [r3, #4]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d105      	bne.n	80029c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7fe fb8d 	bl	80010dc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2202      	movs	r2, #2
 80029c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
 80029e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	795b      	ldrb	r3, [r3, #5]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_DAC_Start+0x16>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e040      	b.n	8002a76 <HAL_DAC_Start+0x98>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2202      	movs	r2, #2
 80029fe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10f      	bne.n	8002a3e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d11d      	bne.n	8002a68 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	e014      	b.n	8002a68 <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2102      	movs	r1, #2
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d107      	bne.n	8002a68 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0202 	orr.w	r2, r2, #2
 8002a66:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b087      	sub	sp, #28
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
 8002a8e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	3308      	adds	r3, #8
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e004      	b.n	8002ab6 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3314      	adds	r3, #20
 8002ab4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	795b      	ldrb	r3, [r3, #5]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_DAC_ConfigChannel+0x1c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e137      	b.n	8002d58 <HAL_DAC_ConfigChannel+0x28c>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2202      	movs	r2, #2
 8002af2:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	f040 8081 	bne.w	8002c00 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002afe:	f7fe fbf9 	bl	80012f4 <HAL_GetTick>
 8002b02:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d140      	bne.n	8002b8c <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b0a:	e018      	b.n	8002b3e <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b0c:	f7fe fbf2 	bl	80012f4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d911      	bls.n	8002b3e <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f043 0208 	orr.w	r2, r3, #8
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2203      	movs	r2, #3
 8002b38:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e10c      	b.n	8002d58 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1df      	bne.n	8002b0c <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f7fe fbdd 	bl	800130c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	69d2      	ldr	r2, [r2, #28]
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b5c:	e023      	b.n	8002ba6 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002b5e:	f7fe fbc9 	bl	80012f4 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d90f      	bls.n	8002b8c <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	da0a      	bge.n	8002b8c <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f043 0208 	orr.w	r2, r3, #8
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2203      	movs	r2, #3
 8002b86:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0e5      	b.n	8002d58 <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	dbe3      	blt.n	8002b5e <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f7fe fbb8 	bl	800130c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	69d2      	ldr	r2, [r2, #28]
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	ea02 0103 	and.w	r1, r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	6a1a      	ldr	r2, [r3, #32]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	21ff      	movs	r1, #255	; 0xff
 8002be2:	fa01 f303 	lsl.w	r3, r1, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	ea02 0103 	and.w	r1, r2, r3
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d11d      	bne.n	8002c44 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	221f      	movs	r2, #31
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69fa      	ldr	r2, [r7, #28]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2207      	movs	r2, #7
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69fa      	ldr	r2, [r7, #28]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6819      	ldr	r1, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	400a      	ands	r2, r1
 8002ca8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ce8:	d104      	bne.n	8002cf4 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	e018      	b.n	8002d26 <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d104      	bne.n	8002d06 <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d02:	61fb      	str	r3, [r7, #28]
 8002d04:	e00f      	b.n	8002d26 <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8002d06:	f001 f893 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 8002d0a:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4a14      	ldr	r2, [pc, #80]	; (8002d60 <HAL_DAC_ConfigChannel+0x294>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d904      	bls.n	8002d1e <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d1a:	61fb      	str	r3, [r7, #28]
 8002d1c:	e003      	b.n	8002d26 <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d24:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6819      	ldr	r1, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0310 	and.w	r3, r3, #16
 8002d3a:	22c0      	movs	r2, #192	; 0xc0
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43da      	mvns	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	400a      	ands	r2, r1
 8002d48:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	04c4b400 	.word	0x04c4b400

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d72:	e166      	b.n	8003042 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2101      	movs	r1, #1
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d80:	4013      	ands	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8158 	beq.w	800303c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d005      	beq.n	8002da4 <HAL_GPIO_Init+0x40>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d130      	bne.n	8002e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	2203      	movs	r2, #3
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dda:	2201      	movs	r2, #1
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	091b      	lsrs	r3, r3, #4
 8002df0:	f003 0201 	and.w	r2, r3, #1
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d017      	beq.n	8002e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4013      	ands	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d123      	bne.n	8002e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	08da      	lsrs	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	3208      	adds	r2, #8
 8002e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	220f      	movs	r2, #15
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	691a      	ldr	r2, [r3, #16]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0307 	and.w	r3, r3, #7
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	6939      	ldr	r1, [r7, #16]
 8002e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 80b2 	beq.w	800303c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed8:	4b61      	ldr	r3, [pc, #388]	; (8003060 <HAL_GPIO_Init+0x2fc>)
 8002eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002edc:	4a60      	ldr	r2, [pc, #384]	; (8003060 <HAL_GPIO_Init+0x2fc>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6613      	str	r3, [r2, #96]	; 0x60
 8002ee4:	4b5e      	ldr	r3, [pc, #376]	; (8003060 <HAL_GPIO_Init+0x2fc>)
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	60bb      	str	r3, [r7, #8]
 8002eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ef0:	4a5c      	ldr	r2, [pc, #368]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4013      	ands	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f1a:	d02b      	beq.n	8002f74 <HAL_GPIO_Init+0x210>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a52      	ldr	r2, [pc, #328]	; (8003068 <HAL_GPIO_Init+0x304>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d025      	beq.n	8002f70 <HAL_GPIO_Init+0x20c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a51      	ldr	r2, [pc, #324]	; (800306c <HAL_GPIO_Init+0x308>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d01f      	beq.n	8002f6c <HAL_GPIO_Init+0x208>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a50      	ldr	r2, [pc, #320]	; (8003070 <HAL_GPIO_Init+0x30c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d019      	beq.n	8002f68 <HAL_GPIO_Init+0x204>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a4f      	ldr	r2, [pc, #316]	; (8003074 <HAL_GPIO_Init+0x310>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_GPIO_Init+0x200>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a4e      	ldr	r2, [pc, #312]	; (8003078 <HAL_GPIO_Init+0x314>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d00d      	beq.n	8002f60 <HAL_GPIO_Init+0x1fc>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a4d      	ldr	r2, [pc, #308]	; (800307c <HAL_GPIO_Init+0x318>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d007      	beq.n	8002f5c <HAL_GPIO_Init+0x1f8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a4c      	ldr	r2, [pc, #304]	; (8003080 <HAL_GPIO_Init+0x31c>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d101      	bne.n	8002f58 <HAL_GPIO_Init+0x1f4>
 8002f54:	2307      	movs	r3, #7
 8002f56:	e00e      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	e00c      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f5c:	2306      	movs	r3, #6
 8002f5e:	e00a      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f60:	2305      	movs	r3, #5
 8002f62:	e008      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f64:	2304      	movs	r3, #4
 8002f66:	e006      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e004      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e002      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <HAL_GPIO_Init+0x212>
 8002f74:	2300      	movs	r3, #0
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	f002 0203 	and.w	r2, r2, #3
 8002f7c:	0092      	lsls	r2, r2, #2
 8002f7e:	4093      	lsls	r3, r2
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f86:	4937      	ldr	r1, [pc, #220]	; (8003064 <HAL_GPIO_Init+0x300>)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	089b      	lsrs	r3, r3, #2
 8002f8c:	3302      	adds	r3, #2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f94:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fb8:	4a32      	ldr	r2, [pc, #200]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fbe:	4b31      	ldr	r3, [pc, #196]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fe2:	4a28      	ldr	r2, [pc, #160]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fe8:	4b26      	ldr	r3, [pc, #152]	; (8003084 <HAL_GPIO_Init+0x320>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_GPIO_Init+0x320>)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003012:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <HAL_GPIO_Init+0x320>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003036:	4a13      	ldr	r2, [pc, #76]	; (8003084 <HAL_GPIO_Init+0x320>)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3301      	adds	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	f47f ae91 	bne.w	8002d74 <HAL_GPIO_Init+0x10>
  }
}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	371c      	adds	r7, #28
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	40021000 	.word	0x40021000
 8003064:	40010000 	.word	0x40010000
 8003068:	48000400 	.word	0x48000400
 800306c:	48000800 	.word	0x48000800
 8003070:	48000c00 	.word	0x48000c00
 8003074:	48001000 	.word	0x48001000
 8003078:	48001400 	.word	0x48001400
 800307c:	48001800 	.word	0x48001800
 8003080:	48001c00 	.word	0x48001c00
 8003084:	40010400 	.word	0x40010400

08003088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	887b      	ldrh	r3, [r7, #2]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e001      	b.n	80030aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
 80030c4:	4613      	mov	r3, r2
 80030c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030c8:	787b      	ldrb	r3, [r7, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030d4:	e002      	b.n	80030dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <HAL_PWREx_GetVoltageRange+0x3c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f8:	d102      	bne.n	8003100 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80030fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030fe:	e00b      	b.n	8003118 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003100:	4b08      	ldr	r3, [pc, #32]	; (8003124 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310e:	d102      	bne.n	8003116 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003114:	e000      	b.n	8003118 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003116:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003118:	4618      	mov	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40007000 	.word	0x40007000

08003128 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d141      	bne.n	80031ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003136:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800313e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003142:	d131      	bne.n	80031a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003144:	4b47      	ldr	r3, [pc, #284]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314a:	4a46      	ldr	r2, [pc, #280]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800314c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003150:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003154:	4b43      	ldr	r3, [pc, #268]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800315c:	4a41      	ldr	r2, [pc, #260]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003162:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003164:	4b40      	ldr	r3, [pc, #256]	; (8003268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2232      	movs	r2, #50	; 0x32
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	4a3f      	ldr	r2, [pc, #252]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003170:	fba2 2303 	umull	r2, r3, r2, r3
 8003174:	0c9b      	lsrs	r3, r3, #18
 8003176:	3301      	adds	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800317a:	e002      	b.n	8003182 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3b01      	subs	r3, #1
 8003180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003182:	4b38      	ldr	r3, [pc, #224]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318e:	d102      	bne.n	8003196 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f2      	bne.n	800317c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003196:	4b33      	ldr	r3, [pc, #204]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a2:	d158      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e057      	b.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031a8:	4b2e      	ldr	r3, [pc, #184]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ae:	4a2d      	ldr	r2, [pc, #180]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031b8:	e04d      	b.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c0:	d141      	bne.n	8003246 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031c2:	4b28      	ldr	r3, [pc, #160]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d131      	bne.n	8003234 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d6:	4a23      	ldr	r2, [pc, #140]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e0:	4b20      	ldr	r3, [pc, #128]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031e8:	4a1e      	ldr	r2, [pc, #120]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2232      	movs	r2, #50	; 0x32
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	0c9b      	lsrs	r3, r3, #18
 8003202:	3301      	adds	r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003206:	e002      	b.n	800320e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3b01      	subs	r3, #1
 800320c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800320e:	4b15      	ldr	r3, [pc, #84]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800321a:	d102      	bne.n	8003222 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f2      	bne.n	8003208 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800322a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800322e:	d112      	bne.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e011      	b.n	8003258 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323a:	4a0a      	ldr	r2, [pc, #40]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003244:	e007      	b.n	8003256 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003246:	4b07      	ldr	r3, [pc, #28]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800324e:	4a05      	ldr	r2, [pc, #20]	; (8003264 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003254:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	40007000 	.word	0x40007000
 8003268:	20000000 	.word	0x20000000
 800326c:	431bde83 	.word	0x431bde83

08003270 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	f000 bc08 	b.w	8003a94 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003284:	4b96      	ldr	r3, [pc, #600]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800328e:	4b94      	ldr	r3, [pc, #592]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80e4 	beq.w	800346e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d007      	beq.n	80032bc <HAL_RCC_OscConfig+0x4c>
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b0c      	cmp	r3, #12
 80032b0:	f040 808b 	bne.w	80033ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	f040 8087 	bne.w	80033ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032bc:	4b88      	ldr	r3, [pc, #544]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_OscConfig+0x64>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e3df      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	4b81      	ldr	r3, [pc, #516]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d004      	beq.n	80032ee <HAL_RCC_OscConfig+0x7e>
 80032e4:	4b7e      	ldr	r3, [pc, #504]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ec:	e005      	b.n	80032fa <HAL_RCC_OscConfig+0x8a>
 80032ee:	4b7c      	ldr	r3, [pc, #496]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	091b      	lsrs	r3, r3, #4
 80032f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d223      	bcs.n	8003346 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fda0 	bl	8003e48 <RCC_SetFlashLatencyFromMSIRange>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e3c0      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a72      	ldr	r2, [pc, #456]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003318:	f043 0308 	orr.w	r3, r3, #8
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	496d      	ldr	r1, [pc, #436]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 800332c:	4313      	orrs	r3, r2
 800332e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003330:	4b6b      	ldr	r3, [pc, #428]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	4968      	ldr	r1, [pc, #416]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
 8003344:	e025      	b.n	8003392 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003346:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a65      	ldr	r2, [pc, #404]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 800334c:	f043 0308 	orr.w	r3, r3, #8
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b63      	ldr	r3, [pc, #396]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	4960      	ldr	r1, [pc, #384]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003364:	4b5e      	ldr	r3, [pc, #376]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	495b      	ldr	r1, [pc, #364]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003374:	4313      	orrs	r3, r2
 8003376:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fd60 	bl	8003e48 <RCC_SetFlashLatencyFromMSIRange>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e380      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003392:	f000 fcc1 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003396:	4602      	mov	r2, r0
 8003398:	4b51      	ldr	r3, [pc, #324]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	091b      	lsrs	r3, r3, #4
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	4950      	ldr	r1, [pc, #320]	; (80034e4 <HAL_RCC_OscConfig+0x274>)
 80033a4:	5ccb      	ldrb	r3, [r1, r3]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	fa22 f303 	lsr.w	r3, r2, r3
 80033ae:	4a4e      	ldr	r2, [pc, #312]	; (80034e8 <HAL_RCC_OscConfig+0x278>)
 80033b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033b2:	4b4e      	ldr	r3, [pc, #312]	; (80034ec <HAL_RCC_OscConfig+0x27c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd ff4c 	bl	8001254 <HAL_InitTick>
 80033bc:	4603      	mov	r3, r0
 80033be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d052      	beq.n	800346c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	e364      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d032      	beq.n	8003438 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033d2:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a42      	ldr	r2, [pc, #264]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033de:	f7fd ff89 	bl	80012f4 <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033e6:	f7fd ff85 	bl	80012f4 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e34d      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033f8:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0f0      	beq.n	80033e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003404:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a35      	ldr	r2, [pc, #212]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 800340a:	f043 0308 	orr.w	r3, r3, #8
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4b33      	ldr	r3, [pc, #204]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	4930      	ldr	r1, [pc, #192]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003422:	4b2f      	ldr	r3, [pc, #188]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	492b      	ldr	r1, [pc, #172]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
 8003436:	e01a      	b.n	800346e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003438:	4b29      	ldr	r3, [pc, #164]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a28      	ldr	r2, [pc, #160]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003444:	f7fd ff56 	bl	80012f4 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800344c:	f7fd ff52 	bl	80012f4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e31a      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800345e:	4b20      	ldr	r3, [pc, #128]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x1dc>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d073      	beq.n	8003562 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b08      	cmp	r3, #8
 800347e:	d005      	beq.n	800348c <HAL_RCC_OscConfig+0x21c>
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d10e      	bne.n	80034a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d10b      	bne.n	80034a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800348c:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d063      	beq.n	8003560 <HAL_RCC_OscConfig+0x2f0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d15f      	bne.n	8003560 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e2f7      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d106      	bne.n	80034bc <HAL_RCC_OscConfig+0x24c>
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80034b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	e025      	b.n	8003508 <HAL_RCC_OscConfig+0x298>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034c4:	d114      	bne.n	80034f0 <HAL_RCC_OscConfig+0x280>
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a05      	ldr	r2, [pc, #20]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80034cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d0:	6013      	str	r3, [r2, #0]
 80034d2:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a02      	ldr	r2, [pc, #8]	; (80034e0 <HAL_RCC_OscConfig+0x270>)
 80034d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034dc:	6013      	str	r3, [r2, #0]
 80034de:	e013      	b.n	8003508 <HAL_RCC_OscConfig+0x298>
 80034e0:	40021000 	.word	0x40021000
 80034e4:	08004af4 	.word	0x08004af4
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000004 	.word	0x20000004
 80034f0:	4ba0      	ldr	r3, [pc, #640]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a9f      	ldr	r2, [pc, #636]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b9d      	ldr	r3, [pc, #628]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a9c      	ldr	r2, [pc, #624]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fd fef0 	bl	80012f4 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7fd feec 	bl	80012f4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e2b4      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352a:	4b92      	ldr	r3, [pc, #584]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x2a8>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003538:	f7fd fedc 	bl	80012f4 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7fd fed8 	bl	80012f4 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e2a0      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003552:	4b88      	ldr	r3, [pc, #544]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f0      	bne.n	8003540 <HAL_RCC_OscConfig+0x2d0>
 800355e:	e000      	b.n	8003562 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d060      	beq.n	8003630 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d005      	beq.n	8003580 <HAL_RCC_OscConfig+0x310>
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d119      	bne.n	80035ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2b02      	cmp	r3, #2
 800357e:	d116      	bne.n	80035ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	4b7c      	ldr	r3, [pc, #496]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_OscConfig+0x328>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e27d      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003598:	4b76      	ldr	r3, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691b      	ldr	r3, [r3, #16]
 80035a4:	061b      	lsls	r3, r3, #24
 80035a6:	4973      	ldr	r1, [pc, #460]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035ac:	e040      	b.n	8003630 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d023      	beq.n	80035fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b6:	4b6f      	ldr	r3, [pc, #444]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6e      	ldr	r2, [pc, #440]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80035bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fd fe97 	bl	80012f4 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ca:	f7fd fe93 	bl	80012f4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e25b      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035dc:	4b65      	ldr	r3, [pc, #404]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b62      	ldr	r3, [pc, #392]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	061b      	lsls	r3, r3, #24
 80035f6:	495f      	ldr	r1, [pc, #380]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
 80035fc:	e018      	b.n	8003630 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035fe:	4b5d      	ldr	r3, [pc, #372]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a5c      	ldr	r2, [pc, #368]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7fd fe73 	bl	80012f4 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003612:	f7fd fe6f 	bl	80012f4 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e237      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003624:	4b53      	ldr	r3, [pc, #332]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1f0      	bne.n	8003612 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d03c      	beq.n	80036b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01c      	beq.n	800367e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003644:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800364a:	4a4a      	ldr	r2, [pc, #296]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fd fe4e 	bl	80012f4 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365c:	f7fd fe4a 	bl	80012f4 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e212      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800366e:	4b41      	ldr	r3, [pc, #260]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003670:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ef      	beq.n	800365c <HAL_RCC_OscConfig+0x3ec>
 800367c:	e01b      	b.n	80036b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003684:	4a3b      	ldr	r2, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7fd fe31 	bl	80012f4 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003696:	f7fd fe2d 	bl	80012f4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e1f5      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a8:	4b32      	ldr	r3, [pc, #200]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80036aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1ef      	bne.n	8003696 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	f000 80a6 	beq.w	8003810 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c4:	2300      	movs	r3, #0
 80036c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10d      	bne.n	80036f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d4:	4b27      	ldr	r3, [pc, #156]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	4a26      	ldr	r2, [pc, #152]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80036da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036de:	6593      	str	r3, [r2, #88]	; 0x58
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ec:	2301      	movs	r3, #1
 80036ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036f0:	4b21      	ldr	r3, [pc, #132]	; (8003778 <HAL_RCC_OscConfig+0x508>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d118      	bne.n	800372e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036fc:	4b1e      	ldr	r3, [pc, #120]	; (8003778 <HAL_RCC_OscConfig+0x508>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a1d      	ldr	r2, [pc, #116]	; (8003778 <HAL_RCC_OscConfig+0x508>)
 8003702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003706:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003708:	f7fd fdf4 	bl	80012f4 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003710:	f7fd fdf0 	bl	80012f4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e1b8      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_RCC_OscConfig+0x508>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d108      	bne.n	8003748 <HAL_RCC_OscConfig+0x4d8>
 8003736:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	4a0d      	ldr	r2, [pc, #52]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003746:	e029      	b.n	800379c <HAL_RCC_OscConfig+0x52c>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	2b05      	cmp	r3, #5
 800374e:	d115      	bne.n	800377c <HAL_RCC_OscConfig+0x50c>
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003756:	4a07      	ldr	r2, [pc, #28]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003766:	4a03      	ldr	r2, [pc, #12]	; (8003774 <HAL_RCC_OscConfig+0x504>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003770:	e014      	b.n	800379c <HAL_RCC_OscConfig+0x52c>
 8003772:	bf00      	nop
 8003774:	40021000 	.word	0x40021000
 8003778:	40007000 	.word	0x40007000
 800377c:	4b9d      	ldr	r3, [pc, #628]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	4a9c      	ldr	r2, [pc, #624]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003784:	f023 0301 	bic.w	r3, r3, #1
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378c:	4b99      	ldr	r3, [pc, #612]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 800378e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003792:	4a98      	ldr	r2, [pc, #608]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003794:	f023 0304 	bic.w	r3, r3, #4
 8003798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d016      	beq.n	80037d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a4:	f7fd fda6 	bl	80012f4 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ac:	f7fd fda2 	bl	80012f4 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e168      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c2:	4b8c      	ldr	r3, [pc, #560]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0ed      	beq.n	80037ac <HAL_RCC_OscConfig+0x53c>
 80037d0:	e015      	b.n	80037fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fd fd8f 	bl	80012f4 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fd fd8b 	bl	80012f4 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e151      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f0:	4b80      	ldr	r3, [pc, #512]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1ed      	bne.n	80037da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037fe:	7ffb      	ldrb	r3, [r7, #31]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d105      	bne.n	8003810 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003804:	4b7b      	ldr	r3, [pc, #492]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	4a7a      	ldr	r2, [pc, #488]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 800380a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800380e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d03c      	beq.n	8003896 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d01c      	beq.n	800385e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003824:	4b73      	ldr	r3, [pc, #460]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800382a:	4a72      	ldr	r2, [pc, #456]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fd fd5e 	bl	80012f4 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800383c:	f7fd fd5a 	bl	80012f4 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e122      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800384e:	4b69      	ldr	r3, [pc, #420]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ef      	beq.n	800383c <HAL_RCC_OscConfig+0x5cc>
 800385c:	e01b      	b.n	8003896 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800385e:	4b65      	ldr	r3, [pc, #404]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003860:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003864:	4a63      	ldr	r2, [pc, #396]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003866:	f023 0301 	bic.w	r3, r3, #1
 800386a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fd fd41 	bl	80012f4 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003876:	f7fd fd3d 	bl	80012f4 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e105      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003888:	4b5a      	ldr	r3, [pc, #360]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 800388a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1ef      	bne.n	8003876 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80f9 	beq.w	8003a92 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	f040 80cf 	bne.w	8003a48 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038aa:	4b52      	ldr	r3, [pc, #328]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f003 0203 	and.w	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d12c      	bne.n	8003918 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	3b01      	subs	r3, #1
 80038ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d123      	bne.n	8003918 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d11b      	bne.n	8003918 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d113      	bne.n	8003918 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	085b      	lsrs	r3, r3, #1
 80038fc:	3b01      	subs	r3, #1
 80038fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d109      	bne.n	8003918 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	085b      	lsrs	r3, r3, #1
 8003910:	3b01      	subs	r3, #1
 8003912:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003914:	429a      	cmp	r2, r3
 8003916:	d071      	beq.n	80039fc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	2b0c      	cmp	r3, #12
 800391c:	d068      	beq.n	80039f0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800391e:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d105      	bne.n	8003936 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800392a:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d001      	beq.n	800393a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0ac      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800393a:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2d      	ldr	r2, [pc, #180]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003944:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003946:	f7fd fcd5 	bl	80012f4 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394e:	f7fd fcd1 	bl	80012f4 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e099      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003960:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1f0      	bne.n	800394e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396c:	4b21      	ldr	r3, [pc, #132]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <HAL_RCC_OscConfig+0x788>)
 8003972:	4013      	ands	r3, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800397c:	3a01      	subs	r2, #1
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	4311      	orrs	r1, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003986:	0212      	lsls	r2, r2, #8
 8003988:	4311      	orrs	r1, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800398e:	0852      	lsrs	r2, r2, #1
 8003990:	3a01      	subs	r2, #1
 8003992:	0552      	lsls	r2, r2, #21
 8003994:	4311      	orrs	r1, r2
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800399a:	0852      	lsrs	r2, r2, #1
 800399c:	3a01      	subs	r2, #1
 800399e:	0652      	lsls	r2, r2, #25
 80039a0:	4311      	orrs	r1, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039a6:	06d2      	lsls	r2, r2, #27
 80039a8:	430a      	orrs	r2, r1
 80039aa:	4912      	ldr	r1, [pc, #72]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039b0:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 80039b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039bc:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a0c      	ldr	r2, [pc, #48]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 80039c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039c8:	f7fd fc94 	bl	80012f4 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d0:	f7fd fc90 	bl	80012f4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e058      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_RCC_OscConfig+0x784>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f0      	beq.n	80039d0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039ee:	e050      	b.n	8003a92 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e04f      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
 80039f4:	40021000 	.word	0x40021000
 80039f8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039fc:	4b27      	ldr	r3, [pc, #156]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d144      	bne.n	8003a92 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a08:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a23      	ldr	r2, [pc, #140]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4a20      	ldr	r2, [pc, #128]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a20:	f7fd fc68 	bl	80012f4 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a28:	f7fd fc64 	bl	80012f4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e02c      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3a:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x7b8>
 8003a46:	e024      	b.n	8003a92 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d01f      	beq.n	8003a8e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5a:	f7fd fc4b 	bl	80012f4 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fd fc47 	bl	80012f4 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e00f      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a74:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d1f0      	bne.n	8003a62 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a80:	4b06      	ldr	r3, [pc, #24]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	4905      	ldr	r1, [pc, #20]	; (8003a9c <HAL_RCC_OscConfig+0x82c>)
 8003a86:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_RCC_OscConfig+0x830>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	60cb      	str	r3, [r1, #12]
 8003a8c:	e001      	b.n	8003a92 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3720      	adds	r7, #32
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	feeefffc 	.word	0xfeeefffc

08003aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e11d      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003abc:	4b90      	ldr	r3, [pc, #576]	; (8003d00 <HAL_RCC_ClockConfig+0x25c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d910      	bls.n	8003aec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b8d      	ldr	r3, [pc, #564]	; (8003d00 <HAL_RCC_ClockConfig+0x25c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 020f 	bic.w	r2, r3, #15
 8003ad2:	498b      	ldr	r1, [pc, #556]	; (8003d00 <HAL_RCC_ClockConfig+0x25c>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b89      	ldr	r3, [pc, #548]	; (8003d00 <HAL_RCC_ClockConfig+0x25c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d001      	beq.n	8003aec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e105      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d010      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	4b81      	ldr	r3, [pc, #516]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d908      	bls.n	8003b1a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b7e      	ldr	r3, [pc, #504]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	497b      	ldr	r1, [pc, #492]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d079      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	d11e      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2e:	4b75      	ldr	r3, [pc, #468]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e0dc      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003b3e:	f000 f9dd 	bl	8003efc <RCC_GetSysClockFreqFromPLLSource>
 8003b42:	4603      	mov	r3, r0
 8003b44:	4a70      	ldr	r2, [pc, #448]	; (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d946      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b4a:	4b6e      	ldr	r3, [pc, #440]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d140      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b56:	4b6b      	ldr	r3, [pc, #428]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b5e:	4a69      	ldr	r2, [pc, #420]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e035      	b.n	8003bd8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b74:	4b63      	ldr	r3, [pc, #396]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d115      	bne.n	8003bac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0b9      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b8c:	4b5d      	ldr	r3, [pc, #372]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e0ad      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b9c:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0a5      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003bac:	f000 f8b4 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4a55      	ldr	r2, [pc, #340]	; (8003d08 <HAL_RCC_ClockConfig+0x264>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d90f      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003bb8:	4b52      	ldr	r3, [pc, #328]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d109      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bc4:	4b4f      	ldr	r3, [pc, #316]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bcc:	4a4d      	ldr	r2, [pc, #308]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bd8:	4b4a      	ldr	r3, [pc, #296]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f023 0203 	bic.w	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	4947      	ldr	r1, [pc, #284]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bea:	f7fd fb83 	bl	80012f4 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf2:	f7fd fb7f 	bl	80012f4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e077      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c08:	4b3e      	ldr	r3, [pc, #248]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f003 020c 	and.w	r2, r3, #12
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d1eb      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d105      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c20:	4b38      	ldr	r3, [pc, #224]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	4a37      	ldr	r2, [pc, #220]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c2a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d010      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	4b31      	ldr	r3, [pc, #196]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d208      	bcs.n	8003c5a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c48:	4b2e      	ldr	r3, [pc, #184]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	492b      	ldr	r1, [pc, #172]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c5a:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <HAL_RCC_ClockConfig+0x25c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	683a      	ldr	r2, [r7, #0]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d210      	bcs.n	8003c8a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_ClockConfig+0x25c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 020f 	bic.w	r2, r3, #15
 8003c70:	4923      	ldr	r1, [pc, #140]	; (8003d00 <HAL_RCC_ClockConfig+0x25c>)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c78:	4b21      	ldr	r3, [pc, #132]	; (8003d00 <HAL_RCC_ClockConfig+0x25c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 030f 	and.w	r3, r3, #15
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e036      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d008      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4918      	ldr	r1, [pc, #96]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cb4:	4b13      	ldr	r3, [pc, #76]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4910      	ldr	r1, [pc, #64]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cc8:	f000 f826 	bl	8003d18 <HAL_RCC_GetSysClockFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b0d      	ldr	r3, [pc, #52]	; (8003d04 <HAL_RCC_ClockConfig+0x260>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	490c      	ldr	r1, [pc, #48]	; (8003d0c <HAL_RCC_ClockConfig+0x268>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <HAL_RCC_ClockConfig+0x26c>)
 8003ce6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ce8:	4b0a      	ldr	r3, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x270>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd fab1 	bl	8001254 <HAL_InitTick>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3718      	adds	r7, #24
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40022000 	.word	0x40022000
 8003d04:	40021000 	.word	0x40021000
 8003d08:	04c4b400 	.word	0x04c4b400
 8003d0c:	08004af4 	.word	0x08004af4
 8003d10:	20000000 	.word	0x20000000
 8003d14:	20000004 	.word	0x20000004

08003d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b089      	sub	sp, #36	; 0x24
 8003d1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d30:	4b3b      	ldr	r3, [pc, #236]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x34>
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d121      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d11e      	bne.n	8003d8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d4c:	4b34      	ldr	r3, [pc, #208]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d58:	4b31      	ldr	r3, [pc, #196]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5e:	0a1b      	lsrs	r3, r3, #8
 8003d60:	f003 030f 	and.w	r3, r3, #15
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	e005      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d68:	4b2d      	ldr	r3, [pc, #180]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 030f 	and.w	r3, r3, #15
 8003d72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d74:	4a2b      	ldr	r2, [pc, #172]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10d      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d88:	e00a      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d102      	bne.n	8003d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d90:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d92:	61bb      	str	r3, [r7, #24]
 8003d94:	e004      	b.n	8003da0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d9c:	4b23      	ldr	r3, [pc, #140]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8003d9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2b0c      	cmp	r3, #12
 8003da4:	d134      	bne.n	8003e10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003da6:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f003 0303 	and.w	r3, r3, #3
 8003dae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_GetSysClockFreq+0xa6>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d003      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xac>
 8003dbc:	e005      	b.n	8003dca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dc0:	617b      	str	r3, [r7, #20]
      break;
 8003dc2:	e005      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003dc4:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8003dc6:	617b      	str	r3, [r7, #20]
      break;
 8003dc8:	e002      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	617b      	str	r3, [r7, #20]
      break;
 8003dce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd0:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	3301      	adds	r3, #1
 8003ddc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003dde:	4b10      	ldr	r3, [pc, #64]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	fb03 f202 	mul.w	r2, r3, r2
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	0e5b      	lsrs	r3, r3, #25
 8003dfc:	f003 0303 	and.w	r3, r3, #3
 8003e00:	3301      	adds	r3, #1
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e10:	69bb      	ldr	r3, [r7, #24]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3724      	adds	r7, #36	; 0x24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40021000 	.word	0x40021000
 8003e24:	08004b04 	.word	0x08004b04
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	007a1200 	.word	0x007a1200

08003e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000000 	.word	0x20000000

08003e48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e54:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e60:	f7ff f942 	bl	80030e8 <HAL_PWREx_GetVoltageRange>
 8003e64:	6178      	str	r0, [r7, #20]
 8003e66:	e014      	b.n	8003e92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e68:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e72:	6593      	str	r3, [r2, #88]	; 0x58
 8003e74:	4b1f      	ldr	r3, [pc, #124]	; (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e80:	f7ff f932 	bl	80030e8 <HAL_PWREx_GetVoltageRange>
 8003e84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	d10b      	bne.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b80      	cmp	r3, #128	; 0x80
 8003e9e:	d913      	bls.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ea4:	d902      	bls.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	e00d      	b.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eac:	2301      	movs	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
 8003eb0:	e00a      	b.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8003eb6:	d902      	bls.n	8003ebe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003eb8:	2302      	movs	r3, #2
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	e004      	b.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b70      	cmp	r3, #112	; 0x70
 8003ec2:	d101      	bne.n	8003ec8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f023 020f 	bic.w	r2, r3, #15
 8003ed0:	4909      	ldr	r1, [pc, #36]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d001      	beq.n	8003eea <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3718      	adds	r7, #24
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40022000 	.word	0x40022000

08003efc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f02:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b03      	cmp	r3, #3
 8003f10:	d00b      	beq.n	8003f2a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d825      	bhi.n	8003f64 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d008      	beq.n	8003f30 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d11f      	bne.n	8003f64 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003f24:	4b25      	ldr	r3, [pc, #148]	; (8003fbc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f26:	613b      	str	r3, [r7, #16]
    break;
 8003f28:	e01f      	b.n	8003f6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003f2a:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003f2c:	613b      	str	r3, [r7, #16]
    break;
 8003f2e:	e01c      	b.n	8003f6a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f3c:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e005      	b.n	8003f58 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003f58:	4a1a      	ldr	r2, [pc, #104]	; (8003fc4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f60:	613b      	str	r3, [r7, #16]
    break;
 8003f62:	e002      	b.n	8003f6a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003f64:	2300      	movs	r3, #0
 8003f66:	613b      	str	r3, [r7, #16]
    break;
 8003f68:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	3301      	adds	r3, #1
 8003f76:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	fb03 f202 	mul.w	r2, r3, r2
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	0e5b      	lsrs	r3, r3, #25
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003faa:	683b      	ldr	r3, [r7, #0]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	371c      	adds	r7, #28
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	00f42400 	.word	0x00f42400
 8003fc0:	007a1200 	.word	0x007a1200
 8003fc4:	08004b04 	.word	0x08004b04

08003fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d040      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe8:	2b80      	cmp	r3, #128	; 0x80
 8003fea:	d02a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fec:	2b80      	cmp	r3, #128	; 0x80
 8003fee:	d825      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ff0:	2b60      	cmp	r3, #96	; 0x60
 8003ff2:	d026      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ff4:	2b60      	cmp	r3, #96	; 0x60
 8003ff6:	d821      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d006      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d81d      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004000:	2b00      	cmp	r3, #0
 8004002:	d009      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004004:	2b20      	cmp	r3, #32
 8004006:	d010      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004008:	e018      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800400a:	4b89      	ldr	r3, [pc, #548]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4a88      	ldr	r2, [pc, #544]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004016:	e015      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	3304      	adds	r3, #4
 800401c:	2100      	movs	r1, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fb02 	bl	8004628 <RCCEx_PLLSAI1_Config>
 8004024:	4603      	mov	r3, r0
 8004026:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004028:	e00c      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3320      	adds	r3, #32
 800402e:	2100      	movs	r1, #0
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fbed 	bl	8004810 <RCCEx_PLLSAI2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800403a:	e003      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	74fb      	strb	r3, [r7, #19]
      break;
 8004040:	e000      	b.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800404a:	4b79      	ldr	r3, [pc, #484]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800404c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004050:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004058:	4975      	ldr	r1, [pc, #468]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004060:	e001      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d047      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800407a:	d030      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x116>
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004080:	d82a      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004086:	d02a      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800408c:	d824      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800408e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004092:	d008      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004098:	d81e      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800409e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a2:	d010      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80040a4:	e018      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80040a6:	4b62      	ldr	r3, [pc, #392]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	4a61      	ldr	r2, [pc, #388]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040b2:	e015      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	3304      	adds	r3, #4
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fab4 	bl	8004628 <RCCEx_PLLSAI1_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040c4:	e00c      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3320      	adds	r3, #32
 80040ca:	2100      	movs	r1, #0
 80040cc:	4618      	mov	r0, r3
 80040ce:	f000 fb9f 	bl	8004810 <RCCEx_PLLSAI2_Config>
 80040d2:	4603      	mov	r3, r0
 80040d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040d6:	e003      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	74fb      	strb	r3, [r7, #19]
      break;
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80040de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10b      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040e6:	4b52      	ldr	r3, [pc, #328]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	494e      	ldr	r1, [pc, #312]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040fc:	e001      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 809f 	beq.w	800424e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004110:	2300      	movs	r3, #0
 8004112:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004114:	4b46      	ldr	r3, [pc, #280]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004124:	2300      	movs	r3, #0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00d      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	4b41      	ldr	r3, [pc, #260]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800412e:	4a40      	ldr	r2, [pc, #256]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004134:	6593      	str	r3, [r2, #88]	; 0x58
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413e:	60bb      	str	r3, [r7, #8]
 8004140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004142:	2301      	movs	r3, #1
 8004144:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3a      	ldr	r2, [pc, #232]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004152:	f7fd f8cf 	bl	80012f4 <HAL_GetTick>
 8004156:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004158:	e009      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fd f8cb 	bl	80012f4 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d902      	bls.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	74fb      	strb	r3, [r7, #19]
        break;
 800416c:	e005      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800416e:	4b31      	ldr	r3, [pc, #196]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0ef      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d15b      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01f      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	429a      	cmp	r2, r3
 800419c:	d019      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800419e:	4b24      	ldr	r3, [pc, #144]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041aa:	4b21      	ldr	r3, [pc, #132]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041ba:	4b1d      	ldr	r3, [pc, #116]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041ca:	4a19      	ldr	r2, [pc, #100]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d016      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7fd f88a 	bl	80012f4 <HAL_GetTick>
 80041e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e2:	e00b      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e4:	f7fd f886 	bl	80012f4 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d902      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	74fb      	strb	r3, [r7, #19]
            break;
 80041fa:	e006      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0ec      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800420a:	7cfb      	ldrb	r3, [r7, #19]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10c      	bne.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004220:	4903      	ldr	r1, [pc, #12]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004228:	e008      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800422a:	7cfb      	ldrb	r3, [r7, #19]
 800422c:	74bb      	strb	r3, [r7, #18]
 800422e:	e005      	b.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004230:	40021000 	.word	0x40021000
 8004234:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004238:	7cfb      	ldrb	r3, [r7, #19]
 800423a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800423c:	7c7b      	ldrb	r3, [r7, #17]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d105      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004242:	4ba0      	ldr	r3, [pc, #640]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	4a9f      	ldr	r2, [pc, #636]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800424c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800425a:	4b9a      	ldr	r3, [pc, #616]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800425c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004260:	f023 0203 	bic.w	r2, r3, #3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	4996      	ldr	r1, [pc, #600]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800427c:	4b91      	ldr	r3, [pc, #580]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800427e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004282:	f023 020c 	bic.w	r2, r3, #12
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	498e      	ldr	r1, [pc, #568]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428c:	4313      	orrs	r3, r2
 800428e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800429e:	4b89      	ldr	r3, [pc, #548]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ac:	4985      	ldr	r1, [pc, #532]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042c0:	4b80      	ldr	r3, [pc, #512]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042ce:	497d      	ldr	r1, [pc, #500]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0310 	and.w	r3, r3, #16
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042e2:	4b78      	ldr	r3, [pc, #480]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f0:	4974      	ldr	r1, [pc, #464]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004304:	4b6f      	ldr	r3, [pc, #444]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800430a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004312:	496c      	ldr	r1, [pc, #432]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004326:	4b67      	ldr	r3, [pc, #412]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004334:	4963      	ldr	r1, [pc, #396]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004348:	4b5e      	ldr	r3, [pc, #376]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004356:	495b      	ldr	r1, [pc, #364]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800436a:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004370:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004378:	4952      	ldr	r1, [pc, #328]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437a:	4313      	orrs	r3, r2
 800437c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800438c:	4b4d      	ldr	r3, [pc, #308]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800438e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004392:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	494a      	ldr	r1, [pc, #296]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043ae:	4b45      	ldr	r3, [pc, #276]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043bc:	4941      	ldr	r1, [pc, #260]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043d0:	4b3c      	ldr	r3, [pc, #240]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043d6:	f023 0203 	bic.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043de:	4939      	ldr	r1, [pc, #228]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d028      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043f2:	4b34      	ldr	r3, [pc, #208]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004400:	4930      	ldr	r1, [pc, #192]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004410:	d106      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004412:	4b2c      	ldr	r3, [pc, #176]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4a2b      	ldr	r2, [pc, #172]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441c:	60d3      	str	r3, [r2, #12]
 800441e:	e011      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004428:	d10c      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	3304      	adds	r3, #4
 800442e:	2101      	movs	r1, #1
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f8f9 	bl	8004628 <RCCEx_PLLSAI1_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800443a:	7cfb      	ldrb	r3, [r7, #19]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004440:	7cfb      	ldrb	r3, [r7, #19]
 8004442:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d04d      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004458:	d108      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800445a:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004460:	4a18      	ldr	r2, [pc, #96]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004466:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800446a:	e012      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800446c:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004472:	4a14      	ldr	r2, [pc, #80]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004474:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004478:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800447c:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800448a:	490e      	ldr	r1, [pc, #56]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800449a:	d106      	bne.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800449c:	4b09      	ldr	r3, [pc, #36]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4a08      	ldr	r2, [pc, #32]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a6:	60d3      	str	r3, [r2, #12]
 80044a8:	e020      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b2:	d109      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044b4:	4b03      	ldr	r3, [pc, #12]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	4a02      	ldr	r2, [pc, #8]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044be:	60d3      	str	r3, [r2, #12]
 80044c0:	e014      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 80044c2:	bf00      	nop
 80044c4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d0:	d10c      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2101      	movs	r1, #1
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f8a5 	bl	8004628 <RCCEx_PLLSAI1_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044e2:	7cfb      	ldrb	r3, [r7, #19]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d028      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044f8:	4b4a      	ldr	r3, [pc, #296]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004506:	4947      	ldr	r1, [pc, #284]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004516:	d106      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004518:	4b42      	ldr	r3, [pc, #264]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4a41      	ldr	r2, [pc, #260]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800451e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004522:	60d3      	str	r3, [r2, #12]
 8004524:	e011      	b.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800452e:	d10c      	bne.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f876 	bl	8004628 <RCCEx_PLLSAI1_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004540:	7cfb      	ldrb	r3, [r7, #19]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004546:	7cfb      	ldrb	r3, [r7, #19]
 8004548:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d01e      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004556:	4b33      	ldr	r3, [pc, #204]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004566:	492f      	ldr	r1, [pc, #188]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004578:	d10c      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	2102      	movs	r1, #2
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f851 	bl	8004628 <RCCEx_PLLSAI1_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004590:	7cfb      	ldrb	r3, [r7, #19]
 8004592:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00b      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045a0:	4b20      	ldr	r3, [pc, #128]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045a6:	f023 0204 	bic.w	r2, r3, #4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b0:	491c      	ldr	r1, [pc, #112]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00b      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045c4:	4b17      	ldr	r3, [pc, #92]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ca:	f023 0218 	bic.w	r2, r3, #24
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d4:	4913      	ldr	r1, [pc, #76]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d017      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f8:	490a      	ldr	r1, [pc, #40]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800460a:	d105      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800460c:	4b05      	ldr	r3, [pc, #20]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	4a04      	ldr	r2, [pc, #16]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004616:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004618:	7cbb      	ldrb	r3, [r7, #18]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	40021000 	.word	0x40021000

08004628 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004636:	4b72      	ldr	r3, [pc, #456]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00e      	beq.n	8004660 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004642:	4b6f      	ldr	r3, [pc, #444]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f003 0203 	and.w	r2, r3, #3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d103      	bne.n	800465a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
       ||
 8004656:	2b00      	cmp	r3, #0
 8004658:	d142      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	73fb      	strb	r3, [r7, #15]
 800465e:	e03f      	b.n	80046e0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d018      	beq.n	800469a <RCCEx_PLLSAI1_Config+0x72>
 8004668:	2b03      	cmp	r3, #3
 800466a:	d825      	bhi.n	80046b8 <RCCEx_PLLSAI1_Config+0x90>
 800466c:	2b01      	cmp	r3, #1
 800466e:	d002      	beq.n	8004676 <RCCEx_PLLSAI1_Config+0x4e>
 8004670:	2b02      	cmp	r3, #2
 8004672:	d009      	beq.n	8004688 <RCCEx_PLLSAI1_Config+0x60>
 8004674:	e020      	b.n	80046b8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004676:	4b62      	ldr	r3, [pc, #392]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d11d      	bne.n	80046be <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004686:	e01a      	b.n	80046be <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004688:	4b5d      	ldr	r3, [pc, #372]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d116      	bne.n	80046c2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004698:	e013      	b.n	80046c2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800469a:	4b59      	ldr	r3, [pc, #356]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a6:	4b56      	ldr	r3, [pc, #344]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d109      	bne.n	80046c6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b6:	e006      	b.n	80046c6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	e004      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046be:	bf00      	nop
 80046c0:	e002      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d108      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80046ce:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f023 0203 	bic.w	r2, r3, #3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4949      	ldr	r1, [pc, #292]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f040 8086 	bne.w	80047f4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046e8:	4b45      	ldr	r3, [pc, #276]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a44      	ldr	r2, [pc, #272]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046f4:	f7fc fdfe 	bl	80012f4 <HAL_GetTick>
 80046f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046fa:	e009      	b.n	8004710 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046fc:	f7fc fdfa 	bl	80012f4 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d902      	bls.n	8004710 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	73fb      	strb	r3, [r7, #15]
        break;
 800470e:	e005      	b.n	800471c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004710:	4b3b      	ldr	r3, [pc, #236]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1ef      	bne.n	80046fc <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d168      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d113      	bne.n	8004750 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004728:	4b35      	ldr	r3, [pc, #212]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 800472a:	691a      	ldr	r2, [r3, #16]
 800472c:	4b35      	ldr	r3, [pc, #212]	; (8004804 <RCCEx_PLLSAI1_Config+0x1dc>)
 800472e:	4013      	ands	r3, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6892      	ldr	r2, [r2, #8]
 8004734:	0211      	lsls	r1, r2, #8
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68d2      	ldr	r2, [r2, #12]
 800473a:	06d2      	lsls	r2, r2, #27
 800473c:	4311      	orrs	r1, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6852      	ldr	r2, [r2, #4]
 8004742:	3a01      	subs	r2, #1
 8004744:	0112      	lsls	r2, r2, #4
 8004746:	430a      	orrs	r2, r1
 8004748:	492d      	ldr	r1, [pc, #180]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	610b      	str	r3, [r1, #16]
 800474e:	e02d      	b.n	80047ac <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d115      	bne.n	8004782 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004756:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004758:	691a      	ldr	r2, [r3, #16]
 800475a:	4b2b      	ldr	r3, [pc, #172]	; (8004808 <RCCEx_PLLSAI1_Config+0x1e0>)
 800475c:	4013      	ands	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6892      	ldr	r2, [r2, #8]
 8004762:	0211      	lsls	r1, r2, #8
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6912      	ldr	r2, [r2, #16]
 8004768:	0852      	lsrs	r2, r2, #1
 800476a:	3a01      	subs	r2, #1
 800476c:	0552      	lsls	r2, r2, #21
 800476e:	4311      	orrs	r1, r2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6852      	ldr	r2, [r2, #4]
 8004774:	3a01      	subs	r2, #1
 8004776:	0112      	lsls	r2, r2, #4
 8004778:	430a      	orrs	r2, r1
 800477a:	4921      	ldr	r1, [pc, #132]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	610b      	str	r3, [r1, #16]
 8004780:	e014      	b.n	80047ac <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004782:	4b1f      	ldr	r3, [pc, #124]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	4b21      	ldr	r3, [pc, #132]	; (800480c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6892      	ldr	r2, [r2, #8]
 800478e:	0211      	lsls	r1, r2, #8
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6952      	ldr	r2, [r2, #20]
 8004794:	0852      	lsrs	r2, r2, #1
 8004796:	3a01      	subs	r2, #1
 8004798:	0652      	lsls	r2, r2, #25
 800479a:	4311      	orrs	r1, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6852      	ldr	r2, [r2, #4]
 80047a0:	3a01      	subs	r2, #1
 80047a2:	0112      	lsls	r2, r2, #4
 80047a4:	430a      	orrs	r2, r1
 80047a6:	4916      	ldr	r1, [pc, #88]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047ac:	4b14      	ldr	r3, [pc, #80]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a13      	ldr	r2, [pc, #76]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fc fd9c 	bl	80012f4 <HAL_GetTick>
 80047bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047be:	e009      	b.n	80047d4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047c0:	f7fc fd98 	bl	80012f4 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d902      	bls.n	80047d4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	73fb      	strb	r3, [r7, #15]
          break;
 80047d2:	e005      	b.n	80047e0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ef      	beq.n	80047c0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d106      	bne.n	80047f4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047e6:	4b06      	ldr	r3, [pc, #24]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	4904      	ldr	r1, [pc, #16]	; (8004800 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	07ff800f 	.word	0x07ff800f
 8004808:	ff9f800f 	.word	0xff9f800f
 800480c:	f9ff800f 	.word	0xf9ff800f

08004810 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800481e:	4b72      	ldr	r3, [pc, #456]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00e      	beq.n	8004848 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800482a:	4b6f      	ldr	r3, [pc, #444]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	f003 0203 	and.w	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	429a      	cmp	r2, r3
 8004838:	d103      	bne.n	8004842 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
       ||
 800483e:	2b00      	cmp	r3, #0
 8004840:	d142      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
 8004846:	e03f      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d018      	beq.n	8004882 <RCCEx_PLLSAI2_Config+0x72>
 8004850:	2b03      	cmp	r3, #3
 8004852:	d825      	bhi.n	80048a0 <RCCEx_PLLSAI2_Config+0x90>
 8004854:	2b01      	cmp	r3, #1
 8004856:	d002      	beq.n	800485e <RCCEx_PLLSAI2_Config+0x4e>
 8004858:	2b02      	cmp	r3, #2
 800485a:	d009      	beq.n	8004870 <RCCEx_PLLSAI2_Config+0x60>
 800485c:	e020      	b.n	80048a0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800485e:	4b62      	ldr	r3, [pc, #392]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11d      	bne.n	80048a6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486e:	e01a      	b.n	80048a6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004870:	4b5d      	ldr	r3, [pc, #372]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004878:	2b00      	cmp	r3, #0
 800487a:	d116      	bne.n	80048aa <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004880:	e013      	b.n	80048aa <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004882:	4b59      	ldr	r3, [pc, #356]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800488e:	4b56      	ldr	r3, [pc, #344]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800489e:	e006      	b.n	80048ae <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e004      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80048ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d108      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80048b6:	4b4c      	ldr	r3, [pc, #304]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f023 0203 	bic.w	r2, r3, #3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4949      	ldr	r1, [pc, #292]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f040 8086 	bne.w	80049dc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048d0:	4b45      	ldr	r3, [pc, #276]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a44      	ldr	r2, [pc, #272]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048dc:	f7fc fd0a 	bl	80012f4 <HAL_GetTick>
 80048e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048e2:	e009      	b.n	80048f8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048e4:	f7fc fd06 	bl	80012f4 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d902      	bls.n	80048f8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	73fb      	strb	r3, [r7, #15]
        break;
 80048f6:	e005      	b.n	8004904 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048f8:	4b3b      	ldr	r3, [pc, #236]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1ef      	bne.n	80048e4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d168      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d113      	bne.n	8004938 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004910:	4b35      	ldr	r3, [pc, #212]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	4b35      	ldr	r3, [pc, #212]	; (80049ec <RCCEx_PLLSAI2_Config+0x1dc>)
 8004916:	4013      	ands	r3, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6892      	ldr	r2, [r2, #8]
 800491c:	0211      	lsls	r1, r2, #8
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68d2      	ldr	r2, [r2, #12]
 8004922:	06d2      	lsls	r2, r2, #27
 8004924:	4311      	orrs	r1, r2
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6852      	ldr	r2, [r2, #4]
 800492a:	3a01      	subs	r2, #1
 800492c:	0112      	lsls	r2, r2, #4
 800492e:	430a      	orrs	r2, r1
 8004930:	492d      	ldr	r1, [pc, #180]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004932:	4313      	orrs	r3, r2
 8004934:	614b      	str	r3, [r1, #20]
 8004936:	e02d      	b.n	8004994 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d115      	bne.n	800496a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800493e:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	4b2b      	ldr	r3, [pc, #172]	; (80049f0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004944:	4013      	ands	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	6892      	ldr	r2, [r2, #8]
 800494a:	0211      	lsls	r1, r2, #8
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6912      	ldr	r2, [r2, #16]
 8004950:	0852      	lsrs	r2, r2, #1
 8004952:	3a01      	subs	r2, #1
 8004954:	0552      	lsls	r2, r2, #21
 8004956:	4311      	orrs	r1, r2
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6852      	ldr	r2, [r2, #4]
 800495c:	3a01      	subs	r2, #1
 800495e:	0112      	lsls	r2, r2, #4
 8004960:	430a      	orrs	r2, r1
 8004962:	4921      	ldr	r1, [pc, #132]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004964:	4313      	orrs	r3, r2
 8004966:	614b      	str	r3, [r1, #20]
 8004968:	e014      	b.n	8004994 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800496a:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800496c:	695a      	ldr	r2, [r3, #20]
 800496e:	4b21      	ldr	r3, [pc, #132]	; (80049f4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004970:	4013      	ands	r3, r2
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6892      	ldr	r2, [r2, #8]
 8004976:	0211      	lsls	r1, r2, #8
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6952      	ldr	r2, [r2, #20]
 800497c:	0852      	lsrs	r2, r2, #1
 800497e:	3a01      	subs	r2, #1
 8004980:	0652      	lsls	r2, r2, #25
 8004982:	4311      	orrs	r1, r2
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6852      	ldr	r2, [r2, #4]
 8004988:	3a01      	subs	r2, #1
 800498a:	0112      	lsls	r2, r2, #4
 800498c:	430a      	orrs	r2, r1
 800498e:	4916      	ldr	r1, [pc, #88]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004990:	4313      	orrs	r3, r2
 8004992:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800499a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800499e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fc fca8 	bl	80012f4 <HAL_GetTick>
 80049a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049a6:	e009      	b.n	80049bc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049a8:	f7fc fca4 	bl	80012f4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d902      	bls.n	80049bc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	73fb      	strb	r3, [r7, #15]
          break;
 80049ba:	e005      	b.n	80049c8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049bc:	4b0a      	ldr	r3, [pc, #40]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0ef      	beq.n	80049a8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	4904      	ldr	r1, [pc, #16]	; (80049e8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40021000 	.word	0x40021000
 80049ec:	07ff800f 	.word	0x07ff800f
 80049f0:	ff9f800f 	.word	0xff9f800f
 80049f4:	f9ff800f 	.word	0xf9ff800f

080049f8 <arm_sin_f32>:
 80049f8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004a78 <arm_sin_f32+0x80>
 80049fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004a00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004a0c:	d504      	bpl.n	8004a18 <arm_sin_f32+0x20>
 8004a0e:	ee17 3a90 	vmov	r3, s15
 8004a12:	3b01      	subs	r3, #1
 8004a14:	ee07 3a90 	vmov	s15, r3
 8004a18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a1c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004a7c <arm_sin_f32+0x84>
 8004a20:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004a24:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004a28:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004a2c:	ee17 3a90 	vmov	r3, s15
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a36:	d21a      	bcs.n	8004a6e <arm_sin_f32+0x76>
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a40:	1c59      	adds	r1, r3, #1
 8004a42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004a46:	4a0e      	ldr	r2, [pc, #56]	; (8004a80 <arm_sin_f32+0x88>)
 8004a48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004a4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004a50:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004a54:	ed93 7a00 	vldr	s14, [r3]
 8004a58:	edd2 6a00 	vldr	s13, [r2]
 8004a5c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004a60:	ee20 0a26 	vmul.f32	s0, s0, s13
 8004a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a68:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004a6c:	4770      	bx	lr
 8004a6e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004a72:	2101      	movs	r1, #1
 8004a74:	2300      	movs	r3, #0
 8004a76:	e7e6      	b.n	8004a46 <arm_sin_f32+0x4e>
 8004a78:	3e22f983 	.word	0x3e22f983
 8004a7c:	44000000 	.word	0x44000000
 8004a80:	08004b34 	.word	0x08004b34

08004a84 <memset>:
 8004a84:	4402      	add	r2, r0
 8004a86:	4603      	mov	r3, r0
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d100      	bne.n	8004a8e <memset+0xa>
 8004a8c:	4770      	bx	lr
 8004a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a92:	e7f9      	b.n	8004a88 <memset+0x4>

08004a94 <__libc_init_array>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	4d0d      	ldr	r5, [pc, #52]	; (8004acc <__libc_init_array+0x38>)
 8004a98:	4c0d      	ldr	r4, [pc, #52]	; (8004ad0 <__libc_init_array+0x3c>)
 8004a9a:	1b64      	subs	r4, r4, r5
 8004a9c:	10a4      	asrs	r4, r4, #2
 8004a9e:	2600      	movs	r6, #0
 8004aa0:	42a6      	cmp	r6, r4
 8004aa2:	d109      	bne.n	8004ab8 <__libc_init_array+0x24>
 8004aa4:	4d0b      	ldr	r5, [pc, #44]	; (8004ad4 <__libc_init_array+0x40>)
 8004aa6:	4c0c      	ldr	r4, [pc, #48]	; (8004ad8 <__libc_init_array+0x44>)
 8004aa8:	f000 f818 	bl	8004adc <_init>
 8004aac:	1b64      	subs	r4, r4, r5
 8004aae:	10a4      	asrs	r4, r4, #2
 8004ab0:	2600      	movs	r6, #0
 8004ab2:	42a6      	cmp	r6, r4
 8004ab4:	d105      	bne.n	8004ac2 <__libc_init_array+0x2e>
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
 8004ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004abc:	4798      	blx	r3
 8004abe:	3601      	adds	r6, #1
 8004ac0:	e7ee      	b.n	8004aa0 <__libc_init_array+0xc>
 8004ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ac6:	4798      	blx	r3
 8004ac8:	3601      	adds	r6, #1
 8004aca:	e7f2      	b.n	8004ab2 <__libc_init_array+0x1e>
 8004acc:	08005338 	.word	0x08005338
 8004ad0:	08005338 	.word	0x08005338
 8004ad4:	08005338 	.word	0x08005338
 8004ad8:	0800533c 	.word	0x0800533c

08004adc <_init>:
 8004adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ade:	bf00      	nop
 8004ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae2:	bc08      	pop	{r3}
 8004ae4:	469e      	mov	lr, r3
 8004ae6:	4770      	bx	lr

08004ae8 <_fini>:
 8004ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aea:	bf00      	nop
 8004aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aee:	bc08      	pop	{r3}
 8004af0:	469e      	mov	lr, r3
 8004af2:	4770      	bx	lr
