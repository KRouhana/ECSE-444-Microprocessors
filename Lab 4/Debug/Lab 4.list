
Lab 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee48  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800f008  0800f008  0001f008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f720  0800f720  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800f720  0800f720  0001f720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f728  0800f728  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f728  0800f728  0001f728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f72c  0800f72c  0001f72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800f730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000260  0800f990  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200016fc  0800f990  000216fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00024020  00000000  00000000  000202d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e24  00000000  00000000  000442f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  00049118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016e2  00000000  00000000  0004aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030597  00000000  00000000  0004c582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002391f  00000000  00000000  0007cb19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00120cf5  00000000  00000000  000a0438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008fd0  00000000  00000000  001c1130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001ca100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000260 	.word	0x20000260
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800eff0 	.word	0x0800eff0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000264 	.word	0x20000264
 80001fc:	0800eff0 	.word	0x0800eff0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <vApplicationGetIdleTaskMemory+0x2c>)
 8001030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <vApplicationGetIdleTaskMemory+0x30>)
 8001036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000027c 	.word	0x2000027c
 8001050:	2000031c 	.word	0x2000031c

08001054 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2120      	movs	r1, #32
 8001066:	4618      	mov	r0, r3
 8001068:	f001 ff34 	bl	8002ed4 <SENSOR_IO_Read>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001096:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	2120      	movs	r1, #32
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fefd 	bl	8002ea0 <SENSOR_IO_Write>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	b2d8      	uxtb	r0, r3
 80010bc:	f107 0208 	add.w	r2, r7, #8
 80010c0:	2302      	movs	r3, #2
 80010c2:	21b2      	movs	r1, #178	; 0xb2
 80010c4:	f001 ff24 	bl	8002f10 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2135      	movs	r1, #53	; 0x35
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 ff00 	bl	8002ed4 <SENSOR_IO_Read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80010d8:	7ffb      	ldrb	r3, [r7, #31]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21b      	sxth	r3, r3
 80010de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7a3b      	ldrb	r3, [r7, #8]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
 80010ee:	019b      	lsls	r3, r3, #6
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7a7b      	ldrb	r3, [r7, #9]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001100:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001104:	10db      	asrs	r3, r3, #3
 8001106:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001108:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800110c:	10db      	asrs	r3, r3, #3
 800110e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	b2d8      	uxtb	r0, r3
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	2304      	movs	r3, #4
 800111a:	21bc      	movs	r1, #188	; 0xbc
 800111c:	f001 fef8 	bl	8002f10 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001120:	7a7b      	ldrb	r3, [r7, #9]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	7a3b      	ldrb	r3, [r7, #8]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7abb      	ldrb	r3, [r7, #10]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	b2d8      	uxtb	r0, r3
 8001140:	f107 0208 	add.w	r2, r7, #8
 8001144:	2302      	movs	r3, #2
 8001146:	21aa      	movs	r1, #170	; 0xaa
 8001148:	f001 fee2 	bl	8002f10 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800114c:	7a7b      	ldrb	r3, [r7, #9]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7a3b      	ldrb	r3, [r7, #8]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800115a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800115e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001170:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001182:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001186:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001198:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	ee07 3a90 	vmov	s15, r3
}
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	463b      	mov	r3, r7
 80011c4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80011c8:	783b      	ldrb	r3, [r7, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	2120      	movs	r1, #32
 80011ce:	203c      	movs	r0, #60	; 0x3c
 80011d0:	f001 fe66 	bl	8002ea0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2121      	movs	r1, #33	; 0x21
 80011da:	203c      	movs	r0, #60	; 0x3c
 80011dc:	f001 fe60 	bl	8002ea0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	461a      	mov	r2, r3
 80011e4:	2122      	movs	r1, #34	; 0x22
 80011e6:	203c      	movs	r0, #60	; 0x3c
 80011e8:	f001 fe5a 	bl	8002ea0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	461a      	mov	r2, r3
 80011f0:	2123      	movs	r1, #35	; 0x23
 80011f2:	203c      	movs	r0, #60	; 0x3c
 80011f4:	f001 fe54 	bl	8002ea0 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80011f8:	793b      	ldrb	r3, [r7, #4]
 80011fa:	461a      	mov	r2, r3
 80011fc:	2124      	movs	r1, #36	; 0x24
 80011fe:	203c      	movs	r0, #60	; 0x3c
 8001200:	f001 fe4e 	bl	8002ea0 <SENSOR_IO_Write>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001216:	2122      	movs	r1, #34	; 0x22
 8001218:	203c      	movs	r0, #60	; 0x3c
 800121a:	f001 fe5b 	bl	8002ed4 <SENSOR_IO_Read>
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f023 0303 	bic.w	r3, r3, #3
 8001228:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f043 0303 	orr.w	r3, r3, #3
 8001230:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	461a      	mov	r2, r3
 8001236:	2122      	movs	r1, #34	; 0x22
 8001238:	203c      	movs	r0, #60	; 0x3c
 800123a:	f001 fe31 	bl	8002ea0 <SENSOR_IO_Write>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800124a:	f001 fe1f 	bl	8002e8c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800124e:	210f      	movs	r1, #15
 8001250:	203c      	movs	r0, #60	; 0x3c
 8001252:	f001 fe3f 	bl	8002ed4 <SENSOR_IO_Read>
 8001256:	4603      	mov	r3, r0
}
 8001258:	4618      	mov	r0, r3
 800125a:	bd80      	pop	{r7, pc}

0800125c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800126a:	2122      	movs	r1, #34	; 0x22
 800126c:	203c      	movs	r0, #60	; 0x3c
 800126e:	f001 fe31 	bl	8002ed4 <SENSOR_IO_Read>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	f023 0320 	bic.w	r3, r3, #32
 800127c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	461a      	mov	r2, r3
 8001290:	2122      	movs	r1, #34	; 0x22
 8001292:	203c      	movs	r0, #60	; 0x3c
 8001294:	f001 fe04 	bl	8002ea0 <SENSOR_IO_Write>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80012b6:	2121      	movs	r1, #33	; 0x21
 80012b8:	203c      	movs	r0, #60	; 0x3c
 80012ba:	f001 fe0b 	bl	8002ed4 <SENSOR_IO_Read>
 80012be:	4603      	mov	r3, r0
 80012c0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80012c2:	f107 0208 	add.w	r2, r7, #8
 80012c6:	2306      	movs	r3, #6
 80012c8:	21a8      	movs	r1, #168	; 0xa8
 80012ca:	203c      	movs	r0, #60	; 0x3c
 80012cc:	f001 fe20 	bl	8002f10 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	77fb      	strb	r3, [r7, #31]
 80012d4:	e01c      	b.n	8001310 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	3301      	adds	r3, #1
 80012dc:	3320      	adds	r3, #32
 80012de:	443b      	add	r3, r7
 80012e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	7ffb      	ldrb	r3, [r7, #31]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	3320      	adds	r3, #32
 80012f0:	443b      	add	r3, r7
 80012f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	7ffb      	ldrb	r3, [r7, #31]
 80012fe:	b212      	sxth	r2, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	3320      	adds	r3, #32
 8001304:	443b      	add	r3, r7
 8001306:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800130a:	7ffb      	ldrb	r3, [r7, #31]
 800130c:	3301      	adds	r3, #1
 800130e:	77fb      	strb	r3, [r7, #31]
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d9df      	bls.n	80012d6 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800131c:	2b60      	cmp	r3, #96	; 0x60
 800131e:	d013      	beq.n	8001348 <LIS3MDL_MagReadXYZ+0xa8>
 8001320:	2b60      	cmp	r3, #96	; 0x60
 8001322:	dc14      	bgt.n	800134e <LIS3MDL_MagReadXYZ+0xae>
 8001324:	2b40      	cmp	r3, #64	; 0x40
 8001326:	d00c      	beq.n	8001342 <LIS3MDL_MagReadXYZ+0xa2>
 8001328:	2b40      	cmp	r3, #64	; 0x40
 800132a:	dc10      	bgt.n	800134e <LIS3MDL_MagReadXYZ+0xae>
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <LIS3MDL_MagReadXYZ+0x96>
 8001330:	2b20      	cmp	r3, #32
 8001332:	d003      	beq.n	800133c <LIS3MDL_MagReadXYZ+0x9c>
 8001334:	e00b      	b.n	800134e <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <LIS3MDL_MagReadXYZ+0xfc>)
 8001338:	61bb      	str	r3, [r7, #24]
    break;
 800133a:	e008      	b.n	800134e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <LIS3MDL_MagReadXYZ+0x100>)
 800133e:	61bb      	str	r3, [r7, #24]
    break;
 8001340:	e005      	b.n	800134e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <LIS3MDL_MagReadXYZ+0x104>)
 8001344:	61bb      	str	r3, [r7, #24]
    break;
 8001346:	e002      	b.n	800134e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <LIS3MDL_MagReadXYZ+0x108>)
 800134a:	61bb      	str	r3, [r7, #24]
    break;    
 800134c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	77fb      	strb	r3, [r7, #31]
 8001352:	e01a      	b.n	800138a <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	3320      	adds	r3, #32
 800135a:	443b      	add	r3, r7
 800135c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001368:	edd7 7a06 	vldr	s15, [r7, #24]
 800136c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001370:	7ffb      	ldrb	r3, [r7, #31]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137c:	ee17 2a90 	vmov	r2, s15
 8001380:	b212      	sxth	r2, r2
 8001382:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	3301      	adds	r3, #1
 8001388:	77fb      	strb	r3, [r7, #31]
 800138a:	7ffb      	ldrb	r3, [r7, #31]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d9e1      	bls.n	8001354 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	3e0f5c29 	.word	0x3e0f5c29
 80013a0:	3e947ae1 	.word	0x3e947ae1
 80013a4:	3edc28f6 	.word	0x3edc28f6
 80013a8:	3f147ae1 	.word	0x3f147ae1

080013ac <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f879 	bl	80014b0 <LPS22HB_Init>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80013d4:	f001 fd5a 	bl	8002e8c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	210f      	movs	r1, #15
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fd78 	bl	8002ed4 <SENSOR_IO_Read>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001402:	2300      	movs	r3, #0
 8001404:	74fb      	strb	r3, [r7, #19]
 8001406:	e013      	b.n	8001430 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	7cfb      	ldrb	r3, [r7, #19]
 800140e:	3328      	adds	r3, #40	; 0x28
 8001410:	b2db      	uxtb	r3, r3
 8001412:	7cfc      	ldrb	r4, [r7, #19]
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f001 fd5c 	bl	8002ed4 <SENSOR_IO_Read>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	f104 0318 	add.w	r3, r4, #24
 8001424:	443b      	add	r3, r7
 8001426:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800142a:	7cfb      	ldrb	r3, [r7, #19]
 800142c:	3301      	adds	r3, #1
 800142e:	74fb      	strb	r3, [r7, #19]
 8001430:	7cfb      	ldrb	r3, [r7, #19]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d9e8      	bls.n	8001408 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	74fb      	strb	r3, [r7, #19]
 800143a:	e00f      	b.n	800145c <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	3318      	adds	r3, #24
 8001440:	443b      	add	r3, r7
 8001442:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001446:	461a      	mov	r2, r3
 8001448:	7cfb      	ldrb	r3, [r7, #19]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4313      	orrs	r3, r2
 8001454:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	3301      	adds	r3, #1
 800145a:	74fb      	strb	r3, [r7, #19]
 800145c:	7cfb      	ldrb	r3, [r7, #19]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d9ec      	bls.n	800143c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001472:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2264      	movs	r2, #100	; 0x64
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	da01      	bge.n	8001488 <LPS22HB_P_ReadPressure+0x94>
 8001484:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001488:	131b      	asrs	r3, r3, #12
 800148a:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001496:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014ac <LPS22HB_P_ReadPressure+0xb8>
 800149a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800149e:	eef0 7a66 	vmov.f32	s15, s13
}
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	42c80000 	.word	0x42c80000

080014b0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	211a      	movs	r1, #26
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fd07 	bl	8002ed4 <SENSOR_IO_Read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	211a      	movs	r1, #26
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fcdc 	bl	8002ea0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2110      	movs	r1, #16
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fcf0 	bl	8002ed4 <SENSOR_IO_Read>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014fe:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	f023 0302 	bic.w	r3, r3, #2
 800150e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	2110      	movs	r1, #16
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fcbd 	bl	8002ea0 <SENSOR_IO_Write>
}  
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800153c:	2111      	movs	r1, #17
 800153e:	20d4      	movs	r0, #212	; 0xd4
 8001540:	f001 fcc8 	bl	8002ed4 <SENSOR_IO_Read>
 8001544:	4603      	mov	r3, r0
 8001546:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001554:	7bba      	ldrb	r2, [r7, #14]
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	4313      	orrs	r3, r2
 800155a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800155c:	7bbb      	ldrb	r3, [r7, #14]
 800155e:	461a      	mov	r2, r3
 8001560:	2111      	movs	r1, #17
 8001562:	20d4      	movs	r0, #212	; 0xd4
 8001564:	f001 fc9c 	bl	8002ea0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001568:	2112      	movs	r1, #18
 800156a:	20d4      	movs	r0, #212	; 0xd4
 800156c:	f001 fcb2 	bl	8002ed4 <SENSOR_IO_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800157c:	7bbb      	ldrb	r3, [r7, #14]
 800157e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001582:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001584:	7bba      	ldrb	r2, [r7, #14]
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	4313      	orrs	r3, r2
 800158a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	461a      	mov	r2, r3
 8001590:	2112      	movs	r1, #18
 8001592:	20d4      	movs	r0, #212	; 0xd4
 8001594:	f001 fc84 	bl	8002ea0 <SENSOR_IO_Write>
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80015aa:	2111      	movs	r1, #17
 80015ac:	20d4      	movs	r0, #212	; 0xd4
 80015ae:	f001 fc91 	bl	8002ed4 <SENSOR_IO_Read>
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	461a      	mov	r2, r3
 80015c2:	2111      	movs	r1, #17
 80015c4:	20d4      	movs	r0, #212	; 0xd4
 80015c6:	f001 fc6b 	bl	8002ea0 <SENSOR_IO_Write>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80015d6:	f001 fc59 	bl	8002e8c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80015da:	210f      	movs	r1, #15
 80015dc:	20d4      	movs	r0, #212	; 0xd4
 80015de:	f001 fc79 	bl	8002ed4 <SENSOR_IO_Read>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80015f6:	2116      	movs	r1, #22
 80015f8:	20d4      	movs	r0, #212	; 0xd4
 80015fa:	f001 fc6b 	bl	8002ed4 <SENSOR_IO_Read>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001608:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001616:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	461a      	mov	r2, r3
 800161c:	2116      	movs	r1, #22
 800161e:	20d4      	movs	r0, #212	; 0xd4
 8001620:	f001 fc3e 	bl	8002ea0 <SENSOR_IO_Write>
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001634:	2300      	movs	r3, #0
 8001636:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001642:	2111      	movs	r1, #17
 8001644:	20d4      	movs	r0, #212	; 0xd4
 8001646:	f001 fc45 	bl	8002ed4 <SENSOR_IO_Read>
 800164a:	4603      	mov	r3, r0
 800164c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800164e:	f107 0208 	add.w	r2, r7, #8
 8001652:	2306      	movs	r3, #6
 8001654:	2122      	movs	r1, #34	; 0x22
 8001656:	20d4      	movs	r0, #212	; 0xd4
 8001658:	f001 fc5a 	bl	8002f10 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
 8001660:	e01c      	b.n	800169c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001662:	7ffb      	ldrb	r3, [r7, #31]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	3301      	adds	r3, #1
 8001668:	3320      	adds	r3, #32
 800166a:	443b      	add	r3, r7
 800166c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001670:	b29b      	uxth	r3, r3
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b29a      	uxth	r2, r3
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	3320      	adds	r3, #32
 800167c:	443b      	add	r3, r7
 800167e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4413      	add	r3, r2
 8001686:	b29a      	uxth	r2, r3
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	b212      	sxth	r2, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	3320      	adds	r3, #32
 8001690:	443b      	add	r3, r7
 8001692:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001696:	7ffb      	ldrb	r3, [r7, #31]
 8001698:	3301      	adds	r3, #1
 800169a:	77fb      	strb	r3, [r7, #31]
 800169c:	7ffb      	ldrb	r3, [r7, #31]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d9df      	bls.n	8001662 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b0c      	cmp	r3, #12
 80016aa:	d829      	bhi.n	8001700 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80016ac:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80016ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b2:	bf00      	nop
 80016b4:	080016e9 	.word	0x080016e9
 80016b8:	08001701 	.word	0x08001701
 80016bc:	08001701 	.word	0x08001701
 80016c0:	08001701 	.word	0x08001701
 80016c4:	080016ef 	.word	0x080016ef
 80016c8:	08001701 	.word	0x08001701
 80016cc:	08001701 	.word	0x08001701
 80016d0:	08001701 	.word	0x08001701
 80016d4:	080016f5 	.word	0x080016f5
 80016d8:	08001701 	.word	0x08001701
 80016dc:	08001701 	.word	0x08001701
 80016e0:	08001701 	.word	0x08001701
 80016e4:	080016fb 	.word	0x080016fb
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80016ea:	61bb      	str	r3, [r7, #24]
    break;
 80016ec:	e008      	b.n	8001700 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80016f0:	61bb      	str	r3, [r7, #24]
    break;
 80016f2:	e005      	b.n	8001700 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80016f6:	61bb      	str	r3, [r7, #24]
    break;
 80016f8:	e002      	b.n	8001700 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80016fc:	61bb      	str	r3, [r7, #24]
    break;    
 80016fe:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	77fb      	strb	r3, [r7, #31]
 8001704:	e016      	b.n	8001734 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	3320      	adds	r3, #32
 800170c:	443b      	add	r3, r7
 800170e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	edd7 7a06 	vldr	s15, [r7, #24]
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800172e:	7ffb      	ldrb	r3, [r7, #31]
 8001730:	3301      	adds	r3, #1
 8001732:	77fb      	strb	r3, [r7, #31]
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d9e5      	bls.n	8001706 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	410c0000 	.word	0x410c0000
 8001748:	418c0000 	.word	0x418c0000
 800174c:	420c0000 	.word	0x420c0000
 8001750:	428c0000 	.word	0x428c0000

08001754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b096      	sub	sp, #88	; 0x58
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175a:	f002 fc74 	bl	8004046 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175e:	f000 f87d 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001762:	f000 f9af 	bl	8001ac4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001766:	f000 f8cb 	bl	8001900 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800176a:	f000 f95f 	bl	8001a2c <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 800176e:	f000 f907 	bl	8001980 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */

//Init all the sensors

  BSP_GYRO_Init();
 8001772:	f001 fbeb 	bl	8002f4c <BSP_GYRO_Init>
  BSP_MAGNETO_Init();
 8001776:	f001 fc43 	bl	8003000 <BSP_MAGNETO_Init>
  BSP_PSENSOR_Init();
 800177a:	f001 fc85 	bl	8003088 <BSP_PSENSOR_Init>
  BSP_TSENSOR_Init();
 800177e:	f002 f8fb 	bl	8003978 <BSP_TSENSOR_Init>


  //Init the qspi
  if(BSP_QSPI_Init() != QSPI_OK) {
 8001782:	f001 fcaf 	bl	80030e4 <BSP_QSPI_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <main+0x3c>
	  Error_Handler();
 800178c:	f001 fa6a 	bl	8002c64 <Error_Handler>
  }

  //Turn red led off
  HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2108      	movs	r1, #8
 8001794:	4827      	ldr	r0, [pc, #156]	; (8001834 <main+0xe0>)
 8001796:	f003 f80d 	bl	80047b4 <HAL_GPIO_WritePin>


  //Delete the memory blocks
  deleteBlocks();
 800179a:	f001 f819 	bl	80027d0 <deleteBlocks>


  //Say we are ready
  memset(buffer, 0, 200);
 800179e:	22c8      	movs	r2, #200	; 0xc8
 80017a0:	2100      	movs	r1, #0
 80017a2:	4825      	ldr	r0, [pc, #148]	; (8001838 <main+0xe4>)
 80017a4:	f00a fdf9 	bl	800c39a <memset>
  sprintf(&buffer, "Ready to go \n");
 80017a8:	4924      	ldr	r1, [pc, #144]	; (800183c <main+0xe8>)
 80017aa:	4823      	ldr	r0, [pc, #140]	; (8001838 <main+0xe4>)
 80017ac:	f009 fe5c 	bl	800b468 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 80017b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80017b4:	22c8      	movs	r2, #200	; 0xc8
 80017b6:	4920      	ldr	r1, [pc, #128]	; (8001838 <main+0xe4>)
 80017b8:	4821      	ldr	r0, [pc, #132]	; (8001840 <main+0xec>)
 80017ba:	f006 fec1 	bl	8008540 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readSensors_Tas */
  osThreadDef(readSensors_Tas, readFromSensors, osPriorityNormal, 0, 128);
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <main+0xf0>)
 80017c0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80017c4:	461d      	mov	r5, r3
 80017c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensors_TasHandle = osThreadCreate(osThread(readSensors_Tas), NULL);
 80017d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 fd78 	bl	80092ce <osThreadCreate>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <main+0xf4>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_Task */
  osThreadDef(UART_Task, transmitViaUART, osPriorityNormal, 0, 256);
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <main+0xf8>)
 80017e6:	f107 0420 	add.w	r4, r7, #32
 80017ea:	461d      	mov	r5, r3
 80017ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TaskHandle = osThreadCreate(osThread(UART_Task), NULL);
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f007 fd65 	bl	80092ce <osThreadCreate>
 8001804:	4603      	mov	r3, r0
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <main+0xfc>)
 8001808:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonPress_Tas */
  osThreadDef(buttonPress_Tas, hasButtonBeenPressed, osPriorityNormal, 0, 128);
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <main+0x100>)
 800180c:	1d3c      	adds	r4, r7, #4
 800180e:	461d      	mov	r5, r3
 8001810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonPress_TasHandle = osThreadCreate(osThread(buttonPress_Tas), NULL);
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f007 fd54 	bl	80092ce <osThreadCreate>
 8001826:	4603      	mov	r3, r0
 8001828:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <main+0x104>)
 800182a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800182c:	f007 fd48 	bl	80092c0 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0xdc>
 8001832:	bf00      	nop
 8001834:	48001000 	.word	0x48001000
 8001838:	20000660 	.word	0x20000660
 800183c:	0800f008 	.word	0x0800f008
 8001840:	200005c0 	.word	0x200005c0
 8001844:	0800f028 	.word	0x0800f028
 8001848:	20000654 	.word	0x20000654
 800184c:	0800f050 	.word	0x0800f050
 8001850:	20000658 	.word	0x20000658
 8001854:	0800f07c 	.word	0x0800f07c
 8001858:	2000065c 	.word	0x2000065c

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b096      	sub	sp, #88	; 0x58
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2244      	movs	r2, #68	; 0x44
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f00a fd95 	bl	800c39a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800187e:	2000      	movs	r0, #0
 8001880:	f004 fe94 	bl	80065ac <HAL_PWREx_ControlVoltageScaling>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800188a:	f001 f9eb 	bl	8002c64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800188e:	2310      	movs	r3, #16
 8001890:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001892:	2301      	movs	r3, #1
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800189a:	2360      	movs	r3, #96	; 0x60
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018a2:	2301      	movs	r3, #1
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018aa:	233c      	movs	r3, #60	; 0x3c
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 ff18 	bl	80066f4 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018ca:	f001 f9cb 	bl	8002c64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2303      	movs	r3, #3
 80018d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	2105      	movs	r1, #5
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 fb1e 	bl	8006f28 <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018f2:	f001 f9b7 	bl	8002c64 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3758      	adds	r7, #88	; 0x58
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_I2C2_Init+0x74>)
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <MX_I2C2_Init+0x78>)
 8001908:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_I2C2_Init+0x74>)
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <MX_I2C2_Init+0x7c>)
 800190e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_I2C2_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_I2C2_Init+0x74>)
 8001918:	2201      	movs	r2, #1
 800191a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_I2C2_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_I2C2_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_I2C2_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_I2C2_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_I2C2_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800193a:	480e      	ldr	r0, [pc, #56]	; (8001974 <MX_I2C2_Init+0x74>)
 800193c:	f002 ff52 	bl	80047e4 <HAL_I2C_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001946:	f001 f98d 	bl	8002c64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800194a:	2100      	movs	r1, #0
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <MX_I2C2_Init+0x74>)
 800194e:	f003 fcf9 	bl	8005344 <HAL_I2CEx_ConfigAnalogFilter>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001958:	f001 f984 	bl	8002c64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800195c:	2100      	movs	r1, #0
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_I2C2_Init+0x74>)
 8001960:	f003 fd3b 	bl	80053da <HAL_I2CEx_ConfigDigitalFilter>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800196a:	f001 f97b 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000051c 	.word	0x2000051c
 8001978:	40005800 	.word	0x40005800
 800197c:	307075b1 	.word	0x307075b1

08001980 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 8001996:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <MX_OCTOSPI1_Init+0xa8>)
 8001998:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 800199c:	2201      	movs	r2, #1
 800199e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80019a0:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ac:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019b0:	2220      	movs	r2, #32
 80019b2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019e0:	2208      	movs	r2, #8
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80019e4:	480f      	ldr	r0, [pc, #60]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019e6:	f003 fd45 	bl	8005474 <HAL_OSPI_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80019f0:	f001 f938 	bl	8002c64 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80019fc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001a00:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 8001a0c:	f004 f830 	bl	8005a70 <HAL_OSPIM_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001a16:	f001 f925 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000570 	.word	0x20000570
 8001a28:	a0001000 	.word	0xa0001000

08001a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <MX_USART1_UART_Init+0x94>)
 8001a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a76:	f006 fd13 	bl	80084a0 <HAL_UART_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a80:	f001 f8f0 	bl	8002c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a88:	f007 fb38 	bl	80090fc <HAL_UARTEx_SetTxFifoThreshold>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a92:	f001 f8e7 	bl	8002c64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a9a:	f007 fb6d 	bl	8009178 <HAL_UARTEx_SetRxFifoThreshold>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001aa4:	f001 f8de 	bl	8002c64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001aaa:	f007 faee 	bl	800908a <HAL_UARTEx_DisableFifoMode>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ab4:	f001 f8d6 	bl	8002c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200005c0 	.word	0x200005c0
 8001ac0:	40013800 	.word	0x40013800

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b16:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2108      	movs	r1, #8
 8001b26:	481c      	ldr	r0, [pc, #112]	; (8001b98 <MX_GPIO_Init+0xd4>)
 8001b28:	f002 fe44 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b32:	481a      	ldr	r0, [pc, #104]	; (8001b9c <MX_GPIO_Init+0xd8>)
 8001b34:	f002 fe3e 	bl	80047b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Red_Led_Pin */
  GPIO_InitStruct.Pin = Red_Led_Pin;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Red_Led_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4812      	ldr	r0, [pc, #72]	; (8001b98 <MX_GPIO_Init+0xd4>)
 8001b50:	f002 fb94 	bl	800427c <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8001b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	4619      	mov	r1, r3
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_GPIO_Init+0xdc>)
 8001b6a:	f002 fb87 	bl	800427c <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin;
 8001b6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Green_Led_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4619      	mov	r1, r3
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_GPIO_Init+0xd8>)
 8001b88:	f002 fb78 	bl	800427c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48001000 	.word	0x48001000
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	48000800 	.word	0x48000800

08001ba4 <getPressureAverage>:

/* USER CODE BEGIN 4 */


void getPressureAverage(){
 8001ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba8:	b08e      	sub	sp, #56	; 0x38
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	466b      	mov	r3, sp
 8001bae:	4698      	mov	r8, r3

		int16_t pressureArray[samplesPressure]; // Create an array to store the values
 8001bb0:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <getPressureAverage+0x170>)
 8001bb2:	681e      	ldr	r6, [r3, #0]
 8001bb4:	1e73      	subs	r3, r6, #1
 8001bb6:	623b      	str	r3, [r7, #32]
 8001bb8:	4632      	mov	r2, r6
 8001bba:	2300      	movs	r3, #0
 8001bbc:	4614      	mov	r4, r2
 8001bbe:	461d      	mov	r5, r3
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	012b      	lsls	r3, r5, #4
 8001bca:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bce:	0122      	lsls	r2, r4, #4
 8001bd0:	4632      	mov	r2, r6
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	f04f 0300 	mov.w	r3, #0
 8001be0:	010b      	lsls	r3, r1, #4
 8001be2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001be6:	0102      	lsls	r2, r0, #4
 8001be8:	4633      	mov	r3, r6
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	3307      	adds	r3, #7
 8001bee:	08db      	lsrs	r3, r3, #3
 8001bf0:	00db      	lsls	r3, r3, #3
 8001bf2:	ebad 0d03 	sub.w	sp, sp, r3
 8001bf6:	466b      	mov	r3, sp
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	085b      	lsrs	r3, r3, #1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	61fb      	str	r3, [r7, #28]

		memset(pressureArray, 0, samplesPressure);
 8001c00:	4b44      	ldr	r3, [pc, #272]	; (8001d14 <getPressureAverage+0x170>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	2100      	movs	r1, #0
 8001c08:	69f8      	ldr	r0, [r7, #28]
 8001c0a:	f00a fbc6 	bl	800c39a <memset>

		int16_t test[1] = {0};
 8001c0e:	2300      	movs	r3, #0
 8001c10:	80bb      	strh	r3, [r7, #4]


		// all the values in pressureArray, can calculate the average
		pressureAverage = 0;
 8001c12:	4b41      	ldr	r3, [pc, #260]	; (8001d18 <getPressureAverage+0x174>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < samplesPressure; i++) {
 8001c18:	2300      	movs	r3, #0
 8001c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c1c:	e01e      	b.n	8001c5c <getPressureAverage+0xb8>

			if(BSP_QSPI_Read(test, 0x00070000 + sizeof(pressure) * i, sizeof(pressure)) != QSPI_OK)
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8001c24:	0059      	lsls	r1, r3, #1
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2202      	movs	r2, #2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f001 fad8 	bl	80031e0 <BSP_QSPI_Read>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <getPressureAverage+0x96>
			{
				Error_Handler();
 8001c36:	f001 f815 	bl	8002c64 <Error_Handler>
			}

			pressureArray[i] = test[0];
 8001c3a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c42:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			pressureAverage += test[0];
 8001c46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b32      	ldr	r3, [pc, #200]	; (8001d18 <getPressureAverage+0x174>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a31      	ldr	r2, [pc, #196]	; (8001d18 <getPressureAverage+0x174>)
 8001c54:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < samplesPressure; i++) {
 8001c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c58:	3301      	adds	r3, #1
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <getPressureAverage+0x170>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dbdb      	blt.n	8001c1e <getPressureAverage+0x7a>
		}

		pressureAverage /= samplesPressure;
 8001c66:	4b2c      	ldr	r3, [pc, #176]	; (8001d18 <getPressureAverage+0x174>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <getPressureAverage+0x170>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c72:	4a29      	ldr	r2, [pc, #164]	; (8001d18 <getPressureAverage+0x174>)
 8001c74:	6013      	str	r3, [r2, #0]


		//S² = Σ(xi - x̄)² / (n - 1)
		double sumSquaredDeviations = 0.0;
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	f04f 0300 	mov.w	r3, #0
 8001c7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		for (int i = 0; i < samplesPressure; i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
 8001c86:	e021      	b.n	8001ccc <getPressureAverage+0x128>
			  double deviation = pressureArray[i] - pressureAverage;
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <getPressureAverage+0x174>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc5b 	bl	8000554 <__aeabi_i2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	e9c7 2302 	strd	r2, r3, [r7, #8]
			  sumSquaredDeviations += deviation * deviation;
 8001ca6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001caa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cae:	f7fe fcbb 	bl	8000628 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cba:	f7fe faff 	bl	80002bc <__adddf3>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for (int i = 0; i < samplesPressure; i++) {
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	3301      	adds	r3, #1
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <getPressureAverage+0x170>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	dbd8      	blt.n	8001c88 <getPressureAverage+0xe4>
		}

		double sampleVariance = sumSquaredDeviations / (samplesPressure - 1);
 8001cd6:	4b0f      	ldr	r3, [pc, #60]	; (8001d14 <getPressureAverage+0x170>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc39 	bl	8000554 <__aeabi_i2d>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cea:	f7fe fdc7 	bl	800087c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pressureVariance = (int16_t) sampleVariance;
 8001cf6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cfa:	f7fe ff45 	bl	8000b88 <__aeabi_d2iz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <getPressureAverage+0x178>)
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	46c5      	mov	sp, r8


}
 8001d0a:	bf00      	nop
 8001d0c:	3738      	adds	r7, #56	; 0x38
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d14:	20000758 	.word	0x20000758
 8001d18:	2000078c 	.word	0x2000078c
 8001d1c:	20000794 	.word	0x20000794

08001d20 <getTemperatureAverage>:

void getTemperatureAverage(){
 8001d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d24:	b08e      	sub	sp, #56	; 0x38
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	466b      	mov	r3, sp
 8001d2a:	4698      	mov	r8, r3

		int16_t temperatureArray[samplesTemp]; // Create an array to store the values
 8001d2c:	4b59      	ldr	r3, [pc, #356]	; (8001e94 <getTemperatureAverage+0x174>)
 8001d2e:	681e      	ldr	r6, [r3, #0]
 8001d30:	1e73      	subs	r3, r6, #1
 8001d32:	623b      	str	r3, [r7, #32]
 8001d34:	4632      	mov	r2, r6
 8001d36:	2300      	movs	r3, #0
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	012b      	lsls	r3, r5, #4
 8001d46:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001d4a:	0122      	lsls	r2, r4, #4
 8001d4c:	4632      	mov	r2, r6
 8001d4e:	2300      	movs	r3, #0
 8001d50:	4610      	mov	r0, r2
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	010b      	lsls	r3, r1, #4
 8001d5e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001d62:	0102      	lsls	r2, r0, #4
 8001d64:	4633      	mov	r3, r6
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	3307      	adds	r3, #7
 8001d6a:	08db      	lsrs	r3, r3, #3
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	ebad 0d03 	sub.w	sp, sp, r3
 8001d72:	466b      	mov	r3, sp
 8001d74:	3301      	adds	r3, #1
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	61fb      	str	r3, [r7, #28]
		memset(temperatureArray, 0, samplesTemp);
 8001d7c:	4b45      	ldr	r3, [pc, #276]	; (8001e94 <getTemperatureAverage+0x174>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	2100      	movs	r1, #0
 8001d84:	69f8      	ldr	r0, [r7, #28]
 8001d86:	f00a fb08 	bl	800c39a <memset>


		int16_t test[1] = {0};
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	80bb      	strh	r3, [r7, #4]


		// all the values in pressureArray, can calculate the average
		temperatureAverage = 0;
 8001d8e:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <getTemperatureAverage+0x178>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < samplesTemp; i++) {
 8001d94:	2300      	movs	r3, #0
 8001d96:	637b      	str	r3, [r7, #52]	; 0x34
 8001d98:	e020      	b.n	8001ddc <getTemperatureAverage+0xbc>

			if(BSP_QSPI_Read(test, 0x00060000 + sizeof(temp) * i, sizeof(temp)) != QSPI_OK)
 8001d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d9c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001da0:	0059      	lsls	r1, r3, #1
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	2202      	movs	r2, #2
 8001da6:	4618      	mov	r0, r3
 8001da8:	f001 fa1a 	bl	80031e0 <BSP_QSPI_Read>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <getTemperatureAverage+0x96>
			{
				Error_Handler();
 8001db2:	f000 ff57 	bl	8002c64 <Error_Handler>
			}

			temperatureArray[i] = test[0];
 8001db6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dbe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			temperatureAverage += temperatureArray[i];
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <getTemperatureAverage+0x178>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <getTemperatureAverage+0x178>)
 8001dd4:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < samplesTemp; i++) {
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd8:	3301      	adds	r3, #1
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	; (8001e94 <getTemperatureAverage+0x174>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001de2:	429a      	cmp	r2, r3
 8001de4:	dbd9      	blt.n	8001d9a <getTemperatureAverage+0x7a>
		}


		temperatureAverage /= samplesTemp;
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <getTemperatureAverage+0x178>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b2a      	ldr	r3, [pc, #168]	; (8001e94 <getTemperatureAverage+0x174>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	fb92 f3f3 	sdiv	r3, r2, r3
 8001df2:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <getTemperatureAverage+0x178>)
 8001df4:	6013      	str	r3, [r2, #0]

		//S² = Σ(xi - x̄)² / (n - 1)
		double sumSquaredDeviations = 0.0;
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		for (int i = 0; i < samplesTemp; i++) {
 8001e02:	2300      	movs	r3, #0
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
 8001e06:	e021      	b.n	8001e4c <getTemperatureAverage+0x12c>
		  double deviation = temperatureArray[i] - pressureAverage;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e0c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <getTemperatureAverage+0x17c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fb9b 	bl	8000554 <__aeabi_i2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  sumSquaredDeviations += deviation * deviation;
 8001e26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e2e:	f7fe fbfb 	bl	8000628 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e3a:	f7fe fa3f 	bl	80002bc <__adddf3>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for (int i = 0; i < samplesTemp; i++) {
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	3301      	adds	r3, #1
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4c:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <getTemperatureAverage+0x174>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dbd8      	blt.n	8001e08 <getTemperatureAverage+0xe8>
		}

		double sampleVariance = sumSquaredDeviations / (samplesTemp - 1);
 8001e56:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <getTemperatureAverage+0x174>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fb79 	bl	8000554 <__aeabi_i2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e6a:	f7fe fd07 	bl	800087c <__aeabi_ddiv>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	e9c7 2304 	strd	r2, r3, [r7, #16]

		temperatureVariance = (int16_t) sampleVariance;
 8001e76:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e7a:	f7fe fe85 	bl	8000b88 <__aeabi_d2iz>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	461a      	mov	r2, r3
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <getTemperatureAverage+0x180>)
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	46c5      	mov	sp, r8



}
 8001e8a:	bf00      	nop
 8001e8c:	3738      	adds	r7, #56	; 0x38
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e94:	20000754 	.word	0x20000754
 8001e98:	20000790 	.word	0x20000790
 8001e9c:	2000078c 	.word	0x2000078c
 8001ea0:	20000798 	.word	0x20000798

08001ea4 <getGyroAverage>:


void getGyroAverage(){
 8001ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ea8:	b09a      	sub	sp, #104	; 0x68
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	466b      	mov	r3, sp
 8001eae:	4698      	mov	r8, r3

    //populate an array with the max number of sample gotten
    int16_t gyroArray[samplesGyro * 3];
 8001eb0:	4b5a      	ldr	r3, [pc, #360]	; (800201c <getGyroAverage+0x178>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	189e      	adds	r6, r3, r2
 8001eba:	1e73      	subs	r3, r6, #1
 8001ebc:	643b      	str	r3, [r7, #64]	; 0x40
 8001ebe:	4632      	mov	r2, r6
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	4614      	mov	r4, r2
 8001ec4:	461d      	mov	r5, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	012b      	lsls	r3, r5, #4
 8001ed0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ed4:	0122      	lsls	r2, r4, #4
 8001ed6:	4632      	mov	r2, r6
 8001ed8:	2300      	movs	r3, #0
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 0200 	mov.w	r2, #0
 8001ee2:	f04f 0300 	mov.w	r3, #0
 8001ee6:	010b      	lsls	r3, r1, #4
 8001ee8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001eec:	0102      	lsls	r2, r0, #4
 8001eee:	4633      	mov	r3, r6
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	3307      	adds	r3, #7
 8001ef4:	08db      	lsrs	r3, r3, #3
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	ebad 0d03 	sub.w	sp, sp, r3
 8001efc:	466b      	mov	r3, sp
 8001efe:	3301      	adds	r3, #1
 8001f00:	085b      	lsrs	r3, r3, #1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(gyroArray, 0, samplesGyro * 3);
 8001f06:	4b45      	ldr	r3, [pc, #276]	; (800201c <getGyroAverage+0x178>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	461a      	mov	r2, r3
 8001f12:	2100      	movs	r1, #0
 8001f14:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f16:	f00a fa40 	bl	800c39a <memset>

    int16_t test[3];


    xGyroAverage = 0;
 8001f1a:	4b41      	ldr	r3, [pc, #260]	; (8002020 <getGyroAverage+0x17c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
    yGyroAverage = 0;
 8001f20:	4b40      	ldr	r3, [pc, #256]	; (8002024 <getGyroAverage+0x180>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
    zGyroAverage = 0;
 8001f26:	4b40      	ldr	r3, [pc, #256]	; (8002028 <getGyroAverage+0x184>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]

    for(int i = 0; i < samplesGyro; i++){
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f30:	e04d      	b.n	8001fce <getGyroAverage+0x12a>


    	test[0] = 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	803b      	strh	r3, [r7, #0]
    	test[1] = 0;
 8001f36:	2300      	movs	r3, #0
 8001f38:	807b      	strh	r3, [r7, #2]
    	test[2] = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	80bb      	strh	r3, [r7, #4]

        if(BSP_QSPI_Read(test, 0x00000000 + i * sizeof(gyro), sizeof(gyro)) != QSPI_OK)
 8001f3e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4619      	mov	r1, r3
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2206      	movs	r2, #6
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f001 f946 	bl	80031e0 <BSP_QSPI_Read>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <getGyroAverage+0xba>
    	{
        	Error_Handler();
 8001f5a:	f000 fe83 	bl	8002c64 <Error_Handler>
    	}


    	gyroArray[3*i] = test[0];
 8001f5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	441a      	add	r2, r3
 8001f66:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f6c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	gyroArray[3*i + 1] = test[1];
 8001f70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	gyroArray[3*i + 2] = test[2];
 8001f84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	1c9a      	adds	r2, r3, #2
 8001f8e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    	xGyroAverage += test[0]; 	//get x values
 8001f98:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <getGyroAverage+0x17c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a1e      	ldr	r2, [pc, #120]	; (8002020 <getGyroAverage+0x17c>)
 8001fa6:	6013      	str	r3, [r2, #0]

    	yGyroAverage += test[1];	//get y values
 8001fa8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <getGyroAverage+0x180>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	; (8002024 <getGyroAverage+0x180>)
 8001fb6:	6013      	str	r3, [r2, #0]

    	zGyroAverage += test[2];	//get z values
 8001fb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b1a      	ldr	r3, [pc, #104]	; (8002028 <getGyroAverage+0x184>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a18      	ldr	r2, [pc, #96]	; (8002028 <getGyroAverage+0x184>)
 8001fc6:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < samplesGyro; i++){
 8001fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fca:	3301      	adds	r3, #1
 8001fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <getGyroAverage+0x178>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	dbac      	blt.n	8001f32 <getGyroAverage+0x8e>

    }

    xGyroAverage /= samplesGyro;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <getGyroAverage+0x17c>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <getGyroAverage+0x178>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001fe4:	4a0e      	ldr	r2, [pc, #56]	; (8002020 <getGyroAverage+0x17c>)
 8001fe6:	6013      	str	r3, [r2, #0]
    yGyroAverage /= samplesGyro;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <getGyroAverage+0x180>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <getGyroAverage+0x178>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <getGyroAverage+0x180>)
 8001ff6:	6013      	str	r3, [r2, #0]
    zGyroAverage /= samplesGyro;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <getGyroAverage+0x184>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <getGyroAverage+0x178>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	fb92 f3f3 	sdiv	r3, r2, r3
 8002004:	4a08      	ldr	r2, [pc, #32]	; (8002028 <getGyroAverage+0x184>)
 8002006:	6013      	str	r3, [r2, #0]


	//S² = Σ(xi - x̄)² / (n - 1)
	double XsumSquaredDeviations, YsumSquaredDeviations, ZsumSquaredDeviations = 0.0;
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	for (int i = 0; i < samplesGyro; i++) {
 8002014:	2300      	movs	r3, #0
 8002016:	647b      	str	r3, [r7, #68]	; 0x44
 8002018:	e073      	b.n	8002102 <getGyroAverage+0x25e>
 800201a:	bf00      	nop
 800201c:	2000074c 	.word	0x2000074c
 8002020:	2000075c 	.word	0x2000075c
 8002024:	20000760 	.word	0x20000760
 8002028:	20000764 	.word	0x20000764
		  double Xdeviation = gyroArray[3*i] - xGyroAverage;
 800202c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	441a      	add	r2, r3
 8002034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002036:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800203a:	461a      	mov	r2, r3
 800203c:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <getGyroAverage+0x300>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fa86 	bl	8000554 <__aeabi_i2d>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		  XsumSquaredDeviations += Xdeviation * Xdeviation;
 8002050:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002054:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002058:	f7fe fae6 	bl	8000628 <__aeabi_dmul>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002064:	f7fe f92a 	bl	80002bc <__adddf3>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

		  double Ydeviation = gyroArray[3*i + 1] - yGyroAverage;
 8002070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002080:	461a      	mov	r2, r3
 8002082:	4b49      	ldr	r3, [pc, #292]	; (80021a8 <getGyroAverage+0x304>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa63 	bl	8000554 <__aeabi_i2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  YsumSquaredDeviations += Ydeviation * Ydeviation;
 8002096:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800209a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800209e:	f7fe fac3 	bl	8000628 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80020aa:	f7fe f907 	bl	80002bc <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

		  double Zdeviation = gyroArray[3*i + 2] - zGyroAverage;
 80020b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	1c9a      	adds	r2, r3, #2
 80020c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b38      	ldr	r3, [pc, #224]	; (80021ac <getGyroAverage+0x308>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7fe fa40 	bl	8000554 <__aeabi_i2d>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  ZsumSquaredDeviations += Zdeviation * Zdeviation;
 80020dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020e4:	f7fe faa0 	bl	8000628 <__aeabi_dmul>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80020f0:	f7fe f8e4 	bl	80002bc <__adddf3>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for (int i = 0; i < samplesGyro; i++) {
 80020fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020fe:	3301      	adds	r3, #1
 8002100:	647b      	str	r3, [r7, #68]	; 0x44
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <getGyroAverage+0x30c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	429a      	cmp	r2, r3
 800210a:	db8f      	blt.n	800202c <getGyroAverage+0x188>
	}

	double XsampleVariance = XsumSquaredDeviations / (samplesGyro - 1);
 800210c:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <getGyroAverage+0x30c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fa1e 	bl	8000554 <__aeabi_i2d>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002120:	f7fe fbac 	bl	800087c <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double YsampleVariance = YsumSquaredDeviations / (samplesGyro - 1);
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <getGyroAverage+0x30c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	3b01      	subs	r3, #1
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa0e 	bl	8000554 <__aeabi_i2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002140:	f7fe fb9c 	bl	800087c <__aeabi_ddiv>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	double ZsampleVariance = ZsumSquaredDeviations / (samplesGyro - 1);
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <getGyroAverage+0x30c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3b01      	subs	r3, #1
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f9fe 	bl	8000554 <__aeabi_i2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002160:	f7fe fb8c 	bl	800087c <__aeabi_ddiv>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	e9c7 2308 	strd	r2, r3, [r7, #32]

	xGyroVariance = (int32_t) XsampleVariance;
 800216c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002170:	f7fe fd0a 	bl	8000b88 <__aeabi_d2iz>
 8002174:	4603      	mov	r3, r0
 8002176:	4a0f      	ldr	r2, [pc, #60]	; (80021b4 <getGyroAverage+0x310>)
 8002178:	6013      	str	r3, [r2, #0]
	yGyroVariance = (int32_t) YsampleVariance;
 800217a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800217e:	f7fe fd03 	bl	8000b88 <__aeabi_d2iz>
 8002182:	4603      	mov	r3, r0
 8002184:	4a0c      	ldr	r2, [pc, #48]	; (80021b8 <getGyroAverage+0x314>)
 8002186:	6013      	str	r3, [r2, #0]
	zGyroVariance = (int32_t) ZsampleVariance;
 8002188:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800218c:	f7fe fcfc 	bl	8000b88 <__aeabi_d2iz>
 8002190:	4603      	mov	r3, r0
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <getGyroAverage+0x318>)
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	46c5      	mov	sp, r8





}
 8002198:	bf00      	nop
 800219a:	3768      	adds	r7, #104	; 0x68
 800219c:	46bd      	mov	sp, r7
 800219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021a2:	bf00      	nop
 80021a4:	2000075c 	.word	0x2000075c
 80021a8:	20000760 	.word	0x20000760
 80021ac:	20000764 	.word	0x20000764
 80021b0:	2000074c 	.word	0x2000074c
 80021b4:	20000774 	.word	0x20000774
 80021b8:	20000778 	.word	0x20000778
 80021bc:	2000077c 	.word	0x2000077c

080021c0 <getMagnetoAverage>:

void getMagnetoAverage(){
 80021c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021c4:	b09a      	sub	sp, #104	; 0x68
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	466b      	mov	r3, sp
 80021ca:	4698      	mov	r8, r3

    //populate an array with the max number of sample gotten
    int16_t magnetoArray[samplesMagneto * 3];
 80021cc:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <getMagnetoAverage+0x178>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	189e      	adds	r6, r3, r2
 80021d6:	1e73      	subs	r3, r6, #1
 80021d8:	643b      	str	r3, [r7, #64]	; 0x40
 80021da:	4632      	mov	r2, r6
 80021dc:	2300      	movs	r3, #0
 80021de:	4614      	mov	r4, r2
 80021e0:	461d      	mov	r5, r3
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	012b      	lsls	r3, r5, #4
 80021ec:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80021f0:	0122      	lsls	r2, r4, #4
 80021f2:	4632      	mov	r2, r6
 80021f4:	2300      	movs	r3, #0
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	010b      	lsls	r3, r1, #4
 8002204:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002208:	0102      	lsls	r2, r0, #4
 800220a:	4633      	mov	r3, r6
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	3307      	adds	r3, #7
 8002210:	08db      	lsrs	r3, r3, #3
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	ebad 0d03 	sub.w	sp, sp, r3
 8002218:	466b      	mov	r3, sp
 800221a:	3301      	adds	r3, #1
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(magnetoArray, 0, samplesMagneto * 3);
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <getMagnetoAverage+0x178>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	461a      	mov	r2, r3
 800222e:	2100      	movs	r1, #0
 8002230:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002232:	f00a f8b2 	bl	800c39a <memset>


    int16_t test[3];


    xMagnetoAverage = 0;
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <getMagnetoAverage+0x17c>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
    yMagnetoAverage = 0;
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <getMagnetoAverage+0x180>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
    zMagnetoAverage = 0;
 8002242:	4b40      	ldr	r3, [pc, #256]	; (8002344 <getMagnetoAverage+0x184>)
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]

    for(int i = 0; i < samplesMagneto; i++){
 8002248:	2300      	movs	r3, #0
 800224a:	667b      	str	r3, [r7, #100]	; 0x64
 800224c:	e04e      	b.n	80022ec <getMagnetoAverage+0x12c>


    	test[0] = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	803b      	strh	r3, [r7, #0]
    	test[1] = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	807b      	strh	r3, [r7, #2]
    	test[2] = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	80bb      	strh	r3, [r7, #4]

        if(BSP_QSPI_Read(test, 0x00030000 + i * sizeof(magneto), sizeof(magneto)) != QSPI_OK)
 800225a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	f503 3140 	add.w	r1, r3, #196608	; 0x30000
 8002268:	463b      	mov	r3, r7
 800226a:	2206      	movs	r2, #6
 800226c:	4618      	mov	r0, r3
 800226e:	f000 ffb7 	bl	80031e0 <BSP_QSPI_Read>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <getMagnetoAverage+0xbc>
    	{
        	Error_Handler();
 8002278:	f000 fcf4 	bl	8002c64 <Error_Handler>
    	}


        magnetoArray[3*i] = test[0];
 800227c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	441a      	add	r2, r3
 8002284:	f9b7 1000 	ldrsh.w	r1, [r7]
 8002288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800228a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        magnetoArray[3*i + 1] = test[1];
 800228e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002290:	4613      	mov	r3, r2
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	4413      	add	r3, r2
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800229c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800229e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        magnetoArray[3*i + 2] = test[2];
 80022a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	1c9a      	adds	r2, r3, #2
 80022ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80022b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

        xMagnetoAverage += test[0]; 	//get x values
 80022b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80022ba:	461a      	mov	r2, r3
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <getMagnetoAverage+0x17c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4413      	add	r3, r2
 80022c2:	4a1e      	ldr	r2, [pc, #120]	; (800233c <getMagnetoAverage+0x17c>)
 80022c4:	6013      	str	r3, [r2, #0]

    	yMagnetoAverage += test[1];	//get y values
 80022c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <getMagnetoAverage+0x180>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4413      	add	r3, r2
 80022d2:	4a1b      	ldr	r2, [pc, #108]	; (8002340 <getMagnetoAverage+0x180>)
 80022d4:	6013      	str	r3, [r2, #0]

    	zMagnetoAverage += test[2];	//get z values
 80022d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022da:	461a      	mov	r2, r3
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <getMagnetoAverage+0x184>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	4a18      	ldr	r2, [pc, #96]	; (8002344 <getMagnetoAverage+0x184>)
 80022e4:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < samplesMagneto; i++){
 80022e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022e8:	3301      	adds	r3, #1
 80022ea:	667b      	str	r3, [r7, #100]	; 0x64
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <getMagnetoAverage+0x178>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80022f2:	429a      	cmp	r2, r3
 80022f4:	dbab      	blt.n	800224e <getMagnetoAverage+0x8e>

    }

    xMagnetoAverage /= samplesGyro;
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <getMagnetoAverage+0x17c>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <getMagnetoAverage+0x188>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <getMagnetoAverage+0x17c>)
 8002304:	6013      	str	r3, [r2, #0]
    yMagnetoAverage /= samplesGyro;
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <getMagnetoAverage+0x180>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <getMagnetoAverage+0x188>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002312:	4a0b      	ldr	r2, [pc, #44]	; (8002340 <getMagnetoAverage+0x180>)
 8002314:	6013      	str	r3, [r2, #0]
    zMagnetoAverage /= samplesGyro;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <getMagnetoAverage+0x184>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <getMagnetoAverage+0x188>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <getMagnetoAverage+0x184>)
 8002324:	6013      	str	r3, [r2, #0]


	//S² = Σ(xi - x̄)² / (n - 1)
	double XsumSquaredDeviations, YsumSquaredDeviations, ZsumSquaredDeviations = 0.0;
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	for (int i = 0; i < samplesGyro; i++) {
 8002332:	2300      	movs	r3, #0
 8002334:	647b      	str	r3, [r7, #68]	; 0x44
 8002336:	e074      	b.n	8002422 <getMagnetoAverage+0x262>
 8002338:	20000750 	.word	0x20000750
 800233c:	20000768 	.word	0x20000768
 8002340:	2000076c 	.word	0x2000076c
 8002344:	20000770 	.word	0x20000770
 8002348:	2000074c 	.word	0x2000074c
		  double Xdeviation = magnetoArray[3*i] - xMagnetoAverage;
 800234c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	441a      	add	r2, r3
 8002354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002356:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800235a:	461a      	mov	r2, r3
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <getMagnetoAverage+0x304>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe f8f6 	bl	8000554 <__aeabi_i2d>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		  XsumSquaredDeviations += Xdeviation * Xdeviation;
 8002370:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002374:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002378:	f7fe f956 	bl	8000628 <__aeabi_dmul>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002384:	f7fd ff9a 	bl	80002bc <__adddf3>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

		  double Ydeviation = magnetoArray[3*i + 1] - xMagnetoAverage;
 8002390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b48      	ldr	r3, [pc, #288]	; (80024c4 <getMagnetoAverage+0x304>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8d3 	bl	8000554 <__aeabi_i2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  YsumSquaredDeviations += Ydeviation * Ydeviation;
 80023b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023be:	f7fe f933 	bl	8000628 <__aeabi_dmul>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80023ca:	f7fd ff77 	bl	80002bc <__adddf3>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

		  double Zdeviation = magnetoArray[3*i + 2] - xMagnetoAverage;
 80023d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	1c9a      	adds	r2, r3, #2
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80023e6:	461a      	mov	r2, r3
 80023e8:	4b36      	ldr	r3, [pc, #216]	; (80024c4 <getMagnetoAverage+0x304>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f8b0 	bl	8000554 <__aeabi_i2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  ZsumSquaredDeviations += Zdeviation * Zdeviation;
 80023fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002404:	f7fe f910 	bl	8000628 <__aeabi_dmul>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002410:	f7fd ff54 	bl	80002bc <__adddf3>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for (int i = 0; i < samplesGyro; i++) {
 800241c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800241e:	3301      	adds	r3, #1
 8002420:	647b      	str	r3, [r7, #68]	; 0x44
 8002422:	4b29      	ldr	r3, [pc, #164]	; (80024c8 <getMagnetoAverage+0x308>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002428:	429a      	cmp	r2, r3
 800242a:	db8f      	blt.n	800234c <getMagnetoAverage+0x18c>
	}

	double XsampleVariance = XsumSquaredDeviations / (samplesMagneto - 1);
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <getMagnetoAverage+0x30c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3b01      	subs	r3, #1
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f88e 	bl	8000554 <__aeabi_i2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002440:	f7fe fa1c 	bl	800087c <__aeabi_ddiv>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double YsampleVariance = YsumSquaredDeviations / (samplesMagneto - 1);
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <getMagnetoAverage+0x30c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f87e 	bl	8000554 <__aeabi_i2d>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002460:	f7fe fa0c 	bl	800087c <__aeabi_ddiv>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	double ZsampleVariance = ZsumSquaredDeviations / (samplesMagneto - 1);
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <getMagnetoAverage+0x30c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	3b01      	subs	r3, #1
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe f86e 	bl	8000554 <__aeabi_i2d>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002480:	f7fe f9fc 	bl	800087c <__aeabi_ddiv>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	e9c7 2308 	strd	r2, r3, [r7, #32]

	xMagnetoVariance = (int32_t) XsampleVariance;
 800248c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002490:	f7fe fb7a 	bl	8000b88 <__aeabi_d2iz>
 8002494:	4603      	mov	r3, r0
 8002496:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <getMagnetoAverage+0x310>)
 8002498:	6013      	str	r3, [r2, #0]
	yMagnetoVariance = (int32_t) YsampleVariance;
 800249a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800249e:	f7fe fb73 	bl	8000b88 <__aeabi_d2iz>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <getMagnetoAverage+0x314>)
 80024a6:	6013      	str	r3, [r2, #0]
	zMagnetoVariance = (int32_t) ZsampleVariance;
 80024a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024ac:	f7fe fb6c 	bl	8000b88 <__aeabi_d2iz>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a09      	ldr	r2, [pc, #36]	; (80024d8 <getMagnetoAverage+0x318>)
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	46c5      	mov	sp, r8


}
 80024b8:	bf00      	nop
 80024ba:	3768      	adds	r7, #104	; 0x68
 80024bc:	46bd      	mov	sp, r7
 80024be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024c2:	bf00      	nop
 80024c4:	20000768 	.word	0x20000768
 80024c8:	2000074c 	.word	0x2000074c
 80024cc:	20000750 	.word	0x20000750
 80024d0:	20000780 	.word	0x20000780
 80024d4:	20000784 	.word	0x20000784
 80024d8:	20000788 	.word	0x20000788

080024dc <printAllAverages>:

void printAllAverages(){
 80024dc:	b5b0      	push	{r4, r5, r7, lr}
 80024de:	b096      	sub	sp, #88	; 0x58
 80024e0:	af02      	add	r7, sp, #8
//	memset(buffer, 0, 100);
//	sprintf(&buffer, "Variance: x: %d, y: %d, z: %d \n \n",(int) xMagnetoVariance,(int) yMagnetoVariance,(int) zMagnetoVariance);
//	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);


	memset(buffer, 0, 200);
 80024e2:	22c8      	movs	r2, #200	; 0xc8
 80024e4:	2100      	movs	r1, #0
 80024e6:	489a      	ldr	r0, [pc, #616]	; (8002750 <printAllAverages+0x274>)
 80024e8:	f009 ff57 	bl	800c39a <memset>
	// Pressure
	strcpy(buffer, "\nPressure: Number of samples is: ");
 80024ec:	4a98      	ldr	r2, [pc, #608]	; (8002750 <printAllAverages+0x274>)
 80024ee:	4b99      	ldr	r3, [pc, #612]	; (8002754 <printAllAverages+0x278>)
 80024f0:	4614      	mov	r4, r2
 80024f2:	461d      	mov	r5, r3
 80024f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	8023      	strh	r3, [r4, #0]
	char samplesPressureStr[20]; // Assuming a reasonable buffer size for the number
	sprintf(samplesPressureStr, "%d, ", (int)samplesPressure);
 8002500:	4b95      	ldr	r3, [pc, #596]	; (8002758 <printAllAverages+0x27c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002508:	4994      	ldr	r1, [pc, #592]	; (800275c <printAllAverages+0x280>)
 800250a:	4618      	mov	r0, r3
 800250c:	f008 ffac 	bl	800b468 <siprintf>
	strcat(buffer, samplesPressureStr);
 8002510:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002514:	4619      	mov	r1, r3
 8002516:	488e      	ldr	r0, [pc, #568]	; (8002750 <printAllAverages+0x274>)
 8002518:	f009 ff1e 	bl	800c358 <strcat>
	sprintf(samplesPressureStr, "Average: %d, ", (int)pressureAverage);
 800251c:	4b90      	ldr	r3, [pc, #576]	; (8002760 <printAllAverages+0x284>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002524:	498f      	ldr	r1, [pc, #572]	; (8002764 <printAllAverages+0x288>)
 8002526:	4618      	mov	r0, r3
 8002528:	f008 ff9e 	bl	800b468 <siprintf>
	strcat(buffer, samplesPressureStr);
 800252c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002530:	4619      	mov	r1, r3
 8002532:	4887      	ldr	r0, [pc, #540]	; (8002750 <printAllAverages+0x274>)
 8002534:	f009 ff10 	bl	800c358 <strcat>
	sprintf(samplesPressureStr, "Variance: %d \n", (int)pressureVariance);
 8002538:	4b8b      	ldr	r3, [pc, #556]	; (8002768 <printAllAverages+0x28c>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002540:	498a      	ldr	r1, [pc, #552]	; (800276c <printAllAverages+0x290>)
 8002542:	4618      	mov	r0, r3
 8002544:	f008 ff90 	bl	800b468 <siprintf>
	strcat(buffer, samplesPressureStr);
 8002548:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800254c:	4619      	mov	r1, r3
 800254e:	4880      	ldr	r0, [pc, #512]	; (8002750 <printAllAverages+0x274>)
 8002550:	f009 ff02 	bl	800c358 <strcat>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 5000);
 8002554:	487e      	ldr	r0, [pc, #504]	; (8002750 <printAllAverages+0x274>)
 8002556:	f7fd fea3 	bl	80002a0 <strlen>
 800255a:	4603      	mov	r3, r0
 800255c:	b29a      	uxth	r2, r3
 800255e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002562:	497b      	ldr	r1, [pc, #492]	; (8002750 <printAllAverages+0x274>)
 8002564:	4882      	ldr	r0, [pc, #520]	; (8002770 <printAllAverages+0x294>)
 8002566:	f005 ffeb 	bl	8008540 <HAL_UART_Transmit>

	memset(buffer, 0, 200);
 800256a:	22c8      	movs	r2, #200	; 0xc8
 800256c:	2100      	movs	r1, #0
 800256e:	4878      	ldr	r0, [pc, #480]	; (8002750 <printAllAverages+0x274>)
 8002570:	f009 ff13 	bl	800c39a <memset>
	// Temperature
	strcpy(buffer, "\nTemperature: Number of samples is: ");
 8002574:	4a76      	ldr	r2, [pc, #472]	; (8002750 <printAllAverages+0x274>)
 8002576:	4b7f      	ldr	r3, [pc, #508]	; (8002774 <printAllAverages+0x298>)
 8002578:	4614      	mov	r4, r2
 800257a:	461d      	mov	r5, r3
 800257c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800257e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002584:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002588:	6020      	str	r0, [r4, #0]
 800258a:	3404      	adds	r4, #4
 800258c:	7021      	strb	r1, [r4, #0]
	char samplesTempStr[20];
	sprintf(samplesTempStr, "%d, ", (int)samplesTemp);
 800258e:	4b7a      	ldr	r3, [pc, #488]	; (8002778 <printAllAverages+0x29c>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002596:	4971      	ldr	r1, [pc, #452]	; (800275c <printAllAverages+0x280>)
 8002598:	4618      	mov	r0, r3
 800259a:	f008 ff65 	bl	800b468 <siprintf>
	strcat(buffer, samplesTempStr);
 800259e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025a2:	4619      	mov	r1, r3
 80025a4:	486a      	ldr	r0, [pc, #424]	; (8002750 <printAllAverages+0x274>)
 80025a6:	f009 fed7 	bl	800c358 <strcat>
	sprintf(samplesTempStr, "Average: %d, ", (int)temperatureAverage);
 80025aa:	4b74      	ldr	r3, [pc, #464]	; (800277c <printAllAverages+0x2a0>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025b2:	496c      	ldr	r1, [pc, #432]	; (8002764 <printAllAverages+0x288>)
 80025b4:	4618      	mov	r0, r3
 80025b6:	f008 ff57 	bl	800b468 <siprintf>
	strcat(buffer, samplesTempStr);
 80025ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025be:	4619      	mov	r1, r3
 80025c0:	4863      	ldr	r0, [pc, #396]	; (8002750 <printAllAverages+0x274>)
 80025c2:	f009 fec9 	bl	800c358 <strcat>
	sprintf(samplesTempStr, "Variance: %d \n", (int)temperatureVariance);
 80025c6:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <printAllAverages+0x2a4>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025ce:	4967      	ldr	r1, [pc, #412]	; (800276c <printAllAverages+0x290>)
 80025d0:	4618      	mov	r0, r3
 80025d2:	f008 ff49 	bl	800b468 <siprintf>
	strcat(buffer, samplesTempStr);
 80025d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025da:	4619      	mov	r1, r3
 80025dc:	485c      	ldr	r0, [pc, #368]	; (8002750 <printAllAverages+0x274>)
 80025de:	f009 febb 	bl	800c358 <strcat>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 5000);
 80025e2:	485b      	ldr	r0, [pc, #364]	; (8002750 <printAllAverages+0x274>)
 80025e4:	f7fd fe5c 	bl	80002a0 <strlen>
 80025e8:	4603      	mov	r3, r0
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80025f0:	4957      	ldr	r1, [pc, #348]	; (8002750 <printAllAverages+0x274>)
 80025f2:	485f      	ldr	r0, [pc, #380]	; (8002770 <printAllAverages+0x294>)
 80025f4:	f005 ffa4 	bl	8008540 <HAL_UART_Transmit>

	memset(buffer, 0, 200);
 80025f8:	22c8      	movs	r2, #200	; 0xc8
 80025fa:	2100      	movs	r1, #0
 80025fc:	4854      	ldr	r0, [pc, #336]	; (8002750 <printAllAverages+0x274>)
 80025fe:	f009 fecc 	bl	800c39a <memset>
	// Gyro
	strcpy(buffer, "\nGYRO: Number of samples is: ");
 8002602:	4a53      	ldr	r2, [pc, #332]	; (8002750 <printAllAverages+0x274>)
 8002604:	4b5f      	ldr	r3, [pc, #380]	; (8002784 <printAllAverages+0x2a8>)
 8002606:	4614      	mov	r4, r2
 8002608:	461d      	mov	r5, r3
 800260a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800260c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800260e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002612:	c407      	stmia	r4!, {r0, r1, r2}
 8002614:	8023      	strh	r3, [r4, #0]
	char samplesGyroStr[20];
	sprintf(samplesGyroStr, "%d, ", (int)samplesGyro);
 8002616:	4b5c      	ldr	r3, [pc, #368]	; (8002788 <printAllAverages+0x2ac>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f107 0314 	add.w	r3, r7, #20
 800261e:	494f      	ldr	r1, [pc, #316]	; (800275c <printAllAverages+0x280>)
 8002620:	4618      	mov	r0, r3
 8002622:	f008 ff21 	bl	800b468 <siprintf>
	strcat(buffer, samplesGyroStr);
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4619      	mov	r1, r3
 800262c:	4848      	ldr	r0, [pc, #288]	; (8002750 <printAllAverages+0x274>)
 800262e:	f009 fe93 	bl	800c358 <strcat>
	sprintf(samplesGyroStr, "Average: x: %d, y: %d, z: %d, ", (int)xGyroAverage, (int)yGyroAverage, (int)zGyroAverage);
 8002632:	4b56      	ldr	r3, [pc, #344]	; (800278c <printAllAverages+0x2b0>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b56      	ldr	r3, [pc, #344]	; (8002790 <printAllAverages+0x2b4>)
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	4b56      	ldr	r3, [pc, #344]	; (8002794 <printAllAverages+0x2b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f107 0014 	add.w	r0, r7, #20
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	460b      	mov	r3, r1
 8002646:	4954      	ldr	r1, [pc, #336]	; (8002798 <printAllAverages+0x2bc>)
 8002648:	f008 ff0e 	bl	800b468 <siprintf>
	strcat(buffer, samplesGyroStr);
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	4619      	mov	r1, r3
 8002652:	483f      	ldr	r0, [pc, #252]	; (8002750 <printAllAverages+0x274>)
 8002654:	f009 fe80 	bl	800c358 <strcat>
	sprintf(samplesGyroStr, "Variance: x: %d, y: %d, z: %d \n", (int)xGyroVariance, (int)yGyroVariance, (int)zGyroVariance);
 8002658:	4b50      	ldr	r3, [pc, #320]	; (800279c <printAllAverages+0x2c0>)
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <printAllAverages+0x2c4>)
 800265e:	6819      	ldr	r1, [r3, #0]
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <printAllAverages+0x2c8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f107 0014 	add.w	r0, r7, #20
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	460b      	mov	r3, r1
 800266c:	494e      	ldr	r1, [pc, #312]	; (80027a8 <printAllAverages+0x2cc>)
 800266e:	f008 fefb 	bl	800b468 <siprintf>
	strcat(buffer, samplesGyroStr);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	4835      	ldr	r0, [pc, #212]	; (8002750 <printAllAverages+0x274>)
 800267a:	f009 fe6d 	bl	800c358 <strcat>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 5000);
 800267e:	4834      	ldr	r0, [pc, #208]	; (8002750 <printAllAverages+0x274>)
 8002680:	f7fd fe0e 	bl	80002a0 <strlen>
 8002684:	4603      	mov	r3, r0
 8002686:	b29a      	uxth	r2, r3
 8002688:	f241 3388 	movw	r3, #5000	; 0x1388
 800268c:	4930      	ldr	r1, [pc, #192]	; (8002750 <printAllAverages+0x274>)
 800268e:	4838      	ldr	r0, [pc, #224]	; (8002770 <printAllAverages+0x294>)
 8002690:	f005 ff56 	bl	8008540 <HAL_UART_Transmit>

	memset(buffer, 0, 200);
 8002694:	22c8      	movs	r2, #200	; 0xc8
 8002696:	2100      	movs	r1, #0
 8002698:	482d      	ldr	r0, [pc, #180]	; (8002750 <printAllAverages+0x274>)
 800269a:	f009 fe7e 	bl	800c39a <memset>
	// Magneto
	strcpy(buffer, "\nMAGNETO: Number of samples is: ");
 800269e:	4a2c      	ldr	r2, [pc, #176]	; (8002750 <printAllAverages+0x274>)
 80026a0:	4b42      	ldr	r3, [pc, #264]	; (80027ac <printAllAverages+0x2d0>)
 80026a2:	4614      	mov	r4, r2
 80026a4:	461d      	mov	r5, r3
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ae:	682b      	ldr	r3, [r5, #0]
 80026b0:	7023      	strb	r3, [r4, #0]
	char samplesMagnetoStr[20];
	sprintf(samplesMagnetoStr, "%d, ", (int)samplesMagneto);
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <printAllAverages+0x2d4>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	463b      	mov	r3, r7
 80026b8:	4928      	ldr	r1, [pc, #160]	; (800275c <printAllAverages+0x280>)
 80026ba:	4618      	mov	r0, r3
 80026bc:	f008 fed4 	bl	800b468 <siprintf>
	strcat(buffer, samplesMagnetoStr);
 80026c0:	463b      	mov	r3, r7
 80026c2:	4619      	mov	r1, r3
 80026c4:	4822      	ldr	r0, [pc, #136]	; (8002750 <printAllAverages+0x274>)
 80026c6:	f009 fe47 	bl	800c358 <strcat>
	sprintf(samplesMagnetoStr, "Average: x: %d, y: %d, z: %d, ", (int)xMagnetoAverage, (int)yMagnetoAverage, (int)zMagnetoAverage);
 80026ca:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <printAllAverages+0x2d8>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <printAllAverages+0x2dc>)
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	4b3a      	ldr	r3, [pc, #232]	; (80027bc <printAllAverages+0x2e0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4638      	mov	r0, r7
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	460b      	mov	r3, r1
 80026dc:	492e      	ldr	r1, [pc, #184]	; (8002798 <printAllAverages+0x2bc>)
 80026de:	f008 fec3 	bl	800b468 <siprintf>
	strcat(buffer, samplesMagnetoStr);
 80026e2:	463b      	mov	r3, r7
 80026e4:	4619      	mov	r1, r3
 80026e6:	481a      	ldr	r0, [pc, #104]	; (8002750 <printAllAverages+0x274>)
 80026e8:	f009 fe36 	bl	800c358 <strcat>
	sprintf(samplesMagnetoStr, "Variance: x: %d, y: %d, z: %d \n \n", (int)xMagnetoVariance, (int)yMagnetoVariance, (int)zMagnetoVariance);
 80026ec:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <printAllAverages+0x2e4>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <printAllAverages+0x2e8>)
 80026f2:	6819      	ldr	r1, [r3, #0]
 80026f4:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <printAllAverages+0x2ec>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4638      	mov	r0, r7
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	460b      	mov	r3, r1
 80026fe:	4933      	ldr	r1, [pc, #204]	; (80027cc <printAllAverages+0x2f0>)
 8002700:	f008 feb2 	bl	800b468 <siprintf>
	strcat(buffer, samplesMagnetoStr);
 8002704:	463b      	mov	r3, r7
 8002706:	4619      	mov	r1, r3
 8002708:	4811      	ldr	r0, [pc, #68]	; (8002750 <printAllAverages+0x274>)
 800270a:	f009 fe25 	bl	800c358 <strcat>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 5000);
 800270e:	4810      	ldr	r0, [pc, #64]	; (8002750 <printAllAverages+0x274>)
 8002710:	f7fd fdc6 	bl	80002a0 <strlen>
 8002714:	4603      	mov	r3, r0
 8002716:	b29a      	uxth	r2, r3
 8002718:	f241 3388 	movw	r3, #5000	; 0x1388
 800271c:	490c      	ldr	r1, [pc, #48]	; (8002750 <printAllAverages+0x274>)
 800271e:	4814      	ldr	r0, [pc, #80]	; (8002770 <printAllAverages+0x294>)
 8002720:	f005 ff0e 	bl	8008540 <HAL_UART_Transmit>
//	samplesGyro = 0;
//	samplesMagneto = 0;
//	samplesTemp = 0;
//	samplesPressure = 0;

	 xGyroVariance = 0, yGyroVariance = 0, zGyroVariance = 0;
 8002724:	4b1d      	ldr	r3, [pc, #116]	; (800279c <printAllAverages+0x2c0>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <printAllAverages+0x2c4>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <printAllAverages+0x2c8>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

	 xMagnetoVariance = 0, yMagnetoVariance = 0, zMagnetoVariance = 0;
 8002736:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <printAllAverages+0x2e4>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <printAllAverages+0x2e8>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <printAllAverages+0x2ec>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]


}
 8002748:	bf00      	nop
 800274a:	3750      	adds	r7, #80	; 0x50
 800274c:	46bd      	mov	sp, r7
 800274e:	bdb0      	pop	{r4, r5, r7, pc}
 8002750:	20000660 	.word	0x20000660
 8002754:	0800f098 	.word	0x0800f098
 8002758:	20000758 	.word	0x20000758
 800275c:	0800f0bc 	.word	0x0800f0bc
 8002760:	2000078c 	.word	0x2000078c
 8002764:	0800f0c4 	.word	0x0800f0c4
 8002768:	20000794 	.word	0x20000794
 800276c:	0800f0d4 	.word	0x0800f0d4
 8002770:	200005c0 	.word	0x200005c0
 8002774:	0800f0e4 	.word	0x0800f0e4
 8002778:	20000754 	.word	0x20000754
 800277c:	20000790 	.word	0x20000790
 8002780:	20000798 	.word	0x20000798
 8002784:	0800f10c 	.word	0x0800f10c
 8002788:	2000074c 	.word	0x2000074c
 800278c:	2000075c 	.word	0x2000075c
 8002790:	20000760 	.word	0x20000760
 8002794:	20000764 	.word	0x20000764
 8002798:	0800f12c 	.word	0x0800f12c
 800279c:	20000774 	.word	0x20000774
 80027a0:	20000778 	.word	0x20000778
 80027a4:	2000077c 	.word	0x2000077c
 80027a8:	0800f14c 	.word	0x0800f14c
 80027ac:	0800f16c 	.word	0x0800f16c
 80027b0:	20000750 	.word	0x20000750
 80027b4:	20000768 	.word	0x20000768
 80027b8:	2000076c 	.word	0x2000076c
 80027bc:	20000770 	.word	0x20000770
 80027c0:	20000780 	.word	0x20000780
 80027c4:	20000784 	.word	0x20000784
 80027c8:	20000788 	.word	0x20000788
 80027cc:	0800f190 	.word	0x0800f190

080027d0 <deleteBlocks>:

//Function to delete blocks at 8 different addresses
void deleteBlocks(){
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0

		deleting = 1;
 80027d4:	4b37      	ldr	r3, [pc, #220]	; (80028b4 <deleteBlocks+0xe4>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	601a      	str	r2, [r3, #0]
		memset(buffer, 0, 200);
 80027da:	22c8      	movs	r2, #200	; 0xc8
 80027dc:	2100      	movs	r1, #0
 80027de:	4836      	ldr	r0, [pc, #216]	; (80028b8 <deleteBlocks+0xe8>)
 80027e0:	f009 fddb 	bl	800c39a <memset>
		sprintf(&buffer, "Deleting blocks...\n");
 80027e4:	4935      	ldr	r1, [pc, #212]	; (80028bc <deleteBlocks+0xec>)
 80027e6:	4834      	ldr	r0, [pc, #208]	; (80028b8 <deleteBlocks+0xe8>)
 80027e8:	f008 fe3e 	bl	800b468 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 80027ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80027f0:	22c8      	movs	r2, #200	; 0xc8
 80027f2:	4931      	ldr	r1, [pc, #196]	; (80028b8 <deleteBlocks+0xe8>)
 80027f4:	4832      	ldr	r0, [pc, #200]	; (80028c0 <deleteBlocks+0xf0>)
 80027f6:	f005 fea3 	bl	8008540 <HAL_UART_Transmit>

	//Get 8 different addresses for 8 different values to be stored

	  	if(BSP_QSPI_Erase_Block(0x00000000) != QSPI_OK){
 80027fa:	2000      	movs	r0, #0
 80027fc:	f000 fdc8 	bl	8003390 <BSP_QSPI_Erase_Block>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <deleteBlocks+0x3a>
	  		Error_Handler();
 8002806:	f000 fa2d 	bl	8002c64 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00010000) != QSPI_OK){
 800280a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800280e:	f000 fdbf 	bl	8003390 <BSP_QSPI_Erase_Block>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <deleteBlocks+0x4c>
	  		Error_Handler();
 8002818:	f000 fa24 	bl	8002c64 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00020000) != QSPI_OK){
 800281c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002820:	f000 fdb6 	bl	8003390 <BSP_QSPI_Erase_Block>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <deleteBlocks+0x5e>
	  		Error_Handler();
 800282a:	f000 fa1b 	bl	8002c64 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00030000) != QSPI_OK){
 800282e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8002832:	f000 fdad 	bl	8003390 <BSP_QSPI_Erase_Block>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <deleteBlocks+0x70>
	  		Error_Handler();
 800283c:	f000 fa12 	bl	8002c64 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00040000) != QSPI_OK){
 8002840:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002844:	f000 fda4 	bl	8003390 <BSP_QSPI_Erase_Block>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <deleteBlocks+0x82>
	  		Error_Handler();
 800284e:	f000 fa09 	bl	8002c64 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00050000) != QSPI_OK){
 8002852:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 8002856:	f000 fd9b 	bl	8003390 <BSP_QSPI_Erase_Block>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <deleteBlocks+0x94>
	  		Error_Handler();
 8002860:	f000 fa00 	bl	8002c64 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00060000) != QSPI_OK){
 8002864:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8002868:	f000 fd92 	bl	8003390 <BSP_QSPI_Erase_Block>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <deleteBlocks+0xa6>
	  		Error_Handler();
 8002872:	f000 f9f7 	bl	8002c64 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00070000) != QSPI_OK){
 8002876:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 800287a:	f000 fd89 	bl	8003390 <BSP_QSPI_Erase_Block>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <deleteBlocks+0xb8>
	  		Error_Handler();
 8002884:	f000 f9ee 	bl	8002c64 <Error_Handler>
	  	}

	  	memset(buffer, 0, 200);
 8002888:	22c8      	movs	r2, #200	; 0xc8
 800288a:	2100      	movs	r1, #0
 800288c:	480a      	ldr	r0, [pc, #40]	; (80028b8 <deleteBlocks+0xe8>)
 800288e:	f009 fd84 	bl	800c39a <memset>
		sprintf(&buffer, "Blocks deleted ! \n");
 8002892:	490c      	ldr	r1, [pc, #48]	; (80028c4 <deleteBlocks+0xf4>)
 8002894:	4808      	ldr	r0, [pc, #32]	; (80028b8 <deleteBlocks+0xe8>)
 8002896:	f008 fde7 	bl	800b468 <siprintf>
	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 800289a:	f241 3388 	movw	r3, #5000	; 0x1388
 800289e:	22c8      	movs	r2, #200	; 0xc8
 80028a0:	4905      	ldr	r1, [pc, #20]	; (80028b8 <deleteBlocks+0xe8>)
 80028a2:	4807      	ldr	r0, [pc, #28]	; (80028c0 <deleteBlocks+0xf0>)
 80028a4:	f005 fe4c 	bl	8008540 <HAL_UART_Transmit>

	  	deleting = 0;
 80028a8:	4b02      	ldr	r3, [pc, #8]	; (80028b4 <deleteBlocks+0xe4>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000740 	.word	0x20000740
 80028b8:	20000660 	.word	0x20000660
 80028bc:	0800f1b4 	.word	0x0800f1b4
 80028c0:	200005c0 	.word	0x200005c0
 80028c4:	0800f1c8 	.word	0x0800f1c8

080028c8 <readFromSensors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readFromSensors */
void readFromSensors(void const * argument)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 80028d0:	2064      	movs	r0, #100	; 0x64
 80028d2:	f006 fd48 	bl	8009366 <osDelay>

	  	if(!deleting && !gettingAverages){
 80028d6:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <readFromSensors+0x10c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f8      	bne.n	80028d0 <readFromSensors+0x8>
 80028de:	4b3e      	ldr	r3, [pc, #248]	; (80029d8 <readFromSensors+0x110>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f4      	bne.n	80028d0 <readFromSensors+0x8>


			BSP_GYRO_GetXYZ(gyro); // (x, y, z)
 80028e6:	483d      	ldr	r0, [pc, #244]	; (80029dc <readFromSensors+0x114>)
 80028e8:	f000 fb72 	bl	8002fd0 <BSP_GYRO_GetXYZ>


			//Store gyro x,y,z values
			//Use addresses from 0x00000000 to 0x00030000
			if(BSP_QSPI_Write(gyro, 0x00000000 + sizeof(gyro) * samplesGyro , sizeof(gyro)) != QSPI_OK){
 80028ec:	4b3c      	ldr	r3, [pc, #240]	; (80029e0 <readFromSensors+0x118>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4613      	mov	r3, r2
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	4413      	add	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2206      	movs	r2, #6
 80028fc:	4619      	mov	r1, r3
 80028fe:	4837      	ldr	r0, [pc, #220]	; (80029dc <readFromSensors+0x114>)
 8002900:	f000 fcc0 	bl	8003284 <BSP_QSPI_Write>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <readFromSensors+0x48>
				Error_Handler();
 800290a:	f000 f9ab 	bl	8002c64 <Error_Handler>
 800290e:	e004      	b.n	800291a <readFromSensors+0x52>
			}
			else{
				samplesGyro++;
 8002910:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <readFromSensors+0x118>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	3301      	adds	r3, #1
 8002916:	4a32      	ldr	r2, [pc, #200]	; (80029e0 <readFromSensors+0x118>)
 8002918:	6013      	str	r3, [r2, #0]
			}


			BSP_MAGNETO_GetXYZ(magneto); // (x, y, z)
 800291a:	4832      	ldr	r0, [pc, #200]	; (80029e4 <readFromSensors+0x11c>)
 800291c:	f000 fb9c 	bl	8003058 <BSP_MAGNETO_GetXYZ>

			//Store magneto x,y,z values
			//Use addresses from 0x00030000 to 0x00060000
			if(BSP_QSPI_Write(magneto, 0x00030000 + sizeof(magneto) * samplesMagneto, sizeof(magneto)) != QSPI_OK){
 8002920:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <readFromSensors+0x120>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8002932:	2206      	movs	r2, #6
 8002934:	4619      	mov	r1, r3
 8002936:	482b      	ldr	r0, [pc, #172]	; (80029e4 <readFromSensors+0x11c>)
 8002938:	f000 fca4 	bl	8003284 <BSP_QSPI_Write>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <readFromSensors+0x80>
				Error_Handler();
 8002942:	f000 f98f 	bl	8002c64 <Error_Handler>
 8002946:	e004      	b.n	8002952 <readFromSensors+0x8a>
			}
			else{
				samplesMagneto++;
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <readFromSensors+0x120>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <readFromSensors+0x120>)
 8002950:	6013      	str	r3, [r2, #0]
			}


			temp[0] = BSP_TSENSOR_ReadTemp();
 8002952:	f001 f82d 	bl	80039b0 <BSP_TSENSOR_ReadTemp>
 8002956:	eef0 7a40 	vmov.f32	s15, s0
 800295a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800295e:	ee17 3a90 	vmov	r3, s15
 8002962:	b21a      	sxth	r2, r3
 8002964:	4b21      	ldr	r3, [pc, #132]	; (80029ec <readFromSensors+0x124>)
 8002966:	801a      	strh	r2, [r3, #0]

			//Store temperature values
			if(BSP_QSPI_Write(temp, 0x00060000 + sizeof(temp) * samplesTemp, sizeof(temp)) != QSPI_OK){
 8002968:	4b21      	ldr	r3, [pc, #132]	; (80029f0 <readFromSensors+0x128>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	2202      	movs	r2, #2
 8002974:	4619      	mov	r1, r3
 8002976:	481d      	ldr	r0, [pc, #116]	; (80029ec <readFromSensors+0x124>)
 8002978:	f000 fc84 	bl	8003284 <BSP_QSPI_Write>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <readFromSensors+0xc0>
				Error_Handler();
 8002982:	f000 f96f 	bl	8002c64 <Error_Handler>
 8002986:	e004      	b.n	8002992 <readFromSensors+0xca>
			}else{
				samplesTemp++;
 8002988:	4b19      	ldr	r3, [pc, #100]	; (80029f0 <readFromSensors+0x128>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	4a18      	ldr	r2, [pc, #96]	; (80029f0 <readFromSensors+0x128>)
 8002990:	6013      	str	r3, [r2, #0]

			}


		   pressure[0] = BSP_PSENSOR_ReadPressure();
 8002992:	f000 fb99 	bl	80030c8 <BSP_PSENSOR_ReadPressure>
 8002996:	eef0 7a40 	vmov.f32	s15, s0
 800299a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800299e:	ee17 3a90 	vmov	r3, s15
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	4b13      	ldr	r3, [pc, #76]	; (80029f4 <readFromSensors+0x12c>)
 80029a6:	801a      	strh	r2, [r3, #0]

			//Store pressure values
			if(BSP_QSPI_Write(pressure, 0x00070000 + sizeof(pressure) * samplesPressure, sizeof(pressure)) != QSPI_OK){
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <readFromSensors+0x130>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2202      	movs	r2, #2
 80029b4:	4619      	mov	r1, r3
 80029b6:	480f      	ldr	r0, [pc, #60]	; (80029f4 <readFromSensors+0x12c>)
 80029b8:	f000 fc64 	bl	8003284 <BSP_QSPI_Write>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <readFromSensors+0x100>
				Error_Handler();
 80029c2:	f000 f94f 	bl	8002c64 <Error_Handler>
 80029c6:	e783      	b.n	80028d0 <readFromSensors+0x8>
			}else{
				samplesPressure++;
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <readFromSensors+0x130>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <readFromSensors+0x130>)
 80029d0:	6013      	str	r3, [r2, #0]
	  osDelay(100);
 80029d2:	e77d      	b.n	80028d0 <readFromSensors+0x8>
 80029d4:	20000740 	.word	0x20000740
 80029d8:	20000748 	.word	0x20000748
 80029dc:	20000728 	.word	0x20000728
 80029e0:	2000074c 	.word	0x2000074c
 80029e4:	20000730 	.word	0x20000730
 80029e8:	20000750 	.word	0x20000750
 80029ec:	20000738 	.word	0x20000738
 80029f0:	20000754 	.word	0x20000754
 80029f4:	2000073c 	.word	0x2000073c
 80029f8:	20000758 	.word	0x20000758

080029fc <transmitViaUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmitViaUART */
void transmitViaUART(void const * argument)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmitViaUART */
  /* Infinite loop */
  for(;;)
  {
      osDelay(200);
 8002a04:	20c8      	movs	r0, #200	; 0xc8
 8002a06:	f006 fcae 	bl	8009366 <osDelay>



	  	if(counter == 0){
 8002a0a:	4b62      	ldr	r3, [pc, #392]	; (8002b94 <transmitViaUART+0x198>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d123      	bne.n	8002a5a <transmitViaUART+0x5e>

	  		hasPassed = 0;
 8002a12:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <transmitViaUART+0x19c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]

	  		int x = gyro[0];
 8002a18:	4b60      	ldr	r3, [pc, #384]	; (8002b9c <transmitViaUART+0x1a0>)
 8002a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a1e:	613b      	str	r3, [r7, #16]
	  		int y = gyro[1];
 8002a20:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <transmitViaUART+0x1a0>)
 8002a22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a26:	60fb      	str	r3, [r7, #12]
	  		int z = gyro[2];
 8002a28:	4b5c      	ldr	r3, [pc, #368]	; (8002b9c <transmitViaUART+0x1a0>)
 8002a2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a2e:	60bb      	str	r3, [r7, #8]

	  		memset(buffer, 0, 200);
 8002a30:	22c8      	movs	r2, #200	; 0xc8
 8002a32:	2100      	movs	r1, #0
 8002a34:	485a      	ldr	r0, [pc, #360]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002a36:	f009 fcb0 	bl	800c39a <memset>
	  		sprintf(&buffer, "GYRO: x: %d, y: %d, z: %d \n", x,y,z);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4958      	ldr	r1, [pc, #352]	; (8002ba4 <transmitViaUART+0x1a8>)
 8002a44:	4856      	ldr	r0, [pc, #344]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002a46:	f008 fd0f 	bl	800b468 <siprintf>
	  	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002a4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4e:	22c8      	movs	r2, #200	; 0xc8
 8002a50:	4953      	ldr	r1, [pc, #332]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002a52:	4855      	ldr	r0, [pc, #340]	; (8002ba8 <transmitViaUART+0x1ac>)
 8002a54:	f005 fd74 	bl	8008540 <HAL_UART_Transmit>
 8002a58:	e7d4      	b.n	8002a04 <transmitViaUART+0x8>

	  	}

	  	else if(counter == 1){
 8002a5a:	4b4e      	ldr	r3, [pc, #312]	; (8002b94 <transmitViaUART+0x198>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d120      	bne.n	8002aa4 <transmitViaUART+0xa8>

	  		int x = magneto[0];
 8002a62:	4b52      	ldr	r3, [pc, #328]	; (8002bac <transmitViaUART+0x1b0>)
 8002a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a68:	61fb      	str	r3, [r7, #28]
	  		int y = magneto[1];
 8002a6a:	4b50      	ldr	r3, [pc, #320]	; (8002bac <transmitViaUART+0x1b0>)
 8002a6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a70:	61bb      	str	r3, [r7, #24]
	  		int z = magneto[2];
 8002a72:	4b4e      	ldr	r3, [pc, #312]	; (8002bac <transmitViaUART+0x1b0>)
 8002a74:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a78:	617b      	str	r3, [r7, #20]

	  		memset(buffer, 0, 200);
 8002a7a:	22c8      	movs	r2, #200	; 0xc8
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	4848      	ldr	r0, [pc, #288]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002a80:	f009 fc8b 	bl	800c39a <memset>
	  		sprintf(&buffer, "Magneto: x: %d, y: %d, z: %d \n", x,y,z);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	69fa      	ldr	r2, [r7, #28]
 8002a8c:	4948      	ldr	r1, [pc, #288]	; (8002bb0 <transmitViaUART+0x1b4>)
 8002a8e:	4844      	ldr	r0, [pc, #272]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002a90:	f008 fcea 	bl	800b468 <siprintf>
	  	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002a94:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a98:	22c8      	movs	r2, #200	; 0xc8
 8002a9a:	4941      	ldr	r1, [pc, #260]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002a9c:	4842      	ldr	r0, [pc, #264]	; (8002ba8 <transmitViaUART+0x1ac>)
 8002a9e:	f005 fd4f 	bl	8008540 <HAL_UART_Transmit>
 8002aa2:	e7af      	b.n	8002a04 <transmitViaUART+0x8>

	  	}

	  	else if(counter == 2){
 8002aa4:	4b3b      	ldr	r3, [pc, #236]	; (8002b94 <transmitViaUART+0x198>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d114      	bne.n	8002ad6 <transmitViaUART+0xda>

	  		memset(buffer, 0, 200);
 8002aac:	22c8      	movs	r2, #200	; 0xc8
 8002aae:	2100      	movs	r1, #0
 8002ab0:	483b      	ldr	r0, [pc, #236]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002ab2:	f009 fc72 	bl	800c39a <memset>
	  		sprintf(&buffer, "Temperature: %d \n", (int) temp[0]);
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <transmitViaUART+0x1b8>)
 8002ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abc:	461a      	mov	r2, r3
 8002abe:	493e      	ldr	r1, [pc, #248]	; (8002bb8 <transmitViaUART+0x1bc>)
 8002ac0:	4837      	ldr	r0, [pc, #220]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002ac2:	f008 fcd1 	bl	800b468 <siprintf>
	  	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002ac6:	f241 3388 	movw	r3, #5000	; 0x1388
 8002aca:	22c8      	movs	r2, #200	; 0xc8
 8002acc:	4934      	ldr	r1, [pc, #208]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002ace:	4836      	ldr	r0, [pc, #216]	; (8002ba8 <transmitViaUART+0x1ac>)
 8002ad0:	f005 fd36 	bl	8008540 <HAL_UART_Transmit>
 8002ad4:	e796      	b.n	8002a04 <transmitViaUART+0x8>

	  	}

	  	else if(counter == 3){
 8002ad6:	4b2f      	ldr	r3, [pc, #188]	; (8002b94 <transmitViaUART+0x198>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d114      	bne.n	8002b08 <transmitViaUART+0x10c>

	  		memset(buffer, 0, 200);
 8002ade:	22c8      	movs	r2, #200	; 0xc8
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	482f      	ldr	r0, [pc, #188]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002ae4:	f009 fc59 	bl	800c39a <memset>
	  		sprintf(&buffer, "Pressure: %d \n", (int) pressure[0]);
 8002ae8:	4b34      	ldr	r3, [pc, #208]	; (8002bbc <transmitViaUART+0x1c0>)
 8002aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4933      	ldr	r1, [pc, #204]	; (8002bc0 <transmitViaUART+0x1c4>)
 8002af2:	482b      	ldr	r0, [pc, #172]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002af4:	f008 fcb8 	bl	800b468 <siprintf>
	  	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002af8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002afc:	22c8      	movs	r2, #200	; 0xc8
 8002afe:	4928      	ldr	r1, [pc, #160]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002b00:	4829      	ldr	r0, [pc, #164]	; (8002ba8 <transmitViaUART+0x1ac>)
 8002b02:	f005 fd1d 	bl	8008540 <HAL_UART_Transmit>
 8002b06:	e77d      	b.n	8002a04 <transmitViaUART+0x8>

	  	}

	  	else if(!hasPassed && counter == 4 ){
 8002b08:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <transmitViaUART+0x19c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f af79 	bne.w	8002a04 <transmitViaUART+0x8>
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <transmitViaUART+0x198>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	f47f af74 	bne.w	8002a04 <transmitViaUART+0x8>

	  		osDelay(100);
 8002b1c:	2064      	movs	r0, #100	; 0x64
 8002b1e:	f006 fc22 	bl	8009366 <osDelay>

			memset(buffer, 0, 200);
 8002b22:	22c8      	movs	r2, #200	; 0xc8
 8002b24:	2100      	movs	r1, #0
 8002b26:	481e      	ldr	r0, [pc, #120]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002b28:	f009 fc37 	bl	800c39a <memset>
			sprintf(&buffer, "Getting averages \n");
 8002b2c:	4925      	ldr	r1, [pc, #148]	; (8002bc4 <transmitViaUART+0x1c8>)
 8002b2e:	481c      	ldr	r0, [pc, #112]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002b30:	f008 fc9a 	bl	800b468 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002b34:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b38:	22c8      	movs	r2, #200	; 0xc8
 8002b3a:	4919      	ldr	r1, [pc, #100]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002b3c:	481a      	ldr	r0, [pc, #104]	; (8002ba8 <transmitViaUART+0x1ac>)
 8002b3e:	f005 fcff 	bl	8008540 <HAL_UART_Transmit>

			gettingAverages = 1;
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <transmitViaUART+0x1cc>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
			//osDelay(10);
			getGyroAverage();
 8002b48:	f7ff f9ac 	bl	8001ea4 <getGyroAverage>
			//osDelay(10);
			getMagnetoAverage();
 8002b4c:	f7ff fb38 	bl	80021c0 <getMagnetoAverage>
			//osDelay(10);
			getTemperatureAverage();
 8002b50:	f7ff f8e6 	bl	8001d20 <getTemperatureAverage>
			//osDelay(10);
			getPressureAverage();
 8002b54:	f7ff f826 	bl	8001ba4 <getPressureAverage>

			//osDelay(10);
			printAllAverages();
 8002b58:	f7ff fcc0 	bl	80024dc <printAllAverages>
			//osDelay(10);

	  	  	hasPassed = 1;
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <transmitViaUART+0x19c>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

			memset(buffer, 0, 200);
 8002b62:	22c8      	movs	r2, #200	; 0xc8
 8002b64:	2100      	movs	r1, #0
 8002b66:	480e      	ldr	r0, [pc, #56]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002b68:	f009 fc17 	bl	800c39a <memset>
			sprintf(&buffer, "Done averages. \n");
 8002b6c:	4917      	ldr	r1, [pc, #92]	; (8002bcc <transmitViaUART+0x1d0>)
 8002b6e:	480c      	ldr	r0, [pc, #48]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002b70:	f008 fc7a 	bl	800b468 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002b74:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b78:	22c8      	movs	r2, #200	; 0xc8
 8002b7a:	4909      	ldr	r1, [pc, #36]	; (8002ba0 <transmitViaUART+0x1a4>)
 8002b7c:	480a      	ldr	r0, [pc, #40]	; (8002ba8 <transmitViaUART+0x1ac>)
 8002b7e:	f005 fcdf 	bl	8008540 <HAL_UART_Transmit>


	  	  	osDelay(500);
 8002b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b86:	f006 fbee 	bl	8009366 <osDelay>

			gettingAverages = 0;
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <transmitViaUART+0x1cc>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]
      osDelay(200);
 8002b90:	e738      	b.n	8002a04 <transmitViaUART+0x8>
 8002b92:	bf00      	nop
 8002b94:	20000084 	.word	0x20000084
 8002b98:	20000744 	.word	0x20000744
 8002b9c:	20000728 	.word	0x20000728
 8002ba0:	20000660 	.word	0x20000660
 8002ba4:	0800f1dc 	.word	0x0800f1dc
 8002ba8:	200005c0 	.word	0x200005c0
 8002bac:	20000730 	.word	0x20000730
 8002bb0:	0800f1f8 	.word	0x0800f1f8
 8002bb4:	20000738 	.word	0x20000738
 8002bb8:	0800f218 	.word	0x0800f218
 8002bbc:	2000073c 	.word	0x2000073c
 8002bc0:	0800f22c 	.word	0x0800f22c
 8002bc4:	0800f23c 	.word	0x0800f23c
 8002bc8:	20000748 	.word	0x20000748
 8002bcc:	0800f250 	.word	0x0800f250

08002bd0 <hasButtonBeenPressed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hasButtonBeenPressed */
void hasButtonBeenPressed(void const * argument)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hasButtonBeenPressed */
	int passedBy = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
	  for(;;)
	  {

		  osDelay(10);
 8002bdc:	200a      	movs	r0, #10
 8002bde:	f006 fbc2 	bl	8009366 <osDelay>


		GPIO_PinState button_state = HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin);
 8002be2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002be6:	4813      	ldr	r0, [pc, #76]	; (8002c34 <hasButtonBeenPressed+0x64>)
 8002be8:	f001 fdcc 	bl	8004784 <HAL_GPIO_ReadPin>
 8002bec:	4603      	mov	r3, r0
 8002bee:	72fb      	strb	r3, [r7, #11]

		 while(button_state == GPIO_PIN_RESET){ // button pressed (when button pushed, grounded)
 8002bf0:	e01a      	b.n	8002c28 <hasButtonBeenPressed+0x58>

			 // ensure that do not repeat;
		    	if(!passedBy){
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d110      	bne.n	8002c1a <hasButtonBeenPressed+0x4a>
		    		counter = (counter + 1) % 5;
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <hasButtonBeenPressed+0x68>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1c59      	adds	r1, r3, #1
 8002bfe:	4b0f      	ldr	r3, [pc, #60]	; (8002c3c <hasButtonBeenPressed+0x6c>)
 8002c00:	fb83 2301 	smull	r2, r3, r3, r1
 8002c04:	105a      	asrs	r2, r3, #1
 8002c06:	17cb      	asrs	r3, r1, #31
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	1aca      	subs	r2, r1, r3
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <hasButtonBeenPressed+0x68>)
 8002c14:	601a      	str	r2, [r3, #0]
		    		passedBy = 1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	60fb      	str	r3, [r7, #12]
		    	}

		 button_state = HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin);
 8002c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <hasButtonBeenPressed+0x64>)
 8002c20:	f001 fdb0 	bl	8004784 <HAL_GPIO_ReadPin>
 8002c24:	4603      	mov	r3, r0
 8002c26:	72fb      	strb	r3, [r7, #11]
		 while(button_state == GPIO_PIN_RESET){ // button pressed (when button pushed, grounded)
 8002c28:	7afb      	ldrb	r3, [r7, #11]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0e1      	beq.n	8002bf2 <hasButtonBeenPressed+0x22>


		 }

		passedBy = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
	  {
 8002c32:	e7d3      	b.n	8002bdc <hasButtonBeenPressed+0xc>
 8002c34:	48000800 	.word	0x48000800
 8002c38:	20000084 	.word	0x20000084
 8002c3c:	66666667 	.word	0x66666667

08002c40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d101      	bne.n	8002c56 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c52:	f001 fa11 	bl	8004078 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40001000 	.word	0x40001000

08002c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c68:	b672      	cpsid	i
}
 8002c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  memset(buffer, 0, 100);
 8002c6c:	2264      	movs	r2, #100	; 0x64
 8002c6e:	2100      	movs	r1, #0
 8002c70:	480a      	ldr	r0, [pc, #40]	; (8002c9c <Error_Handler+0x38>)
 8002c72:	f009 fb92 	bl	800c39a <memset>
  sprintf(&buffer, "Error at error handler \n");
 8002c76:	490a      	ldr	r1, [pc, #40]	; (8002ca0 <Error_Handler+0x3c>)
 8002c78:	4808      	ldr	r0, [pc, #32]	; (8002c9c <Error_Handler+0x38>)
 8002c7a:	f008 fbf5 	bl	800b468 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002c7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c82:	22c8      	movs	r2, #200	; 0xc8
 8002c84:	4905      	ldr	r1, [pc, #20]	; (8002c9c <Error_Handler+0x38>)
 8002c86:	4807      	ldr	r0, [pc, #28]	; (8002ca4 <Error_Handler+0x40>)
 8002c88:	f005 fc5a 	bl	8008540 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2108      	movs	r1, #8
 8002c90:	4805      	ldr	r0, [pc, #20]	; (8002ca8 <Error_Handler+0x44>)
 8002c92:	f001 fd8f 	bl	80047b4 <HAL_GPIO_WritePin>
  __BKPT();
 8002c96:	be00      	bkpt	0x0000

  while (1)
 8002c98:	e7fe      	b.n	8002c98 <Error_Handler+0x34>
 8002c9a:	bf00      	nop
 8002c9c:	20000660 	.word	0x20000660
 8002ca0:	0800f264 	.word	0x0800f264
 8002ca4:	200005c0 	.word	0x200005c0
 8002ca8:	48001000 	.word	0x48001000

08002cac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb8:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002cba:	f043 0302 	orr.w	r3, r3, #2
 8002cbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002ccc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002cd0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002cd2:	2312      	movs	r3, #18
 8002cd4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002cde:	2304      	movs	r3, #4
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	481b      	ldr	r0, [pc, #108]	; (8002d58 <I2Cx_MspInit+0xac>)
 8002cea:	f001 fac7 	bl	800427c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cee:	f107 0314 	add.w	r3, r7, #20
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4818      	ldr	r0, [pc, #96]	; (8002d58 <I2Cx_MspInit+0xac>)
 8002cf6:	f001 fac1 	bl	800427c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002cfa:	4b16      	ldr	r3, [pc, #88]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002d00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d04:	6593      	str	r3, [r2, #88]	; 0x58
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	4a0f      	ldr	r2, [pc, #60]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002d18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d1c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <I2Cx_MspInit+0xa8>)
 8002d24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002d28:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	210f      	movs	r1, #15
 8002d2e:	2021      	movs	r0, #33	; 0x21
 8002d30:	f001 fa7a 	bl	8004228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002d34:	2021      	movs	r0, #33	; 0x21
 8002d36:	f001 fa93 	bl	8004260 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	210f      	movs	r1, #15
 8002d3e:	2022      	movs	r0, #34	; 0x22
 8002d40:	f001 fa72 	bl	8004228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002d44:	2022      	movs	r0, #34	; 0x22
 8002d46:	f001 fa8b 	bl	8004260 <HAL_NVIC_EnableIRQ>
}
 8002d4a:	bf00      	nop
 8002d4c:	3728      	adds	r7, #40	; 0x28
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	40021000 	.word	0x40021000
 8002d58:	48000400 	.word	0x48000400

08002d5c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <I2Cx_Init+0x54>)
 8002d68:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a11      	ldr	r2, [pc, #68]	; (8002db4 <I2Cx_Init+0x58>)
 8002d6e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff89 	bl	8002cac <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f001 fd22 	bl	80047e4 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002da0:	2100      	movs	r1, #0
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f002 face 	bl	8005344 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40005800 	.word	0x40005800
 8002db4:	00702681 	.word	0x00702681

08002db8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	4608      	mov	r0, r1
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	72fb      	strb	r3, [r7, #11]
 8002dca:	460b      	mov	r3, r1
 8002dcc:	813b      	strh	r3, [r7, #8]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002dd6:	7afb      	ldrb	r3, [r7, #11]
 8002dd8:	b299      	uxth	r1, r3
 8002dda:	88f8      	ldrh	r0, [r7, #6]
 8002ddc:	893a      	ldrh	r2, [r7, #8]
 8002dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de2:	9302      	str	r3, [sp, #8]
 8002de4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4603      	mov	r3, r0
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f001 fed6 	bl	8004ba0 <HAL_I2C_Mem_Read>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d004      	beq.n	8002e08 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002dfe:	7afb      	ldrb	r3, [r7, #11]
 8002e00:	4619      	mov	r1, r3
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f832 	bl	8002e6c <I2Cx_Error>
  }
  return status;
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b08a      	sub	sp, #40	; 0x28
 8002e16:	af04      	add	r7, sp, #16
 8002e18:	60f8      	str	r0, [r7, #12]
 8002e1a:	4608      	mov	r0, r1
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4603      	mov	r3, r0
 8002e22:	72fb      	strb	r3, [r7, #11]
 8002e24:	460b      	mov	r3, r1
 8002e26:	813b      	strh	r3, [r7, #8]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	b299      	uxth	r1, r3
 8002e34:	88f8      	ldrh	r0, [r7, #6]
 8002e36:	893a      	ldrh	r2, [r7, #8]
 8002e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	4603      	mov	r3, r0
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f001 fd95 	bl	8004978 <HAL_I2C_Mem_Write>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d004      	beq.n	8002e62 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002e58:	7afb      	ldrb	r3, [r7, #11]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 f805 	bl	8002e6c <I2Cx_Error>
  }
  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f001 fd4e 	bl	800491a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ff6c 	bl	8002d5c <I2Cx_Init>
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002e90:	4802      	ldr	r0, [pc, #8]	; (8002e9c <SENSOR_IO_Init+0x10>)
 8002e92:	f7ff ff63 	bl	8002d5c <I2Cx_Init>
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000079c 	.word	0x2000079c

08002ea0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71fb      	strb	r3, [r7, #7]
 8002eaa:	460b      	mov	r3, r1
 8002eac:	71bb      	strb	r3, [r7, #6]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002eb2:	79bb      	ldrb	r3, [r7, #6]
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	79f9      	ldrb	r1, [r7, #7]
 8002eb8:	2301      	movs	r3, #1
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	1d7b      	adds	r3, r7, #5
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	4803      	ldr	r0, [pc, #12]	; (8002ed0 <SENSOR_IO_Write+0x30>)
 8002ec4:	f7ff ffa5 	bl	8002e12 <I2Cx_WriteMultiple>
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	2000079c 	.word	0x2000079c

08002ed4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	4603      	mov	r3, r0
 8002edc:	460a      	mov	r2, r1
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002ee8:	79bb      	ldrb	r3, [r7, #6]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	79f9      	ldrb	r1, [r7, #7]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	f107 030f 	add.w	r3, r7, #15
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	2301      	movs	r3, #1
 8002efa:	4804      	ldr	r0, [pc, #16]	; (8002f0c <SENSOR_IO_Read+0x38>)
 8002efc:	f7ff ff5c 	bl	8002db8 <I2Cx_ReadMultiple>

  return read_value;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	2000079c 	.word	0x2000079c

08002f10 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	603a      	str	r2, [r7, #0]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	71bb      	strb	r3, [r7, #6]
 8002f22:	4613      	mov	r3, r2
 8002f24:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002f26:	79bb      	ldrb	r3, [r7, #6]
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	79f9      	ldrb	r1, [r7, #7]
 8002f2c:	88bb      	ldrh	r3, [r7, #4]
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2301      	movs	r3, #1
 8002f36:	4804      	ldr	r0, [pc, #16]	; (8002f48 <SENSOR_IO_ReadMultiple+0x38>)
 8002f38:	f7ff ff3e 	bl	8002db8 <I2Cx_ReadMultiple>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b29b      	uxth	r3, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	2000079c 	.word	0x2000079c

08002f4c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002f56:	2300      	movs	r3, #0
 8002f58:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002f5a:	4b1b      	ldr	r3, [pc, #108]	; (8002fc8 <BSP_GYRO_Init+0x7c>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	4798      	blx	r3
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b6a      	cmp	r3, #106	; 0x6a
 8002f64:	d002      	beq.n	8002f6c <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
 8002f6a:	e028      	b.n	8002fbe <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002f6c:	4b17      	ldr	r3, [pc, #92]	; (8002fcc <BSP_GYRO_Init+0x80>)
 8002f6e:	4a16      	ldr	r2, [pc, #88]	; (8002fc8 <BSP_GYRO_Init+0x7c>)
 8002f70:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002f76:	2330      	movs	r3, #48	; 0x30
 8002f78:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002f82:	2340      	movs	r3, #64	; 0x40
 8002f84:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002f8a:	230c      	movs	r3, #12
 8002f8c:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002f8e:	7aba      	ldrb	r2, [r7, #10]
 8002f90:	797b      	ldrb	r3, [r7, #5]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002f98:	7a3b      	ldrb	r3, [r7, #8]
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	021b      	lsls	r3, r3, #8
 8002fa2:	b21a      	sxth	r2, r3
 8002fa4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	b21b      	sxth	r3, r3
 8002fac:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002fae:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <BSP_GYRO_Init+0x80>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	89ba      	ldrh	r2, [r7, #12]
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000050 	.word	0x20000050
 8002fcc:	200007f0 	.word	0x200007f0

08002fd0 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <BSP_GYRO_GetXYZ+0x2c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <BSP_GYRO_GetXYZ+0x2c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8002fea:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <BSP_GYRO_GetXYZ+0x2c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
    }
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200007f0 	.word	0x200007f0

08003000 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <BSP_MAGNETO_Init+0x50>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4798      	blx	r3
 8003010:	4603      	mov	r3, r0
 8003012:	2b3d      	cmp	r3, #61	; 0x3d
 8003014:	d002      	beq.n	800301c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	71fb      	strb	r3, [r7, #7]
 800301a:	e013      	b.n	8003044 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800301c:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <BSP_MAGNETO_Init+0x54>)
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <BSP_MAGNETO_Init+0x50>)
 8003020:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8003022:	2358      	movs	r3, #88	; 0x58
 8003024:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8003026:	2300      	movs	r3, #0
 8003028:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800302a:	2300      	movs	r3, #0
 800302c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800302e:	2308      	movs	r3, #8
 8003030:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8003032:	2340      	movs	r3, #64	; 0x40
 8003034:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <BSP_MAGNETO_Init+0x54>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	463a      	mov	r2, r7
 800303e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003042:	4798      	blx	r3
  } 

  return ret;  
 8003044:	79fb      	ldrb	r3, [r7, #7]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000010 	.word	0x20000010
 8003054:	200007f4 	.word	0x200007f4

08003058 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d009      	beq.n	800307c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <BSP_MAGNETO_GetXYZ+0x2c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8003072:	4b04      	ldr	r3, [pc, #16]	; (8003084 <BSP_MAGNETO_GetXYZ+0x2c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
    }
  }
}
 800307c:	bf00      	nop
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200007f4 	.word	0x200007f4

08003088 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <BSP_PSENSOR_Init+0x38>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	20ba      	movs	r0, #186	; 0xba
 8003094:	4798      	blx	r3
 8003096:	4603      	mov	r3, r0
 8003098:	2bb1      	cmp	r3, #177	; 0xb1
 800309a:	d002      	beq.n	80030a2 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	e009      	b.n	80030b6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 80030a2:	4b08      	ldr	r3, [pc, #32]	; (80030c4 <BSP_PSENSOR_Init+0x3c>)
 80030a4:	4a06      	ldr	r2, [pc, #24]	; (80030c0 <BSP_PSENSOR_Init+0x38>)
 80030a6:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <BSP_PSENSOR_Init+0x3c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	20ba      	movs	r0, #186	; 0xba
 80030b0:	4798      	blx	r3
    ret = PSENSOR_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80030b6:	687b      	ldr	r3, [r7, #4]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	20000044 	.word	0x20000044
 80030c4:	200007f8 	.word	0x200007f8

080030c8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <BSP_PSENSOR_ReadPressure+0x18>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	20ba      	movs	r0, #186	; 0xba
 80030d4:	4798      	blx	r3
 80030d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80030da:	eeb0 0a67 	vmov.f32	s0, s15
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	200007f8 	.word	0x200007f8

080030e4 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 80030ea:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 80030ec:	4a3b      	ldr	r2, [pc, #236]	; (80031dc <BSP_QSPI_Init+0xf8>)
 80030ee:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 80030f0:	4839      	ldr	r0, [pc, #228]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 80030f2:	f002 fa69 	bl	80055c8 <HAL_OSPI_DeInit>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e067      	b.n	80031d0 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8003100:	f000 f990 	bl	8003424 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8003104:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003106:	2204      	movs	r2, #4
 8003108:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800310a:	4b33      	ldr	r3, [pc, #204]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 800310c:	2200      	movs	r2, #0
 800310e:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003112:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003116:	60da      	str	r2, [r3, #12]
 8003118:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800311c:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	fa93 f3a3 	rbit	r3, r3
 8003124:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8003130:	2320      	movs	r3, #32
 8003132:	e003      	b.n	800313c <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 800313c:	461a      	mov	r2, r3
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003140:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8003142:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003144:	2201      	movs	r2, #1
 8003146:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 800314a:	2200      	movs	r2, #0
 800314c:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003150:	2200      	movs	r2, #0
 8003152:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8003154:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003156:	2204      	movs	r2, #4
 8003158:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800315a:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 800315c:	2200      	movs	r2, #0
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003166:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8003168:	4b1b      	ldr	r3, [pc, #108]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 800316a:	2200      	movs	r2, #0
 800316c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800316e:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8003174:	4818      	ldr	r0, [pc, #96]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003176:	f002 f97d 	bl	8005474 <HAL_OSPI_Init>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e025      	b.n	80031d0 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8003184:	4814      	ldr	r0, [pc, #80]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003186:	f000 f98d 	bl	80034a4 <QSPI_ResetMemory>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8003190:	2304      	movs	r3, #4
 8003192:	e01d      	b.n	80031d0 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8003194:	2101      	movs	r1, #1
 8003196:	4810      	ldr	r0, [pc, #64]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 8003198:	f000 fa72 	bl	8003680 <QSPI_QuadMode>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e014      	b.n	80031d0 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80031a6:	2101      	movs	r1, #1
 80031a8:	480b      	ldr	r0, [pc, #44]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 80031aa:	f000 fb15 	bl	80037d8 <QSPI_HighPerfMode>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e00b      	b.n	80031d0 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80031b8:	4b07      	ldr	r3, [pc, #28]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 80031ba:	2202      	movs	r2, #2
 80031bc:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80031be:	4806      	ldr	r0, [pc, #24]	; (80031d8 <BSP_QSPI_Init+0xf4>)
 80031c0:	f002 f958 	bl	8005474 <HAL_OSPI_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200007fc 	.word	0x200007fc
 80031dc:	a0001000 	.word	0xa0001000

080031e0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b098      	sub	sp, #96	; 0x60
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 80031f4:	23eb      	movs	r3, #235	; 0xeb
 80031f6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 80031f8:	2301      	movs	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 80031fc:	2300      	movs	r3, #0
 80031fe:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003200:	2300      	movs	r3, #0
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8003208:	f44f 7340 	mov.w	r3, #768	; 0x300
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 800320e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003212:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003214:	2300      	movs	r3, #0
 8003216:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8003218:	23aa      	movs	r3, #170	; 0xaa
 800321a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 800321c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003220:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8003222:	2300      	movs	r3, #0
 8003224:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800322a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8003238:	2304      	movs	r3, #4
 800323a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003240:	2300      	movs	r3, #0
 8003242:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003244:	f107 0310 	add.w	r3, r7, #16
 8003248:	f241 3288 	movw	r2, #5000	; 0x1388
 800324c:	4619      	mov	r1, r3
 800324e:	480c      	ldr	r0, [pc, #48]	; (8003280 <BSP_QSPI_Read+0xa0>)
 8003250:	f002 f9e1 	bl	8005616 <HAL_OSPI_Command>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e00b      	b.n	8003276 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	4806      	ldr	r0, [pc, #24]	; (8003280 <BSP_QSPI_Read+0xa0>)
 8003266:	f002 faca 	bl	80057fe <HAL_OSPI_Receive>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3760      	adds	r7, #96	; 0x60
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	200007fc 	.word	0x200007fc

08003284 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b09c      	sub	sp, #112	; 0x70
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003298:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800329a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d901      	bls.n	80032a6 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 80032ba:	2338      	movs	r3, #56	; 0x38
 80032bc:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80032be:	2301      	movs	r3, #1
 80032c0:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80032c2:	2300      	movs	r3, #0
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80032ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032ce:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80032d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80032da:	2300      	movs	r3, #0
 80032dc:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 80032de:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80032f0:	2300      	movs	r3, #0
 80032f2:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80032f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 80032f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032fa:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80032fc:	4823      	ldr	r0, [pc, #140]	; (800338c <BSP_QSPI_Write+0x108>)
 80032fe:	f000 f918 	bl	8003532 <QSPI_WriteEnable>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d001      	beq.n	800330c <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e03b      	b.n	8003384 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	f241 3288 	movw	r2, #5000	; 0x1388
 8003314:	4619      	mov	r1, r3
 8003316:	481d      	ldr	r0, [pc, #116]	; (800338c <BSP_QSPI_Write+0x108>)
 8003318:	f002 f97d 	bl	8005616 <HAL_OSPI_Command>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e02e      	b.n	8003384 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003326:	f241 3288 	movw	r2, #5000	; 0x1388
 800332a:	68f9      	ldr	r1, [r7, #12]
 800332c:	4817      	ldr	r0, [pc, #92]	; (800338c <BSP_QSPI_Write+0x108>)
 800332e:	f002 f9f3 	bl	8005718 <HAL_OSPI_Transmit>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e023      	b.n	8003384 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800333c:	f241 3188 	movw	r1, #5000	; 0x1388
 8003340:	4812      	ldr	r0, [pc, #72]	; (800338c <BSP_QSPI_Write+0x108>)
 8003342:	f000 f952 	bl	80035ea <QSPI_AutoPollingMemReady>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e019      	b.n	8003384 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8003350:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003354:	4413      	add	r3, r2
 8003356:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800335c:	4413      	add	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8003360:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003362:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003366:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003368:	429a      	cmp	r2, r3
 800336a:	d203      	bcs.n	8003374 <BSP_QSPI_Write+0xf0>
 800336c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800336e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	e001      	b.n	8003378 <BSP_QSPI_Write+0xf4>
 8003374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003378:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800337a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800337c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800337e:	429a      	cmp	r2, r3
 8003380:	d3b8      	bcc.n	80032f4 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3770      	adds	r7, #112	; 0x70
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	200007fc 	.word	0x200007fc

08003390 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b096      	sub	sp, #88	; 0x58
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 80033a0:	23d8      	movs	r3, #216	; 0xd8
 80033a2:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80033b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80033ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033be:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80033c8:	2300      	movs	r3, #0
 80033ca:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80033d4:	2300      	movs	r3, #0
 80033d6:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80033d8:	4811      	ldr	r0, [pc, #68]	; (8003420 <BSP_QSPI_Erase_Block+0x90>)
 80033da:	f000 f8aa 	bl	8003532 <QSPI_WriteEnable>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e017      	b.n	8003418 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033e8:	f107 0308 	add.w	r3, r7, #8
 80033ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f0:	4619      	mov	r1, r3
 80033f2:	480b      	ldr	r0, [pc, #44]	; (8003420 <BSP_QSPI_Erase_Block+0x90>)
 80033f4:	f002 f90f 	bl	8005616 <HAL_OSPI_Command>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e00a      	b.n	8003418 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8003402:	f640 51ac 	movw	r1, #3500	; 0xdac
 8003406:	4806      	ldr	r0, [pc, #24]	; (8003420 <BSP_QSPI_Erase_Block+0x90>)
 8003408:	f000 f8ef 	bl	80035ea <QSPI_AutoPollingMemReady>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3758      	adds	r7, #88	; 0x58
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	200007fc 	.word	0x200007fc

08003424 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800342a:	4b1c      	ldr	r3, [pc, #112]	; (800349c <BSP_QSPI_MspInit+0x78>)
 800342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342e:	4a1b      	ldr	r2, [pc, #108]	; (800349c <BSP_QSPI_MspInit+0x78>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6513      	str	r3, [r2, #80]	; 0x50
 8003436:	4b19      	ldr	r3, [pc, #100]	; (800349c <BSP_QSPI_MspInit+0x78>)
 8003438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <BSP_QSPI_MspInit+0x78>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	4a15      	ldr	r2, [pc, #84]	; (800349c <BSP_QSPI_MspInit+0x78>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <BSP_QSPI_MspInit+0x78>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003452:	4a12      	ldr	r2, [pc, #72]	; (800349c <BSP_QSPI_MspInit+0x78>)
 8003454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003458:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800345a:	4b10      	ldr	r3, [pc, #64]	; (800349c <BSP_QSPI_MspInit+0x78>)
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	4a0f      	ldr	r2, [pc, #60]	; (800349c <BSP_QSPI_MspInit+0x78>)
 8003460:	f043 0310 	orr.w	r3, r3, #16
 8003464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003466:	4b0d      	ldr	r3, [pc, #52]	; (800349c <BSP_QSPI_MspInit+0x78>)
 8003468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8003472:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003476:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8003484:	230a      	movs	r3, #10
 8003486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	4619      	mov	r1, r3
 800348e:	4804      	ldr	r0, [pc, #16]	; (80034a0 <BSP_QSPI_MspInit+0x7c>)
 8003490:	f000 fef4 	bl	800427c <HAL_GPIO_Init>
}
 8003494:	bf00      	nop
 8003496:	3720      	adds	r7, #32
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021000 	.word	0x40021000
 80034a0:	48001000 	.word	0x48001000

080034a4 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b096      	sub	sp, #88	; 0x58
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 80034b4:	2366      	movs	r3, #102	; 0x66
 80034b6:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80034bc:	2300      	movs	r3, #0
 80034be:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80034cc:	2300      	movs	r3, #0
 80034ce:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80034d8:	2300      	movs	r3, #0
 80034da:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034dc:	f107 0308 	add.w	r3, r7, #8
 80034e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e4:	4619      	mov	r1, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f002 f895 	bl	8005616 <HAL_OSPI_Command>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e019      	b.n	800352a <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80034f6:	2399      	movs	r3, #153	; 0x99
 80034f8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034fa:	f107 0308 	add.w	r3, r7, #8
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f002 f886 	bl	8005616 <HAL_OSPI_Command>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e00a      	b.n	800352a <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003514:	f241 3188 	movw	r1, #5000	; 0x1388
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f866 	bl	80035ea <QSPI_AutoPollingMemReady>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e000      	b.n	800352a <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3758      	adds	r7, #88	; 0x58
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b09c      	sub	sp, #112	; 0x70
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800353a:	2300      	movs	r3, #0
 800353c:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800353e:	2300      	movs	r3, #0
 8003540:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8003542:	2306      	movs	r3, #6
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003546:	2301      	movs	r3, #1
 8003548:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800354a:	2300      	movs	r3, #0
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800354e:	2300      	movs	r3, #0
 8003550:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003552:	2300      	movs	r3, #0
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003556:	2300      	movs	r3, #0
 8003558:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800355a:	2300      	movs	r3, #0
 800355c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003562:	2300      	movs	r3, #0
 8003564:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8003566:	2300      	movs	r3, #0
 8003568:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800356a:	f107 0320 	add.w	r3, r7, #32
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4619      	mov	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f002 f84e 	bl	8005616 <HAL_OSPI_Command>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e02e      	b.n	80035e2 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8003584:	2302      	movs	r3, #2
 8003586:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8003588:	2302      	movs	r3, #2
 800358a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8003590:	2310      	movs	r3, #16
 8003592:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003594:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003598:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800359a:	2305      	movs	r3, #5
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800359e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 80035a4:	2301      	movs	r3, #1
 80035a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035ac:	f107 0320 	add.w	r3, r7, #32
 80035b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b4:	4619      	mov	r1, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f002 f82d 	bl	8005616 <HAL_OSPI_Command>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e00d      	b.n	80035e2 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035c6:	f107 030c 	add.w	r3, r7, #12
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f002 f9b7 	bl	8005944 <HAL_OSPI_AutoPolling>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e000      	b.n	80035e2 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3770      	adds	r7, #112	; 0x70
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b09c      	sub	sp, #112	; 0x70
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80035f4:	2300      	movs	r3, #0
 80035f6:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80035fc:	2305      	movs	r3, #5
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003600:	2301      	movs	r3, #1
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003604:	2300      	movs	r3, #0
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003608:	2300      	movs	r3, #0
 800360a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800360c:	2300      	movs	r3, #0
 800360e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003610:	2300      	movs	r3, #0
 8003612:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8003614:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003618:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800361a:	2301      	movs	r3, #1
 800361c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800361e:	2300      	movs	r3, #0
 8003620:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003626:	2300      	movs	r3, #0
 8003628:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800362a:	2300      	movs	r3, #0
 800362c:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8003632:	2301      	movs	r3, #1
 8003634:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800363a:	2310      	movs	r3, #16
 800363c:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800363e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003642:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003644:	f107 0320 	add.w	r3, r7, #32
 8003648:	f241 3288 	movw	r2, #5000	; 0x1388
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f001 ffe1 	bl	8005616 <HAL_OSPI_Command>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e00c      	b.n	8003678 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f002 f96c 	bl	8005944 <HAL_OSPI_AutoPolling>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3770      	adds	r7, #112	; 0x70
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b098      	sub	sp, #96	; 0x60
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8003694:	2305      	movs	r3, #5
 8003696:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003698:	2301      	movs	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800369c:	2300      	movs	r3, #0
 800369e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80036a8:	2300      	movs	r3, #0
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80036ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036b0:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 80036ba:	2301      	movs	r3, #1
 80036bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80036be:	2300      	movs	r3, #0
 80036c0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80036c2:	2300      	movs	r3, #0
 80036c4:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036c6:	f107 0310 	add.w	r3, r7, #16
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4619      	mov	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f001 ffa0 	bl	8005616 <HAL_OSPI_Command>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e077      	b.n	80037d0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036e0:	f107 030f 	add.w	r3, r7, #15
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4619      	mov	r1, r3
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f002 f887 	bl	80057fe <HAL_OSPI_Receive>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06a      	b.n	80037d0 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff19 	bl	8003532 <QSPI_WriteEnable>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e062      	b.n	80037d0 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003716:	b2db      	uxtb	r3, r3
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	e004      	b.n	8003726 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003722:	b2db      	uxtb	r3, r3
 8003724:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8003726:	2301      	movs	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800372a:	f107 0310 	add.w	r3, r7, #16
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f001 ff6e 	bl	8005616 <HAL_OSPI_Command>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e045      	b.n	80037d0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003744:	f107 030f 	add.w	r3, r7, #15
 8003748:	f241 3288 	movw	r2, #5000	; 0x1388
 800374c:	4619      	mov	r1, r3
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f001 ffe2 	bl	8005718 <HAL_OSPI_Transmit>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e038      	b.n	80037d0 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800375e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff ff41 	bl	80035ea <QSPI_AutoPollingMemReady>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e02e      	b.n	80037d0 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8003772:	2305      	movs	r3, #5
 8003774:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003776:	f107 0310 	add.w	r3, r7, #16
 800377a:	f241 3288 	movw	r2, #5000	; 0x1388
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f001 ff48 	bl	8005616 <HAL_OSPI_Command>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e01f      	b.n	80037d0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003790:	f107 030f 	add.w	r3, r7, #15
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f002 f82f 	bl	80057fe <HAL_OSPI_Receive>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e012      	b.n	80037d0 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d102      	bne.n	80037ba <QSPI_QuadMode+0x13a>
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d007      	beq.n	80037ca <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3760      	adds	r7, #96	; 0x60
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b098      	sub	sp, #96	; 0x60
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80037ec:	2305      	movs	r3, #5
 80037ee:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80037f0:	2301      	movs	r3, #1
 80037f2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80037f4:	2300      	movs	r3, #0
 80037f6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003800:	2300      	movs	r3, #0
 8003802:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8003804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003808:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800380a:	2300      	movs	r3, #0
 800380c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8003812:	2301      	movs	r3, #1
 8003814:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800381a:	2300      	movs	r3, #0
 800381c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800381e:	f107 0310 	add.w	r3, r7, #16
 8003822:	f241 3288 	movw	r2, #5000	; 0x1388
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f001 fef4 	bl	8005616 <HAL_OSPI_Command>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e09a      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003838:	f107 030c 	add.w	r3, r7, #12
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4619      	mov	r1, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f001 ffdb 	bl	80057fe <HAL_OSPI_Receive>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e08d      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003852:	2315      	movs	r3, #21
 8003854:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8003856:	2302      	movs	r3, #2
 8003858:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800385a:	f107 0310 	add.w	r3, r7, #16
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 fed6 	bl	8005616 <HAL_OSPI_Command>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e07c      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	3301      	adds	r3, #1
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4619      	mov	r1, r3
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f001 ffbc 	bl	80057fe <HAL_OSPI_Receive>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e06e      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff fe4e 	bl	8003532 <QSPI_WriteEnable>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e066      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80038a6:	7bbb      	ldrb	r3, [r7, #14]
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	73bb      	strb	r3, [r7, #14]
 80038b0:	e004      	b.n	80038bc <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	f023 0302 	bic.w	r3, r3, #2
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80038bc:	2301      	movs	r3, #1
 80038be:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 80038c0:	2303      	movs	r3, #3
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038c4:	f107 0310 	add.w	r3, r7, #16
 80038c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f001 fea1 	bl	8005616 <HAL_OSPI_Command>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e047      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e6:	4619      	mov	r1, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f001 ff15 	bl	8005718 <HAL_OSPI_Transmit>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e03a      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80038f8:	f241 3188 	movw	r1, #5000	; 0x1388
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff fe74 	bl	80035ea <QSPI_AutoPollingMemReady>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e030      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800390c:	2315      	movs	r3, #21
 800390e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8003910:	2302      	movs	r3, #2
 8003912:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003914:	f107 0310 	add.w	r3, r7, #16
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f001 fe79 	bl	8005616 <HAL_OSPI_Command>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e01f      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f001 ff60 	bl	80057fe <HAL_OSPI_Receive>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e012      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8003948:	7b7b      	ldrb	r3, [r7, #13]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <QSPI_HighPerfMode+0x180>
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d007      	beq.n	8003968 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8003958:	7b7b      	ldrb	r3, [r7, #13]
 800395a:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800395e:	2b00      	cmp	r3, #0
 8003960:	d004      	beq.n	800396c <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3760      	adds	r7, #96	; 0x60
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <BSP_TSENSOR_Init+0x30>)
 8003984:	4a09      	ldr	r2, [pc, #36]	; (80039ac <BSP_TSENSOR_Init+0x34>)
 8003986:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8003988:	f7ff fa80 	bl	8002e8c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <BSP_TSENSOR_Init+0x30>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2100      	movs	r1, #0
 8003994:	20be      	movs	r0, #190	; 0xbe
 8003996:	4798      	blx	r3

  ret = TSENSOR_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800399c:	79fb      	ldrb	r3, [r7, #7]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2000084c 	.word	0x2000084c
 80039ac:	20000000 	.word	0x20000000

080039b0 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80039b4:	4b04      	ldr	r3, [pc, #16]	; (80039c8 <BSP_TSENSOR_ReadTemp+0x18>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	20be      	movs	r0, #190	; 0xbe
 80039bc:	4798      	blx	r3
 80039be:	eef0 7a40 	vmov.f32	s15, s0
}
 80039c2:	eeb0 0a67 	vmov.f32	s0, s15
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	2000084c 	.word	0x2000084c

080039cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d2:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_MspInit+0x4c>)
 80039d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d6:	4a10      	ldr	r2, [pc, #64]	; (8003a18 <HAL_MspInit+0x4c>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6613      	str	r3, [r2, #96]	; 0x60
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <HAL_MspInit+0x4c>)
 80039e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_MspInit+0x4c>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	4a0a      	ldr	r2, [pc, #40]	; (8003a18 <HAL_MspInit+0x4c>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6593      	str	r3, [r2, #88]	; 0x58
 80039f6:	4b08      	ldr	r3, [pc, #32]	; (8003a18 <HAL_MspInit+0x4c>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	210f      	movs	r1, #15
 8003a06:	f06f 0001 	mvn.w	r0, #1
 8003a0a:	f000 fc0d 	bl	8004228 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40021000 	.word	0x40021000

08003a1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b0ae      	sub	sp, #184	; 0xb8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a34:	f107 0310 	add.w	r3, r7, #16
 8003a38:	2294      	movs	r2, #148	; 0x94
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f008 fcac 	bl	800c39a <memset>
  if(hi2c->Instance==I2C2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a21      	ldr	r2, [pc, #132]	; (8003acc <HAL_I2C_MspInit+0xb0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d13b      	bne.n	8003ac4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003a50:	2300      	movs	r3, #0
 8003a52:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a54:	f107 0310 	add.w	r3, r7, #16
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 fd55 	bl	8007508 <HAL_RCCEx_PeriphCLKConfig>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003a64:	f7ff f8fe 	bl	8002c64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_I2C_MspInit+0xb4>)
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_I2C_MspInit+0xb4>)
 8003a6e:	f043 0302 	orr.w	r3, r3, #2
 8003a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <HAL_I2C_MspInit+0xb4>)
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a80:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a88:	2312      	movs	r3, #18
 8003a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a94:	2303      	movs	r3, #3
 8003a96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <HAL_I2C_MspInit+0xb8>)
 8003aa8:	f000 fbe8 	bl	800427c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_I2C_MspInit+0xb4>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <HAL_I2C_MspInit+0xb4>)
 8003ab2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ab8:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_I2C_MspInit+0xb4>)
 8003aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac0:	60bb      	str	r3, [r7, #8]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003ac4:	bf00      	nop
 8003ac6:	37b8      	adds	r7, #184	; 0xb8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40005800 	.word	0x40005800
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	48000400 	.word	0x48000400

08003ad8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <HAL_I2C_MspDeInit+0x3c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10f      	bne.n	8003b0a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_I2C_MspDeInit+0x40>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_I2C_MspDeInit+0x40>)
 8003af0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003af4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8003af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003afa:	4808      	ldr	r0, [pc, #32]	; (8003b1c <HAL_I2C_MspDeInit+0x44>)
 8003afc:	f000 fd50 	bl	80045a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8003b00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003b04:	4805      	ldr	r0, [pc, #20]	; (8003b1c <HAL_I2C_MspDeInit+0x44>)
 8003b06:	f000 fd4b 	bl	80045a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40005800 	.word	0x40005800
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	48000400 	.word	0x48000400

08003b20 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b0b0      	sub	sp, #192	; 0xc0
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b38:	f107 0318 	add.w	r3, r7, #24
 8003b3c:	2294      	movs	r2, #148	; 0x94
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f008 fc2a 	bl	800c39a <memset>
  if(hospi->Instance==OCTOSPI1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a28      	ldr	r2, [pc, #160]	; (8003bec <HAL_OSPI_MspInit+0xcc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d149      	bne.n	8003be4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b54:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b5c:	f107 0318 	add.w	r3, r7, #24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f003 fcd1 	bl	8007508 <HAL_RCCEx_PeriphCLKConfig>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8003b6c:	f7ff f87a 	bl	8002c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8003b70:	4b1f      	ldr	r3, [pc, #124]	; (8003bf0 <HAL_OSPI_MspInit+0xd0>)
 8003b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b74:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <HAL_OSPI_MspInit+0xd0>)
 8003b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	; (8003bf0 <HAL_OSPI_MspInit+0xd0>)
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_OSPI_MspInit+0xd0>)
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	4a18      	ldr	r2, [pc, #96]	; (8003bf0 <HAL_OSPI_MspInit+0xd0>)
 8003b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b92:	6513      	str	r3, [r2, #80]	; 0x50
 8003b94:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <HAL_OSPI_MspInit+0xd0>)
 8003b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <HAL_OSPI_MspInit+0xd0>)
 8003ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba4:	4a12      	ldr	r2, [pc, #72]	; (8003bf0 <HAL_OSPI_MspInit+0xd0>)
 8003ba6:	f043 0310 	orr.w	r3, r3, #16
 8003baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bac:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_OSPI_MspInit+0xd0>)
 8003bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003bb8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8003bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8003bd2:	230a      	movs	r3, #10
 8003bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bd8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003bdc:	4619      	mov	r1, r3
 8003bde:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <HAL_OSPI_MspInit+0xd4>)
 8003be0:	f000 fb4c 	bl	800427c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8003be4:	bf00      	nop
 8003be6:	37c0      	adds	r7, #192	; 0xc0
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	a0001000 	.word	0xa0001000
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	48001000 	.word	0x48001000

08003bf8 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <HAL_OSPI_MspDeInit+0x3c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d110      	bne.n	8003c2c <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_OSPI_MspDeInit+0x40>)
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <HAL_OSPI_MspDeInit+0x40>)
 8003c10:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003c14:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8003c16:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <HAL_OSPI_MspDeInit+0x40>)
 8003c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c1a:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <HAL_OSPI_MspDeInit+0x40>)
 8003c1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c20:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003c22:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8003c26:	4805      	ldr	r0, [pc, #20]	; (8003c3c <HAL_OSPI_MspDeInit+0x44>)
 8003c28:	f000 fcba 	bl	80045a0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8003c2c:	bf00      	nop
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	a0001000 	.word	0xa0001000
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	48001000 	.word	0x48001000

08003c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b0ae      	sub	sp, #184	; 0xb8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	609a      	str	r2, [r3, #8]
 8003c54:	60da      	str	r2, [r3, #12]
 8003c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c58:	f107 0310 	add.w	r3, r7, #16
 8003c5c:	2294      	movs	r2, #148	; 0x94
 8003c5e:	2100      	movs	r1, #0
 8003c60:	4618      	mov	r0, r3
 8003c62:	f008 fb9a 	bl	800c39a <memset>
  if(huart->Instance==USART1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <HAL_UART_MspInit+0xb0>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d13a      	bne.n	8003ce6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003c70:	2301      	movs	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003c74:	2300      	movs	r3, #0
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c78:	f107 0310 	add.w	r3, r7, #16
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f003 fc43 	bl	8007508 <HAL_RCCEx_PeriphCLKConfig>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c88:	f7fe ffec 	bl	8002c64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003c8c:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <HAL_UART_MspInit+0xb4>)
 8003c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c90:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <HAL_UART_MspInit+0xb4>)
 8003c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c96:	6613      	str	r3, [r2, #96]	; 0x60
 8003c98:	4b16      	ldr	r3, [pc, #88]	; (8003cf4 <HAL_UART_MspInit+0xb4>)
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ca4:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_UART_MspInit+0xb4>)
 8003ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca8:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <HAL_UART_MspInit+0xb4>)
 8003caa:	f043 0302 	orr.w	r3, r3, #2
 8003cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_UART_MspInit+0xb4>)
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cbc:	23c0      	movs	r3, #192	; 0xc0
 8003cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003cd4:	2307      	movs	r3, #7
 8003cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4805      	ldr	r0, [pc, #20]	; (8003cf8 <HAL_UART_MspInit+0xb8>)
 8003ce2:	f000 facb 	bl	800427c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ce6:	bf00      	nop
 8003ce8:	37b8      	adds	r7, #184	; 0xb8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40013800 	.word	0x40013800
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	48000400 	.word	0x48000400

08003cfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08e      	sub	sp, #56	; 0x38
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d0a:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <HAL_InitTick+0xe0>)
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	4a33      	ldr	r2, [pc, #204]	; (8003ddc <HAL_InitTick+0xe0>)
 8003d10:	f043 0310 	orr.w	r3, r3, #16
 8003d14:	6593      	str	r3, [r2, #88]	; 0x58
 8003d16:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <HAL_InitTick+0xe0>)
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d22:	f107 0210 	add.w	r2, r7, #16
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 faf9 	bl	8007324 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d103      	bne.n	8003d44 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d3c:	f003 fac6 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
 8003d40:	6378      	str	r0, [r7, #52]	; 0x34
 8003d42:	e004      	b.n	8003d4e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d44:	f003 fac2 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d50:	4a23      	ldr	r2, [pc, #140]	; (8003de0 <HAL_InitTick+0xe4>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	0c9b      	lsrs	r3, r3, #18
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d5c:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_InitTick+0xe8>)
 8003d5e:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <HAL_InitTick+0xec>)
 8003d60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_InitTick+0xe8>)
 8003d64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <HAL_InitTick+0xe8>)
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003d70:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <HAL_InitTick+0xe8>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d76:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_InitTick+0xe8>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d7c:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_InitTick+0xe8>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003d82:	4818      	ldr	r0, [pc, #96]	; (8003de4 <HAL_InitTick+0xe8>)
 8003d84:	f004 f8d8 	bl	8007f38 <HAL_TIM_Base_Init>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003d8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d11b      	bne.n	8003dce <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003d96:	4813      	ldr	r0, [pc, #76]	; (8003de4 <HAL_InitTick+0xe8>)
 8003d98:	f004 f930 	bl	8007ffc <HAL_TIM_Base_Start_IT>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003da2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d111      	bne.n	8003dce <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003daa:	2036      	movs	r0, #54	; 0x36
 8003dac:	f000 fa58 	bl	8004260 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b0f      	cmp	r3, #15
 8003db4:	d808      	bhi.n	8003dc8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003db6:	2200      	movs	r2, #0
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	2036      	movs	r0, #54	; 0x36
 8003dbc:	f000 fa34 	bl	8004228 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <HAL_InitTick+0xf0>)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e002      	b.n	8003dce <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003dce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3738      	adds	r7, #56	; 0x38
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	431bde83 	.word	0x431bde83
 8003de4:	20000850 	.word	0x20000850
 8003de8:	40001000 	.word	0x40001000
 8003dec:	2000008c 	.word	0x2000008c

08003df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003df4:	e7fe      	b.n	8003df4 <NMI_Handler+0x4>
	...

08003df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2108      	movs	r1, #8
 8003e00:	4802      	ldr	r0, [pc, #8]	; (8003e0c <HardFault_Handler+0x14>)
 8003e02:	f000 fcd7 	bl	80047b4 <HAL_GPIO_WritePin>
	  __BKPT();
 8003e06:	be00      	bkpt	0x0000

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e08:	e7fe      	b.n	8003e08 <HardFault_Handler+0x10>
 8003e0a:	bf00      	nop
 8003e0c:	48001000 	.word	0x48001000

08003e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e14:	e7fe      	b.n	8003e14 <MemManage_Handler+0x4>

08003e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e1a:	e7fe      	b.n	8003e1a <BusFault_Handler+0x4>

08003e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e20:	e7fe      	b.n	8003e20 <UsageFault_Handler+0x4>

08003e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e22:	b480      	push	{r7}
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e26:	bf00      	nop
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003e34:	4802      	ldr	r0, [pc, #8]	; (8003e40 <TIM6_DAC_IRQHandler+0x10>)
 8003e36:	f004 f951 	bl	80080dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003e3a:	bf00      	nop
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000850 	.word	0x20000850

08003e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return 1;
 8003e48:	2301      	movs	r3, #1
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <_kill>:

int _kill(int pid, int sig)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003e5e:	f008 faff 	bl	800c460 <__errno>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2216      	movs	r2, #22
 8003e66:	601a      	str	r2, [r3, #0]
  return -1;
 8003e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3708      	adds	r7, #8
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <_exit>:

void _exit (int status)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ffe7 	bl	8003e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003e86:	e7fe      	b.n	8003e86 <_exit+0x12>

08003e88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	e00a      	b.n	8003eb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e9a:	f3af 8000 	nop.w
 8003e9e:	4601      	mov	r1, r0
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	60ba      	str	r2, [r7, #8]
 8003ea6:	b2ca      	uxtb	r2, r1
 8003ea8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	3301      	adds	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	dbf0      	blt.n	8003e9a <_read+0x12>
  }

  return len;
 8003eb8:	687b      	ldr	r3, [r7, #4]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e009      	b.n	8003ee8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	60ba      	str	r2, [r7, #8]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	dbf1      	blt.n	8003ed4 <_write+0x12>
  }
  return len;
 8003ef0:	687b      	ldr	r3, [r7, #4]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_close>:

int _close(int file)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f22:	605a      	str	r2, [r3, #4]
  return 0;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_isatty>:

int _isatty(int file)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f3a:	2301      	movs	r3, #1
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b086      	sub	sp, #24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f6c:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <_sbrk+0x5c>)
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <_sbrk+0x60>)
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f78:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <_sbrk+0x64>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f80:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <_sbrk+0x64>)
 8003f82:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <_sbrk+0x68>)
 8003f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <_sbrk+0x64>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d207      	bcs.n	8003fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f94:	f008 fa64 	bl	800c460 <__errno>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	220c      	movs	r2, #12
 8003f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fa2:	e009      	b.n	8003fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fa4:	4b08      	ldr	r3, [pc, #32]	; (8003fc8 <_sbrk+0x64>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003faa:	4b07      	ldr	r3, [pc, #28]	; (8003fc8 <_sbrk+0x64>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <_sbrk+0x64>)
 8003fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	200a0000 	.word	0x200a0000
 8003fc4:	00000400 	.word	0x00000400
 8003fc8:	2000089c 	.word	0x2000089c
 8003fcc:	20001700 	.word	0x20001700

08003fd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <SystemInit+0x20>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	4a05      	ldr	r2, [pc, #20]	; (8003ff0 <SystemInit+0x20>)
 8003fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800402c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ff8:	f7ff ffea 	bl	8003fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ffc:	480c      	ldr	r0, [pc, #48]	; (8004030 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ffe:	490d      	ldr	r1, [pc, #52]	; (8004034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004000:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <LoopForever+0xe>)
  movs r3, #0
 8004002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004004:	e002      	b.n	800400c <LoopCopyDataInit>

08004006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800400a:	3304      	adds	r3, #4

0800400c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800400c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800400e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004010:	d3f9      	bcc.n	8004006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004014:	4c0a      	ldr	r4, [pc, #40]	; (8004040 <LoopForever+0x16>)
  movs r3, #0
 8004016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004018:	e001      	b.n	800401e <LoopFillZerobss>

0800401a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800401a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800401c:	3204      	adds	r2, #4

0800401e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800401e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004020:	d3fb      	bcc.n	800401a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004022:	f008 fa23 	bl	800c46c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004026:	f7fd fb95 	bl	8001754 <main>

0800402a <LoopForever>:

LoopForever:
    b LoopForever
 800402a:	e7fe      	b.n	800402a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800402c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004034:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8004038:	0800f730 	.word	0x0800f730
  ldr r2, =_sbss
 800403c:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8004040:	200016fc 	.word	0x200016fc

08004044 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004044:	e7fe      	b.n	8004044 <ADC1_IRQHandler>

08004046 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004050:	2003      	movs	r0, #3
 8004052:	f000 f8de 	bl	8004212 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004056:	200f      	movs	r0, #15
 8004058:	f7ff fe50 	bl	8003cfc <HAL_InitTick>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	71fb      	strb	r3, [r7, #7]
 8004066:	e001      	b.n	800406c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004068:	f7ff fcb0 	bl	80039cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800406c:	79fb      	ldrb	r3, [r7, #7]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
	...

08004078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_IncTick+0x20>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	461a      	mov	r2, r3
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_IncTick+0x24>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4413      	add	r3, r2
 8004088:	4a04      	ldr	r2, [pc, #16]	; (800409c <HAL_IncTick+0x24>)
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000090 	.word	0x20000090
 800409c:	200008a0 	.word	0x200008a0

080040a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return uwTick;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_GetTick+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	200008a0 	.word	0x200008a0

080040b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040c8:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <__NVIC_SetPriorityGrouping+0x44>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040d4:	4013      	ands	r3, r2
 80040d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040ea:	4a04      	ldr	r2, [pc, #16]	; (80040fc <__NVIC_SetPriorityGrouping+0x44>)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	60d3      	str	r3, [r2, #12]
}
 80040f0:	bf00      	nop
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr
 80040fc:	e000ed00 	.word	0xe000ed00

08004100 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <__NVIC_GetPriorityGrouping+0x18>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	0a1b      	lsrs	r3, r3, #8
 800410a:	f003 0307 	and.w	r3, r3, #7
}
 800410e:	4618      	mov	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412a:	2b00      	cmp	r3, #0
 800412c:	db0b      	blt.n	8004146 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800412e:	79fb      	ldrb	r3, [r7, #7]
 8004130:	f003 021f 	and.w	r2, r3, #31
 8004134:	4907      	ldr	r1, [pc, #28]	; (8004154 <__NVIC_EnableIRQ+0x38>)
 8004136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2001      	movs	r0, #1
 800413e:	fa00 f202 	lsl.w	r2, r0, r2
 8004142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	e000e100 	.word	0xe000e100

08004158 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004168:	2b00      	cmp	r3, #0
 800416a:	db0a      	blt.n	8004182 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	490c      	ldr	r1, [pc, #48]	; (80041a4 <__NVIC_SetPriority+0x4c>)
 8004172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004176:	0112      	lsls	r2, r2, #4
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	440b      	add	r3, r1
 800417c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004180:	e00a      	b.n	8004198 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	b2da      	uxtb	r2, r3
 8004186:	4908      	ldr	r1, [pc, #32]	; (80041a8 <__NVIC_SetPriority+0x50>)
 8004188:	79fb      	ldrb	r3, [r7, #7]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	3b04      	subs	r3, #4
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	440b      	add	r3, r1
 8004196:	761a      	strb	r2, [r3, #24]
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	e000e100 	.word	0xe000e100
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b089      	sub	sp, #36	; 0x24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	f1c3 0307 	rsb	r3, r3, #7
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	bf28      	it	cs
 80041ca:	2304      	movcs	r3, #4
 80041cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	3304      	adds	r3, #4
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d902      	bls.n	80041dc <NVIC_EncodePriority+0x30>
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	3b03      	subs	r3, #3
 80041da:	e000      	b.n	80041de <NVIC_EncodePriority+0x32>
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ea:	43da      	mvns	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	401a      	ands	r2, r3
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	fa01 f303 	lsl.w	r3, r1, r3
 80041fe:	43d9      	mvns	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004204:	4313      	orrs	r3, r2
         );
}
 8004206:	4618      	mov	r0, r3
 8004208:	3724      	adds	r7, #36	; 0x24
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7ff ff4c 	bl	80040b8 <__NVIC_SetPriorityGrouping>
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	4603      	mov	r3, r0
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800423a:	f7ff ff61 	bl	8004100 <__NVIC_GetPriorityGrouping>
 800423e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	6978      	ldr	r0, [r7, #20]
 8004246:	f7ff ffb1 	bl	80041ac <NVIC_EncodePriority>
 800424a:	4602      	mov	r2, r0
 800424c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004250:	4611      	mov	r1, r2
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff ff80 	bl	8004158 <__NVIC_SetPriority>
}
 8004258:	bf00      	nop
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff54 	bl	800411c <__NVIC_EnableIRQ>
}
 8004274:	bf00      	nop
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004286:	2300      	movs	r3, #0
 8004288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800428a:	e166      	b.n	800455a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2101      	movs	r1, #1
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	4013      	ands	r3, r2
 800429a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8158 	beq.w	8004554 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0303 	and.w	r3, r3, #3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d005      	beq.n	80042bc <HAL_GPIO_Init+0x40>
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d130      	bne.n	800431e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	2203      	movs	r2, #3
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042f2:	2201      	movs	r2, #1
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43db      	mvns	r3, r3
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4013      	ands	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 0201 	and.w	r2, r3, #1
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	4313      	orrs	r3, r2
 8004316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b03      	cmp	r3, #3
 8004328:	d017      	beq.n	800435a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4013      	ands	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	689a      	ldr	r2, [r3, #8]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	2b02      	cmp	r3, #2
 8004364:	d123      	bne.n	80043ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	08da      	lsrs	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3208      	adds	r2, #8
 800436e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f003 0307 	and.w	r3, r3, #7
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	220f      	movs	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	43db      	mvns	r3, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4013      	ands	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	08da      	lsrs	r2, r3, #3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3208      	adds	r2, #8
 80043a8:	6939      	ldr	r1, [r7, #16]
 80043aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	2203      	movs	r2, #3
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43db      	mvns	r3, r3
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4013      	ands	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f003 0203 	and.w	r2, r3, #3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80b2 	beq.w	8004554 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f0:	4b61      	ldr	r3, [pc, #388]	; (8004578 <HAL_GPIO_Init+0x2fc>)
 80043f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f4:	4a60      	ldr	r2, [pc, #384]	; (8004578 <HAL_GPIO_Init+0x2fc>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6613      	str	r3, [r2, #96]	; 0x60
 80043fc:	4b5e      	ldr	r3, [pc, #376]	; (8004578 <HAL_GPIO_Init+0x2fc>)
 80043fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	60bb      	str	r3, [r7, #8]
 8004406:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004408:	4a5c      	ldr	r2, [pc, #368]	; (800457c <HAL_GPIO_Init+0x300>)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	3302      	adds	r3, #2
 8004410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004414:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	220f      	movs	r2, #15
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004432:	d02b      	beq.n	800448c <HAL_GPIO_Init+0x210>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a52      	ldr	r2, [pc, #328]	; (8004580 <HAL_GPIO_Init+0x304>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d025      	beq.n	8004488 <HAL_GPIO_Init+0x20c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a51      	ldr	r2, [pc, #324]	; (8004584 <HAL_GPIO_Init+0x308>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d01f      	beq.n	8004484 <HAL_GPIO_Init+0x208>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a50      	ldr	r2, [pc, #320]	; (8004588 <HAL_GPIO_Init+0x30c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d019      	beq.n	8004480 <HAL_GPIO_Init+0x204>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a4f      	ldr	r2, [pc, #316]	; (800458c <HAL_GPIO_Init+0x310>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_GPIO_Init+0x200>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a4e      	ldr	r2, [pc, #312]	; (8004590 <HAL_GPIO_Init+0x314>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00d      	beq.n	8004478 <HAL_GPIO_Init+0x1fc>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a4d      	ldr	r2, [pc, #308]	; (8004594 <HAL_GPIO_Init+0x318>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d007      	beq.n	8004474 <HAL_GPIO_Init+0x1f8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a4c      	ldr	r2, [pc, #304]	; (8004598 <HAL_GPIO_Init+0x31c>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d101      	bne.n	8004470 <HAL_GPIO_Init+0x1f4>
 800446c:	2307      	movs	r3, #7
 800446e:	e00e      	b.n	800448e <HAL_GPIO_Init+0x212>
 8004470:	2308      	movs	r3, #8
 8004472:	e00c      	b.n	800448e <HAL_GPIO_Init+0x212>
 8004474:	2306      	movs	r3, #6
 8004476:	e00a      	b.n	800448e <HAL_GPIO_Init+0x212>
 8004478:	2305      	movs	r3, #5
 800447a:	e008      	b.n	800448e <HAL_GPIO_Init+0x212>
 800447c:	2304      	movs	r3, #4
 800447e:	e006      	b.n	800448e <HAL_GPIO_Init+0x212>
 8004480:	2303      	movs	r3, #3
 8004482:	e004      	b.n	800448e <HAL_GPIO_Init+0x212>
 8004484:	2302      	movs	r3, #2
 8004486:	e002      	b.n	800448e <HAL_GPIO_Init+0x212>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <HAL_GPIO_Init+0x212>
 800448c:	2300      	movs	r3, #0
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	f002 0203 	and.w	r2, r2, #3
 8004494:	0092      	lsls	r2, r2, #2
 8004496:	4093      	lsls	r3, r2
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800449e:	4937      	ldr	r1, [pc, #220]	; (800457c <HAL_GPIO_Init+0x300>)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	3302      	adds	r3, #2
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044ac:	4b3b      	ldr	r3, [pc, #236]	; (800459c <HAL_GPIO_Init+0x320>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	43db      	mvns	r3, r3
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044d0:	4a32      	ldr	r2, [pc, #200]	; (800459c <HAL_GPIO_Init+0x320>)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044d6:	4b31      	ldr	r3, [pc, #196]	; (800459c <HAL_GPIO_Init+0x320>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	43db      	mvns	r3, r3
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4013      	ands	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044fa:	4a28      	ldr	r2, [pc, #160]	; (800459c <HAL_GPIO_Init+0x320>)
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004500:	4b26      	ldr	r3, [pc, #152]	; (800459c <HAL_GPIO_Init+0x320>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	43db      	mvns	r3, r3
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	4013      	ands	r3, r2
 800450e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <HAL_GPIO_Init+0x320>)
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800452a:	4b1c      	ldr	r3, [pc, #112]	; (800459c <HAL_GPIO_Init+0x320>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	43db      	mvns	r3, r3
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4013      	ands	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004546:	693a      	ldr	r2, [r7, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800454e:	4a13      	ldr	r2, [pc, #76]	; (800459c <HAL_GPIO_Init+0x320>)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3301      	adds	r3, #1
 8004558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	f47f ae91 	bne.w	800428c <HAL_GPIO_Init+0x10>
  }
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	40021000 	.word	0x40021000
 800457c:	40010000 	.word	0x40010000
 8004580:	48000400 	.word	0x48000400
 8004584:	48000800 	.word	0x48000800
 8004588:	48000c00 	.word	0x48000c00
 800458c:	48001000 	.word	0x48001000
 8004590:	48001400 	.word	0x48001400
 8004594:	48001800 	.word	0x48001800
 8004598:	48001c00 	.word	0x48001c00
 800459c:	40010400 	.word	0x40010400

080045a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80045aa:	2300      	movs	r3, #0
 80045ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80045ae:	e0c9      	b.n	8004744 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80045b0:	2201      	movs	r2, #1
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f000 80bc 	beq.w	800473e <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80045c6:	4a66      	ldr	r2, [pc, #408]	; (8004760 <HAL_GPIO_DeInit+0x1c0>)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	3302      	adds	r3, #2
 80045ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	220f      	movs	r2, #15
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4013      	ands	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80045ee:	d02b      	beq.n	8004648 <HAL_GPIO_DeInit+0xa8>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a5c      	ldr	r2, [pc, #368]	; (8004764 <HAL_GPIO_DeInit+0x1c4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d025      	beq.n	8004644 <HAL_GPIO_DeInit+0xa4>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a5b      	ldr	r2, [pc, #364]	; (8004768 <HAL_GPIO_DeInit+0x1c8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d01f      	beq.n	8004640 <HAL_GPIO_DeInit+0xa0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a5a      	ldr	r2, [pc, #360]	; (800476c <HAL_GPIO_DeInit+0x1cc>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d019      	beq.n	800463c <HAL_GPIO_DeInit+0x9c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a59      	ldr	r2, [pc, #356]	; (8004770 <HAL_GPIO_DeInit+0x1d0>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d013      	beq.n	8004638 <HAL_GPIO_DeInit+0x98>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a58      	ldr	r2, [pc, #352]	; (8004774 <HAL_GPIO_DeInit+0x1d4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d00d      	beq.n	8004634 <HAL_GPIO_DeInit+0x94>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a57      	ldr	r2, [pc, #348]	; (8004778 <HAL_GPIO_DeInit+0x1d8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d007      	beq.n	8004630 <HAL_GPIO_DeInit+0x90>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a56      	ldr	r2, [pc, #344]	; (800477c <HAL_GPIO_DeInit+0x1dc>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d101      	bne.n	800462c <HAL_GPIO_DeInit+0x8c>
 8004628:	2307      	movs	r3, #7
 800462a:	e00e      	b.n	800464a <HAL_GPIO_DeInit+0xaa>
 800462c:	2308      	movs	r3, #8
 800462e:	e00c      	b.n	800464a <HAL_GPIO_DeInit+0xaa>
 8004630:	2306      	movs	r3, #6
 8004632:	e00a      	b.n	800464a <HAL_GPIO_DeInit+0xaa>
 8004634:	2305      	movs	r3, #5
 8004636:	e008      	b.n	800464a <HAL_GPIO_DeInit+0xaa>
 8004638:	2304      	movs	r3, #4
 800463a:	e006      	b.n	800464a <HAL_GPIO_DeInit+0xaa>
 800463c:	2303      	movs	r3, #3
 800463e:	e004      	b.n	800464a <HAL_GPIO_DeInit+0xaa>
 8004640:	2302      	movs	r3, #2
 8004642:	e002      	b.n	800464a <HAL_GPIO_DeInit+0xaa>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_GPIO_DeInit+0xaa>
 8004648:	2300      	movs	r3, #0
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	f002 0203 	and.w	r2, r2, #3
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	4093      	lsls	r3, r2
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	429a      	cmp	r2, r3
 8004658:	d132      	bne.n	80046c0 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800465a:	4b49      	ldr	r3, [pc, #292]	; (8004780 <HAL_GPIO_DeInit+0x1e0>)
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	43db      	mvns	r3, r3
 8004662:	4947      	ldr	r1, [pc, #284]	; (8004780 <HAL_GPIO_DeInit+0x1e0>)
 8004664:	4013      	ands	r3, r2
 8004666:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004668:	4b45      	ldr	r3, [pc, #276]	; (8004780 <HAL_GPIO_DeInit+0x1e0>)
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	43db      	mvns	r3, r3
 8004670:	4943      	ldr	r1, [pc, #268]	; (8004780 <HAL_GPIO_DeInit+0x1e0>)
 8004672:	4013      	ands	r3, r2
 8004674:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004676:	4b42      	ldr	r3, [pc, #264]	; (8004780 <HAL_GPIO_DeInit+0x1e0>)
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	43db      	mvns	r3, r3
 800467e:	4940      	ldr	r1, [pc, #256]	; (8004780 <HAL_GPIO_DeInit+0x1e0>)
 8004680:	4013      	ands	r3, r2
 8004682:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004684:	4b3e      	ldr	r3, [pc, #248]	; (8004780 <HAL_GPIO_DeInit+0x1e0>)
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	43db      	mvns	r3, r3
 800468c:	493c      	ldr	r1, [pc, #240]	; (8004780 <HAL_GPIO_DeInit+0x1e0>)
 800468e:	4013      	ands	r3, r2
 8004690:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	220f      	movs	r2, #15
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80046a2:	4a2f      	ldr	r2, [pc, #188]	; (8004760 <HAL_GPIO_DeInit+0x1c0>)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	089b      	lsrs	r3, r3, #2
 80046a8:	3302      	adds	r3, #2
 80046aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	43da      	mvns	r2, r3
 80046b2:	482b      	ldr	r0, [pc, #172]	; (8004760 <HAL_GPIO_DeInit+0x1c0>)
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	400a      	ands	r2, r1
 80046ba:	3302      	adds	r3, #2
 80046bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	2103      	movs	r1, #3
 80046ca:	fa01 f303 	lsl.w	r3, r1, r3
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	08da      	lsrs	r2, r3, #3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3208      	adds	r2, #8
 80046dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	220f      	movs	r2, #15
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	43db      	mvns	r3, r3
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	08d2      	lsrs	r2, r2, #3
 80046f4:	4019      	ands	r1, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3208      	adds	r2, #8
 80046fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	2103      	movs	r1, #3
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	43db      	mvns	r3, r3
 800470e:	401a      	ands	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	2101      	movs	r1, #1
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	fa01 f303 	lsl.w	r3, r1, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	401a      	ands	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	2103      	movs	r1, #3
 8004732:	fa01 f303 	lsl.w	r3, r1, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	401a      	ands	r2, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	3301      	adds	r3, #1
 8004742:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	f47f af2f 	bne.w	80045b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8004752:	bf00      	nop
 8004754:	bf00      	nop
 8004756:	371c      	adds	r7, #28
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr
 8004760:	40010000 	.word	0x40010000
 8004764:	48000400 	.word	0x48000400
 8004768:	48000800 	.word	0x48000800
 800476c:	48000c00 	.word	0x48000c00
 8004770:	48001000 	.word	0x48001000
 8004774:	48001400 	.word	0x48001400
 8004778:	48001800 	.word	0x48001800
 800477c:	48001c00 	.word	0x48001c00
 8004780:	40010400 	.word	0x40010400

08004784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	887b      	ldrh	r3, [r7, #2]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d002      	beq.n	80047a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
 80047a0:	e001      	b.n	80047a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047a2:	2300      	movs	r3, #0
 80047a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
 80047c0:	4613      	mov	r3, r2
 80047c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047c4:	787b      	ldrb	r3, [r7, #1]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047ca:	887a      	ldrh	r2, [r7, #2]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047d0:	e002      	b.n	80047d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047d2:	887a      	ldrh	r2, [r7, #2]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e08d      	b.n	8004912 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7ff f906 	bl	8003a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004834:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004844:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d107      	bne.n	800485e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	e006      	b.n	800486c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800486a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d108      	bne.n	8004886 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004882:	605a      	str	r2, [r3, #4]
 8004884:	e007      	b.n	8004896 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004894:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	69d9      	ldr	r1, [r3, #28]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b082      	sub	sp, #8
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e021      	b.n	8004970 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	; 0x24
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff f8c7 	bl	8003ad8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}

08004978 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	4603      	mov	r3, r0
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	460b      	mov	r3, r1
 800498c:	813b      	strh	r3, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	f040 80f9 	bne.w	8004b92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_I2C_Mem_Write+0x34>
 80049a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0ed      	b.n	8004b94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_I2C_Mem_Write+0x4e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0e6      	b.n	8004b94 <HAL_I2C_Mem_Write+0x21c>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049ce:	f7ff fb67 	bl	80040a0 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2319      	movs	r3, #25
 80049da:	2201      	movs	r2, #1
 80049dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fac3 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0d1      	b.n	8004b94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2221      	movs	r2, #33	; 0x21
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2240      	movs	r2, #64	; 0x40
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a3a      	ldr	r2, [r7, #32]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a18:	88f8      	ldrh	r0, [r7, #6]
 8004a1a:	893a      	ldrh	r2, [r7, #8]
 8004a1c:	8979      	ldrh	r1, [r7, #10]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4603      	mov	r3, r0
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f9d3 	bl	8004dd4 <I2C_RequestMemoryWrite>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0a9      	b.n	8004b94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2bff      	cmp	r3, #255	; 0xff
 8004a48:	d90e      	bls.n	8004a68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	8979      	ldrh	r1, [r7, #10]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fc3d 	bl	80052e0 <I2C_TransferConfig>
 8004a66:	e00f      	b.n	8004a88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	8979      	ldrh	r1, [r7, #10]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fc2c 	bl	80052e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fabc 	bl	800500a <I2C_WaitOnTXISFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e07b      	b.n	8004b94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d034      	beq.n	8004b40 <HAL_I2C_Mem_Write+0x1c8>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d130      	bne.n	8004b40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	2180      	movs	r1, #128	; 0x80
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 fa3f 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e04d      	b.n	8004b94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2bff      	cmp	r3, #255	; 0xff
 8004b00:	d90e      	bls.n	8004b20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	22ff      	movs	r2, #255	; 0xff
 8004b06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	8979      	ldrh	r1, [r7, #10]
 8004b10:	2300      	movs	r3, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fbe1 	bl	80052e0 <I2C_TransferConfig>
 8004b1e:	e00f      	b.n	8004b40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2e:	b2da      	uxtb	r2, r3
 8004b30:	8979      	ldrh	r1, [r7, #10]
 8004b32:	2300      	movs	r3, #0
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fbd0 	bl	80052e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d19e      	bne.n	8004a88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 faa2 	bl	8005098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e01a      	b.n	8004b94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2220      	movs	r2, #32
 8004b64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <HAL_I2C_Mem_Write+0x224>)
 8004b72:	400b      	ands	r3, r1
 8004b74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e000      	b.n	8004b94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004b92:	2302      	movs	r3, #2
  }
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	fe00e800 	.word	0xfe00e800

08004ba0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b088      	sub	sp, #32
 8004ba4:	af02      	add	r7, sp, #8
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	4608      	mov	r0, r1
 8004baa:	4611      	mov	r1, r2
 8004bac:	461a      	mov	r2, r3
 8004bae:	4603      	mov	r3, r0
 8004bb0:	817b      	strh	r3, [r7, #10]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	813b      	strh	r3, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b20      	cmp	r3, #32
 8004bc4:	f040 80fd 	bne.w	8004dc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_I2C_Mem_Read+0x34>
 8004bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bda:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e0f1      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_I2C_Mem_Read+0x4e>
 8004bea:	2302      	movs	r3, #2
 8004bec:	e0ea      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x224>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004bf6:	f7ff fa53 	bl	80040a0 <HAL_GetTick>
 8004bfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	2319      	movs	r3, #25
 8004c02:	2201      	movs	r2, #1
 8004c04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f9af 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e0d5      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2222      	movs	r2, #34	; 0x22
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2240      	movs	r2, #64	; 0x40
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6a3a      	ldr	r2, [r7, #32]
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004c38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c40:	88f8      	ldrh	r0, [r7, #6]
 8004c42:	893a      	ldrh	r2, [r7, #8]
 8004c44:	8979      	ldrh	r1, [r7, #10]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	4603      	mov	r3, r0
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f913 	bl	8004e7c <I2C_RequestMemoryRead>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0ad      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2bff      	cmp	r3, #255	; 0xff
 8004c70:	d90e      	bls.n	8004c90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	8979      	ldrh	r1, [r7, #10]
 8004c80:	4b52      	ldr	r3, [pc, #328]	; (8004dcc <HAL_I2C_Mem_Read+0x22c>)
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fb29 	bl	80052e0 <I2C_TransferConfig>
 8004c8e:	e00f      	b.n	8004cb0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	8979      	ldrh	r1, [r7, #10]
 8004ca2:	4b4a      	ldr	r3, [pc, #296]	; (8004dcc <HAL_I2C_Mem_Read+0x22c>)
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 fb18 	bl	80052e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2104      	movs	r1, #4
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f956 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07c      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d034      	beq.n	8004d70 <HAL_I2C_Mem_Read+0x1d0>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d130      	bne.n	8004d70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	2200      	movs	r2, #0
 8004d16:	2180      	movs	r1, #128	; 0x80
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f927 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e04d      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	2bff      	cmp	r3, #255	; 0xff
 8004d30:	d90e      	bls.n	8004d50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	22ff      	movs	r2, #255	; 0xff
 8004d36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	8979      	ldrh	r1, [r7, #10]
 8004d40:	2300      	movs	r3, #0
 8004d42:	9300      	str	r3, [sp, #0]
 8004d44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 fac9 	bl	80052e0 <I2C_TransferConfig>
 8004d4e:	e00f      	b.n	8004d70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	8979      	ldrh	r1, [r7, #10]
 8004d62:	2300      	movs	r3, #0
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fab8 	bl	80052e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d19a      	bne.n	8004cb0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 f98a 	bl	8005098 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e01a      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2220      	movs	r2, #32
 8004d94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6859      	ldr	r1, [r3, #4]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <HAL_I2C_Mem_Read+0x230>)
 8004da2:	400b      	ands	r3, r1
 8004da4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	e000      	b.n	8004dc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004dc2:	2302      	movs	r3, #2
  }
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	80002400 	.word	0x80002400
 8004dd0:	fe00e800 	.word	0xfe00e800

08004dd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af02      	add	r7, sp, #8
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	4608      	mov	r0, r1
 8004dde:	4611      	mov	r1, r2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	817b      	strh	r3, [r7, #10]
 8004de6:	460b      	mov	r3, r1
 8004de8:	813b      	strh	r3, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	8979      	ldrh	r1, [r7, #10]
 8004df4:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <I2C_RequestMemoryWrite+0xa4>)
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fa6f 	bl	80052e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	69b9      	ldr	r1, [r7, #24]
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f8ff 	bl	800500a <I2C_WaitOnTXISFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e02c      	b.n	8004e70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004e16:	88fb      	ldrh	r3, [r7, #6]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d105      	bne.n	8004e28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e1c:	893b      	ldrh	r3, [r7, #8]
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	629a      	str	r2, [r3, #40]	; 0x28
 8004e26:	e015      	b.n	8004e54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004e28:	893b      	ldrh	r3, [r7, #8]
 8004e2a:	0a1b      	lsrs	r3, r3, #8
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	69b9      	ldr	r1, [r7, #24]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f8e5 	bl	800500a <I2C_WaitOnTXISFlagUntilTimeout>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e012      	b.n	8004e70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004e4a:	893b      	ldrh	r3, [r7, #8]
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2180      	movs	r1, #128	; 0x80
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f884 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3710      	adds	r7, #16
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	80002000 	.word	0x80002000

08004e7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	4608      	mov	r0, r1
 8004e86:	4611      	mov	r1, r2
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	817b      	strh	r3, [r7, #10]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	813b      	strh	r3, [r7, #8]
 8004e92:	4613      	mov	r3, r2
 8004e94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	8979      	ldrh	r1, [r7, #10]
 8004e9c:	4b20      	ldr	r3, [pc, #128]	; (8004f20 <I2C_RequestMemoryRead+0xa4>)
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fa1c 	bl	80052e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	69b9      	ldr	r1, [r7, #24]
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f8ac 	bl	800500a <I2C_WaitOnTXISFlagUntilTimeout>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e02c      	b.n	8004f16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ebc:	88fb      	ldrh	r3, [r7, #6]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d105      	bne.n	8004ece <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ec2:	893b      	ldrh	r3, [r7, #8]
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	629a      	str	r2, [r3, #40]	; 0x28
 8004ecc:	e015      	b.n	8004efa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ece:	893b      	ldrh	r3, [r7, #8]
 8004ed0:	0a1b      	lsrs	r3, r3, #8
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	69b9      	ldr	r1, [r7, #24]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 f892 	bl	800500a <I2C_WaitOnTXISFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e012      	b.n	8004f16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ef0:	893b      	ldrh	r3, [r7, #8]
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2140      	movs	r1, #64	; 0x40
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f831 	bl	8004f6c <I2C_WaitOnFlagUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	80002000 	.word	0x80002000

08004f24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d103      	bne.n	8004f42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d007      	beq.n	8004f60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	619a      	str	r2, [r3, #24]
  }
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f7c:	e031      	b.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f84:	d02d      	beq.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f86:	f7ff f88b 	bl	80040a0 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d122      	bne.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699a      	ldr	r2, [r3, #24]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d113      	bne.n	8004fe2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e00f      	b.n	8005002 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699a      	ldr	r2, [r3, #24]
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d0be      	beq.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
 8005012:	60b9      	str	r1, [r7, #8]
 8005014:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005016:	e033      	b.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f87f 	bl	8005120 <I2C_IsErrorOccurred>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d001      	beq.n	800502c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e031      	b.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005032:	d025      	beq.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005034:	f7ff f834 	bl	80040a0 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	429a      	cmp	r2, r3
 8005042:	d302      	bcc.n	800504a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d11a      	bne.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d013      	beq.n	8005080 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e007      	b.n	8005090 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b02      	cmp	r3, #2
 800508c:	d1c4      	bne.n	8005018 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050a4:	e02f      	b.n	8005106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f000 f838 	bl	8005120 <I2C_IsErrorOccurred>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e02d      	b.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ba:	f7fe fff1 	bl	80040a0 <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d302      	bcc.n	80050d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d11a      	bne.n	8005106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d013      	beq.n	8005106 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e007      	b.n	8005116 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b20      	cmp	r3, #32
 8005112:	d1c8      	bne.n	80050a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b00      	cmp	r3, #0
 800514a:	d068      	beq.n	800521e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2210      	movs	r2, #16
 8005152:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005154:	e049      	b.n	80051ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515c:	d045      	beq.n	80051ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800515e:	f7fe ff9f 	bl	80040a0 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	429a      	cmp	r2, r3
 800516c:	d302      	bcc.n	8005174 <I2C_IsErrorOccurred+0x54>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d13a      	bne.n	80051ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005186:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005196:	d121      	bne.n	80051dc <I2C_IsErrorOccurred+0xbc>
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800519e:	d01d      	beq.n	80051dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80051a0:	7cfb      	ldrb	r3, [r7, #19]
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d01a      	beq.n	80051dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80051b6:	f7fe ff73 	bl	80040a0 <HAL_GetTick>
 80051ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051bc:	e00e      	b.n	80051dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80051be:	f7fe ff6f 	bl	80040a0 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b19      	cmp	r3, #25
 80051ca:	d907      	bls.n	80051dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	f043 0320 	orr.w	r3, r3, #32
 80051d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80051da:	e006      	b.n	80051ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d1e9      	bne.n	80051be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d003      	beq.n	8005200 <I2C_IsErrorOccurred+0xe0>
 80051f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0aa      	beq.n	8005156 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005204:	2b00      	cmp	r3, #0
 8005206:	d103      	bne.n	8005210 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2220      	movs	r2, #32
 800520e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	f043 0304 	orr.w	r3, r3, #4
 8005216:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005240:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00b      	beq.n	800526a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	f043 0308 	orr.w	r3, r3, #8
 8005258:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005262:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	f043 0302 	orr.w	r3, r3, #2
 800527a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005284:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800528c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01c      	beq.n	80052ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff fe45 	bl	8004f24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6859      	ldr	r1, [r3, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <I2C_IsErrorOccurred+0x1bc>)
 80052a6:	400b      	ands	r3, r1
 80052a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80052ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3728      	adds	r7, #40	; 0x28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	fe00e800 	.word	0xfe00e800

080052e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	460b      	mov	r3, r1
 80052ec:	817b      	strh	r3, [r7, #10]
 80052ee:	4613      	mov	r3, r2
 80052f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052f2:	897b      	ldrh	r3, [r7, #10]
 80052f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052f8:	7a7b      	ldrb	r3, [r7, #9]
 80052fa:	041b      	lsls	r3, r3, #16
 80052fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005300:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	4313      	orrs	r3, r2
 800530a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800530e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685a      	ldr	r2, [r3, #4]
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	0d5b      	lsrs	r3, r3, #21
 800531a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800531e:	4b08      	ldr	r3, [pc, #32]	; (8005340 <I2C_TransferConfig+0x60>)
 8005320:	430b      	orrs	r3, r1
 8005322:	43db      	mvns	r3, r3
 8005324:	ea02 0103 	and.w	r1, r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	430a      	orrs	r2, r1
 8005330:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	03ff63ff 	.word	0x03ff63ff

08005344 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b20      	cmp	r3, #32
 8005358:	d138      	bne.n	80053cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005364:	2302      	movs	r3, #2
 8005366:	e032      	b.n	80053ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0201 	bic.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005396:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	683a      	ldr	r2, [r7, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0201 	orr.w	r2, r2, #1
 80053b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e000      	b.n	80053ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053da:	b480      	push	{r7}
 80053dc:	b085      	sub	sp, #20
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d139      	bne.n	8005464 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e033      	b.n	8005466 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2224      	movs	r2, #36	; 0x24
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800542c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af02      	add	r7, sp, #8
 800547a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005480:	f7fe fe0e 	bl	80040a0 <HAL_GetTick>
 8005484:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d102      	bne.n	8005492 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	73fb      	strb	r3, [r7, #15]
 8005490:	e092      	b.n	80055b8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549c:	2b00      	cmp	r3, #0
 800549e:	f040 808b 	bne.w	80055b8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fe fb3c 	bl	8003b20 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80054a8:	f241 3188 	movw	r1, #5000	; 0x1388
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fad0 	bl	8005a52 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	4b42      	ldr	r3, [pc, #264]	; (80055c4 <HAL_OSPI_Init+0x150>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	68d1      	ldr	r1, [r2, #12]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6912      	ldr	r2, [r2, #16]
 80054c4:	3a01      	subs	r2, #1
 80054c6:	0412      	lsls	r2, r2, #16
 80054c8:	4311      	orrs	r1, r2
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6952      	ldr	r2, [r2, #20]
 80054ce:	3a01      	subs	r2, #1
 80054d0:	0212      	lsls	r2, r2, #8
 80054d2:	4311      	orrs	r1, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80054d8:	4311      	orrs	r1, r2
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	69d2      	ldr	r2, [r2, #28]
 80054de:	4311      	orrs	r1, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	0412      	lsls	r2, r2, #16
 80054f2:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	3b01      	subs	r3, #1
 8005504:	021a      	lsls	r2, r3, #8
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2200      	movs	r2, #0
 8005518:	2120      	movs	r1, #32
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fddc 	bl	80060d8 <OSPI_WaitFlagStateUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d146      	bne.n	80055b8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	1e5a      	subs	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005560:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d107      	bne.n	80055a0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0202 	orr.w	r2, r2, #2
 800559e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a8:	d103      	bne.n	80055b2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2201      	movs	r2, #1
 80055ae:	645a      	str	r2, [r3, #68]	; 0x44
 80055b0:	e002      	b.n	80055b8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2202      	movs	r2, #2
 80055b6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	f8e0f8f4 	.word	0xf8e0f8f4

080055c8 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055d0:	2300      	movs	r3, #0
 80055d2:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d102      	bne.n	80055e0 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	73fb      	strb	r3, [r7, #15]
 80055de:	e015      	b.n	800560c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0201 	bic.w	r2, r2, #1
 80055ee:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0202 	bic.w	r2, r2, #2
 80055fe:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7fe faf9 	bl	8003bf8 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 800560c:	7bfb      	ldrb	r3, [r7, #15]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3710      	adds	r7, #16
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b08a      	sub	sp, #40	; 0x28
 800561a:	af02      	add	r7, sp, #8
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005622:	f7fe fd3d 	bl	80040a0 <HAL_GetTick>
 8005626:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005632:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d104      	bne.n	8005644 <HAL_OSPI_Command+0x2e>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005642:	d10d      	bne.n	8005660 <HAL_OSPI_Command+0x4a>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2b14      	cmp	r3, #20
 8005648:	d103      	bne.n	8005652 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d006      	beq.n	8005660 <HAL_OSPI_Command+0x4a>
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2b24      	cmp	r3, #36	; 0x24
 8005656:	d153      	bne.n	8005700 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d14f      	bne.n	8005700 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	2200      	movs	r2, #0
 8005668:	2120      	movs	r1, #32
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fd34 	bl	80060d8 <OSPI_WaitFlagStateUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005674:	7ffb      	ldrb	r3, [r7, #31]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d148      	bne.n	800570c <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 fd60 	bl	8006148 <OSPI_ConfigCmd>
 8005688:	4603      	mov	r3, r0
 800568a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800568c:	7ffb      	ldrb	r3, [r7, #31]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d13c      	bne.n	800570c <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10e      	bne.n	80056b8 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	2201      	movs	r2, #1
 80056a2:	2102      	movs	r1, #2
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fd17 	bl	80060d8 <OSPI_WaitFlagStateUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2202      	movs	r2, #2
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80056b6:	e029      	b.n	800570c <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d103      	bne.n	80056c8 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2204      	movs	r2, #4
 80056c4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80056c6:	e021      	b.n	800570c <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d10b      	bne.n	80056e8 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d4:	2b24      	cmp	r3, #36	; 0x24
 80056d6:	d103      	bne.n	80056e0 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2204      	movs	r2, #4
 80056dc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80056de:	e015      	b.n	800570c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2214      	movs	r2, #20
 80056e4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80056e6:	e011      	b.n	800570c <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	2b14      	cmp	r3, #20
 80056ee:	d103      	bne.n	80056f8 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2204      	movs	r2, #4
 80056f4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80056f6:	e009      	b.n	800570c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2224      	movs	r2, #36	; 0x24
 80056fc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80056fe:	e005      	b.n	800570c <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2210      	movs	r2, #16
 8005708:	649a      	str	r2, [r3, #72]	; 0x48
 800570a:	e000      	b.n	800570e <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 800570c:	bf00      	nop
  }

  /* Return function status */
  return status;
 800570e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005710:	4618      	mov	r0, r3
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005724:	f7fe fcbc 	bl	80040a0 <HAL_GetTick>
 8005728:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3350      	adds	r3, #80	; 0x50
 8005730:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2208      	movs	r2, #8
 8005740:	649a      	str	r2, [r3, #72]	; 0x48
 8005742:	e057      	b.n	80057f4 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005748:	2b04      	cmp	r3, #4
 800574a:	d14e      	bne.n	80057ea <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005774:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2201      	movs	r2, #1
 800577e:	2104      	movs	r1, #4
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 fca9 	bl	80060d8 <OSPI_WaitFlagStateUntilTimeout>
 8005786:	4603      	mov	r3, r0
 8005788:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800578a:	7ffb      	ldrb	r3, [r7, #31]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d113      	bne.n	80057b8 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	781a      	ldrb	r2, [r3, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	1c5a      	adds	r2, r3, #1
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a8:	1e5a      	subs	r2, r3, #1
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1df      	bne.n	8005776 <HAL_OSPI_Transmit+0x5e>
 80057b6:	e000      	b.n	80057ba <HAL_OSPI_Transmit+0xa2>
          break;
 80057b8:	bf00      	nop

      if (status == HAL_OK)
 80057ba:	7ffb      	ldrb	r3, [r7, #31]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d119      	bne.n	80057f4 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2201      	movs	r2, #1
 80057c8:	2102      	movs	r1, #2
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 fc84 	bl	80060d8 <OSPI_WaitFlagStateUntilTimeout>
 80057d0:	4603      	mov	r3, r0
 80057d2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80057d4:	7ffb      	ldrb	r3, [r7, #31]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10c      	bne.n	80057f4 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2202      	movs	r2, #2
 80057e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2202      	movs	r2, #2
 80057e6:	645a      	str	r2, [r3, #68]	; 0x44
 80057e8:	e004      	b.n	80057f4 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2210      	movs	r2, #16
 80057f2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80057f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3720      	adds	r7, #32
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b08c      	sub	sp, #48	; 0x30
 8005802:	af02      	add	r7, sp, #8
 8005804:	60f8      	str	r0, [r7, #12]
 8005806:	60b9      	str	r1, [r7, #8]
 8005808:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800580a:	f7fe fc49 	bl	80040a0 <HAL_GetTick>
 800580e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3350      	adds	r3, #80	; 0x50
 8005816:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800581e:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005828:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2208      	movs	r2, #8
 800583a:	649a      	str	r2, [r3, #72]	; 0x48
 800583c:	e07c      	b.n	8005938 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005842:	2b04      	cmp	r3, #4
 8005844:	d172      	bne.n	800592c <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	1c5a      	adds	r2, r3, #1
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005872:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800587c:	d104      	bne.n	8005888 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	649a      	str	r2, [r3, #72]	; 0x48
 8005886:	e011      	b.n	80058ac <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005890:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005894:	2b00      	cmp	r3, #0
 8005896:	d004      	beq.n	80058a2 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	649a      	str	r2, [r3, #72]	; 0x48
 80058a0:	e004      	b.n	80058ac <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	2201      	movs	r2, #1
 80058b4:	2106      	movs	r1, #6
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 fc0e 	bl	80060d8 <OSPI_WaitFlagStateUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80058c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d114      	bne.n	80058f4 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	7812      	ldrb	r2, [r2, #0]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e4:	1e5a      	subs	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1dc      	bne.n	80058ac <HAL_OSPI_Receive+0xae>
 80058f2:	e000      	b.n	80058f6 <HAL_OSPI_Receive+0xf8>
          break;
 80058f4:	bf00      	nop

      if (status == HAL_OK)
 80058f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d11c      	bne.n	8005938 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2201      	movs	r2, #1
 8005906:	2102      	movs	r1, #2
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fbe5 	bl	80060d8 <OSPI_WaitFlagStateUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8005914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10d      	bne.n	8005938 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2202      	movs	r2, #2
 8005922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2202      	movs	r2, #2
 8005928:	645a      	str	r2, [r3, #68]	; 0x44
 800592a:	e005      	b.n	8005938 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2210      	movs	r2, #16
 8005936:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8005938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800593c:	4618      	mov	r0, r3
 800593e:	3728      	adds	r7, #40	; 0x28
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08a      	sub	sp, #40	; 0x28
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005950:	f7fe fba6 	bl	80040a0 <HAL_GetTick>
 8005954:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800595c:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005966:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596c:	2b04      	cmp	r3, #4
 800596e:	d164      	bne.n	8005a3a <HAL_OSPI_AutoPolling+0xf6>
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005978:	d15f      	bne.n	8005a3a <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2200      	movs	r2, #0
 8005982:	2120      	movs	r1, #32
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f000 fba7 	bl	80060d8 <OSPI_WaitFlagStateUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800598e:	7ffb      	ldrb	r3, [r7, #31]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d158      	bne.n	8005a46 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	6812      	ldr	r2, [r2, #0]
 800599c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	6852      	ldr	r2, [r2, #4]
 80059a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	6912      	ldr	r2, [r2, #16]
 80059b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	6899      	ldr	r1, [r3, #8]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	430b      	orrs	r3, r1
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80059d6:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059e0:	d104      	bne.n	80059ec <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	649a      	str	r2, [r3, #72]	; 0x48
 80059ea:	e011      	b.n	8005a10 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80059f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	649a      	str	r2, [r3, #72]	; 0x48
 8005a04:	e004      	b.n	8005a10 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	9300      	str	r3, [sp, #0]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2201      	movs	r2, #1
 8005a18:	2108      	movs	r1, #8
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 fb5c 	bl	80060d8 <OSPI_WaitFlagStateUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8005a24:	7ffb      	ldrb	r3, [r7, #31]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10d      	bne.n	8005a46 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2208      	movs	r2, #8
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2202      	movs	r2, #2
 8005a36:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8005a38:	e005      	b.n	8005a46 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2210      	movs	r2, #16
 8005a42:	649a      	str	r2, [r3, #72]	; 0x48
 8005a44:	e000      	b.n	8005a48 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8005a46:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b092      	sub	sp, #72	; 0x48
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <HAL_OSPIM_Config+0x40>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d105      	bne.n	8005a9e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8005a96:	2301      	movs	r3, #1
 8005a98:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8005a9c:	e004      	b.n	8005aa8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005aae:	e01f      	b.n	8005af0 <HAL_OSPIM_Config+0x80>
 8005ab0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8005ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005ab8:	3301      	adds	r3, #1
 8005aba:	b2d8      	uxtb	r0, r3
 8005abc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005ac0:	f107 0114 	add.w	r1, r7, #20
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	4619      	mov	r1, r3
 8005ad0:	f000 fc9c 	bl	800640c <OSPIM_GetConfig>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d005      	beq.n	8005ae6 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8005ae6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005aea:	3301      	adds	r3, #1
 8005aec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005af0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d9dd      	bls.n	8005ab4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8005af8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f040 82de 	bne.w	80060be <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005b02:	4bc6      	ldr	r3, [pc, #792]	; (8005e1c <HAL_OSPIM_Config+0x3ac>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00b      	beq.n	8005b26 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005b0e:	4bc3      	ldr	r3, [pc, #780]	; (8005e1c <HAL_OSPIM_Config+0x3ac>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4ac2      	ldr	r2, [pc, #776]	; (8005e1c <HAL_OSPIM_Config+0x3ac>)
 8005b14:	f023 0301 	bic.w	r3, r3, #1
 8005b18:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8005b1a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b1e:	f043 0301 	orr.w	r3, r3, #1
 8005b22:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8005b26:	4bbe      	ldr	r3, [pc, #760]	; (8005e20 <HAL_OSPIM_Config+0x3b0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005b32:	4bbb      	ldr	r3, [pc, #748]	; (8005e20 <HAL_OSPIM_Config+0x3b0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4aba      	ldr	r2, [pc, #744]	; (8005e20 <HAL_OSPIM_Config+0x3b0>)
 8005b38:	f023 0301 	bic.w	r3, r3, #1
 8005b3c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005b3e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005b42:	f043 0302 	orr.w	r3, r3, #2
 8005b46:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005b4a:	49b6      	ldr	r1, [pc, #728]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005b4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	3348      	adds	r3, #72	; 0x48
 8005b58:	443b      	add	r3, r7
 8005b5a:	3b2c      	subs	r3, #44	; 0x2c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	440b      	add	r3, r1
 8005b64:	6859      	ldr	r1, [r3, #4]
 8005b66:	48af      	ldr	r0, [pc, #700]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005b68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	3348      	adds	r3, #72	; 0x48
 8005b74:	443b      	add	r3, r7
 8005b76:	3b2c      	subs	r3, #44	; 0x2c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4403      	add	r3, r0
 8005b84:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8005b86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	3348      	adds	r3, #72	; 0x48
 8005b92:	443b      	add	r3, r7
 8005b94:	3b34      	subs	r3, #52	; 0x34
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 80a1 	beq.w	8005ce0 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005b9e:	49a1      	ldr	r1, [pc, #644]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	3348      	adds	r3, #72	; 0x48
 8005bac:	443b      	add	r3, r7
 8005bae:	3b34      	subs	r3, #52	; 0x34
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	6859      	ldr	r1, [r3, #4]
 8005bba:	489a      	ldr	r0, [pc, #616]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005bbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	3348      	adds	r3, #72	; 0x48
 8005bc8:	443b      	add	r3, r7
 8005bca:	3b34      	subs	r3, #52	; 0x34
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	f021 0201 	bic.w	r2, r1, #1
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4403      	add	r3, r0
 8005bd8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8005bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	3348      	adds	r3, #72	; 0x48
 8005be6:	443b      	add	r3, r7
 8005be8:	3b30      	subs	r3, #48	; 0x30
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d01d      	beq.n	8005c2c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005bf0:	498c      	ldr	r1, [pc, #560]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005bf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	3348      	adds	r3, #72	; 0x48
 8005bfe:	443b      	add	r3, r7
 8005c00:	3b30      	subs	r3, #48	; 0x30
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	6859      	ldr	r1, [r3, #4]
 8005c0c:	4885      	ldr	r0, [pc, #532]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005c0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	3348      	adds	r3, #72	; 0x48
 8005c1a:	443b      	add	r3, r7
 8005c1c:	3b30      	subs	r3, #48	; 0x30
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3b01      	subs	r3, #1
 8005c22:	f021 0210 	bic.w	r2, r1, #16
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4403      	add	r3, r0
 8005c2a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005c2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	3348      	adds	r3, #72	; 0x48
 8005c38:	443b      	add	r3, r7
 8005c3a:	3b28      	subs	r3, #40	; 0x28
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d021      	beq.n	8005c86 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005c42:	4978      	ldr	r1, [pc, #480]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005c44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	3348      	adds	r3, #72	; 0x48
 8005c50:	443b      	add	r3, r7
 8005c52:	3b28      	subs	r3, #40	; 0x28
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	440b      	add	r3, r1
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	4870      	ldr	r0, [pc, #448]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	3348      	adds	r3, #72	; 0x48
 8005c70:	443b      	add	r3, r7
 8005c72:	3b28      	subs	r3, #40	; 0x28
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4403      	add	r3, r0
 8005c84:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	3348      	adds	r3, #72	; 0x48
 8005c92:	443b      	add	r3, r7
 8005c94:	3b24      	subs	r3, #36	; 0x24
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d021      	beq.n	8005ce0 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8005c9c:	4961      	ldr	r1, [pc, #388]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	3348      	adds	r3, #72	; 0x48
 8005caa:	443b      	add	r3, r7
 8005cac:	3b24      	subs	r3, #36	; 0x24
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	440b      	add	r3, r1
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	4859      	ldr	r0, [pc, #356]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005cbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	3348      	adds	r3, #72	; 0x48
 8005cca:	443b      	add	r3, r7
 8005ccc:	3b24      	subs	r3, #36	; 0x24
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4403      	add	r3, r0
 8005cde:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6819      	ldr	r1, [r3, #0]
 8005ce4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005ce8:	4613      	mov	r3, r2
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	3348      	adds	r3, #72	; 0x48
 8005cf2:	443b      	add	r3, r7
 8005cf4:	3b34      	subs	r3, #52	; 0x34
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4299      	cmp	r1, r3
 8005cfa:	d038      	beq.n	8005d6e <HAL_OSPIM_Config+0x2fe>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6859      	ldr	r1, [r3, #4]
 8005d00:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005d04:	4613      	mov	r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	3348      	adds	r3, #72	; 0x48
 8005d0e:	443b      	add	r3, r7
 8005d10:	3b30      	subs	r3, #48	; 0x30
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4299      	cmp	r1, r3
 8005d16:	d02a      	beq.n	8005d6e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	6899      	ldr	r1, [r3, #8]
 8005d1c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	3348      	adds	r3, #72	; 0x48
 8005d2a:	443b      	add	r3, r7
 8005d2c:	3b2c      	subs	r3, #44	; 0x2c
 8005d2e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005d30:	4299      	cmp	r1, r3
 8005d32:	d01c      	beq.n	8005d6e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	68d9      	ldr	r1, [r3, #12]
 8005d38:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	3348      	adds	r3, #72	; 0x48
 8005d46:	443b      	add	r3, r7
 8005d48:	3b28      	subs	r3, #40	; 0x28
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4299      	cmp	r1, r3
 8005d4e:	d00e      	beq.n	8005d6e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	6919      	ldr	r1, [r3, #16]
 8005d54:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005d58:	4613      	mov	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4413      	add	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	3348      	adds	r3, #72	; 0x48
 8005d62:	443b      	add	r3, r7
 8005d64:	3b24      	subs	r3, #36	; 0x24
 8005d66:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005d68:	4299      	cmp	r1, r3
 8005d6a:	f040 80d3 	bne.w	8005f14 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005d6e:	492d      	ldr	r1, [pc, #180]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005d70:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	3348      	adds	r3, #72	; 0x48
 8005d7e:	443b      	add	r3, r7
 8005d80:	3b34      	subs	r3, #52	; 0x34
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	6859      	ldr	r1, [r3, #4]
 8005d8c:	4825      	ldr	r0, [pc, #148]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005d8e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	3348      	adds	r3, #72	; 0x48
 8005d9c:	443b      	add	r3, r7
 8005d9e:	3b34      	subs	r3, #52	; 0x34
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	f021 0201 	bic.w	r2, r1, #1
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4403      	add	r3, r0
 8005dac:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005dae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005db2:	4613      	mov	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	3348      	adds	r3, #72	; 0x48
 8005dbc:	443b      	add	r3, r7
 8005dbe:	3b30      	subs	r3, #48	; 0x30
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01f      	beq.n	8005e06 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005dc6:	4917      	ldr	r1, [pc, #92]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005dc8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	3348      	adds	r3, #72	; 0x48
 8005dd6:	443b      	add	r3, r7
 8005dd8:	3b30      	subs	r3, #48	; 0x30
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	6859      	ldr	r1, [r3, #4]
 8005de4:	480f      	ldr	r0, [pc, #60]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005de6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005dea:	4613      	mov	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	3348      	adds	r3, #72	; 0x48
 8005df4:	443b      	add	r3, r7
 8005df6:	3b30      	subs	r3, #48	; 0x30
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	f021 0210 	bic.w	r2, r1, #16
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4403      	add	r3, r0
 8005e04:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005e06:	4907      	ldr	r1, [pc, #28]	; (8005e24 <HAL_OSPIM_Config+0x3b4>)
 8005e08:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	3348      	adds	r3, #72	; 0x48
 8005e16:	443b      	add	r3, r7
 8005e18:	3b2c      	subs	r3, #44	; 0x2c
 8005e1a:	e005      	b.n	8005e28 <HAL_OSPIM_Config+0x3b8>
 8005e1c:	a0001000 	.word	0xa0001000
 8005e20:	a0001400 	.word	0xa0001400
 8005e24:	50061c00 	.word	0x50061c00
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	440b      	add	r3, r1
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	48a6      	ldr	r0, [pc, #664]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005e34:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	3348      	adds	r3, #72	; 0x48
 8005e42:	443b      	add	r3, r7
 8005e44:	3b2c      	subs	r3, #44	; 0x2c
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4403      	add	r3, r0
 8005e52:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005e54:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	3348      	adds	r3, #72	; 0x48
 8005e62:	443b      	add	r3, r7
 8005e64:	3b28      	subs	r3, #40	; 0x28
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d023      	beq.n	8005eb4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005e6c:	4997      	ldr	r1, [pc, #604]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005e6e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e72:	4613      	mov	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	3348      	adds	r3, #72	; 0x48
 8005e7c:	443b      	add	r3, r7
 8005e7e:	3b28      	subs	r3, #40	; 0x28
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	6859      	ldr	r1, [r3, #4]
 8005e8e:	488f      	ldr	r0, [pc, #572]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005e90:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	3348      	adds	r3, #72	; 0x48
 8005e9e:	443b      	add	r3, r7
 8005ea0:	3b28      	subs	r3, #40	; 0x28
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4403      	add	r3, r0
 8005eb2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005eb4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005eb8:	4613      	mov	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	4413      	add	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	3348      	adds	r3, #72	; 0x48
 8005ec2:	443b      	add	r3, r7
 8005ec4:	3b24      	subs	r3, #36	; 0x24
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d023      	beq.n	8005f14 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005ecc:	497f      	ldr	r1, [pc, #508]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005ece:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	3348      	adds	r3, #72	; 0x48
 8005edc:	443b      	add	r3, r7
 8005ede:	3b24      	subs	r3, #36	; 0x24
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	440b      	add	r3, r1
 8005eec:	6859      	ldr	r1, [r3, #4]
 8005eee:	4877      	ldr	r0, [pc, #476]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005ef0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	3348      	adds	r3, #72	; 0x48
 8005efe:	443b      	add	r3, r7
 8005f00:	3b24      	subs	r3, #36	; 0x24
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	4403      	add	r3, r0
 8005f12:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005f14:	4a6d      	ldr	r2, [pc, #436]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f28:	025b      	lsls	r3, r3, #9
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	4967      	ldr	r1, [pc, #412]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005f3e:	4a63      	ldr	r2, [pc, #396]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	3b01      	subs	r3, #1
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	f023 0203 	bic.w	r2, r3, #3
 8005f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f52:	005b      	lsls	r3, r3, #1
 8005f54:	431a      	orrs	r2, r3
 8005f56:	495d      	ldr	r1, [pc, #372]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d014      	beq.n	8005f9a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005f70:	4a56      	ldr	r2, [pc, #344]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f84:	015b      	lsls	r3, r3, #5
 8005f86:	431a      	orrs	r2, r3
 8005f88:	4950      	ldr	r1, [pc, #320]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	f042 0210 	orr.w	r2, r2, #16
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d019      	beq.n	8005fda <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005fa6:	4a49      	ldr	r2, [pc, #292]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbe:	049b      	lsls	r3, r3, #18
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	4942      	ldr	r1, [pc, #264]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	3b01      	subs	r3, #1
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	605a      	str	r2, [r3, #4]
 8005fd8:	e01c      	b.n	8006014 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d018      	beq.n	8006014 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005fe2:	4a3a      	ldr	r2, [pc, #232]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ffa:	069b      	lsls	r3, r3, #26
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	4933      	ldr	r1, [pc, #204]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	3b01      	subs	r3, #1
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	440b      	add	r3, r1
 8006012:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d019      	beq.n	8006054 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8006020:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	3b01      	subs	r3, #1
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006038:	049b      	lsls	r3, r3, #18
 800603a:	431a      	orrs	r2, r3
 800603c:	4923      	ldr	r1, [pc, #140]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	3b01      	subs	r3, #1
 8006044:	f003 0301 	and.w	r3, r3, #1
 8006048:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	605a      	str	r2, [r3, #4]
 8006052:	e01c      	b.n	800608e <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d018      	beq.n	800608e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800605c:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	3b01      	subs	r3, #1
 8006064:	f003 0301 	and.w	r3, r3, #1
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006074:	069b      	lsls	r3, r3, #26
 8006076:	431a      	orrs	r2, r3
 8006078:	4914      	ldr	r1, [pc, #80]	; (80060cc <HAL_OSPIM_Config+0x65c>)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	3b01      	subs	r3, #1
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	440b      	add	r3, r1
 800608c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800608e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d005      	beq.n	80060a6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800609a:	4b0d      	ldr	r3, [pc, #52]	; (80060d0 <HAL_OSPIM_Config+0x660>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a0c      	ldr	r2, [pc, #48]	; (80060d0 <HAL_OSPIM_Config+0x660>)
 80060a0:	f043 0301 	orr.w	r3, r3, #1
 80060a4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80060a6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <HAL_OSPIM_Config+0x664>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a07      	ldr	r2, [pc, #28]	; (80060d4 <HAL_OSPIM_Config+0x664>)
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80060be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3748      	adds	r7, #72	; 0x48
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	50061c00 	.word	0x50061c00
 80060d0:	a0001000 	.word	0xa0001000
 80060d4:	a0001400 	.word	0xa0001400

080060d8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	4613      	mov	r3, r2
 80060e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80060e8:	e01a      	b.n	8006120 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060f0:	d016      	beq.n	8006120 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060f2:	f7fd ffd5 	bl	80040a0 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d302      	bcc.n	8006108 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10b      	bne.n	8006120 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800610e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006114:	f043 0201 	orr.w	r2, r3, #1
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e00e      	b.n	800613e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6a1a      	ldr	r2, [r3, #32]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	bf14      	ite	ne
 800612e:	2301      	movne	r3, #1
 8006130:	2300      	moveq	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	429a      	cmp	r2, r3
 800613a:	d1d6      	bne.n	80060ea <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006148:	b480      	push	{r7}
 800614a:	b089      	sub	sp, #36	; 0x24
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006164:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10a      	bne.n	8006184 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b02      	cmp	r3, #2
 800618a:	d114      	bne.n	80061b6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006194:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800619e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80061a8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	e013      	b.n	80061de <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80061be:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80061c8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80061d2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80061dc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e6:	431a      	orrs	r2, r3
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d012      	beq.n	800621a <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620c:	4319      	orrs	r1, r3
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	430b      	orrs	r3, r1
 8006214:	431a      	orrs	r2, r3
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 021f 	bic.w	r2, r3, #31
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	431a      	orrs	r2, r3
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d105      	bne.n	8006248 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3a01      	subs	r2, #1
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8099 	beq.w	8006384 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	69db      	ldr	r3, [r3, #28]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d055      	beq.n	8006306 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625e:	2b00      	cmp	r3, #0
 8006260:	d01e      	beq.n	80062a0 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	4b68      	ldr	r3, [pc, #416]	; (8006408 <OSPI_ConfigCmd+0x2c0>)
 8006268:	4013      	ands	r3, r2
 800626a:	683a      	ldr	r2, [r7, #0]
 800626c:	68d1      	ldr	r1, [r2, #12]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	6952      	ldr	r2, [r2, #20]
 8006272:	4311      	orrs	r1, r2
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	6912      	ldr	r2, [r2, #16]
 8006278:	4311      	orrs	r1, r2
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	69d2      	ldr	r2, [r2, #28]
 800627e:	4311      	orrs	r1, r2
 8006280:	683a      	ldr	r2, [r7, #0]
 8006282:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006284:	4311      	orrs	r1, r2
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	6a12      	ldr	r2, [r2, #32]
 800628a:	4311      	orrs	r1, r2
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006290:	4311      	orrs	r1, r2
 8006292:	683a      	ldr	r2, [r7, #0]
 8006294:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006296:	430a      	orrs	r2, r1
 8006298:	431a      	orrs	r2, r3
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	e028      	b.n	80062f2 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	68d1      	ldr	r1, [r2, #12]
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	6952      	ldr	r2, [r2, #20]
 80062b4:	4311      	orrs	r1, r2
 80062b6:	683a      	ldr	r2, [r7, #0]
 80062b8:	6912      	ldr	r2, [r2, #16]
 80062ba:	4311      	orrs	r1, r2
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	69d2      	ldr	r2, [r2, #28]
 80062c0:	4311      	orrs	r1, r2
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062c6:	4311      	orrs	r1, r2
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	6a12      	ldr	r2, [r2, #32]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	431a      	orrs	r2, r3
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062dc:	d109      	bne.n	80062f2 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d105      	bne.n	80062f2 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	689a      	ldr	r2, [r3, #8]
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	6992      	ldr	r2, [r2, #24]
 8006302:	649a      	str	r2, [r3, #72]	; 0x48
 8006304:	e078      	b.n	80063f8 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630a:	2b00      	cmp	r3, #0
 800630c:	d017      	beq.n	800633e <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8006316:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	68d1      	ldr	r1, [r2, #12]
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	6952      	ldr	r2, [r2, #20]
 8006322:	4311      	orrs	r1, r2
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	6912      	ldr	r2, [r2, #16]
 8006328:	4311      	orrs	r1, r2
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800632e:	4311      	orrs	r1, r2
 8006330:	683a      	ldr	r2, [r7, #0]
 8006332:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006334:	430a      	orrs	r2, r1
 8006336:	431a      	orrs	r2, r3
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	601a      	str	r2, [r3, #0]
 800633c:	e01d      	b.n	800637a <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68d9      	ldr	r1, [r3, #12]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	4319      	orrs	r1, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	430b      	orrs	r3, r1
 8006356:	431a      	orrs	r2, r3
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006364:	d109      	bne.n	800637a <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800636a:	2b08      	cmp	r3, #8
 800636c:	d105      	bne.n	800637a <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e039      	b.n	80063f8 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d030      	beq.n	80063ee <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	2b00      	cmp	r3, #0
 8006392:	d017      	beq.n	80063c4 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800639c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	69d1      	ldr	r1, [r2, #28]
 80063a4:	683a      	ldr	r2, [r7, #0]
 80063a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063a8:	4311      	orrs	r1, r2
 80063aa:	683a      	ldr	r2, [r7, #0]
 80063ac:	6a12      	ldr	r2, [r2, #32]
 80063ae:	4311      	orrs	r1, r2
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063b4:	4311      	orrs	r1, r2
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80063ba:	430a      	orrs	r2, r1
 80063bc:	431a      	orrs	r2, r3
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e00e      	b.n	80063e2 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	69d9      	ldr	r1, [r3, #28]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	4319      	orrs	r1, r3
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	430b      	orrs	r3, r1
 80063dc:	431a      	orrs	r2, r3
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	6992      	ldr	r2, [r2, #24]
 80063ea:	649a      	str	r2, [r3, #72]	; 0x48
 80063ec:	e004      	b.n	80063f8 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2208      	movs	r2, #8
 80063f6:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80063f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3724      	adds	r7, #36	; 0x24
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	f0ffc0c0 	.word	0xf0ffc0c0

0800640c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800640c:	b480      	push	{r7}
 800640e:	b087      	sub	sp, #28
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	6039      	str	r1, [r7, #0]
 8006416:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8006418:	2300      	movs	r3, #0
 800641a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800641c:	2300      	movs	r3, #0
 800641e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006420:	79fb      	ldrb	r3, [r7, #7]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <OSPIM_GetConfig+0x26>
 8006426:	79fb      	ldrb	r3, [r7, #7]
 8006428:	2b02      	cmp	r3, #2
 800642a:	d802      	bhi.n	8006432 <OSPIM_GetConfig+0x26>
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d102      	bne.n	8006438 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
 8006436:	e08e      	b.n	8006556 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2200      	movs	r2, #0
 8006442:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2200      	movs	r2, #0
 8006448:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2200      	movs	r2, #0
 800644e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	2200      	movs	r2, #0
 8006454:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8006456:	79fb      	ldrb	r3, [r7, #7]
 8006458:	2b02      	cmp	r3, #2
 800645a:	d101      	bne.n	8006460 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800645c:	4b41      	ldr	r3, [pc, #260]	; (8006564 <OSPIM_GetConfig+0x158>)
 800645e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	e074      	b.n	8006550 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8006466:	4a40      	ldr	r2, [pc, #256]	; (8006568 <OSPIM_GetConfig+0x15c>)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00a      	beq.n	8006492 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4053      	eors	r3, r2
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d103      	bne.n	8006492 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1c5a      	adds	r2, r3, #1
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00a      	beq.n	80064b2 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4053      	eors	r3, r2
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d00a      	beq.n	80064d2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4053      	eors	r3, r2
 80064c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d103      	bne.n	80064d2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d018      	beq.n	800650e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	4053      	eors	r3, r2
 80064e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d111      	bne.n	800650e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d106      	bne.n	8006502 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	3301      	adds	r3, #1
 80064f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	60da      	str	r2, [r3, #12]
 8006500:	e005      	b.n	800650e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	3301      	adds	r3, #1
 8006506:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d018      	beq.n	800654a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	4053      	eors	r3, r2
 800651e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d111      	bne.n	800654a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d106      	bne.n	800653e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3301      	adds	r3, #1
 8006534:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	611a      	str	r2, [r3, #16]
 800653c:	e005      	b.n	800654a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	3301      	adds	r3, #1
 8006542:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3301      	adds	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d987      	bls.n	8006466 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8006556:	7dfb      	ldrb	r3, [r7, #23]
}
 8006558:	4618      	mov	r0, r3
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	04040222 	.word	0x04040222
 8006568:	50061c00 	.word	0x50061c00

0800656c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006570:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800657c:	d102      	bne.n	8006584 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800657e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006582:	e00b      	b.n	800659c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006584:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8006586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006592:	d102      	bne.n	800659a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006598:	e000      	b.n	800659c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800659a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800659c:	4618      	mov	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40007000 	.word	0x40007000

080065ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d141      	bne.n	800663e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80065ba:	4b4b      	ldr	r3, [pc, #300]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80065c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c6:	d131      	bne.n	800662c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065c8:	4b47      	ldr	r3, [pc, #284]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065ce:	4a46      	ldr	r2, [pc, #280]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065d8:	4b43      	ldr	r3, [pc, #268]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80065e0:	4a41      	ldr	r2, [pc, #260]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80065e8:	4b40      	ldr	r3, [pc, #256]	; (80066ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2232      	movs	r2, #50	; 0x32
 80065ee:	fb02 f303 	mul.w	r3, r2, r3
 80065f2:	4a3f      	ldr	r2, [pc, #252]	; (80066f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065f4:	fba2 2303 	umull	r2, r3, r2, r3
 80065f8:	0c9b      	lsrs	r3, r3, #18
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065fe:	e002      	b.n	8006606 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3b01      	subs	r3, #1
 8006604:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006606:	4b38      	ldr	r3, [pc, #224]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006612:	d102      	bne.n	800661a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d1f2      	bne.n	8006600 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800661a:	4b33      	ldr	r3, [pc, #204]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006626:	d158      	bne.n	80066da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e057      	b.n	80066dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800662c:	4b2e      	ldr	r3, [pc, #184]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800662e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006632:	4a2d      	ldr	r2, [pc, #180]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006638:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800663c:	e04d      	b.n	80066da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006644:	d141      	bne.n	80066ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006646:	4b28      	ldr	r3, [pc, #160]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d131      	bne.n	80066b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006654:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665a:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800665c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006664:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800666c:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800666e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006674:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2232      	movs	r2, #50	; 0x32
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	4a1c      	ldr	r2, [pc, #112]	; (80066f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	0c9b      	lsrs	r3, r3, #18
 8006686:	3301      	adds	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800668a:	e002      	b.n	8006692 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3b01      	subs	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669e:	d102      	bne.n	80066a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f2      	bne.n	800668c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066a6:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b2:	d112      	bne.n	80066da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e011      	b.n	80066dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066b8:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066be:	4a0a      	ldr	r2, [pc, #40]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80066c8:	e007      	b.n	80066da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80066ca:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066d2:	4a05      	ldr	r2, [pc, #20]	; (80066e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	40007000 	.word	0x40007000
 80066ec:	20000088 	.word	0x20000088
 80066f0:	431bde83 	.word	0x431bde83

080066f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f000 bc08 	b.w	8006f18 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006708:	4b96      	ldr	r3, [pc, #600]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f003 030c 	and.w	r3, r3, #12
 8006710:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006712:	4b94      	ldr	r3, [pc, #592]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0310 	and.w	r3, r3, #16
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80e4 	beq.w	80068f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d007      	beq.n	8006740 <HAL_RCC_OscConfig+0x4c>
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	2b0c      	cmp	r3, #12
 8006734:	f040 808b 	bne.w	800684e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b01      	cmp	r3, #1
 800673c:	f040 8087 	bne.w	800684e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006740:	4b88      	ldr	r3, [pc, #544]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_OscConfig+0x64>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e3df      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1a      	ldr	r2, [r3, #32]
 800675c:	4b81      	ldr	r3, [pc, #516]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <HAL_RCC_OscConfig+0x7e>
 8006768:	4b7e      	ldr	r3, [pc, #504]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006770:	e005      	b.n	800677e <HAL_RCC_OscConfig+0x8a>
 8006772:	4b7c      	ldr	r3, [pc, #496]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006778:	091b      	lsrs	r3, r3, #4
 800677a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800677e:	4293      	cmp	r3, r2
 8006780:	d223      	bcs.n	80067ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fdfe 	bl	8007388 <RCC_SetFlashLatencyFromMSIRange>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e3c0      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006796:	4b73      	ldr	r3, [pc, #460]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a72      	ldr	r2, [pc, #456]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800679c:	f043 0308 	orr.w	r3, r3, #8
 80067a0:	6013      	str	r3, [r2, #0]
 80067a2:	4b70      	ldr	r3, [pc, #448]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	496d      	ldr	r1, [pc, #436]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067b4:	4b6b      	ldr	r3, [pc, #428]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	021b      	lsls	r3, r3, #8
 80067c2:	4968      	ldr	r1, [pc, #416]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	604b      	str	r3, [r1, #4]
 80067c8:	e025      	b.n	8006816 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067ca:	4b66      	ldr	r3, [pc, #408]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a65      	ldr	r2, [pc, #404]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067d0:	f043 0308 	orr.w	r3, r3, #8
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	4b63      	ldr	r3, [pc, #396]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	4960      	ldr	r1, [pc, #384]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067e8:	4b5e      	ldr	r3, [pc, #376]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	495b      	ldr	r1, [pc, #364]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fdbe 	bl	8007388 <RCC_SetFlashLatencyFromMSIRange>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e380      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006816:	f000 fcc1 	bl	800719c <HAL_RCC_GetSysClockFreq>
 800681a:	4602      	mov	r2, r0
 800681c:	4b51      	ldr	r3, [pc, #324]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	4950      	ldr	r1, [pc, #320]	; (8006968 <HAL_RCC_OscConfig+0x274>)
 8006828:	5ccb      	ldrb	r3, [r1, r3]
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	fa22 f303 	lsr.w	r3, r2, r3
 8006832:	4a4e      	ldr	r2, [pc, #312]	; (800696c <HAL_RCC_OscConfig+0x278>)
 8006834:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006836:	4b4e      	ldr	r3, [pc, #312]	; (8006970 <HAL_RCC_OscConfig+0x27c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4618      	mov	r0, r3
 800683c:	f7fd fa5e 	bl	8003cfc <HAL_InitTick>
 8006840:	4603      	mov	r3, r0
 8006842:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d052      	beq.n	80068f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	e364      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d032      	beq.n	80068bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006856:	4b43      	ldr	r3, [pc, #268]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a42      	ldr	r2, [pc, #264]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800685c:	f043 0301 	orr.w	r3, r3, #1
 8006860:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006862:	f7fd fc1d 	bl	80040a0 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800686a:	f7fd fc19 	bl	80040a0 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e34d      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800687c:	4b39      	ldr	r3, [pc, #228]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006888:	4b36      	ldr	r3, [pc, #216]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a35      	ldr	r2, [pc, #212]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800688e:	f043 0308 	orr.w	r3, r3, #8
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	4b33      	ldr	r3, [pc, #204]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	4930      	ldr	r1, [pc, #192]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068a6:	4b2f      	ldr	r3, [pc, #188]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	021b      	lsls	r3, r3, #8
 80068b4:	492b      	ldr	r1, [pc, #172]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80068b6:	4313      	orrs	r3, r2
 80068b8:	604b      	str	r3, [r1, #4]
 80068ba:	e01a      	b.n	80068f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80068bc:	4b29      	ldr	r3, [pc, #164]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a28      	ldr	r2, [pc, #160]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068c8:	f7fd fbea 	bl	80040a0 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80068d0:	f7fd fbe6 	bl	80040a0 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e31a      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80068e2:	4b20      	ldr	r3, [pc, #128]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x1dc>
 80068ee:	e000      	b.n	80068f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d073      	beq.n	80069e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d005      	beq.n	8006910 <HAL_RCC_OscConfig+0x21c>
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	2b0c      	cmp	r3, #12
 8006908:	d10e      	bne.n	8006928 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b03      	cmp	r3, #3
 800690e:	d10b      	bne.n	8006928 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006910:	4b14      	ldr	r3, [pc, #80]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d063      	beq.n	80069e4 <HAL_RCC_OscConfig+0x2f0>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d15f      	bne.n	80069e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e2f7      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006930:	d106      	bne.n	8006940 <HAL_RCC_OscConfig+0x24c>
 8006932:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a0b      	ldr	r2, [pc, #44]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	e025      	b.n	800698c <HAL_RCC_OscConfig+0x298>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006948:	d114      	bne.n	8006974 <HAL_RCC_OscConfig+0x280>
 800694a:	4b06      	ldr	r3, [pc, #24]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a05      	ldr	r2, [pc, #20]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	4b03      	ldr	r3, [pc, #12]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a02      	ldr	r2, [pc, #8]	; (8006964 <HAL_RCC_OscConfig+0x270>)
 800695c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	e013      	b.n	800698c <HAL_RCC_OscConfig+0x298>
 8006964:	40021000 	.word	0x40021000
 8006968:	0800f288 	.word	0x0800f288
 800696c:	20000088 	.word	0x20000088
 8006970:	2000008c 	.word	0x2000008c
 8006974:	4ba0      	ldr	r3, [pc, #640]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a9f      	ldr	r2, [pc, #636]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 800697a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800697e:	6013      	str	r3, [r2, #0]
 8006980:	4b9d      	ldr	r3, [pc, #628]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a9c      	ldr	r2, [pc, #624]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800698a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d013      	beq.n	80069bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006994:	f7fd fb84 	bl	80040a0 <HAL_GetTick>
 8006998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800699a:	e008      	b.n	80069ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800699c:	f7fd fb80 	bl	80040a0 <HAL_GetTick>
 80069a0:	4602      	mov	r2, r0
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	2b64      	cmp	r3, #100	; 0x64
 80069a8:	d901      	bls.n	80069ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80069aa:	2303      	movs	r3, #3
 80069ac:	e2b4      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069ae:	4b92      	ldr	r3, [pc, #584]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0f0      	beq.n	800699c <HAL_RCC_OscConfig+0x2a8>
 80069ba:	e014      	b.n	80069e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069bc:	f7fd fb70 	bl	80040a0 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c4:	f7fd fb6c 	bl	80040a0 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b64      	cmp	r3, #100	; 0x64
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e2a0      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069d6:	4b88      	ldr	r3, [pc, #544]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1f0      	bne.n	80069c4 <HAL_RCC_OscConfig+0x2d0>
 80069e2:	e000      	b.n	80069e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d060      	beq.n	8006ab4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	2b04      	cmp	r3, #4
 80069f6:	d005      	beq.n	8006a04 <HAL_RCC_OscConfig+0x310>
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	2b0c      	cmp	r3, #12
 80069fc:	d119      	bne.n	8006a32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d116      	bne.n	8006a32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a04:	4b7c      	ldr	r3, [pc, #496]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d005      	beq.n	8006a1c <HAL_RCC_OscConfig+0x328>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e27d      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a1c:	4b76      	ldr	r3, [pc, #472]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	061b      	lsls	r3, r3, #24
 8006a2a:	4973      	ldr	r1, [pc, #460]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a30:	e040      	b.n	8006ab4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d023      	beq.n	8006a82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a3a:	4b6f      	ldr	r3, [pc, #444]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a6e      	ldr	r2, [pc, #440]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a46:	f7fd fb2b 	bl	80040a0 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a4e:	f7fd fb27 	bl	80040a0 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e25b      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a60:	4b65      	ldr	r3, [pc, #404]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0f0      	beq.n	8006a4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a6c:	4b62      	ldr	r3, [pc, #392]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	061b      	lsls	r3, r3, #24
 8006a7a:	495f      	ldr	r1, [pc, #380]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	604b      	str	r3, [r1, #4]
 8006a80:	e018      	b.n	8006ab4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a82:	4b5d      	ldr	r3, [pc, #372]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a5c      	ldr	r2, [pc, #368]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8e:	f7fd fb07 	bl	80040a0 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a96:	f7fd fb03 	bl	80040a0 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e237      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aa8:	4b53      	ldr	r3, [pc, #332]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1f0      	bne.n	8006a96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d03c      	beq.n	8006b3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01c      	beq.n	8006b02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ac8:	4b4b      	ldr	r3, [pc, #300]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ace:	4a4a      	ldr	r2, [pc, #296]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006ad0:	f043 0301 	orr.w	r3, r3, #1
 8006ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ad8:	f7fd fae2 	bl	80040a0 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ae0:	f7fd fade 	bl	80040a0 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e212      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006af2:	4b41      	ldr	r3, [pc, #260]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d0ef      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x3ec>
 8006b00:	e01b      	b.n	8006b3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b02:	4b3d      	ldr	r3, [pc, #244]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b08:	4a3b      	ldr	r2, [pc, #236]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006b0a:	f023 0301 	bic.w	r3, r3, #1
 8006b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b12:	f7fd fac5 	bl	80040a0 <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b1a:	f7fd fac1 	bl	80040a0 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e1f5      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b2c:	4b32      	ldr	r3, [pc, #200]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1ef      	bne.n	8006b1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 80a6 	beq.w	8006c94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006b4c:	4b2a      	ldr	r3, [pc, #168]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10d      	bne.n	8006b74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b58:	4b27      	ldr	r3, [pc, #156]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5c:	4a26      	ldr	r2, [pc, #152]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b62:	6593      	str	r3, [r2, #88]	; 0x58
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6c:	60bb      	str	r3, [r7, #8]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b70:	2301      	movs	r3, #1
 8006b72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b74:	4b21      	ldr	r3, [pc, #132]	; (8006bfc <HAL_RCC_OscConfig+0x508>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d118      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b80:	4b1e      	ldr	r3, [pc, #120]	; (8006bfc <HAL_RCC_OscConfig+0x508>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1d      	ldr	r2, [pc, #116]	; (8006bfc <HAL_RCC_OscConfig+0x508>)
 8006b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b8c:	f7fd fa88 	bl	80040a0 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b94:	f7fd fa84 	bl	80040a0 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e1b8      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ba6:	4b15      	ldr	r3, [pc, #84]	; (8006bfc <HAL_RCC_OscConfig+0x508>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d0f0      	beq.n	8006b94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d108      	bne.n	8006bcc <HAL_RCC_OscConfig+0x4d8>
 8006bba:	4b0f      	ldr	r3, [pc, #60]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc0:	4a0d      	ldr	r2, [pc, #52]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006bc2:	f043 0301 	orr.w	r3, r3, #1
 8006bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bca:	e029      	b.n	8006c20 <HAL_RCC_OscConfig+0x52c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	2b05      	cmp	r3, #5
 8006bd2:	d115      	bne.n	8006c00 <HAL_RCC_OscConfig+0x50c>
 8006bd4:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bda:	4a07      	ldr	r2, [pc, #28]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006bdc:	f043 0304 	orr.w	r3, r3, #4
 8006be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006be4:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bea:	4a03      	ldr	r2, [pc, #12]	; (8006bf8 <HAL_RCC_OscConfig+0x504>)
 8006bec:	f043 0301 	orr.w	r3, r3, #1
 8006bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bf4:	e014      	b.n	8006c20 <HAL_RCC_OscConfig+0x52c>
 8006bf6:	bf00      	nop
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	40007000 	.word	0x40007000
 8006c00:	4b9d      	ldr	r3, [pc, #628]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c06:	4a9c      	ldr	r2, [pc, #624]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c10:	4b99      	ldr	r3, [pc, #612]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c16:	4a98      	ldr	r2, [pc, #608]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006c18:	f023 0304 	bic.w	r3, r3, #4
 8006c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d016      	beq.n	8006c56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c28:	f7fd fa3a 	bl	80040a0 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c2e:	e00a      	b.n	8006c46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c30:	f7fd fa36 	bl	80040a0 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e168      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c46:	4b8c      	ldr	r3, [pc, #560]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0ed      	beq.n	8006c30 <HAL_RCC_OscConfig+0x53c>
 8006c54:	e015      	b.n	8006c82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c56:	f7fd fa23 	bl	80040a0 <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c5c:	e00a      	b.n	8006c74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c5e:	f7fd fa1f 	bl	80040a0 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e151      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c74:	4b80      	ldr	r3, [pc, #512]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1ed      	bne.n	8006c5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c82:	7ffb      	ldrb	r3, [r7, #31]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d105      	bne.n	8006c94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c88:	4b7b      	ldr	r3, [pc, #492]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8c:	4a7a      	ldr	r2, [pc, #488]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d03c      	beq.n	8006d1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01c      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ca8:	4b73      	ldr	r3, [pc, #460]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cae:	4a72      	ldr	r2, [pc, #456]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb8:	f7fd f9f2 	bl	80040a0 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cc0:	f7fd f9ee 	bl	80040a0 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e122      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cd2:	4b69      	ldr	r3, [pc, #420]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0ef      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x5cc>
 8006ce0:	e01b      	b.n	8006d1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ce2:	4b65      	ldr	r3, [pc, #404]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ce8:	4a63      	ldr	r2, [pc, #396]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf2:	f7fd f9d5 	bl	80040a0 <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cfa:	f7fd f9d1 	bl	80040a0 <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e105      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d0c:	4b5a      	ldr	r3, [pc, #360]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1ef      	bne.n	8006cfa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80f9 	beq.w	8006f16 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	f040 80cf 	bne.w	8006ecc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006d2e:	4b52      	ldr	r3, [pc, #328]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f003 0203 	and.w	r2, r3, #3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d12c      	bne.n	8006d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d123      	bne.n	8006d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d11b      	bne.n	8006d9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d113      	bne.n	8006d9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7e:	085b      	lsrs	r3, r3, #1
 8006d80:	3b01      	subs	r3, #1
 8006d82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d109      	bne.n	8006d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d92:	085b      	lsrs	r3, r3, #1
 8006d94:	3b01      	subs	r3, #1
 8006d96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d071      	beq.n	8006e80 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d068      	beq.n	8006e74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006da2:	4b35      	ldr	r3, [pc, #212]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d105      	bne.n	8006dba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006dae:	4b32      	ldr	r3, [pc, #200]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e0ac      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006dbe:	4b2e      	ldr	r3, [pc, #184]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a2d      	ldr	r2, [pc, #180]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006dc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006dca:	f7fd f969 	bl	80040a0 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd2:	f7fd f965 	bl	80040a0 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e099      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de4:	4b24      	ldr	r3, [pc, #144]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1f0      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006df0:	4b21      	ldr	r3, [pc, #132]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	4b21      	ldr	r3, [pc, #132]	; (8006e7c <HAL_RCC_OscConfig+0x788>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e00:	3a01      	subs	r2, #1
 8006e02:	0112      	lsls	r2, r2, #4
 8006e04:	4311      	orrs	r1, r2
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006e0a:	0212      	lsls	r2, r2, #8
 8006e0c:	4311      	orrs	r1, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006e12:	0852      	lsrs	r2, r2, #1
 8006e14:	3a01      	subs	r2, #1
 8006e16:	0552      	lsls	r2, r2, #21
 8006e18:	4311      	orrs	r1, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006e1e:	0852      	lsrs	r2, r2, #1
 8006e20:	3a01      	subs	r2, #1
 8006e22:	0652      	lsls	r2, r2, #25
 8006e24:	4311      	orrs	r1, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e2a:	06d2      	lsls	r2, r2, #27
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	4912      	ldr	r1, [pc, #72]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006e34:	4b10      	ldr	r3, [pc, #64]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a0f      	ldr	r2, [pc, #60]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e40:	4b0d      	ldr	r3, [pc, #52]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4a0c      	ldr	r2, [pc, #48]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006e4c:	f7fd f928 	bl	80040a0 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e54:	f7fd f924 	bl	80040a0 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e058      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e66:	4b04      	ldr	r3, [pc, #16]	; (8006e78 <HAL_RCC_OscConfig+0x784>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0f0      	beq.n	8006e54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e72:	e050      	b.n	8006f16 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e04f      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e80:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d144      	bne.n	8006f16 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006e8c:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a23      	ldr	r2, [pc, #140]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006e92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e98:	4b21      	ldr	r3, [pc, #132]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	4a20      	ldr	r2, [pc, #128]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ea2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ea4:	f7fd f8fc 	bl	80040a0 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006eaa:	e008      	b.n	8006ebe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eac:	f7fd f8f8 	bl	80040a0 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e02c      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ebe:	4b18      	ldr	r3, [pc, #96]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0f0      	beq.n	8006eac <HAL_RCC_OscConfig+0x7b8>
 8006eca:	e024      	b.n	8006f16 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	2b0c      	cmp	r3, #12
 8006ed0:	d01f      	beq.n	8006f12 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed2:	4b13      	ldr	r3, [pc, #76]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a12      	ldr	r2, [pc, #72]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006ed8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ede:	f7fd f8df 	bl	80040a0 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee6:	f7fd f8db 	bl	80040a0 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e00f      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ef8:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1f0      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006f04:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	4905      	ldr	r1, [pc, #20]	; (8006f20 <HAL_RCC_OscConfig+0x82c>)
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <HAL_RCC_OscConfig+0x830>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	60cb      	str	r3, [r1, #12]
 8006f10:	e001      	b.n	8006f16 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3720      	adds	r7, #32
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	40021000 	.word	0x40021000
 8006f24:	feeefffc 	.word	0xfeeefffc

08006f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b086      	sub	sp, #24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d101      	bne.n	8006f40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e11d      	b.n	800717c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f40:	4b90      	ldr	r3, [pc, #576]	; (8007184 <HAL_RCC_ClockConfig+0x25c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d910      	bls.n	8006f70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f4e:	4b8d      	ldr	r3, [pc, #564]	; (8007184 <HAL_RCC_ClockConfig+0x25c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f023 020f 	bic.w	r2, r3, #15
 8006f56:	498b      	ldr	r1, [pc, #556]	; (8007184 <HAL_RCC_ClockConfig+0x25c>)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f5e:	4b89      	ldr	r3, [pc, #548]	; (8007184 <HAL_RCC_ClockConfig+0x25c>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d001      	beq.n	8006f70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e105      	b.n	800717c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d010      	beq.n	8006f9e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	4b81      	ldr	r3, [pc, #516]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d908      	bls.n	8006f9e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f8c:	4b7e      	ldr	r3, [pc, #504]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	497b      	ldr	r1, [pc, #492]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0301 	and.w	r3, r3, #1
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d079      	beq.n	800709e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d11e      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fb2:	4b75      	ldr	r3, [pc, #468]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e0dc      	b.n	800717c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006fc2:	f000 fa3b 	bl	800743c <RCC_GetSysClockFreqFromPLLSource>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4a70      	ldr	r2, [pc, #448]	; (800718c <HAL_RCC_ClockConfig+0x264>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d946      	bls.n	800705c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006fce:	4b6e      	ldr	r3, [pc, #440]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d140      	bne.n	800705c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fda:	4b6b      	ldr	r3, [pc, #428]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fe2:	4a69      	ldr	r2, [pc, #420]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8006fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fe8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006fea:	2380      	movs	r3, #128	; 0x80
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	e035      	b.n	800705c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d107      	bne.n	8007008 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ff8:	4b63      	ldr	r3, [pc, #396]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d115      	bne.n	8007030 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e0b9      	b.n	800717c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d107      	bne.n	8007020 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007010:	4b5d      	ldr	r3, [pc, #372]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0302 	and.w	r3, r3, #2
 8007018:	2b00      	cmp	r3, #0
 800701a:	d109      	bne.n	8007030 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0ad      	b.n	800717c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007020:	4b59      	ldr	r3, [pc, #356]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e0a5      	b.n	800717c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8007030:	f000 f8b4 	bl	800719c <HAL_RCC_GetSysClockFreq>
 8007034:	4603      	mov	r3, r0
 8007036:	4a55      	ldr	r2, [pc, #340]	; (800718c <HAL_RCC_ClockConfig+0x264>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d90f      	bls.n	800705c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800703c:	4b52      	ldr	r3, [pc, #328]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d109      	bne.n	800705c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007048:	4b4f      	ldr	r3, [pc, #316]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007050:	4a4d      	ldr	r2, [pc, #308]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8007052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007056:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007058:	2380      	movs	r3, #128	; 0x80
 800705a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800705c:	4b4a      	ldr	r3, [pc, #296]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f023 0203 	bic.w	r2, r3, #3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	4947      	ldr	r1, [pc, #284]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 800706a:	4313      	orrs	r3, r2
 800706c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800706e:	f7fd f817 	bl	80040a0 <HAL_GetTick>
 8007072:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007074:	e00a      	b.n	800708c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007076:	f7fd f813 	bl	80040a0 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	f241 3288 	movw	r2, #5000	; 0x1388
 8007084:	4293      	cmp	r3, r2
 8007086:	d901      	bls.n	800708c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e077      	b.n	800717c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708c:	4b3e      	ldr	r3, [pc, #248]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 020c 	and.w	r2, r3, #12
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	429a      	cmp	r2, r3
 800709c:	d1eb      	bne.n	8007076 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	2b80      	cmp	r3, #128	; 0x80
 80070a2:	d105      	bne.n	80070b0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80070a4:	4b38      	ldr	r3, [pc, #224]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4a37      	ldr	r2, [pc, #220]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 80070aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d010      	beq.n	80070de <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	4b31      	ldr	r3, [pc, #196]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d208      	bcs.n	80070de <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070cc:	4b2e      	ldr	r3, [pc, #184]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	492b      	ldr	r1, [pc, #172]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070de:	4b29      	ldr	r3, [pc, #164]	; (8007184 <HAL_RCC_ClockConfig+0x25c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d210      	bcs.n	800710e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ec:	4b25      	ldr	r3, [pc, #148]	; (8007184 <HAL_RCC_ClockConfig+0x25c>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f023 020f 	bic.w	r2, r3, #15
 80070f4:	4923      	ldr	r1, [pc, #140]	; (8007184 <HAL_RCC_ClockConfig+0x25c>)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fc:	4b21      	ldr	r3, [pc, #132]	; (8007184 <HAL_RCC_ClockConfig+0x25c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d001      	beq.n	800710e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e036      	b.n	800717c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0304 	and.w	r3, r3, #4
 8007116:	2b00      	cmp	r3, #0
 8007118:	d008      	beq.n	800712c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800711a:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	4918      	ldr	r1, [pc, #96]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8007128:	4313      	orrs	r3, r2
 800712a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d009      	beq.n	800714c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007138:	4b13      	ldr	r3, [pc, #76]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	00db      	lsls	r3, r3, #3
 8007146:	4910      	ldr	r1, [pc, #64]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8007148:	4313      	orrs	r3, r2
 800714a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800714c:	f000 f826 	bl	800719c <HAL_RCC_GetSysClockFreq>
 8007150:	4602      	mov	r2, r0
 8007152:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <HAL_RCC_ClockConfig+0x260>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	091b      	lsrs	r3, r3, #4
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	490c      	ldr	r1, [pc, #48]	; (8007190 <HAL_RCC_ClockConfig+0x268>)
 800715e:	5ccb      	ldrb	r3, [r1, r3]
 8007160:	f003 031f 	and.w	r3, r3, #31
 8007164:	fa22 f303 	lsr.w	r3, r2, r3
 8007168:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <HAL_RCC_ClockConfig+0x26c>)
 800716a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800716c:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <HAL_RCC_ClockConfig+0x270>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f7fc fdc3 	bl	8003cfc <HAL_InitTick>
 8007176:	4603      	mov	r3, r0
 8007178:	73fb      	strb	r3, [r7, #15]

  return status;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	40022000 	.word	0x40022000
 8007188:	40021000 	.word	0x40021000
 800718c:	04c4b400 	.word	0x04c4b400
 8007190:	0800f288 	.word	0x0800f288
 8007194:	20000088 	.word	0x20000088
 8007198:	2000008c 	.word	0x2000008c

0800719c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800719c:	b480      	push	{r7}
 800719e:	b089      	sub	sp, #36	; 0x24
 80071a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	2300      	movs	r3, #0
 80071a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80071aa:	4b3e      	ldr	r3, [pc, #248]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	f003 030c 	and.w	r3, r3, #12
 80071b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80071b4:	4b3b      	ldr	r3, [pc, #236]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f003 0303 	and.w	r3, r3, #3
 80071bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_RCC_GetSysClockFreq+0x34>
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b0c      	cmp	r3, #12
 80071c8:	d121      	bne.n	800720e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d11e      	bne.n	800720e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80071d0:	4b34      	ldr	r3, [pc, #208]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f003 0308 	and.w	r3, r3, #8
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d107      	bne.n	80071ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80071dc:	4b31      	ldr	r3, [pc, #196]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80071de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	61fb      	str	r3, [r7, #28]
 80071ea:	e005      	b.n	80071f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80071ec:	4b2d      	ldr	r3, [pc, #180]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	091b      	lsrs	r3, r3, #4
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80071f8:	4a2b      	ldr	r2, [pc, #172]	; (80072a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007200:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10d      	bne.n	8007224 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800720c:	e00a      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b04      	cmp	r3, #4
 8007212:	d102      	bne.n	800721a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007214:	4b25      	ldr	r3, [pc, #148]	; (80072ac <HAL_RCC_GetSysClockFreq+0x110>)
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	e004      	b.n	8007224 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d101      	bne.n	8007224 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007220:	4b23      	ldr	r3, [pc, #140]	; (80072b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8007222:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	2b0c      	cmp	r3, #12
 8007228:	d134      	bne.n	8007294 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800722a:	4b1e      	ldr	r3, [pc, #120]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d003      	beq.n	8007242 <HAL_RCC_GetSysClockFreq+0xa6>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b03      	cmp	r3, #3
 800723e:	d003      	beq.n	8007248 <HAL_RCC_GetSysClockFreq+0xac>
 8007240:	e005      	b.n	800724e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007242:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <HAL_RCC_GetSysClockFreq+0x110>)
 8007244:	617b      	str	r3, [r7, #20]
      break;
 8007246:	e005      	b.n	8007254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007248:	4b19      	ldr	r3, [pc, #100]	; (80072b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800724a:	617b      	str	r3, [r7, #20]
      break;
 800724c:	e002      	b.n	8007254 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	617b      	str	r3, [r7, #20]
      break;
 8007252:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007254:	4b13      	ldr	r3, [pc, #76]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	091b      	lsrs	r3, r3, #4
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	3301      	adds	r3, #1
 8007260:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007262:	4b10      	ldr	r3, [pc, #64]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	fb03 f202 	mul.w	r2, r3, r2
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800727a:	4b0a      	ldr	r3, [pc, #40]	; (80072a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	0e5b      	lsrs	r3, r3, #25
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	3301      	adds	r3, #1
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007292:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007294:	69bb      	ldr	r3, [r7, #24]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3724      	adds	r7, #36	; 0x24
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40021000 	.word	0x40021000
 80072a8:	0800f2a0 	.word	0x0800f2a0
 80072ac:	00f42400 	.word	0x00f42400
 80072b0:	007a1200 	.word	0x007a1200

080072b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072b4:	b480      	push	{r7}
 80072b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072b8:	4b03      	ldr	r3, [pc, #12]	; (80072c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80072ba:	681b      	ldr	r3, [r3, #0]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	20000088 	.word	0x20000088

080072cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80072d0:	f7ff fff0 	bl	80072b4 <HAL_RCC_GetHCLKFreq>
 80072d4:	4602      	mov	r2, r0
 80072d6:	4b06      	ldr	r3, [pc, #24]	; (80072f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	0a1b      	lsrs	r3, r3, #8
 80072dc:	f003 0307 	and.w	r3, r3, #7
 80072e0:	4904      	ldr	r1, [pc, #16]	; (80072f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072e2:	5ccb      	ldrb	r3, [r1, r3]
 80072e4:	f003 031f 	and.w	r3, r3, #31
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40021000 	.word	0x40021000
 80072f4:	0800f298 	.word	0x0800f298

080072f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80072fc:	f7ff ffda 	bl	80072b4 <HAL_RCC_GetHCLKFreq>
 8007300:	4602      	mov	r2, r0
 8007302:	4b06      	ldr	r3, [pc, #24]	; (800731c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	0adb      	lsrs	r3, r3, #11
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	4904      	ldr	r1, [pc, #16]	; (8007320 <HAL_RCC_GetPCLK2Freq+0x28>)
 800730e:	5ccb      	ldrb	r3, [r1, r3]
 8007310:	f003 031f 	and.w	r3, r3, #31
 8007314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007318:	4618      	mov	r0, r3
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40021000 	.word	0x40021000
 8007320:	0800f298 	.word	0x0800f298

08007324 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	220f      	movs	r2, #15
 8007332:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007334:	4b12      	ldr	r3, [pc, #72]	; (8007380 <HAL_RCC_GetClockConfig+0x5c>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	f003 0203 	and.w	r2, r3, #3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007340:	4b0f      	ldr	r3, [pc, #60]	; (8007380 <HAL_RCC_GetClockConfig+0x5c>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800734c:	4b0c      	ldr	r3, [pc, #48]	; (8007380 <HAL_RCC_GetClockConfig+0x5c>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007358:	4b09      	ldr	r3, [pc, #36]	; (8007380 <HAL_RCC_GetClockConfig+0x5c>)
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	08db      	lsrs	r3, r3, #3
 800735e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007366:	4b07      	ldr	r3, [pc, #28]	; (8007384 <HAL_RCC_GetClockConfig+0x60>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 020f 	and.w	r2, r3, #15
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	601a      	str	r2, [r3, #0]
}
 8007372:	bf00      	nop
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40021000 	.word	0x40021000
 8007384:	40022000 	.word	0x40022000

08007388 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007394:	4b27      	ldr	r3, [pc, #156]	; (8007434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8007396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d003      	beq.n	80073a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073a0:	f7ff f8e4 	bl	800656c <HAL_PWREx_GetVoltageRange>
 80073a4:	6178      	str	r0, [r7, #20]
 80073a6:	e014      	b.n	80073d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80073a8:	4b22      	ldr	r3, [pc, #136]	; (8007434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80073aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ac:	4a21      	ldr	r2, [pc, #132]	; (8007434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80073ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073b2:	6593      	str	r3, [r2, #88]	; 0x58
 80073b4:	4b1f      	ldr	r3, [pc, #124]	; (8007434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80073b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80073c0:	f7ff f8d4 	bl	800656c <HAL_PWREx_GetVoltageRange>
 80073c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80073c6:	4b1b      	ldr	r3, [pc, #108]	; (8007434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80073c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ca:	4a1a      	ldr	r2, [pc, #104]	; (8007434 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80073cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073d8:	d10b      	bne.n	80073f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b80      	cmp	r3, #128	; 0x80
 80073de:	d913      	bls.n	8007408 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2ba0      	cmp	r3, #160	; 0xa0
 80073e4:	d902      	bls.n	80073ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80073e6:	2302      	movs	r3, #2
 80073e8:	613b      	str	r3, [r7, #16]
 80073ea:	e00d      	b.n	8007408 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073ec:	2301      	movs	r3, #1
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	e00a      	b.n	8007408 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2b7f      	cmp	r3, #127	; 0x7f
 80073f6:	d902      	bls.n	80073fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80073f8:	2302      	movs	r3, #2
 80073fa:	613b      	str	r3, [r7, #16]
 80073fc:	e004      	b.n	8007408 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2b70      	cmp	r3, #112	; 0x70
 8007402:	d101      	bne.n	8007408 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007404:	2301      	movs	r3, #1
 8007406:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007408:	4b0b      	ldr	r3, [pc, #44]	; (8007438 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f023 020f 	bic.w	r2, r3, #15
 8007410:	4909      	ldr	r1, [pc, #36]	; (8007438 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007418:	4b07      	ldr	r3, [pc, #28]	; (8007438 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	429a      	cmp	r2, r3
 8007424:	d001      	beq.n	800742a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e000      	b.n	800742c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40021000 	.word	0x40021000
 8007438:	40022000 	.word	0x40022000

0800743c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800743c:	b480      	push	{r7}
 800743e:	b087      	sub	sp, #28
 8007440:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007442:	4b2d      	ldr	r3, [pc, #180]	; (80074f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b03      	cmp	r3, #3
 8007450:	d00b      	beq.n	800746a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b03      	cmp	r3, #3
 8007456:	d825      	bhi.n	80074a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d008      	beq.n	8007470 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d11f      	bne.n	80074a4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007464:	4b25      	ldr	r3, [pc, #148]	; (80074fc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8007466:	613b      	str	r3, [r7, #16]
    break;
 8007468:	e01f      	b.n	80074aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800746a:	4b25      	ldr	r3, [pc, #148]	; (8007500 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800746c:	613b      	str	r3, [r7, #16]
    break;
 800746e:	e01c      	b.n	80074aa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007470:	4b21      	ldr	r3, [pc, #132]	; (80074f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d107      	bne.n	800748c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800747c:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800747e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007482:	0a1b      	lsrs	r3, r3, #8
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	e005      	b.n	8007498 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800748c:	4b1a      	ldr	r3, [pc, #104]	; (80074f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	091b      	lsrs	r3, r3, #4
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8007498:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074a0:	613b      	str	r3, [r7, #16]
    break;
 80074a2:	e002      	b.n	80074aa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	613b      	str	r3, [r7, #16]
    break;
 80074a8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074aa:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	091b      	lsrs	r3, r3, #4
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	3301      	adds	r3, #1
 80074b6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	0a1b      	lsrs	r3, r3, #8
 80074be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	fb03 f202 	mul.w	r2, r3, r2
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ce:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074d0:	4b09      	ldr	r3, [pc, #36]	; (80074f8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	0e5b      	lsrs	r3, r3, #25
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	3301      	adds	r3, #1
 80074dc:	005b      	lsls	r3, r3, #1
 80074de:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074e8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80074ea:	683b      	ldr	r3, [r7, #0]
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	40021000 	.word	0x40021000
 80074fc:	00f42400 	.word	0x00f42400
 8007500:	007a1200 	.word	0x007a1200
 8007504:	0800f2a0 	.word	0x0800f2a0

08007508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007510:	2300      	movs	r3, #0
 8007512:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007514:	2300      	movs	r3, #0
 8007516:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007520:	2b00      	cmp	r3, #0
 8007522:	d040      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007528:	2b80      	cmp	r3, #128	; 0x80
 800752a:	d02a      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800752c:	2b80      	cmp	r3, #128	; 0x80
 800752e:	d825      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007530:	2b60      	cmp	r3, #96	; 0x60
 8007532:	d026      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007534:	2b60      	cmp	r3, #96	; 0x60
 8007536:	d821      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	d006      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800753c:	2b40      	cmp	r3, #64	; 0x40
 800753e:	d81d      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d009      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007544:	2b20      	cmp	r3, #32
 8007546:	d010      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8007548:	e018      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800754a:	4b89      	ldr	r3, [pc, #548]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	4a88      	ldr	r2, [pc, #544]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007554:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007556:	e015      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	3304      	adds	r3, #4
 800755c:	2100      	movs	r1, #0
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fb02 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8007564:	4603      	mov	r3, r0
 8007566:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007568:	e00c      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3320      	adds	r3, #32
 800756e:	2100      	movs	r1, #0
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fbed 	bl	8007d50 <RCCEx_PLLSAI2_Config>
 8007576:	4603      	mov	r3, r0
 8007578:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800757a:	e003      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	74fb      	strb	r3, [r7, #19]
      break;
 8007580:	e000      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007584:	7cfb      	ldrb	r3, [r7, #19]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d10b      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800758a:	4b79      	ldr	r3, [pc, #484]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800758c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007590:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007598:	4975      	ldr	r1, [pc, #468]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80075a0:	e001      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a2:	7cfb      	ldrb	r3, [r7, #19]
 80075a4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d047      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075ba:	d030      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80075bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075c0:	d82a      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80075c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075c6:	d02a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80075c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075cc:	d824      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80075ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d2:	d008      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80075d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075d8:	d81e      	bhi.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80075de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075e2:	d010      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80075e4:	e018      	b.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80075e6:	4b62      	ldr	r3, [pc, #392]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	4a61      	ldr	r2, [pc, #388]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80075ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075f0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80075f2:	e015      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3304      	adds	r3, #4
 80075f8:	2100      	movs	r1, #0
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fab4 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007604:	e00c      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3320      	adds	r3, #32
 800760a:	2100      	movs	r1, #0
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fb9f 	bl	8007d50 <RCCEx_PLLSAI2_Config>
 8007612:	4603      	mov	r3, r0
 8007614:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007616:	e003      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	74fb      	strb	r3, [r7, #19]
      break;
 800761c:	e000      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800761e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007620:	7cfb      	ldrb	r3, [r7, #19]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10b      	bne.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007626:	4b52      	ldr	r3, [pc, #328]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800762c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	494e      	ldr	r1, [pc, #312]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800763c:	e001      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800763e:	7cfb      	ldrb	r3, [r7, #19]
 8007640:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 809f 	beq.w	800778e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007650:	2300      	movs	r3, #0
 8007652:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007654:	4b46      	ldr	r3, [pc, #280]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007664:	2300      	movs	r3, #0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00d      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800766a:	4b41      	ldr	r3, [pc, #260]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800766c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766e:	4a40      	ldr	r2, [pc, #256]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007674:	6593      	str	r3, [r2, #88]	; 0x58
 8007676:	4b3e      	ldr	r3, [pc, #248]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800767e:	60bb      	str	r3, [r7, #8]
 8007680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007682:	2301      	movs	r3, #1
 8007684:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007686:	4b3b      	ldr	r3, [pc, #236]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a3a      	ldr	r2, [pc, #232]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800768c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007690:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007692:	f7fc fd05 	bl	80040a0 <HAL_GetTick>
 8007696:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007698:	e009      	b.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800769a:	f7fc fd01 	bl	80040a0 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d902      	bls.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	74fb      	strb	r3, [r7, #19]
        break;
 80076ac:	e005      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80076ae:	4b31      	ldr	r3, [pc, #196]	; (8007774 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0ef      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80076ba:	7cfb      	ldrb	r3, [r7, #19]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d15b      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076c0:	4b2b      	ldr	r3, [pc, #172]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d01f      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d019      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076ea:	4b21      	ldr	r3, [pc, #132]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f0:	4a1f      	ldr	r2, [pc, #124]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076fa:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80076fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007700:	4a1b      	ldr	r2, [pc, #108]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800770a:	4a19      	ldr	r2, [pc, #100]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b00      	cmp	r3, #0
 800771a:	d016      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771c:	f7fc fcc0 	bl	80040a0 <HAL_GetTick>
 8007720:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007722:	e00b      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007724:	f7fc fcbc 	bl	80040a0 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007732:	4293      	cmp	r3, r2
 8007734:	d902      	bls.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	74fb      	strb	r3, [r7, #19]
            break;
 800773a:	e006      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800773c:	4b0c      	ldr	r3, [pc, #48]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800773e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0ec      	beq.n	8007724 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800774a:	7cfb      	ldrb	r3, [r7, #19]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10c      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007750:	4b07      	ldr	r3, [pc, #28]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007756:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007760:	4903      	ldr	r1, [pc, #12]	; (8007770 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007768:	e008      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800776a:	7cfb      	ldrb	r3, [r7, #19]
 800776c:	74bb      	strb	r3, [r7, #18]
 800776e:	e005      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007770:	40021000 	.word	0x40021000
 8007774:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007778:	7cfb      	ldrb	r3, [r7, #19]
 800777a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800777c:	7c7b      	ldrb	r3, [r7, #17]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d105      	bne.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007782:	4ba0      	ldr	r3, [pc, #640]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007786:	4a9f      	ldr	r2, [pc, #636]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007788:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800778c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800779a:	4b9a      	ldr	r3, [pc, #616]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800779c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a0:	f023 0203 	bic.w	r2, r3, #3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077a8:	4996      	ldr	r1, [pc, #600]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077bc:	4b91      	ldr	r3, [pc, #580]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077c2:	f023 020c 	bic.w	r2, r3, #12
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	498e      	ldr	r1, [pc, #568]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077de:	4b89      	ldr	r3, [pc, #548]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ec:	4985      	ldr	r1, [pc, #532]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0308 	and.w	r3, r3, #8
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007800:	4b80      	ldr	r3, [pc, #512]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007806:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780e:	497d      	ldr	r1, [pc, #500]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007810:	4313      	orrs	r3, r2
 8007812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0310 	and.w	r3, r3, #16
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007822:	4b78      	ldr	r3, [pc, #480]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007828:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007830:	4974      	ldr	r1, [pc, #464]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0320 	and.w	r3, r3, #32
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007844:	4b6f      	ldr	r3, [pc, #444]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800784a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007852:	496c      	ldr	r1, [pc, #432]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007854:	4313      	orrs	r3, r2
 8007856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007866:	4b67      	ldr	r3, [pc, #412]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007874:	4963      	ldr	r1, [pc, #396]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007876:	4313      	orrs	r3, r2
 8007878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00a      	beq.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007888:	4b5e      	ldr	r3, [pc, #376]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800788a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800788e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007896:	495b      	ldr	r1, [pc, #364]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00a      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078aa:	4b56      	ldr	r3, [pc, #344]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b8:	4952      	ldr	r1, [pc, #328]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00a      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078cc:	4b4d      	ldr	r3, [pc, #308]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078da:	494a      	ldr	r1, [pc, #296]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078ee:	4b45      	ldr	r3, [pc, #276]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fc:	4941      	ldr	r1, [pc, #260]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00a      	beq.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007910:	4b3c      	ldr	r3, [pc, #240]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007916:	f023 0203 	bic.w	r2, r3, #3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800791e:	4939      	ldr	r1, [pc, #228]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007920:	4313      	orrs	r3, r2
 8007922:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d028      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007932:	4b34      	ldr	r3, [pc, #208]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007938:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007940:	4930      	ldr	r1, [pc, #192]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007942:	4313      	orrs	r3, r2
 8007944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007950:	d106      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007952:	4b2c      	ldr	r3, [pc, #176]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	4a2b      	ldr	r2, [pc, #172]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800795c:	60d3      	str	r3, [r2, #12]
 800795e:	e011      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007968:	d10c      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3304      	adds	r3, #4
 800796e:	2101      	movs	r1, #1
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f8f9 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8007976:	4603      	mov	r3, r0
 8007978:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800797a:	7cfb      	ldrb	r3, [r7, #19]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007980:	7cfb      	ldrb	r3, [r7, #19]
 8007982:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d04d      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007998:	d108      	bne.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800799a:	4b1a      	ldr	r3, [pc, #104]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800799c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079a0:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80079aa:	e012      	b.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80079ac:	4b15      	ldr	r3, [pc, #84]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079b2:	4a14      	ldr	r2, [pc, #80]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80079bc:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ca:	490e      	ldr	r1, [pc, #56]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079da:	d106      	bne.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079dc:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	4a08      	ldr	r2, [pc, #32]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079e6:	60d3      	str	r3, [r2, #12]
 80079e8:	e020      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079f2:	d109      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079f4:	4b03      	ldr	r3, [pc, #12]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	4a02      	ldr	r2, [pc, #8]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80079fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079fe:	60d3      	str	r3, [r2, #12]
 8007a00:	e014      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007a02:	bf00      	nop
 8007a04:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a10:	d10c      	bne.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	3304      	adds	r3, #4
 8007a16:	2101      	movs	r1, #1
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 f8a5 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a22:	7cfb      	ldrb	r3, [r7, #19]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8007a28:	7cfb      	ldrb	r3, [r7, #19]
 8007a2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d028      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a38:	4b4a      	ldr	r3, [pc, #296]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a46:	4947      	ldr	r1, [pc, #284]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a56:	d106      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a58:	4b42      	ldr	r3, [pc, #264]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	4a41      	ldr	r2, [pc, #260]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a62:	60d3      	str	r3, [r2, #12]
 8007a64:	e011      	b.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a6e:	d10c      	bne.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3304      	adds	r3, #4
 8007a74:	2101      	movs	r1, #1
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f876 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a80:	7cfb      	ldrb	r3, [r7, #19]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8007a86:	7cfb      	ldrb	r3, [r7, #19]
 8007a88:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d01e      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a96:	4b33      	ldr	r3, [pc, #204]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa6:	492f      	ldr	r1, [pc, #188]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ab8:	d10c      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	3304      	adds	r3, #4
 8007abe:	2102      	movs	r1, #2
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f000 f851 	bl	8007b68 <RCCEx_PLLSAI1_Config>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007aca:	7cfb      	ldrb	r3, [r7, #19]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8007ad0:	7cfb      	ldrb	r3, [r7, #19]
 8007ad2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00b      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007ae0:	4b20      	ldr	r3, [pc, #128]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ae2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ae6:	f023 0204 	bic.w	r2, r3, #4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af0:	491c      	ldr	r1, [pc, #112]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007b04:	4b17      	ldr	r3, [pc, #92]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b0a:	f023 0218 	bic.w	r2, r3, #24
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b14:	4913      	ldr	r1, [pc, #76]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d017      	beq.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007b28:	4b0e      	ldr	r3, [pc, #56]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b38:	490a      	ldr	r1, [pc, #40]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b4a:	d105      	bne.n	8007b58 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b4c:	4b05      	ldr	r3, [pc, #20]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	4a04      	ldr	r2, [pc, #16]	; (8007b64 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007b58:	7cbb      	ldrb	r3, [r7, #18]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	40021000 	.word	0x40021000

08007b68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007b76:	4b72      	ldr	r3, [pc, #456]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00e      	beq.n	8007ba0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007b82:	4b6f      	ldr	r3, [pc, #444]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f003 0203 	and.w	r2, r3, #3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d103      	bne.n	8007b9a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
       ||
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d142      	bne.n	8007c20 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
 8007b9e:	e03f      	b.n	8007c20 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d018      	beq.n	8007bda <RCCEx_PLLSAI1_Config+0x72>
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d825      	bhi.n	8007bf8 <RCCEx_PLLSAI1_Config+0x90>
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d002      	beq.n	8007bb6 <RCCEx_PLLSAI1_Config+0x4e>
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d009      	beq.n	8007bc8 <RCCEx_PLLSAI1_Config+0x60>
 8007bb4:	e020      	b.n	8007bf8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007bb6:	4b62      	ldr	r3, [pc, #392]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d11d      	bne.n	8007bfe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bc6:	e01a      	b.n	8007bfe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007bc8:	4b5d      	ldr	r3, [pc, #372]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d116      	bne.n	8007c02 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007bd8:	e013      	b.n	8007c02 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007bda:	4b59      	ldr	r3, [pc, #356]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10f      	bne.n	8007c06 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007be6:	4b56      	ldr	r3, [pc, #344]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d109      	bne.n	8007c06 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007bf6:	e006      	b.n	8007c06 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8007bfc:	e004      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007bfe:	bf00      	nop
 8007c00:	e002      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007c02:	bf00      	nop
 8007c04:	e000      	b.n	8007c08 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007c06:	bf00      	nop
    }

    if(status == HAL_OK)
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d108      	bne.n	8007c20 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007c0e:	4b4c      	ldr	r3, [pc, #304]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f023 0203 	bic.w	r2, r3, #3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4949      	ldr	r1, [pc, #292]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f040 8086 	bne.w	8007d34 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007c28:	4b45      	ldr	r3, [pc, #276]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a44      	ldr	r2, [pc, #272]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c34:	f7fc fa34 	bl	80040a0 <HAL_GetTick>
 8007c38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c3a:	e009      	b.n	8007c50 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c3c:	f7fc fa30 	bl	80040a0 <HAL_GetTick>
 8007c40:	4602      	mov	r2, r0
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	1ad3      	subs	r3, r2, r3
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d902      	bls.n	8007c50 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	73fb      	strb	r3, [r7, #15]
        break;
 8007c4e:	e005      	b.n	8007c5c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007c50:	4b3b      	ldr	r3, [pc, #236]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1ef      	bne.n	8007c3c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d168      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d113      	bne.n	8007c90 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c68:	4b35      	ldr	r3, [pc, #212]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	4b35      	ldr	r3, [pc, #212]	; (8007d44 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007c6e:	4013      	ands	r3, r2
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	6892      	ldr	r2, [r2, #8]
 8007c74:	0211      	lsls	r1, r2, #8
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	68d2      	ldr	r2, [r2, #12]
 8007c7a:	06d2      	lsls	r2, r2, #27
 8007c7c:	4311      	orrs	r1, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6852      	ldr	r2, [r2, #4]
 8007c82:	3a01      	subs	r2, #1
 8007c84:	0112      	lsls	r2, r2, #4
 8007c86:	430a      	orrs	r2, r1
 8007c88:	492d      	ldr	r1, [pc, #180]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	610b      	str	r3, [r1, #16]
 8007c8e:	e02d      	b.n	8007cec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d115      	bne.n	8007cc2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007c96:	4b2a      	ldr	r3, [pc, #168]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007c98:	691a      	ldr	r2, [r3, #16]
 8007c9a:	4b2b      	ldr	r3, [pc, #172]	; (8007d48 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c9c:	4013      	ands	r3, r2
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6892      	ldr	r2, [r2, #8]
 8007ca2:	0211      	lsls	r1, r2, #8
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	6912      	ldr	r2, [r2, #16]
 8007ca8:	0852      	lsrs	r2, r2, #1
 8007caa:	3a01      	subs	r2, #1
 8007cac:	0552      	lsls	r2, r2, #21
 8007cae:	4311      	orrs	r1, r2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6852      	ldr	r2, [r2, #4]
 8007cb4:	3a01      	subs	r2, #1
 8007cb6:	0112      	lsls	r2, r2, #4
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	4921      	ldr	r1, [pc, #132]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	610b      	str	r3, [r1, #16]
 8007cc0:	e014      	b.n	8007cec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007cc2:	4b1f      	ldr	r3, [pc, #124]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6892      	ldr	r2, [r2, #8]
 8007cce:	0211      	lsls	r1, r2, #8
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	6952      	ldr	r2, [r2, #20]
 8007cd4:	0852      	lsrs	r2, r2, #1
 8007cd6:	3a01      	subs	r2, #1
 8007cd8:	0652      	lsls	r2, r2, #25
 8007cda:	4311      	orrs	r1, r2
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	6852      	ldr	r2, [r2, #4]
 8007ce0:	3a01      	subs	r2, #1
 8007ce2:	0112      	lsls	r2, r2, #4
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	4916      	ldr	r1, [pc, #88]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007cec:	4b14      	ldr	r3, [pc, #80]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a13      	ldr	r2, [pc, #76]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007cf2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cf6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf8:	f7fc f9d2 	bl	80040a0 <HAL_GetTick>
 8007cfc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007cfe:	e009      	b.n	8007d14 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007d00:	f7fc f9ce 	bl	80040a0 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d902      	bls.n	8007d14 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	73fb      	strb	r3, [r7, #15]
          break;
 8007d12:	e005      	b.n	8007d20 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d0ef      	beq.n	8007d00 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d106      	bne.n	8007d34 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007d26:	4b06      	ldr	r3, [pc, #24]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d28:	691a      	ldr	r2, [r3, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	4904      	ldr	r1, [pc, #16]	; (8007d40 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40021000 	.word	0x40021000
 8007d44:	07ff800f 	.word	0x07ff800f
 8007d48:	ff9f800f 	.word	0xff9f800f
 8007d4c:	f9ff800f 	.word	0xf9ff800f

08007d50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d5e:	4b72      	ldr	r3, [pc, #456]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00e      	beq.n	8007d88 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007d6a:	4b6f      	ldr	r3, [pc, #444]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	f003 0203 	and.w	r2, r3, #3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d103      	bne.n	8007d82 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d142      	bne.n	8007e08 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	73fb      	strb	r3, [r7, #15]
 8007d86:	e03f      	b.n	8007e08 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b03      	cmp	r3, #3
 8007d8e:	d018      	beq.n	8007dc2 <RCCEx_PLLSAI2_Config+0x72>
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d825      	bhi.n	8007de0 <RCCEx_PLLSAI2_Config+0x90>
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d002      	beq.n	8007d9e <RCCEx_PLLSAI2_Config+0x4e>
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d009      	beq.n	8007db0 <RCCEx_PLLSAI2_Config+0x60>
 8007d9c:	e020      	b.n	8007de0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007d9e:	4b62      	ldr	r3, [pc, #392]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0302 	and.w	r3, r3, #2
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d11d      	bne.n	8007de6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dae:	e01a      	b.n	8007de6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007db0:	4b5d      	ldr	r3, [pc, #372]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d116      	bne.n	8007dea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dc0:	e013      	b.n	8007dea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007dc2:	4b59      	ldr	r3, [pc, #356]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d10f      	bne.n	8007dee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007dce:	4b56      	ldr	r3, [pc, #344]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007dde:	e006      	b.n	8007dee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	73fb      	strb	r3, [r7, #15]
      break;
 8007de4:	e004      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007de6:	bf00      	nop
 8007de8:	e002      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dea:	bf00      	nop
 8007dec:	e000      	b.n	8007df0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007dee:	bf00      	nop
    }

    if(status == HAL_OK)
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d108      	bne.n	8007e08 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007df6:	4b4c      	ldr	r3, [pc, #304]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f023 0203 	bic.w	r2, r3, #3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4949      	ldr	r1, [pc, #292]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f040 8086 	bne.w	8007f1c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007e10:	4b45      	ldr	r3, [pc, #276]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a44      	ldr	r2, [pc, #272]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e1c:	f7fc f940 	bl	80040a0 <HAL_GetTick>
 8007e20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e22:	e009      	b.n	8007e38 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007e24:	f7fc f93c 	bl	80040a0 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d902      	bls.n	8007e38 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	73fb      	strb	r3, [r7, #15]
        break;
 8007e36:	e005      	b.n	8007e44 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007e38:	4b3b      	ldr	r3, [pc, #236]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1ef      	bne.n	8007e24 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d168      	bne.n	8007f1c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d113      	bne.n	8007e78 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e50:	4b35      	ldr	r3, [pc, #212]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e52:	695a      	ldr	r2, [r3, #20]
 8007e54:	4b35      	ldr	r3, [pc, #212]	; (8007f2c <RCCEx_PLLSAI2_Config+0x1dc>)
 8007e56:	4013      	ands	r3, r2
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	6892      	ldr	r2, [r2, #8]
 8007e5c:	0211      	lsls	r1, r2, #8
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	68d2      	ldr	r2, [r2, #12]
 8007e62:	06d2      	lsls	r2, r2, #27
 8007e64:	4311      	orrs	r1, r2
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	6852      	ldr	r2, [r2, #4]
 8007e6a:	3a01      	subs	r2, #1
 8007e6c:	0112      	lsls	r2, r2, #4
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	492d      	ldr	r1, [pc, #180]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	614b      	str	r3, [r1, #20]
 8007e76:	e02d      	b.n	8007ed4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d115      	bne.n	8007eaa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007e7e:	4b2a      	ldr	r3, [pc, #168]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007e80:	695a      	ldr	r2, [r3, #20]
 8007e82:	4b2b      	ldr	r3, [pc, #172]	; (8007f30 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007e84:	4013      	ands	r3, r2
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	6892      	ldr	r2, [r2, #8]
 8007e8a:	0211      	lsls	r1, r2, #8
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	6912      	ldr	r2, [r2, #16]
 8007e90:	0852      	lsrs	r2, r2, #1
 8007e92:	3a01      	subs	r2, #1
 8007e94:	0552      	lsls	r2, r2, #21
 8007e96:	4311      	orrs	r1, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6852      	ldr	r2, [r2, #4]
 8007e9c:	3a01      	subs	r2, #1
 8007e9e:	0112      	lsls	r2, r2, #4
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	4921      	ldr	r1, [pc, #132]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	614b      	str	r3, [r1, #20]
 8007ea8:	e014      	b.n	8007ed4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007eaa:	4b1f      	ldr	r3, [pc, #124]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eac:	695a      	ldr	r2, [r3, #20]
 8007eae:	4b21      	ldr	r3, [pc, #132]	; (8007f34 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6892      	ldr	r2, [r2, #8]
 8007eb6:	0211      	lsls	r1, r2, #8
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	6952      	ldr	r2, [r2, #20]
 8007ebc:	0852      	lsrs	r2, r2, #1
 8007ebe:	3a01      	subs	r2, #1
 8007ec0:	0652      	lsls	r2, r2, #25
 8007ec2:	4311      	orrs	r1, r2
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6852      	ldr	r2, [r2, #4]
 8007ec8:	3a01      	subs	r2, #1
 8007eca:	0112      	lsls	r2, r2, #4
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	4916      	ldr	r1, [pc, #88]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007ed4:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a13      	ldr	r2, [pc, #76]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee0:	f7fc f8de 	bl	80040a0 <HAL_GetTick>
 8007ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007ee6:	e009      	b.n	8007efc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007ee8:	f7fc f8da 	bl	80040a0 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d902      	bls.n	8007efc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8007efa:	e005      	b.n	8007f08 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0ef      	beq.n	8007ee8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d106      	bne.n	8007f1c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007f0e:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f10:	695a      	ldr	r2, [r3, #20]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	4904      	ldr	r1, [pc, #16]	; (8007f28 <RCCEx_PLLSAI2_Config+0x1d8>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	40021000 	.word	0x40021000
 8007f2c:	07ff800f 	.word	0x07ff800f
 8007f30:	ff9f800f 	.word	0xff9f800f
 8007f34:	f9ff800f 	.word	0xf9ff800f

08007f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e049      	b.n	8007fde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d106      	bne.n	8007f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f841 	bl	8007fe6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4619      	mov	r1, r3
 8007f76:	4610      	mov	r0, r2
 8007f78:	f000 f9da 	bl	8008330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007fe6:	b480      	push	{r7}
 8007fe8:	b083      	sub	sp, #12
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007fee:	bf00      	nop
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	d001      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e04f      	b.n	80080b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f042 0201 	orr.w	r2, r2, #1
 800802a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a23      	ldr	r2, [pc, #140]	; (80080c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01d      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803e:	d018      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1f      	ldr	r2, [pc, #124]	; (80080c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a1c      	ldr	r2, [pc, #112]	; (80080cc <HAL_TIM_Base_Start_IT+0xd0>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a1b      	ldr	r2, [pc, #108]	; (80080d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_TIM_Base_Start_IT+0x76>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a19      	ldr	r2, [pc, #100]	; (80080d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d115      	bne.n	800809e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	4b17      	ldr	r3, [pc, #92]	; (80080d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800807a:	4013      	ands	r3, r2
 800807c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b06      	cmp	r3, #6
 8008082:	d015      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800808a:	d011      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f042 0201 	orr.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809c:	e008      	b.n	80080b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	e000      	b.n	80080b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	40012c00 	.word	0x40012c00
 80080c4:	40000400 	.word	0x40000400
 80080c8:	40000800 	.word	0x40000800
 80080cc:	40000c00 	.word	0x40000c00
 80080d0:	40013400 	.word	0x40013400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	00010007 	.word	0x00010007

080080dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 0302 	and.w	r3, r3, #2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d020      	beq.n	8008140 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01b      	beq.n	8008140 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f06f 0202 	mvn.w	r2, #2
 8008110:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	f003 0303 	and.w	r3, r3, #3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f8e4 	bl	80082f4 <HAL_TIM_IC_CaptureCallback>
 800812c:	e005      	b.n	800813a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f8d6 	bl	80082e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f8e7 	bl	8008308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d020      	beq.n	800818c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d01b      	beq.n	800818c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0204 	mvn.w	r2, #4
 800815c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2202      	movs	r2, #2
 8008162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816e:	2b00      	cmp	r3, #0
 8008170:	d003      	beq.n	800817a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f8be 	bl	80082f4 <HAL_TIM_IC_CaptureCallback>
 8008178:	e005      	b.n	8008186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f8b0 	bl	80082e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f8c1 	bl	8008308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d020      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f003 0308 	and.w	r3, r3, #8
 800819c:	2b00      	cmp	r3, #0
 800819e:	d01b      	beq.n	80081d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f06f 0208 	mvn.w	r2, #8
 80081a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2204      	movs	r2, #4
 80081ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	69db      	ldr	r3, [r3, #28]
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f898 	bl	80082f4 <HAL_TIM_IC_CaptureCallback>
 80081c4:	e005      	b.n	80081d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f88a 	bl	80082e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f89b 	bl	8008308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f003 0310 	and.w	r3, r3, #16
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d020      	beq.n	8008224 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01b      	beq.n	8008224 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f06f 0210 	mvn.w	r2, #16
 80081f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2208      	movs	r2, #8
 80081fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f872 	bl	80082f4 <HAL_TIM_IC_CaptureCallback>
 8008210:	e005      	b.n	800821e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f864 	bl	80082e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f875 	bl	8008308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00c      	beq.n	8008248 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b00      	cmp	r3, #0
 8008236:	d007      	beq.n	8008248 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0201 	mvn.w	r2, #1
 8008240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f7fa fcfc 	bl	8002c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00c      	beq.n	800826c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f906 	bl	8008478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008272:	2b00      	cmp	r3, #0
 8008274:	d00c      	beq.n	8008290 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800827c:	2b00      	cmp	r3, #0
 800827e:	d007      	beq.n	8008290 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8fe 	bl	800848c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00c      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d007      	beq.n	80082b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f834 	bl	800831c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	f003 0320 	and.w	r3, r3, #32
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00c      	beq.n	80082d8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d007      	beq.n	80082d8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0220 	mvn.w	r2, #32
 80082d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f8c6 	bl	8008464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082d8:	bf00      	nop
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a40      	ldr	r2, [pc, #256]	; (8008444 <TIM_Base_SetConfig+0x114>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d013      	beq.n	8008370 <TIM_Base_SetConfig+0x40>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834e:	d00f      	beq.n	8008370 <TIM_Base_SetConfig+0x40>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	4a3d      	ldr	r2, [pc, #244]	; (8008448 <TIM_Base_SetConfig+0x118>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d00b      	beq.n	8008370 <TIM_Base_SetConfig+0x40>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a3c      	ldr	r2, [pc, #240]	; (800844c <TIM_Base_SetConfig+0x11c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d007      	beq.n	8008370 <TIM_Base_SetConfig+0x40>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	4a3b      	ldr	r2, [pc, #236]	; (8008450 <TIM_Base_SetConfig+0x120>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d003      	beq.n	8008370 <TIM_Base_SetConfig+0x40>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a3a      	ldr	r2, [pc, #232]	; (8008454 <TIM_Base_SetConfig+0x124>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d108      	bne.n	8008382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a2f      	ldr	r2, [pc, #188]	; (8008444 <TIM_Base_SetConfig+0x114>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d01f      	beq.n	80083ca <TIM_Base_SetConfig+0x9a>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008390:	d01b      	beq.n	80083ca <TIM_Base_SetConfig+0x9a>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	4a2c      	ldr	r2, [pc, #176]	; (8008448 <TIM_Base_SetConfig+0x118>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d017      	beq.n	80083ca <TIM_Base_SetConfig+0x9a>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a2b      	ldr	r2, [pc, #172]	; (800844c <TIM_Base_SetConfig+0x11c>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d013      	beq.n	80083ca <TIM_Base_SetConfig+0x9a>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a2a      	ldr	r2, [pc, #168]	; (8008450 <TIM_Base_SetConfig+0x120>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00f      	beq.n	80083ca <TIM_Base_SetConfig+0x9a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a29      	ldr	r2, [pc, #164]	; (8008454 <TIM_Base_SetConfig+0x124>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d00b      	beq.n	80083ca <TIM_Base_SetConfig+0x9a>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a28      	ldr	r2, [pc, #160]	; (8008458 <TIM_Base_SetConfig+0x128>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d007      	beq.n	80083ca <TIM_Base_SetConfig+0x9a>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a27      	ldr	r2, [pc, #156]	; (800845c <TIM_Base_SetConfig+0x12c>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d003      	beq.n	80083ca <TIM_Base_SetConfig+0x9a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a26      	ldr	r2, [pc, #152]	; (8008460 <TIM_Base_SetConfig+0x130>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d108      	bne.n	80083dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	68db      	ldr	r3, [r3, #12]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4313      	orrs	r3, r2
 80083da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a10      	ldr	r2, [pc, #64]	; (8008444 <TIM_Base_SetConfig+0x114>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d00f      	beq.n	8008428 <TIM_Base_SetConfig+0xf8>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	4a12      	ldr	r2, [pc, #72]	; (8008454 <TIM_Base_SetConfig+0x124>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d00b      	beq.n	8008428 <TIM_Base_SetConfig+0xf8>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4a11      	ldr	r2, [pc, #68]	; (8008458 <TIM_Base_SetConfig+0x128>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d007      	beq.n	8008428 <TIM_Base_SetConfig+0xf8>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	4a10      	ldr	r2, [pc, #64]	; (800845c <TIM_Base_SetConfig+0x12c>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d003      	beq.n	8008428 <TIM_Base_SetConfig+0xf8>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4a0f      	ldr	r2, [pc, #60]	; (8008460 <TIM_Base_SetConfig+0x130>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d103      	bne.n	8008430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	691a      	ldr	r2, [r3, #16]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	615a      	str	r2, [r3, #20]
}
 8008436:	bf00      	nop
 8008438:	3714      	adds	r7, #20
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	40012c00 	.word	0x40012c00
 8008448:	40000400 	.word	0x40000400
 800844c:	40000800 	.word	0x40000800
 8008450:	40000c00 	.word	0x40000c00
 8008454:	40013400 	.word	0x40013400
 8008458:	40014000 	.word	0x40014000
 800845c:	40014400 	.word	0x40014400
 8008460:	40014800 	.word	0x40014800

08008464 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800846c:	bf00      	nop
 800846e:	370c      	adds	r7, #12
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e042      	b.n	8008538 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d106      	bne.n	80084ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fb fbbb 	bl	8003c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2224      	movs	r2, #36	; 0x24
 80084ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0201 	bic.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fbb4 	bl	8008c58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f8b5 	bl	8008660 <UART_SetConfig>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d101      	bne.n	8008500 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	e01b      	b.n	8008538 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800850e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800851e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fc33 	bl	8008d9c <UART_CheckIdleState>
 8008536:	4603      	mov	r3, r0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3708      	adds	r7, #8
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b08a      	sub	sp, #40	; 0x28
 8008544:	af02      	add	r7, sp, #8
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	4613      	mov	r3, r2
 800854e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008556:	2b20      	cmp	r3, #32
 8008558:	d17c      	bne.n	8008654 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <HAL_UART_Transmit+0x26>
 8008560:	88fb      	ldrh	r3, [r7, #6]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e075      	b.n	8008656 <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2221      	movs	r2, #33	; 0x21
 8008576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800857a:	f7fb fd91 	bl	80040a0 <HAL_GetTick>
 800857e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	88fa      	ldrh	r2, [r7, #6]
 8008584:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	88fa      	ldrh	r2, [r7, #6]
 800858c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008598:	d108      	bne.n	80085ac <HAL_UART_Transmit+0x6c>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	691b      	ldr	r3, [r3, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d104      	bne.n	80085ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	61bb      	str	r3, [r7, #24]
 80085aa:	e003      	b.n	80085b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085b0:	2300      	movs	r3, #0
 80085b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085b4:	e031      	b.n	800861a <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	2200      	movs	r2, #0
 80085be:	2180      	movs	r1, #128	; 0x80
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fc95 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2220      	movs	r2, #32
 80085d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e03e      	b.n	8008656 <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10b      	bne.n	80085f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	881a      	ldrh	r2, [r3, #0]
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085ea:	b292      	uxth	r2, r2
 80085ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	3302      	adds	r3, #2
 80085f2:	61bb      	str	r3, [r7, #24]
 80085f4:	e008      	b.n	8008608 <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	781a      	ldrb	r2, [r3, #0]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	b292      	uxth	r2, r2
 8008600:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	3301      	adds	r3, #1
 8008606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800860e:	b29b      	uxth	r3, r3
 8008610:	3b01      	subs	r3, #1
 8008612:	b29a      	uxth	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1c7      	bne.n	80085b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2200      	movs	r2, #0
 800862e:	2140      	movs	r1, #64	; 0x40
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 fc5d 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2220      	movs	r2, #32
 8008640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e006      	b.n	8008656 <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2220      	movs	r2, #32
 800864c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008650:	2300      	movs	r3, #0
 8008652:	e000      	b.n	8008656 <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008654:	2302      	movs	r3, #2
  }
}
 8008656:	4618      	mov	r0, r3
 8008658:	3720      	adds	r7, #32
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
	...

08008660 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008664:	b08c      	sub	sp, #48	; 0x30
 8008666:	af00      	add	r7, sp, #0
 8008668:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	691b      	ldr	r3, [r3, #16]
 8008678:	431a      	orrs	r2, r3
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	695b      	ldr	r3, [r3, #20]
 800867e:	431a      	orrs	r2, r3
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	4313      	orrs	r3, r2
 8008686:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	4baa      	ldr	r3, [pc, #680]	; (8008938 <UART_SetConfig+0x2d8>)
 8008690:	4013      	ands	r3, r2
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	6812      	ldr	r2, [r2, #0]
 8008696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008698:	430b      	orrs	r3, r1
 800869a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	68da      	ldr	r2, [r3, #12]
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a9f      	ldr	r2, [pc, #636]	; (800893c <UART_SetConfig+0x2dc>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d004      	beq.n	80086cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086c8:	4313      	orrs	r3, r2
 80086ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80086d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80086da:	697a      	ldr	r2, [r7, #20]
 80086dc:	6812      	ldr	r2, [r2, #0]
 80086de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086e0:	430b      	orrs	r3, r1
 80086e2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ea:	f023 010f 	bic.w	r1, r3, #15
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	430a      	orrs	r2, r1
 80086f8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a90      	ldr	r2, [pc, #576]	; (8008940 <UART_SetConfig+0x2e0>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d125      	bne.n	8008750 <UART_SetConfig+0xf0>
 8008704:	4b8f      	ldr	r3, [pc, #572]	; (8008944 <UART_SetConfig+0x2e4>)
 8008706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800870a:	f003 0303 	and.w	r3, r3, #3
 800870e:	2b03      	cmp	r3, #3
 8008710:	d81a      	bhi.n	8008748 <UART_SetConfig+0xe8>
 8008712:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <UART_SetConfig+0xb8>)
 8008714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008718:	08008729 	.word	0x08008729
 800871c:	08008739 	.word	0x08008739
 8008720:	08008731 	.word	0x08008731
 8008724:	08008741 	.word	0x08008741
 8008728:	2301      	movs	r3, #1
 800872a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872e:	e116      	b.n	800895e <UART_SetConfig+0x2fe>
 8008730:	2302      	movs	r3, #2
 8008732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008736:	e112      	b.n	800895e <UART_SetConfig+0x2fe>
 8008738:	2304      	movs	r3, #4
 800873a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800873e:	e10e      	b.n	800895e <UART_SetConfig+0x2fe>
 8008740:	2308      	movs	r3, #8
 8008742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008746:	e10a      	b.n	800895e <UART_SetConfig+0x2fe>
 8008748:	2310      	movs	r3, #16
 800874a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800874e:	e106      	b.n	800895e <UART_SetConfig+0x2fe>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a7c      	ldr	r2, [pc, #496]	; (8008948 <UART_SetConfig+0x2e8>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d138      	bne.n	80087cc <UART_SetConfig+0x16c>
 800875a:	4b7a      	ldr	r3, [pc, #488]	; (8008944 <UART_SetConfig+0x2e4>)
 800875c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008760:	f003 030c 	and.w	r3, r3, #12
 8008764:	2b0c      	cmp	r3, #12
 8008766:	d82d      	bhi.n	80087c4 <UART_SetConfig+0x164>
 8008768:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <UART_SetConfig+0x110>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	080087a5 	.word	0x080087a5
 8008774:	080087c5 	.word	0x080087c5
 8008778:	080087c5 	.word	0x080087c5
 800877c:	080087c5 	.word	0x080087c5
 8008780:	080087b5 	.word	0x080087b5
 8008784:	080087c5 	.word	0x080087c5
 8008788:	080087c5 	.word	0x080087c5
 800878c:	080087c5 	.word	0x080087c5
 8008790:	080087ad 	.word	0x080087ad
 8008794:	080087c5 	.word	0x080087c5
 8008798:	080087c5 	.word	0x080087c5
 800879c:	080087c5 	.word	0x080087c5
 80087a0:	080087bd 	.word	0x080087bd
 80087a4:	2300      	movs	r3, #0
 80087a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087aa:	e0d8      	b.n	800895e <UART_SetConfig+0x2fe>
 80087ac:	2302      	movs	r3, #2
 80087ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087b2:	e0d4      	b.n	800895e <UART_SetConfig+0x2fe>
 80087b4:	2304      	movs	r3, #4
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ba:	e0d0      	b.n	800895e <UART_SetConfig+0x2fe>
 80087bc:	2308      	movs	r3, #8
 80087be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087c2:	e0cc      	b.n	800895e <UART_SetConfig+0x2fe>
 80087c4:	2310      	movs	r3, #16
 80087c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ca:	e0c8      	b.n	800895e <UART_SetConfig+0x2fe>
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a5e      	ldr	r2, [pc, #376]	; (800894c <UART_SetConfig+0x2ec>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d125      	bne.n	8008822 <UART_SetConfig+0x1c2>
 80087d6:	4b5b      	ldr	r3, [pc, #364]	; (8008944 <UART_SetConfig+0x2e4>)
 80087d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80087e0:	2b30      	cmp	r3, #48	; 0x30
 80087e2:	d016      	beq.n	8008812 <UART_SetConfig+0x1b2>
 80087e4:	2b30      	cmp	r3, #48	; 0x30
 80087e6:	d818      	bhi.n	800881a <UART_SetConfig+0x1ba>
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	d00a      	beq.n	8008802 <UART_SetConfig+0x1a2>
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	d814      	bhi.n	800881a <UART_SetConfig+0x1ba>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <UART_SetConfig+0x19a>
 80087f4:	2b10      	cmp	r3, #16
 80087f6:	d008      	beq.n	800880a <UART_SetConfig+0x1aa>
 80087f8:	e00f      	b.n	800881a <UART_SetConfig+0x1ba>
 80087fa:	2300      	movs	r3, #0
 80087fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008800:	e0ad      	b.n	800895e <UART_SetConfig+0x2fe>
 8008802:	2302      	movs	r3, #2
 8008804:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008808:	e0a9      	b.n	800895e <UART_SetConfig+0x2fe>
 800880a:	2304      	movs	r3, #4
 800880c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008810:	e0a5      	b.n	800895e <UART_SetConfig+0x2fe>
 8008812:	2308      	movs	r3, #8
 8008814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008818:	e0a1      	b.n	800895e <UART_SetConfig+0x2fe>
 800881a:	2310      	movs	r3, #16
 800881c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008820:	e09d      	b.n	800895e <UART_SetConfig+0x2fe>
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a4a      	ldr	r2, [pc, #296]	; (8008950 <UART_SetConfig+0x2f0>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d125      	bne.n	8008878 <UART_SetConfig+0x218>
 800882c:	4b45      	ldr	r3, [pc, #276]	; (8008944 <UART_SetConfig+0x2e4>)
 800882e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008832:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008836:	2bc0      	cmp	r3, #192	; 0xc0
 8008838:	d016      	beq.n	8008868 <UART_SetConfig+0x208>
 800883a:	2bc0      	cmp	r3, #192	; 0xc0
 800883c:	d818      	bhi.n	8008870 <UART_SetConfig+0x210>
 800883e:	2b80      	cmp	r3, #128	; 0x80
 8008840:	d00a      	beq.n	8008858 <UART_SetConfig+0x1f8>
 8008842:	2b80      	cmp	r3, #128	; 0x80
 8008844:	d814      	bhi.n	8008870 <UART_SetConfig+0x210>
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <UART_SetConfig+0x1f0>
 800884a:	2b40      	cmp	r3, #64	; 0x40
 800884c:	d008      	beq.n	8008860 <UART_SetConfig+0x200>
 800884e:	e00f      	b.n	8008870 <UART_SetConfig+0x210>
 8008850:	2300      	movs	r3, #0
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008856:	e082      	b.n	800895e <UART_SetConfig+0x2fe>
 8008858:	2302      	movs	r3, #2
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885e:	e07e      	b.n	800895e <UART_SetConfig+0x2fe>
 8008860:	2304      	movs	r3, #4
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008866:	e07a      	b.n	800895e <UART_SetConfig+0x2fe>
 8008868:	2308      	movs	r3, #8
 800886a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800886e:	e076      	b.n	800895e <UART_SetConfig+0x2fe>
 8008870:	2310      	movs	r3, #16
 8008872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008876:	e072      	b.n	800895e <UART_SetConfig+0x2fe>
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a35      	ldr	r2, [pc, #212]	; (8008954 <UART_SetConfig+0x2f4>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d12a      	bne.n	80088d8 <UART_SetConfig+0x278>
 8008882:	4b30      	ldr	r3, [pc, #192]	; (8008944 <UART_SetConfig+0x2e4>)
 8008884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008888:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800888c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008890:	d01a      	beq.n	80088c8 <UART_SetConfig+0x268>
 8008892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008896:	d81b      	bhi.n	80088d0 <UART_SetConfig+0x270>
 8008898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800889c:	d00c      	beq.n	80088b8 <UART_SetConfig+0x258>
 800889e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088a2:	d815      	bhi.n	80088d0 <UART_SetConfig+0x270>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d003      	beq.n	80088b0 <UART_SetConfig+0x250>
 80088a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ac:	d008      	beq.n	80088c0 <UART_SetConfig+0x260>
 80088ae:	e00f      	b.n	80088d0 <UART_SetConfig+0x270>
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088b6:	e052      	b.n	800895e <UART_SetConfig+0x2fe>
 80088b8:	2302      	movs	r3, #2
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088be:	e04e      	b.n	800895e <UART_SetConfig+0x2fe>
 80088c0:	2304      	movs	r3, #4
 80088c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088c6:	e04a      	b.n	800895e <UART_SetConfig+0x2fe>
 80088c8:	2308      	movs	r3, #8
 80088ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088ce:	e046      	b.n	800895e <UART_SetConfig+0x2fe>
 80088d0:	2310      	movs	r3, #16
 80088d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80088d6:	e042      	b.n	800895e <UART_SetConfig+0x2fe>
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a17      	ldr	r2, [pc, #92]	; (800893c <UART_SetConfig+0x2dc>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d13a      	bne.n	8008958 <UART_SetConfig+0x2f8>
 80088e2:	4b18      	ldr	r3, [pc, #96]	; (8008944 <UART_SetConfig+0x2e4>)
 80088e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088f0:	d01a      	beq.n	8008928 <UART_SetConfig+0x2c8>
 80088f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088f6:	d81b      	bhi.n	8008930 <UART_SetConfig+0x2d0>
 80088f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088fc:	d00c      	beq.n	8008918 <UART_SetConfig+0x2b8>
 80088fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008902:	d815      	bhi.n	8008930 <UART_SetConfig+0x2d0>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <UART_SetConfig+0x2b0>
 8008908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800890c:	d008      	beq.n	8008920 <UART_SetConfig+0x2c0>
 800890e:	e00f      	b.n	8008930 <UART_SetConfig+0x2d0>
 8008910:	2300      	movs	r3, #0
 8008912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008916:	e022      	b.n	800895e <UART_SetConfig+0x2fe>
 8008918:	2302      	movs	r3, #2
 800891a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800891e:	e01e      	b.n	800895e <UART_SetConfig+0x2fe>
 8008920:	2304      	movs	r3, #4
 8008922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008926:	e01a      	b.n	800895e <UART_SetConfig+0x2fe>
 8008928:	2308      	movs	r3, #8
 800892a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800892e:	e016      	b.n	800895e <UART_SetConfig+0x2fe>
 8008930:	2310      	movs	r3, #16
 8008932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008936:	e012      	b.n	800895e <UART_SetConfig+0x2fe>
 8008938:	cfff69f3 	.word	0xcfff69f3
 800893c:	40008000 	.word	0x40008000
 8008940:	40013800 	.word	0x40013800
 8008944:	40021000 	.word	0x40021000
 8008948:	40004400 	.word	0x40004400
 800894c:	40004800 	.word	0x40004800
 8008950:	40004c00 	.word	0x40004c00
 8008954:	40005000 	.word	0x40005000
 8008958:	2310      	movs	r3, #16
 800895a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4aae      	ldr	r2, [pc, #696]	; (8008c1c <UART_SetConfig+0x5bc>)
 8008964:	4293      	cmp	r3, r2
 8008966:	f040 8097 	bne.w	8008a98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800896a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800896e:	2b08      	cmp	r3, #8
 8008970:	d823      	bhi.n	80089ba <UART_SetConfig+0x35a>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <UART_SetConfig+0x318>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	0800899d 	.word	0x0800899d
 800897c:	080089bb 	.word	0x080089bb
 8008980:	080089a5 	.word	0x080089a5
 8008984:	080089bb 	.word	0x080089bb
 8008988:	080089ab 	.word	0x080089ab
 800898c:	080089bb 	.word	0x080089bb
 8008990:	080089bb 	.word	0x080089bb
 8008994:	080089bb 	.word	0x080089bb
 8008998:	080089b3 	.word	0x080089b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800899c:	f7fe fc96 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
 80089a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089a2:	e010      	b.n	80089c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089a4:	4b9e      	ldr	r3, [pc, #632]	; (8008c20 <UART_SetConfig+0x5c0>)
 80089a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089a8:	e00d      	b.n	80089c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089aa:	f7fe fbf7 	bl	800719c <HAL_RCC_GetSysClockFreq>
 80089ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089b0:	e009      	b.n	80089c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089b8:	e005      	b.n	80089c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80089c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 8130 	beq.w	8008c2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089d2:	4a94      	ldr	r2, [pc, #592]	; (8008c24 <UART_SetConfig+0x5c4>)
 80089d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d8:	461a      	mov	r2, r3
 80089da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	4613      	mov	r3, r2
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	4413      	add	r3, r2
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d305      	bcc.n	80089fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089f8:	69ba      	ldr	r2, [r7, #24]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d903      	bls.n	8008a06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a04:	e113      	b.n	8008c2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a08:	2200      	movs	r2, #0
 8008a0a:	60bb      	str	r3, [r7, #8]
 8008a0c:	60fa      	str	r2, [r7, #12]
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a12:	4a84      	ldr	r2, [pc, #528]	; (8008c24 <UART_SetConfig+0x5c4>)
 8008a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	603b      	str	r3, [r7, #0]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a28:	f7f8 f946 	bl	8000cb8 <__aeabi_uldivmod>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4610      	mov	r0, r2
 8008a32:	4619      	mov	r1, r3
 8008a34:	f04f 0200 	mov.w	r2, #0
 8008a38:	f04f 0300 	mov.w	r3, #0
 8008a3c:	020b      	lsls	r3, r1, #8
 8008a3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a42:	0202      	lsls	r2, r0, #8
 8008a44:	6979      	ldr	r1, [r7, #20]
 8008a46:	6849      	ldr	r1, [r1, #4]
 8008a48:	0849      	lsrs	r1, r1, #1
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	4605      	mov	r5, r0
 8008a50:	eb12 0804 	adds.w	r8, r2, r4
 8008a54:	eb43 0905 	adc.w	r9, r3, r5
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	469a      	mov	sl, r3
 8008a60:	4693      	mov	fp, r2
 8008a62:	4652      	mov	r2, sl
 8008a64:	465b      	mov	r3, fp
 8008a66:	4640      	mov	r0, r8
 8008a68:	4649      	mov	r1, r9
 8008a6a:	f7f8 f925 	bl	8000cb8 <__aeabi_uldivmod>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4613      	mov	r3, r2
 8008a74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a7c:	d308      	bcc.n	8008a90 <UART_SetConfig+0x430>
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a84:	d204      	bcs.n	8008a90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6a3a      	ldr	r2, [r7, #32]
 8008a8c:	60da      	str	r2, [r3, #12]
 8008a8e:	e0ce      	b.n	8008c2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a96:	e0ca      	b.n	8008c2e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	69db      	ldr	r3, [r3, #28]
 8008a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aa0:	d166      	bne.n	8008b70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008aa6:	2b08      	cmp	r3, #8
 8008aa8:	d827      	bhi.n	8008afa <UART_SetConfig+0x49a>
 8008aaa:	a201      	add	r2, pc, #4	; (adr r2, 8008ab0 <UART_SetConfig+0x450>)
 8008aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab0:	08008ad5 	.word	0x08008ad5
 8008ab4:	08008add 	.word	0x08008add
 8008ab8:	08008ae5 	.word	0x08008ae5
 8008abc:	08008afb 	.word	0x08008afb
 8008ac0:	08008aeb 	.word	0x08008aeb
 8008ac4:	08008afb 	.word	0x08008afb
 8008ac8:	08008afb 	.word	0x08008afb
 8008acc:	08008afb 	.word	0x08008afb
 8008ad0:	08008af3 	.word	0x08008af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ad4:	f7fe fbfa 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
 8008ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ada:	e014      	b.n	8008b06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008adc:	f7fe fc0c 	bl	80072f8 <HAL_RCC_GetPCLK2Freq>
 8008ae0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ae2:	e010      	b.n	8008b06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ae4:	4b4e      	ldr	r3, [pc, #312]	; (8008c20 <UART_SetConfig+0x5c0>)
 8008ae6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ae8:	e00d      	b.n	8008b06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aea:	f7fe fb57 	bl	800719c <HAL_RCC_GetSysClockFreq>
 8008aee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008af0:	e009      	b.n	8008b06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008af6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008af8:	e005      	b.n	8008b06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008b04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f000 8090 	beq.w	8008c2e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b12:	4a44      	ldr	r2, [pc, #272]	; (8008c24 <UART_SetConfig+0x5c4>)
 8008b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b20:	005a      	lsls	r2, r3, #1
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	085b      	lsrs	r3, r3, #1
 8008b28:	441a      	add	r2, r3
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b32:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	2b0f      	cmp	r3, #15
 8008b38:	d916      	bls.n	8008b68 <UART_SetConfig+0x508>
 8008b3a:	6a3b      	ldr	r3, [r7, #32]
 8008b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b40:	d212      	bcs.n	8008b68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	f023 030f 	bic.w	r3, r3, #15
 8008b4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	085b      	lsrs	r3, r3, #1
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f003 0307 	and.w	r3, r3, #7
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	8bfb      	ldrh	r3, [r7, #30]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	8bfa      	ldrh	r2, [r7, #30]
 8008b64:	60da      	str	r2, [r3, #12]
 8008b66:	e062      	b.n	8008c2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008b6e:	e05e      	b.n	8008c2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008b74:	2b08      	cmp	r3, #8
 8008b76:	d828      	bhi.n	8008bca <UART_SetConfig+0x56a>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <UART_SetConfig+0x520>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008ba5 	.word	0x08008ba5
 8008b84:	08008bad 	.word	0x08008bad
 8008b88:	08008bb5 	.word	0x08008bb5
 8008b8c:	08008bcb 	.word	0x08008bcb
 8008b90:	08008bbb 	.word	0x08008bbb
 8008b94:	08008bcb 	.word	0x08008bcb
 8008b98:	08008bcb 	.word	0x08008bcb
 8008b9c:	08008bcb 	.word	0x08008bcb
 8008ba0:	08008bc3 	.word	0x08008bc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba4:	f7fe fb92 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
 8008ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008baa:	e014      	b.n	8008bd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bac:	f7fe fba4 	bl	80072f8 <HAL_RCC_GetPCLK2Freq>
 8008bb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bb2:	e010      	b.n	8008bd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bb4:	4b1a      	ldr	r3, [pc, #104]	; (8008c20 <UART_SetConfig+0x5c0>)
 8008bb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bb8:	e00d      	b.n	8008bd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bba:	f7fe faef 	bl	800719c <HAL_RCC_GetSysClockFreq>
 8008bbe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008bc0:	e009      	b.n	8008bd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008bc8:	e005      	b.n	8008bd6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008bd4:	bf00      	nop
    }

    if (pclk != 0U)
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d028      	beq.n	8008c2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be0:	4a10      	ldr	r2, [pc, #64]	; (8008c24 <UART_SetConfig+0x5c4>)
 8008be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be6:	461a      	mov	r2, r3
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	085b      	lsrs	r3, r3, #1
 8008bf4:	441a      	add	r2, r3
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfe:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	2b0f      	cmp	r3, #15
 8008c04:	d910      	bls.n	8008c28 <UART_SetConfig+0x5c8>
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c0c:	d20c      	bcs.n	8008c28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c0e:	6a3b      	ldr	r3, [r7, #32]
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60da      	str	r2, [r3, #12]
 8008c18:	e009      	b.n	8008c2e <UART_SetConfig+0x5ce>
 8008c1a:	bf00      	nop
 8008c1c:	40008000 	.word	0x40008000
 8008c20:	00f42400 	.word	0x00f42400
 8008c24:	0800f2d0 	.word	0x0800f2d0
      }
      else
      {
        ret = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2201      	movs	r2, #1
 8008c32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2200      	movs	r2, #0
 8008c42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	2200      	movs	r2, #0
 8008c48:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008c4a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3730      	adds	r7, #48	; 0x30
 8008c52:	46bd      	mov	sp, r7
 8008c54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	f003 0308 	and.w	r3, r3, #8
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00a      	beq.n	8008c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	430a      	orrs	r2, r1
 8008c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00a      	beq.n	8008ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00a      	beq.n	8008cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cca:	f003 0304 	and.w	r3, r3, #4
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00a      	beq.n	8008ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	430a      	orrs	r2, r1
 8008ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cec:	f003 0310 	and.w	r3, r3, #16
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00a      	beq.n	8008d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	430a      	orrs	r2, r1
 8008d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	f003 0320 	and.w	r3, r3, #32
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d00a      	beq.n	8008d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	430a      	orrs	r2, r1
 8008d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01a      	beq.n	8008d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	430a      	orrs	r2, r1
 8008d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d56:	d10a      	bne.n	8008d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	430a      	orrs	r2, r1
 8008d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00a      	beq.n	8008d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	605a      	str	r2, [r3, #4]
  }
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b098      	sub	sp, #96	; 0x60
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008dac:	f7fb f978 	bl	80040a0 <HAL_GetTick>
 8008db0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d12f      	bne.n	8008e20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f88e 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d022      	beq.n	8008e20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dee:	653b      	str	r3, [r7, #80]	; 0x50
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df8:	647b      	str	r3, [r7, #68]	; 0x44
 8008dfa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e00:	e841 2300 	strex	r3, r2, [r1]
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d1e6      	bne.n	8008dda <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2220      	movs	r2, #32
 8008e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e063      	b.n	8008ee8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0304 	and.w	r3, r3, #4
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d149      	bne.n	8008ec2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e32:	9300      	str	r3, [sp, #0]
 8008e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e36:	2200      	movs	r2, #0
 8008e38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 f857 	bl	8008ef0 <UART_WaitOnFlagUntilTimeout>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d03c      	beq.n	8008ec2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	e853 3f00 	ldrex	r3, [r3]
 8008e54:	623b      	str	r3, [r7, #32]
   return(result);
 8008e56:	6a3b      	ldr	r3, [r7, #32]
 8008e58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e66:	633b      	str	r3, [r7, #48]	; 0x30
 8008e68:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e6e:	e841 2300 	strex	r3, r2, [r1]
 8008e72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1e6      	bne.n	8008e48 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3308      	adds	r3, #8
 8008e80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	e853 3f00 	ldrex	r3, [r3]
 8008e88:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f023 0301 	bic.w	r3, r3, #1
 8008e90:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3308      	adds	r3, #8
 8008e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e9a:	61fa      	str	r2, [r7, #28]
 8008e9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	69b9      	ldr	r1, [r7, #24]
 8008ea0:	69fa      	ldr	r2, [r7, #28]
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e5      	bne.n	8008e7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	e012      	b.n	8008ee8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3758      	adds	r7, #88	; 0x58
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	603b      	str	r3, [r7, #0]
 8008efc:	4613      	mov	r3, r2
 8008efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f00:	e049      	b.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f08:	d045      	beq.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f0a:	f7fb f8c9 	bl	80040a0 <HAL_GetTick>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d302      	bcc.n	8008f20 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d101      	bne.n	8008f24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e048      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0304 	and.w	r3, r3, #4
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d031      	beq.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f003 0308 	and.w	r3, r3, #8
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d110      	bne.n	8008f62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2208      	movs	r2, #8
 8008f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f48:	68f8      	ldr	r0, [r7, #12]
 8008f4a:	f000 f838 	bl	8008fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2208      	movs	r2, #8
 8008f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e029      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	69db      	ldr	r3, [r3, #28]
 8008f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f70:	d111      	bne.n	8008f96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 f81e 	bl	8008fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e00f      	b.n	8008fb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69da      	ldr	r2, [r3, #28]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	bf0c      	ite	eq
 8008fa6:	2301      	moveq	r3, #1
 8008fa8:	2300      	movne	r3, #0
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	79fb      	ldrb	r3, [r7, #7]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d0a6      	beq.n	8008f02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b095      	sub	sp, #84	; 0x54
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8008fe6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fec:	e841 2300 	strex	r3, r2, [r1]
 8008ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e6      	bne.n	8008fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3308      	adds	r3, #8
 8008ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	61fb      	str	r3, [r7, #28]
   return(result);
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800900e:	f023 0301 	bic.w	r3, r3, #1
 8009012:	64bb      	str	r3, [r7, #72]	; 0x48
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3308      	adds	r3, #8
 800901a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800901c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800901e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e3      	bne.n	8008ff8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009034:	2b01      	cmp	r3, #1
 8009036:	d118      	bne.n	800906a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	60bb      	str	r3, [r7, #8]
   return(result);
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f023 0310 	bic.w	r3, r3, #16
 800904c:	647b      	str	r3, [r7, #68]	; 0x44
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009056:	61bb      	str	r3, [r7, #24]
 8009058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6979      	ldr	r1, [r7, #20]
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	613b      	str	r3, [r7, #16]
   return(result);
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e6      	bne.n	8009038 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800907e:	bf00      	nop
 8009080:	3754      	adds	r7, #84	; 0x54
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800908a:	b480      	push	{r7}
 800908c:	b085      	sub	sp, #20
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800909c:	2302      	movs	r3, #2
 800909e:	e027      	b.n	80090f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2224      	movs	r2, #36	; 0x24
 80090ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 0201 	bic.w	r2, r2, #1
 80090c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80090ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80090ee:	2300      	movs	r3, #0
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009110:	2302      	movs	r3, #2
 8009112:	e02d      	b.n	8009170 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2224      	movs	r2, #36	; 0x24
 8009120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0201 	bic.w	r2, r2, #1
 800913a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f84f 	bl	80091f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800916e:	2300      	movs	r3, #0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b084      	sub	sp, #16
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800918c:	2302      	movs	r3, #2
 800918e:	e02d      	b.n	80091ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2224      	movs	r2, #36	; 0x24
 800919c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0201 	bic.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	683a      	ldr	r2, [r7, #0]
 80091c8:	430a      	orrs	r2, r1
 80091ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f811 	bl	80091f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2220      	movs	r2, #32
 80091de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009200:	2b00      	cmp	r3, #0
 8009202:	d108      	bne.n	8009216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2201      	movs	r2, #1
 8009208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009214:	e031      	b.n	800927a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009216:	2308      	movs	r3, #8
 8009218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800921a:	2308      	movs	r3, #8
 800921c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	0e5b      	lsrs	r3, r3, #25
 8009226:	b2db      	uxtb	r3, r3
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	0f5b      	lsrs	r3, r3, #29
 8009236:	b2db      	uxtb	r3, r3
 8009238:	f003 0307 	and.w	r3, r3, #7
 800923c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	7b3a      	ldrb	r2, [r7, #12]
 8009242:	4911      	ldr	r1, [pc, #68]	; (8009288 <UARTEx_SetNbDataToProcess+0x94>)
 8009244:	5c8a      	ldrb	r2, [r1, r2]
 8009246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800924a:	7b3a      	ldrb	r2, [r7, #12]
 800924c:	490f      	ldr	r1, [pc, #60]	; (800928c <UARTEx_SetNbDataToProcess+0x98>)
 800924e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009250:	fb93 f3f2 	sdiv	r3, r3, r2
 8009254:	b29a      	uxth	r2, r3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	7b7a      	ldrb	r2, [r7, #13]
 8009260:	4909      	ldr	r1, [pc, #36]	; (8009288 <UARTEx_SetNbDataToProcess+0x94>)
 8009262:	5c8a      	ldrb	r2, [r1, r2]
 8009264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009268:	7b7a      	ldrb	r2, [r7, #13]
 800926a:	4908      	ldr	r1, [pc, #32]	; (800928c <UARTEx_SetNbDataToProcess+0x98>)
 800926c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800926e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009272:	b29a      	uxth	r2, r3
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800927a:	bf00      	nop
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	0800f2e8 	.word	0x0800f2e8
 800928c:	0800f2f0 	.word	0x0800f2f0

08009290 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800929a:	2300      	movs	r3, #0
 800929c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800929e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092a2:	2b84      	cmp	r3, #132	; 0x84
 80092a4:	d005      	beq.n	80092b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80092a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	4413      	add	r3, r2
 80092ae:	3303      	adds	r3, #3
 80092b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80092b2:	68fb      	ldr	r3, [r7, #12]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80092c4:	f000 faf6 	bl	80098b4 <vTaskStartScheduler>
  
  return osOK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	bd80      	pop	{r7, pc}

080092ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80092ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092d0:	b089      	sub	sp, #36	; 0x24
 80092d2:	af04      	add	r7, sp, #16
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d020      	beq.n	8009322 <osThreadCreate+0x54>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01c      	beq.n	8009322 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685c      	ldr	r4, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	691e      	ldr	r6, [r3, #16]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff ffc8 	bl	8009290 <makeFreeRtosPriority>
 8009300:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800930a:	9202      	str	r2, [sp, #8]
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	9100      	str	r1, [sp, #0]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	4632      	mov	r2, r6
 8009314:	4629      	mov	r1, r5
 8009316:	4620      	mov	r0, r4
 8009318:	f000 f8ed 	bl	80094f6 <xTaskCreateStatic>
 800931c:	4603      	mov	r3, r0
 800931e:	60fb      	str	r3, [r7, #12]
 8009320:	e01c      	b.n	800935c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	685c      	ldr	r4, [r3, #4]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800932e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff ffaa 	bl	8009290 <makeFreeRtosPriority>
 800933c:	4602      	mov	r2, r0
 800933e:	f107 030c 	add.w	r3, r7, #12
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	9200      	str	r2, [sp, #0]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	4632      	mov	r2, r6
 800934a:	4629      	mov	r1, r5
 800934c:	4620      	mov	r0, r4
 800934e:	f000 f92f 	bl	80095b0 <xTaskCreate>
 8009352:	4603      	mov	r3, r0
 8009354:	2b01      	cmp	r3, #1
 8009356:	d001      	beq.n	800935c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009358:	2300      	movs	r3, #0
 800935a:	e000      	b.n	800935e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800935c:	68fb      	ldr	r3, [r7, #12]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009366 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d001      	beq.n	800937c <osDelay+0x16>
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	e000      	b.n	800937e <osDelay+0x18>
 800937c:	2301      	movs	r3, #1
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fa64 	bl	800984c <vTaskDelay>
  
  return osOK;
 8009384:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009386:	4618      	mov	r0, r3
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f103 0208 	add.w	r2, r3, #8
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093a6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f103 0208 	add.w	r2, r3, #8
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f103 0208 	add.w	r2, r3, #8
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	683a      	ldr	r2, [r7, #0]
 8009412:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	601a      	str	r2, [r3, #0]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009446:	d103      	bne.n	8009450 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	e00c      	b.n	800946a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	3308      	adds	r3, #8
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e002      	b.n	800945e <vListInsert+0x2e>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	60fb      	str	r3, [r7, #12]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68ba      	ldr	r2, [r7, #8]
 8009466:	429a      	cmp	r2, r3
 8009468:	d2f6      	bcs.n	8009458 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	683a      	ldr	r2, [r7, #0]
 8009478:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	601a      	str	r2, [r3, #0]
}
 8009496:	bf00      	nop
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094a2:	b480      	push	{r7}
 80094a4:	b085      	sub	sp, #20
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	6892      	ldr	r2, [r2, #8]
 80094b8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	6852      	ldr	r2, [r2, #4]
 80094c2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d103      	bne.n	80094d6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	689a      	ldr	r2, [r3, #8]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	1e5a      	subs	r2, r3, #1
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3714      	adds	r7, #20
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b08e      	sub	sp, #56	; 0x38
 80094fa:	af04      	add	r7, sp, #16
 80094fc:	60f8      	str	r0, [r7, #12]
 80094fe:	60b9      	str	r1, [r7, #8]
 8009500:	607a      	str	r2, [r7, #4]
 8009502:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009506:	2b00      	cmp	r3, #0
 8009508:	d10a      	bne.n	8009520 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <xTaskCreateStatic+0x46>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	61fb      	str	r3, [r7, #28]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800953c:	23a0      	movs	r3, #160	; 0xa0
 800953e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2ba0      	cmp	r3, #160	; 0xa0
 8009544:	d00a      	beq.n	800955c <xTaskCreateStatic+0x66>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	61bb      	str	r3, [r7, #24]
}
 8009558:	bf00      	nop
 800955a:	e7fe      	b.n	800955a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800955c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009560:	2b00      	cmp	r3, #0
 8009562:	d01e      	beq.n	80095a2 <xTaskCreateStatic+0xac>
 8009564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009566:	2b00      	cmp	r3, #0
 8009568:	d01b      	beq.n	80095a2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800956e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009572:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	2202      	movs	r2, #2
 8009578:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800957c:	2300      	movs	r3, #0
 800957e:	9303      	str	r3, [sp, #12]
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	9302      	str	r3, [sp, #8]
 8009584:	f107 0314 	add.w	r3, r7, #20
 8009588:	9301      	str	r3, [sp, #4]
 800958a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	68b9      	ldr	r1, [r7, #8]
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 f851 	bl	800963c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800959a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800959c:	f000 f8ec 	bl	8009778 <prvAddNewTaskToReadyList>
 80095a0:	e001      	b.n	80095a6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095a6:	697b      	ldr	r3, [r7, #20]
	}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3728      	adds	r7, #40	; 0x28
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b08c      	sub	sp, #48	; 0x30
 80095b4:	af04      	add	r7, sp, #16
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	603b      	str	r3, [r7, #0]
 80095bc:	4613      	mov	r3, r2
 80095be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80095c0:	88fb      	ldrh	r3, [r7, #6]
 80095c2:	009b      	lsls	r3, r3, #2
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 feef 	bl	800a3a8 <pvPortMalloc>
 80095ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00e      	beq.n	80095f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80095d2:	20a0      	movs	r0, #160	; 0xa0
 80095d4:	f000 fee8 	bl	800a3a8 <pvPortMalloc>
 80095d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d003      	beq.n	80095e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	631a      	str	r2, [r3, #48]	; 0x30
 80095e6:	e005      	b.n	80095f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095e8:	6978      	ldr	r0, [r7, #20]
 80095ea:	f000 ffa9 	bl	800a540 <vPortFree>
 80095ee:	e001      	b.n	80095f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095f0:	2300      	movs	r3, #0
 80095f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d017      	beq.n	800962a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009602:	88fa      	ldrh	r2, [r7, #6]
 8009604:	2300      	movs	r3, #0
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	9302      	str	r3, [sp, #8]
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f80f 	bl	800963c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800961e:	69f8      	ldr	r0, [r7, #28]
 8009620:	f000 f8aa 	bl	8009778 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009624:	2301      	movs	r3, #1
 8009626:	61bb      	str	r3, [r7, #24]
 8009628:	e002      	b.n	8009630 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800962a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800962e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009630:	69bb      	ldr	r3, [r7, #24]
	}
 8009632:	4618      	mov	r0, r3
 8009634:	3720      	adds	r7, #32
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b088      	sub	sp, #32
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
 8009648:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009654:	3b01      	subs	r3, #1
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	f023 0307 	bic.w	r3, r3, #7
 8009662:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	f003 0307 	and.w	r3, r3, #7
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00a      	beq.n	8009684 <prvInitialiseNewTask+0x48>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	617b      	str	r3, [r7, #20]
}
 8009680:	bf00      	nop
 8009682:	e7fe      	b.n	8009682 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d01f      	beq.n	80096ca <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800968a:	2300      	movs	r3, #0
 800968c:	61fb      	str	r3, [r7, #28]
 800968e:	e012      	b.n	80096b6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	4413      	add	r3, r2
 8009696:	7819      	ldrb	r1, [r3, #0]
 8009698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	4413      	add	r3, r2
 800969e:	3334      	adds	r3, #52	; 0x34
 80096a0:	460a      	mov	r2, r1
 80096a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	4413      	add	r3, r2
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d006      	beq.n	80096be <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	3301      	adds	r3, #1
 80096b4:	61fb      	str	r3, [r7, #28]
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	2b0f      	cmp	r3, #15
 80096ba:	d9e9      	bls.n	8009690 <prvInitialiseNewTask+0x54>
 80096bc:	e000      	b.n	80096c0 <prvInitialiseNewTask+0x84>
			{
				break;
 80096be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096c8:	e003      	b.n	80096d2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	2b06      	cmp	r3, #6
 80096d6:	d901      	bls.n	80096dc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096d8:	2306      	movs	r3, #6
 80096da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096e6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80096e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ea:	2200      	movs	r2, #0
 80096ec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f0:	3304      	adds	r3, #4
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fe6b 	bl	80093ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	3318      	adds	r3, #24
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff fe66 	bl	80093ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009706:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	f1c3 0207 	rsb	r2, r3, #7
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009716:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971a:	2200      	movs	r2, #0
 800971c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009722:	2200      	movs	r2, #0
 8009724:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972a:	334c      	adds	r3, #76	; 0x4c
 800972c:	224c      	movs	r2, #76	; 0x4c
 800972e:	2100      	movs	r1, #0
 8009730:	4618      	mov	r0, r3
 8009732:	f002 fe32 	bl	800c39a <memset>
 8009736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009738:	4a0c      	ldr	r2, [pc, #48]	; (800976c <prvInitialiseNewTask+0x130>)
 800973a:	651a      	str	r2, [r3, #80]	; 0x50
 800973c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800973e:	4a0c      	ldr	r2, [pc, #48]	; (8009770 <prvInitialiseNewTask+0x134>)
 8009740:	655a      	str	r2, [r3, #84]	; 0x54
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	4a0b      	ldr	r2, [pc, #44]	; (8009774 <prvInitialiseNewTask+0x138>)
 8009746:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	68f9      	ldr	r1, [r7, #12]
 800974c:	69b8      	ldr	r0, [r7, #24]
 800974e:	f000 fc1f 	bl	8009f90 <pxPortInitialiseStack>
 8009752:	4602      	mov	r2, r0
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800975e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009762:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009764:	bf00      	nop
 8009766:	3720      	adds	r7, #32
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	200015b0 	.word	0x200015b0
 8009770:	20001618 	.word	0x20001618
 8009774:	20001680 	.word	0x20001680

08009778 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009780:	f000 fd30 	bl	800a1e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009784:	4b2a      	ldr	r3, [pc, #168]	; (8009830 <prvAddNewTaskToReadyList+0xb8>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3301      	adds	r3, #1
 800978a:	4a29      	ldr	r2, [pc, #164]	; (8009830 <prvAddNewTaskToReadyList+0xb8>)
 800978c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800978e:	4b29      	ldr	r3, [pc, #164]	; (8009834 <prvAddNewTaskToReadyList+0xbc>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d109      	bne.n	80097aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009796:	4a27      	ldr	r2, [pc, #156]	; (8009834 <prvAddNewTaskToReadyList+0xbc>)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800979c:	4b24      	ldr	r3, [pc, #144]	; (8009830 <prvAddNewTaskToReadyList+0xb8>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d110      	bne.n	80097c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097a4:	f000 facc 	bl	8009d40 <prvInitialiseTaskLists>
 80097a8:	e00d      	b.n	80097c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097aa:	4b23      	ldr	r3, [pc, #140]	; (8009838 <prvAddNewTaskToReadyList+0xc0>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d109      	bne.n	80097c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097b2:	4b20      	ldr	r3, [pc, #128]	; (8009834 <prvAddNewTaskToReadyList+0xbc>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	429a      	cmp	r2, r3
 80097be:	d802      	bhi.n	80097c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097c0:	4a1c      	ldr	r2, [pc, #112]	; (8009834 <prvAddNewTaskToReadyList+0xbc>)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097c6:	4b1d      	ldr	r3, [pc, #116]	; (800983c <prvAddNewTaskToReadyList+0xc4>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3301      	adds	r3, #1
 80097cc:	4a1b      	ldr	r2, [pc, #108]	; (800983c <prvAddNewTaskToReadyList+0xc4>)
 80097ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d4:	2201      	movs	r2, #1
 80097d6:	409a      	lsls	r2, r3
 80097d8:	4b19      	ldr	r3, [pc, #100]	; (8009840 <prvAddNewTaskToReadyList+0xc8>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4313      	orrs	r3, r2
 80097de:	4a18      	ldr	r2, [pc, #96]	; (8009840 <prvAddNewTaskToReadyList+0xc8>)
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e6:	4613      	mov	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4a15      	ldr	r2, [pc, #84]	; (8009844 <prvAddNewTaskToReadyList+0xcc>)
 80097f0:	441a      	add	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3304      	adds	r3, #4
 80097f6:	4619      	mov	r1, r3
 80097f8:	4610      	mov	r0, r2
 80097fa:	f7ff fdf5 	bl	80093e8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097fe:	f000 fd21 	bl	800a244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009802:	4b0d      	ldr	r3, [pc, #52]	; (8009838 <prvAddNewTaskToReadyList+0xc0>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00e      	beq.n	8009828 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800980a:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <prvAddNewTaskToReadyList+0xbc>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	429a      	cmp	r2, r3
 8009816:	d207      	bcs.n	8009828 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009818:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <prvAddNewTaskToReadyList+0xd0>)
 800981a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	f3bf 8f4f 	dsb	sy
 8009824:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009828:	bf00      	nop
 800982a:	3708      	adds	r7, #8
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	200009a4 	.word	0x200009a4
 8009834:	200008a4 	.word	0x200008a4
 8009838:	200009b0 	.word	0x200009b0
 800983c:	200009c0 	.word	0x200009c0
 8009840:	200009ac 	.word	0x200009ac
 8009844:	200008a8 	.word	0x200008a8
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d017      	beq.n	800988e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <vTaskDelay+0x60>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00a      	beq.n	800987c <vTaskDelay+0x30>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60bb      	str	r3, [r7, #8]
}
 8009878:	bf00      	nop
 800987a:	e7fe      	b.n	800987a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800987c:	f000 f884 	bl	8009988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009880:	2100      	movs	r1, #0
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fb1e 	bl	8009ec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009888:	f000 f88c 	bl	80099a4 <xTaskResumeAll>
 800988c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d107      	bne.n	80098a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <vTaskDelay+0x64>)
 8009896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098a4:	bf00      	nop
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	200009cc 	.word	0x200009cc
 80098b0:	e000ed04 	.word	0xe000ed04

080098b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b08a      	sub	sp, #40	; 0x28
 80098b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098c2:	463a      	mov	r2, r7
 80098c4:	1d39      	adds	r1, r7, #4
 80098c6:	f107 0308 	add.w	r3, r7, #8
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7f7 fba8 	bl	8001020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	9202      	str	r2, [sp, #8]
 80098d8:	9301      	str	r3, [sp, #4]
 80098da:	2300      	movs	r3, #0
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	2300      	movs	r3, #0
 80098e0:	460a      	mov	r2, r1
 80098e2:	4921      	ldr	r1, [pc, #132]	; (8009968 <vTaskStartScheduler+0xb4>)
 80098e4:	4821      	ldr	r0, [pc, #132]	; (800996c <vTaskStartScheduler+0xb8>)
 80098e6:	f7ff fe06 	bl	80094f6 <xTaskCreateStatic>
 80098ea:	4603      	mov	r3, r0
 80098ec:	4a20      	ldr	r2, [pc, #128]	; (8009970 <vTaskStartScheduler+0xbc>)
 80098ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098f0:	4b1f      	ldr	r3, [pc, #124]	; (8009970 <vTaskStartScheduler+0xbc>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098f8:	2301      	movs	r3, #1
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	e001      	b.n	8009902 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098fe:	2300      	movs	r3, #0
 8009900:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d11b      	bne.n	8009940 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	613b      	str	r3, [r7, #16]
}
 800991a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800991c:	4b15      	ldr	r3, [pc, #84]	; (8009974 <vTaskStartScheduler+0xc0>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	334c      	adds	r3, #76	; 0x4c
 8009922:	4a15      	ldr	r2, [pc, #84]	; (8009978 <vTaskStartScheduler+0xc4>)
 8009924:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009926:	4b15      	ldr	r3, [pc, #84]	; (800997c <vTaskStartScheduler+0xc8>)
 8009928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800992c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800992e:	4b14      	ldr	r3, [pc, #80]	; (8009980 <vTaskStartScheduler+0xcc>)
 8009930:	2201      	movs	r2, #1
 8009932:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009934:	4b13      	ldr	r3, [pc, #76]	; (8009984 <vTaskStartScheduler+0xd0>)
 8009936:	2200      	movs	r2, #0
 8009938:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800993a:	f000 fbb1 	bl	800a0a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800993e:	e00e      	b.n	800995e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009946:	d10a      	bne.n	800995e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	60fb      	str	r3, [r7, #12]
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <vTaskStartScheduler+0xa8>
}
 800995e:	bf00      	nop
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	0800f280 	.word	0x0800f280
 800996c:	08009d11 	.word	0x08009d11
 8009970:	200009c8 	.word	0x200009c8
 8009974:	200008a4 	.word	0x200008a4
 8009978:	2000025c 	.word	0x2000025c
 800997c:	200009c4 	.word	0x200009c4
 8009980:	200009b0 	.word	0x200009b0
 8009984:	200009a8 	.word	0x200009a8

08009988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009988:	b480      	push	{r7}
 800998a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800998c:	4b04      	ldr	r3, [pc, #16]	; (80099a0 <vTaskSuspendAll+0x18>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3301      	adds	r3, #1
 8009992:	4a03      	ldr	r2, [pc, #12]	; (80099a0 <vTaskSuspendAll+0x18>)
 8009994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009996:	bf00      	nop
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	200009cc 	.word	0x200009cc

080099a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099aa:	2300      	movs	r3, #0
 80099ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099b2:	4b41      	ldr	r3, [pc, #260]	; (8009ab8 <xTaskResumeAll+0x114>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d10a      	bne.n	80099d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80099ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099be:	f383 8811 	msr	BASEPRI, r3
 80099c2:	f3bf 8f6f 	isb	sy
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	603b      	str	r3, [r7, #0]
}
 80099cc:	bf00      	nop
 80099ce:	e7fe      	b.n	80099ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099d0:	f000 fc08 	bl	800a1e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099d4:	4b38      	ldr	r3, [pc, #224]	; (8009ab8 <xTaskResumeAll+0x114>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3b01      	subs	r3, #1
 80099da:	4a37      	ldr	r2, [pc, #220]	; (8009ab8 <xTaskResumeAll+0x114>)
 80099dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099de:	4b36      	ldr	r3, [pc, #216]	; (8009ab8 <xTaskResumeAll+0x114>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d161      	bne.n	8009aaa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099e6:	4b35      	ldr	r3, [pc, #212]	; (8009abc <xTaskResumeAll+0x118>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d05d      	beq.n	8009aaa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099ee:	e02e      	b.n	8009a4e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099f0:	4b33      	ldr	r3, [pc, #204]	; (8009ac0 <xTaskResumeAll+0x11c>)
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3318      	adds	r3, #24
 80099fc:	4618      	mov	r0, r3
 80099fe:	f7ff fd50 	bl	80094a2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff fd4b 	bl	80094a2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	2201      	movs	r2, #1
 8009a12:	409a      	lsls	r2, r3
 8009a14:	4b2b      	ldr	r3, [pc, #172]	; (8009ac4 <xTaskResumeAll+0x120>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	4a2a      	ldr	r2, [pc, #168]	; (8009ac4 <xTaskResumeAll+0x120>)
 8009a1c:	6013      	str	r3, [r2, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a22:	4613      	mov	r3, r2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4a27      	ldr	r2, [pc, #156]	; (8009ac8 <xTaskResumeAll+0x124>)
 8009a2c:	441a      	add	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	3304      	adds	r3, #4
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f7ff fcd7 	bl	80093e8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3e:	4b23      	ldr	r3, [pc, #140]	; (8009acc <xTaskResumeAll+0x128>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d302      	bcc.n	8009a4e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009a48:	4b21      	ldr	r3, [pc, #132]	; (8009ad0 <xTaskResumeAll+0x12c>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a4e:	4b1c      	ldr	r3, [pc, #112]	; (8009ac0 <xTaskResumeAll+0x11c>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1cc      	bne.n	80099f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a5c:	f000 fa12 	bl	8009e84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009a60:	4b1c      	ldr	r3, [pc, #112]	; (8009ad4 <xTaskResumeAll+0x130>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d010      	beq.n	8009a8e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a6c:	f000 f836 	bl	8009adc <xTaskIncrementTick>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d002      	beq.n	8009a7c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009a76:	4b16      	ldr	r3, [pc, #88]	; (8009ad0 <xTaskResumeAll+0x12c>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1f1      	bne.n	8009a6c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009a88:	4b12      	ldr	r3, [pc, #72]	; (8009ad4 <xTaskResumeAll+0x130>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a8e:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <xTaskResumeAll+0x12c>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d009      	beq.n	8009aaa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a96:	2301      	movs	r3, #1
 8009a98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <xTaskResumeAll+0x134>)
 8009a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aaa:	f000 fbcb 	bl	800a244 <vPortExitCritical>

	return xAlreadyYielded;
 8009aae:	68bb      	ldr	r3, [r7, #8]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	200009cc 	.word	0x200009cc
 8009abc:	200009a4 	.word	0x200009a4
 8009ac0:	20000964 	.word	0x20000964
 8009ac4:	200009ac 	.word	0x200009ac
 8009ac8:	200008a8 	.word	0x200008a8
 8009acc:	200008a4 	.word	0x200008a4
 8009ad0:	200009b8 	.word	0x200009b8
 8009ad4:	200009b4 	.word	0x200009b4
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ae6:	4b4e      	ldr	r3, [pc, #312]	; (8009c20 <xTaskIncrementTick+0x144>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f040 808e 	bne.w	8009c0c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009af0:	4b4c      	ldr	r3, [pc, #304]	; (8009c24 <xTaskIncrementTick+0x148>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3301      	adds	r3, #1
 8009af6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009af8:	4a4a      	ldr	r2, [pc, #296]	; (8009c24 <xTaskIncrementTick+0x148>)
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d120      	bne.n	8009b46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b04:	4b48      	ldr	r3, [pc, #288]	; (8009c28 <xTaskIncrementTick+0x14c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00a      	beq.n	8009b24 <xTaskIncrementTick+0x48>
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	603b      	str	r3, [r7, #0]
}
 8009b20:	bf00      	nop
 8009b22:	e7fe      	b.n	8009b22 <xTaskIncrementTick+0x46>
 8009b24:	4b40      	ldr	r3, [pc, #256]	; (8009c28 <xTaskIncrementTick+0x14c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]
 8009b2a:	4b40      	ldr	r3, [pc, #256]	; (8009c2c <xTaskIncrementTick+0x150>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a3e      	ldr	r2, [pc, #248]	; (8009c28 <xTaskIncrementTick+0x14c>)
 8009b30:	6013      	str	r3, [r2, #0]
 8009b32:	4a3e      	ldr	r2, [pc, #248]	; (8009c2c <xTaskIncrementTick+0x150>)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	4b3d      	ldr	r3, [pc, #244]	; (8009c30 <xTaskIncrementTick+0x154>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	4a3c      	ldr	r2, [pc, #240]	; (8009c30 <xTaskIncrementTick+0x154>)
 8009b40:	6013      	str	r3, [r2, #0]
 8009b42:	f000 f99f 	bl	8009e84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b46:	4b3b      	ldr	r3, [pc, #236]	; (8009c34 <xTaskIncrementTick+0x158>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d348      	bcc.n	8009be2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b50:	4b35      	ldr	r3, [pc, #212]	; (8009c28 <xTaskIncrementTick+0x14c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d104      	bne.n	8009b64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b5a:	4b36      	ldr	r3, [pc, #216]	; (8009c34 <xTaskIncrementTick+0x158>)
 8009b5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b60:	601a      	str	r2, [r3, #0]
					break;
 8009b62:	e03e      	b.n	8009be2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b64:	4b30      	ldr	r3, [pc, #192]	; (8009c28 <xTaskIncrementTick+0x14c>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68db      	ldr	r3, [r3, #12]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d203      	bcs.n	8009b84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009b7c:	4a2d      	ldr	r2, [pc, #180]	; (8009c34 <xTaskIncrementTick+0x158>)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009b82:	e02e      	b.n	8009be2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	3304      	adds	r3, #4
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f7ff fc8a 	bl	80094a2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d004      	beq.n	8009ba0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	3318      	adds	r3, #24
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7ff fc81 	bl	80094a2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba4:	2201      	movs	r2, #1
 8009ba6:	409a      	lsls	r2, r3
 8009ba8:	4b23      	ldr	r3, [pc, #140]	; (8009c38 <xTaskIncrementTick+0x15c>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4313      	orrs	r3, r2
 8009bae:	4a22      	ldr	r2, [pc, #136]	; (8009c38 <xTaskIncrementTick+0x15c>)
 8009bb0:	6013      	str	r3, [r2, #0]
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4a1f      	ldr	r2, [pc, #124]	; (8009c3c <xTaskIncrementTick+0x160>)
 8009bc0:	441a      	add	r2, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	4610      	mov	r0, r2
 8009bca:	f7ff fc0d 	bl	80093e8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd2:	4b1b      	ldr	r3, [pc, #108]	; (8009c40 <xTaskIncrementTick+0x164>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d3b9      	bcc.n	8009b50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009be0:	e7b6      	b.n	8009b50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009be2:	4b17      	ldr	r3, [pc, #92]	; (8009c40 <xTaskIncrementTick+0x164>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be8:	4914      	ldr	r1, [pc, #80]	; (8009c3c <xTaskIncrementTick+0x160>)
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d901      	bls.n	8009bfe <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009bfe:	4b11      	ldr	r3, [pc, #68]	; (8009c44 <xTaskIncrementTick+0x168>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d007      	beq.n	8009c16 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009c06:	2301      	movs	r3, #1
 8009c08:	617b      	str	r3, [r7, #20]
 8009c0a:	e004      	b.n	8009c16 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009c0c:	4b0e      	ldr	r3, [pc, #56]	; (8009c48 <xTaskIncrementTick+0x16c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3301      	adds	r3, #1
 8009c12:	4a0d      	ldr	r2, [pc, #52]	; (8009c48 <xTaskIncrementTick+0x16c>)
 8009c14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009c16:	697b      	ldr	r3, [r7, #20]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3718      	adds	r7, #24
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	200009cc 	.word	0x200009cc
 8009c24:	200009a8 	.word	0x200009a8
 8009c28:	2000095c 	.word	0x2000095c
 8009c2c:	20000960 	.word	0x20000960
 8009c30:	200009bc 	.word	0x200009bc
 8009c34:	200009c4 	.word	0x200009c4
 8009c38:	200009ac 	.word	0x200009ac
 8009c3c:	200008a8 	.word	0x200008a8
 8009c40:	200008a4 	.word	0x200008a4
 8009c44:	200009b8 	.word	0x200009b8
 8009c48:	200009b4 	.word	0x200009b4

08009c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c52:	4b29      	ldr	r3, [pc, #164]	; (8009cf8 <vTaskSwitchContext+0xac>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c5a:	4b28      	ldr	r3, [pc, #160]	; (8009cfc <vTaskSwitchContext+0xb0>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c60:	e044      	b.n	8009cec <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009c62:	4b26      	ldr	r3, [pc, #152]	; (8009cfc <vTaskSwitchContext+0xb0>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c68:	4b25      	ldr	r3, [pc, #148]	; (8009d00 <vTaskSwitchContext+0xb4>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	fab3 f383 	clz	r3, r3
 8009c74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	f1c3 031f 	rsb	r3, r3, #31
 8009c7c:	617b      	str	r3, [r7, #20]
 8009c7e:	4921      	ldr	r1, [pc, #132]	; (8009d04 <vTaskSwitchContext+0xb8>)
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	4613      	mov	r3, r2
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	440b      	add	r3, r1
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	607b      	str	r3, [r7, #4]
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <vTaskSwitchContext+0x5a>
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	4613      	mov	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	4413      	add	r3, r2
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	4a14      	ldr	r2, [pc, #80]	; (8009d04 <vTaskSwitchContext+0xb8>)
 8009cb4:	4413      	add	r3, r2
 8009cb6:	613b      	str	r3, [r7, #16]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	605a      	str	r2, [r3, #4]
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d104      	bne.n	8009cd8 <vTaskSwitchContext+0x8c>
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	605a      	str	r2, [r3, #4]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	4a0a      	ldr	r2, [pc, #40]	; (8009d08 <vTaskSwitchContext+0xbc>)
 8009ce0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ce2:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <vTaskSwitchContext+0xbc>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	334c      	adds	r3, #76	; 0x4c
 8009ce8:	4a08      	ldr	r2, [pc, #32]	; (8009d0c <vTaskSwitchContext+0xc0>)
 8009cea:	6013      	str	r3, [r2, #0]
}
 8009cec:	bf00      	nop
 8009cee:	371c      	adds	r7, #28
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	200009cc 	.word	0x200009cc
 8009cfc:	200009b8 	.word	0x200009b8
 8009d00:	200009ac 	.word	0x200009ac
 8009d04:	200008a8 	.word	0x200008a8
 8009d08:	200008a4 	.word	0x200008a4
 8009d0c:	2000025c 	.word	0x2000025c

08009d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d18:	f000 f852 	bl	8009dc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d1c:	4b06      	ldr	r3, [pc, #24]	; (8009d38 <prvIdleTask+0x28>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d9f9      	bls.n	8009d18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d24:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <prvIdleTask+0x2c>)
 8009d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d2a:	601a      	str	r2, [r3, #0]
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d34:	e7f0      	b.n	8009d18 <prvIdleTask+0x8>
 8009d36:	bf00      	nop
 8009d38:	200008a8 	.word	0x200008a8
 8009d3c:	e000ed04 	.word	0xe000ed04

08009d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b082      	sub	sp, #8
 8009d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d46:	2300      	movs	r3, #0
 8009d48:	607b      	str	r3, [r7, #4]
 8009d4a:	e00c      	b.n	8009d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4a12      	ldr	r2, [pc, #72]	; (8009da0 <prvInitialiseTaskLists+0x60>)
 8009d58:	4413      	add	r3, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7ff fb17 	bl	800938e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3301      	adds	r3, #1
 8009d64:	607b      	str	r3, [r7, #4]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b06      	cmp	r3, #6
 8009d6a:	d9ef      	bls.n	8009d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009d6c:	480d      	ldr	r0, [pc, #52]	; (8009da4 <prvInitialiseTaskLists+0x64>)
 8009d6e:	f7ff fb0e 	bl	800938e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009d72:	480d      	ldr	r0, [pc, #52]	; (8009da8 <prvInitialiseTaskLists+0x68>)
 8009d74:	f7ff fb0b 	bl	800938e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009d78:	480c      	ldr	r0, [pc, #48]	; (8009dac <prvInitialiseTaskLists+0x6c>)
 8009d7a:	f7ff fb08 	bl	800938e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009d7e:	480c      	ldr	r0, [pc, #48]	; (8009db0 <prvInitialiseTaskLists+0x70>)
 8009d80:	f7ff fb05 	bl	800938e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009d84:	480b      	ldr	r0, [pc, #44]	; (8009db4 <prvInitialiseTaskLists+0x74>)
 8009d86:	f7ff fb02 	bl	800938e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009d8a:	4b0b      	ldr	r3, [pc, #44]	; (8009db8 <prvInitialiseTaskLists+0x78>)
 8009d8c:	4a05      	ldr	r2, [pc, #20]	; (8009da4 <prvInitialiseTaskLists+0x64>)
 8009d8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009d90:	4b0a      	ldr	r3, [pc, #40]	; (8009dbc <prvInitialiseTaskLists+0x7c>)
 8009d92:	4a05      	ldr	r2, [pc, #20]	; (8009da8 <prvInitialiseTaskLists+0x68>)
 8009d94:	601a      	str	r2, [r3, #0]
}
 8009d96:	bf00      	nop
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	200008a8 	.word	0x200008a8
 8009da4:	20000934 	.word	0x20000934
 8009da8:	20000948 	.word	0x20000948
 8009dac:	20000964 	.word	0x20000964
 8009db0:	20000978 	.word	0x20000978
 8009db4:	20000990 	.word	0x20000990
 8009db8:	2000095c 	.word	0x2000095c
 8009dbc:	20000960 	.word	0x20000960

08009dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dc6:	e019      	b.n	8009dfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009dc8:	f000 fa0c 	bl	800a1e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dcc:	4b10      	ldr	r3, [pc, #64]	; (8009e10 <prvCheckTasksWaitingTermination+0x50>)
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	68db      	ldr	r3, [r3, #12]
 8009dd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fb62 	bl	80094a2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009dde:	4b0d      	ldr	r3, [pc, #52]	; (8009e14 <prvCheckTasksWaitingTermination+0x54>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	3b01      	subs	r3, #1
 8009de4:	4a0b      	ldr	r2, [pc, #44]	; (8009e14 <prvCheckTasksWaitingTermination+0x54>)
 8009de6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009de8:	4b0b      	ldr	r3, [pc, #44]	; (8009e18 <prvCheckTasksWaitingTermination+0x58>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	4a0a      	ldr	r2, [pc, #40]	; (8009e18 <prvCheckTasksWaitingTermination+0x58>)
 8009df0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009df2:	f000 fa27 	bl	800a244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f810 	bl	8009e1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dfc:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <prvCheckTasksWaitingTermination+0x58>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1e1      	bne.n	8009dc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e04:	bf00      	nop
 8009e06:	bf00      	nop
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	20000978 	.word	0x20000978
 8009e14:	200009a4 	.word	0x200009a4
 8009e18:	2000098c 	.word	0x2000098c

08009e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	334c      	adds	r3, #76	; 0x4c
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f002 fac3 	bl	800c3b4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d108      	bne.n	8009e4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 fb7f 	bl	800a540 <vPortFree>
				vPortFree( pxTCB );
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fb7c 	bl	800a540 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e48:	e018      	b.n	8009e7c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d103      	bne.n	8009e5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fb73 	bl	800a540 <vPortFree>
	}
 8009e5a:	e00f      	b.n	8009e7c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d00a      	beq.n	8009e7c <prvDeleteTCB+0x60>
	__asm volatile
 8009e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6a:	f383 8811 	msr	BASEPRI, r3
 8009e6e:	f3bf 8f6f 	isb	sy
 8009e72:	f3bf 8f4f 	dsb	sy
 8009e76:	60fb      	str	r3, [r7, #12]
}
 8009e78:	bf00      	nop
 8009e7a:	e7fe      	b.n	8009e7a <prvDeleteTCB+0x5e>
	}
 8009e7c:	bf00      	nop
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e8a:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <prvResetNextTaskUnblockTime+0x38>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d104      	bne.n	8009e9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8009e96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009e9c:	e008      	b.n	8009eb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e9e:	4b07      	ldr	r3, [pc, #28]	; (8009ebc <prvResetNextTaskUnblockTime+0x38>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	4a04      	ldr	r2, [pc, #16]	; (8009ec0 <prvResetNextTaskUnblockTime+0x3c>)
 8009eae:	6013      	str	r3, [r2, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	2000095c 	.word	0x2000095c
 8009ec0:	200009c4 	.word	0x200009c4

08009ec4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009ece:	4b29      	ldr	r3, [pc, #164]	; (8009f74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ed4:	4b28      	ldr	r3, [pc, #160]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3304      	adds	r3, #4
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7ff fae1 	bl	80094a2 <uxListRemove>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d10b      	bne.n	8009efe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009ee6:	4b24      	ldr	r3, [pc, #144]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eec:	2201      	movs	r2, #1
 8009eee:	fa02 f303 	lsl.w	r3, r2, r3
 8009ef2:	43da      	mvns	r2, r3
 8009ef4:	4b21      	ldr	r3, [pc, #132]	; (8009f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4013      	ands	r3, r2
 8009efa:	4a20      	ldr	r2, [pc, #128]	; (8009f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009efc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f04:	d10a      	bne.n	8009f1c <prvAddCurrentTaskToDelayedList+0x58>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d007      	beq.n	8009f1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f0c:	4b1a      	ldr	r3, [pc, #104]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	3304      	adds	r3, #4
 8009f12:	4619      	mov	r1, r3
 8009f14:	481a      	ldr	r0, [pc, #104]	; (8009f80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f16:	f7ff fa67 	bl	80093e8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f1a:	e026      	b.n	8009f6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4413      	add	r3, r2
 8009f22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f24:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d209      	bcs.n	8009f48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f34:	4b13      	ldr	r3, [pc, #76]	; (8009f84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	4b0f      	ldr	r3, [pc, #60]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3304      	adds	r3, #4
 8009f3e:	4619      	mov	r1, r3
 8009f40:	4610      	mov	r0, r2
 8009f42:	f7ff fa75 	bl	8009430 <vListInsert>
}
 8009f46:	e010      	b.n	8009f6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f48:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3304      	adds	r3, #4
 8009f52:	4619      	mov	r1, r3
 8009f54:	4610      	mov	r0, r2
 8009f56:	f7ff fa6b 	bl	8009430 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f5a:	4b0c      	ldr	r3, [pc, #48]	; (8009f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d202      	bcs.n	8009f6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009f64:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	6013      	str	r3, [r2, #0]
}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	200009a8 	.word	0x200009a8
 8009f78:	200008a4 	.word	0x200008a4
 8009f7c:	200009ac 	.word	0x200009ac
 8009f80:	20000990 	.word	0x20000990
 8009f84:	20000960 	.word	0x20000960
 8009f88:	2000095c 	.word	0x2000095c
 8009f8c:	200009c4 	.word	0x200009c4

08009f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	60f8      	str	r0, [r7, #12]
 8009f98:	60b9      	str	r1, [r7, #8]
 8009f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3b04      	subs	r3, #4
 8009fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3b04      	subs	r3, #4
 8009fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	f023 0201 	bic.w	r2, r3, #1
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	3b04      	subs	r3, #4
 8009fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009fc0:	4a0c      	ldr	r2, [pc, #48]	; (8009ff4 <pxPortInitialiseStack+0x64>)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3b14      	subs	r3, #20
 8009fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	3b04      	subs	r3, #4
 8009fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f06f 0202 	mvn.w	r2, #2
 8009fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3b20      	subs	r3, #32
 8009fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	08009ff9 	.word	0x08009ff9

08009ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ffe:	2300      	movs	r3, #0
 800a000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a002:	4b12      	ldr	r3, [pc, #72]	; (800a04c <prvTaskExitError+0x54>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a00a:	d00a      	beq.n	800a022 <prvTaskExitError+0x2a>
	__asm volatile
 800a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a010:	f383 8811 	msr	BASEPRI, r3
 800a014:	f3bf 8f6f 	isb	sy
 800a018:	f3bf 8f4f 	dsb	sy
 800a01c:	60fb      	str	r3, [r7, #12]
}
 800a01e:	bf00      	nop
 800a020:	e7fe      	b.n	800a020 <prvTaskExitError+0x28>
	__asm volatile
 800a022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a026:	f383 8811 	msr	BASEPRI, r3
 800a02a:	f3bf 8f6f 	isb	sy
 800a02e:	f3bf 8f4f 	dsb	sy
 800a032:	60bb      	str	r3, [r7, #8]
}
 800a034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a036:	bf00      	nop
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d0fc      	beq.n	800a038 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a03e:	bf00      	nop
 800a040:	bf00      	nop
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	20000094 	.word	0x20000094

0800a050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a050:	4b07      	ldr	r3, [pc, #28]	; (800a070 <pxCurrentTCBConst2>)
 800a052:	6819      	ldr	r1, [r3, #0]
 800a054:	6808      	ldr	r0, [r1, #0]
 800a056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05a:	f380 8809 	msr	PSP, r0
 800a05e:	f3bf 8f6f 	isb	sy
 800a062:	f04f 0000 	mov.w	r0, #0
 800a066:	f380 8811 	msr	BASEPRI, r0
 800a06a:	4770      	bx	lr
 800a06c:	f3af 8000 	nop.w

0800a070 <pxCurrentTCBConst2>:
 800a070:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop

0800a078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a078:	4808      	ldr	r0, [pc, #32]	; (800a09c <prvPortStartFirstTask+0x24>)
 800a07a:	6800      	ldr	r0, [r0, #0]
 800a07c:	6800      	ldr	r0, [r0, #0]
 800a07e:	f380 8808 	msr	MSP, r0
 800a082:	f04f 0000 	mov.w	r0, #0
 800a086:	f380 8814 	msr	CONTROL, r0
 800a08a:	b662      	cpsie	i
 800a08c:	b661      	cpsie	f
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	f3bf 8f6f 	isb	sy
 800a096:	df00      	svc	0
 800a098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a09a:	bf00      	nop
 800a09c:	e000ed08 	.word	0xe000ed08

0800a0a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0a6:	4b46      	ldr	r3, [pc, #280]	; (800a1c0 <xPortStartScheduler+0x120>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a46      	ldr	r2, [pc, #280]	; (800a1c4 <xPortStartScheduler+0x124>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d10a      	bne.n	800a0c6 <xPortStartScheduler+0x26>
	__asm volatile
 800a0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	613b      	str	r3, [r7, #16]
}
 800a0c2:	bf00      	nop
 800a0c4:	e7fe      	b.n	800a0c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0c6:	4b3e      	ldr	r3, [pc, #248]	; (800a1c0 <xPortStartScheduler+0x120>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a3f      	ldr	r2, [pc, #252]	; (800a1c8 <xPortStartScheduler+0x128>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d10a      	bne.n	800a0e6 <xPortStartScheduler+0x46>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	60fb      	str	r3, [r7, #12]
}
 800a0e2:	bf00      	nop
 800a0e4:	e7fe      	b.n	800a0e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0e6:	4b39      	ldr	r3, [pc, #228]	; (800a1cc <xPortStartScheduler+0x12c>)
 800a0e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	22ff      	movs	r2, #255	; 0xff
 800a0f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a100:	78fb      	ldrb	r3, [r7, #3]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a108:	b2da      	uxtb	r2, r3
 800a10a:	4b31      	ldr	r3, [pc, #196]	; (800a1d0 <xPortStartScheduler+0x130>)
 800a10c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a10e:	4b31      	ldr	r3, [pc, #196]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a110:	2207      	movs	r2, #7
 800a112:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a114:	e009      	b.n	800a12a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a116:	4b2f      	ldr	r3, [pc, #188]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3b01      	subs	r3, #1
 800a11c:	4a2d      	ldr	r2, [pc, #180]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a11e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a120:	78fb      	ldrb	r3, [r7, #3]
 800a122:	b2db      	uxtb	r3, r3
 800a124:	005b      	lsls	r3, r3, #1
 800a126:	b2db      	uxtb	r3, r3
 800a128:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a12a:	78fb      	ldrb	r3, [r7, #3]
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a132:	2b80      	cmp	r3, #128	; 0x80
 800a134:	d0ef      	beq.n	800a116 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a136:	4b27      	ldr	r3, [pc, #156]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f1c3 0307 	rsb	r3, r3, #7
 800a13e:	2b04      	cmp	r3, #4
 800a140:	d00a      	beq.n	800a158 <xPortStartScheduler+0xb8>
	__asm volatile
 800a142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a146:	f383 8811 	msr	BASEPRI, r3
 800a14a:	f3bf 8f6f 	isb	sy
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	60bb      	str	r3, [r7, #8]
}
 800a154:	bf00      	nop
 800a156:	e7fe      	b.n	800a156 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a158:	4b1e      	ldr	r3, [pc, #120]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	021b      	lsls	r3, r3, #8
 800a15e:	4a1d      	ldr	r2, [pc, #116]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a160:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a162:	4b1c      	ldr	r3, [pc, #112]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a16a:	4a1a      	ldr	r2, [pc, #104]	; (800a1d4 <xPortStartScheduler+0x134>)
 800a16c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	b2da      	uxtb	r2, r3
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a176:	4b18      	ldr	r3, [pc, #96]	; (800a1d8 <xPortStartScheduler+0x138>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a17      	ldr	r2, [pc, #92]	; (800a1d8 <xPortStartScheduler+0x138>)
 800a17c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a180:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a182:	4b15      	ldr	r3, [pc, #84]	; (800a1d8 <xPortStartScheduler+0x138>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a14      	ldr	r2, [pc, #80]	; (800a1d8 <xPortStartScheduler+0x138>)
 800a188:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a18c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a18e:	f000 f8dd 	bl	800a34c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a192:	4b12      	ldr	r3, [pc, #72]	; (800a1dc <xPortStartScheduler+0x13c>)
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a198:	f000 f8fc 	bl	800a394 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a19c:	4b10      	ldr	r3, [pc, #64]	; (800a1e0 <xPortStartScheduler+0x140>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a0f      	ldr	r2, [pc, #60]	; (800a1e0 <xPortStartScheduler+0x140>)
 800a1a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a1a8:	f7ff ff66 	bl	800a078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a1ac:	f7ff fd4e 	bl	8009c4c <vTaskSwitchContext>
	prvTaskExitError();
 800a1b0:	f7ff ff22 	bl	8009ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3718      	adds	r7, #24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	e000ed00 	.word	0xe000ed00
 800a1c4:	410fc271 	.word	0x410fc271
 800a1c8:	410fc270 	.word	0x410fc270
 800a1cc:	e000e400 	.word	0xe000e400
 800a1d0:	200009d0 	.word	0x200009d0
 800a1d4:	200009d4 	.word	0x200009d4
 800a1d8:	e000ed20 	.word	0xe000ed20
 800a1dc:	20000094 	.word	0x20000094
 800a1e0:	e000ef34 	.word	0xe000ef34

0800a1e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	607b      	str	r3, [r7, #4]
}
 800a1fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1fe:	4b0f      	ldr	r3, [pc, #60]	; (800a23c <vPortEnterCritical+0x58>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	4a0d      	ldr	r2, [pc, #52]	; (800a23c <vPortEnterCritical+0x58>)
 800a206:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a208:	4b0c      	ldr	r3, [pc, #48]	; (800a23c <vPortEnterCritical+0x58>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d10f      	bne.n	800a230 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a210:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <vPortEnterCritical+0x5c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00a      	beq.n	800a230 <vPortEnterCritical+0x4c>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	603b      	str	r3, [r7, #0]
}
 800a22c:	bf00      	nop
 800a22e:	e7fe      	b.n	800a22e <vPortEnterCritical+0x4a>
	}
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	20000094 	.word	0x20000094
 800a240:	e000ed04 	.word	0xe000ed04

0800a244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a244:	b480      	push	{r7}
 800a246:	b083      	sub	sp, #12
 800a248:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a24a:	4b12      	ldr	r3, [pc, #72]	; (800a294 <vPortExitCritical+0x50>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10a      	bne.n	800a268 <vPortExitCritical+0x24>
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	607b      	str	r3, [r7, #4]
}
 800a264:	bf00      	nop
 800a266:	e7fe      	b.n	800a266 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a268:	4b0a      	ldr	r3, [pc, #40]	; (800a294 <vPortExitCritical+0x50>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3b01      	subs	r3, #1
 800a26e:	4a09      	ldr	r2, [pc, #36]	; (800a294 <vPortExitCritical+0x50>)
 800a270:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a272:	4b08      	ldr	r3, [pc, #32]	; (800a294 <vPortExitCritical+0x50>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d105      	bne.n	800a286 <vPortExitCritical+0x42>
 800a27a:	2300      	movs	r3, #0
 800a27c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a284:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a286:	bf00      	nop
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20000094 	.word	0x20000094
	...

0800a2a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a2a0:	f3ef 8009 	mrs	r0, PSP
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	4b15      	ldr	r3, [pc, #84]	; (800a300 <pxCurrentTCBConst>)
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	f01e 0f10 	tst.w	lr, #16
 800a2b0:	bf08      	it	eq
 800a2b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a2b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ba:	6010      	str	r0, [r2, #0]
 800a2bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a2c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a2c4:	f380 8811 	msr	BASEPRI, r0
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	f7ff fcbc 	bl	8009c4c <vTaskSwitchContext>
 800a2d4:	f04f 0000 	mov.w	r0, #0
 800a2d8:	f380 8811 	msr	BASEPRI, r0
 800a2dc:	bc09      	pop	{r0, r3}
 800a2de:	6819      	ldr	r1, [r3, #0]
 800a2e0:	6808      	ldr	r0, [r1, #0]
 800a2e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e6:	f01e 0f10 	tst.w	lr, #16
 800a2ea:	bf08      	it	eq
 800a2ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a2f0:	f380 8809 	msr	PSP, r0
 800a2f4:	f3bf 8f6f 	isb	sy
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	f3af 8000 	nop.w

0800a300 <pxCurrentTCBConst>:
 800a300:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a304:	bf00      	nop
 800a306:	bf00      	nop

0800a308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b082      	sub	sp, #8
 800a30c:	af00      	add	r7, sp, #0
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	607b      	str	r3, [r7, #4]
}
 800a320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a322:	f7ff fbdb 	bl	8009adc <xTaskIncrementTick>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d003      	beq.n	800a334 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a32c:	4b06      	ldr	r3, [pc, #24]	; (800a348 <SysTick_Handler+0x40>)
 800a32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	2300      	movs	r3, #0
 800a336:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	f383 8811 	msr	BASEPRI, r3
}
 800a33e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a340:	bf00      	nop
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}
 800a348:	e000ed04 	.word	0xe000ed04

0800a34c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a34c:	b480      	push	{r7}
 800a34e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a350:	4b0b      	ldr	r3, [pc, #44]	; (800a380 <vPortSetupTimerInterrupt+0x34>)
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a356:	4b0b      	ldr	r3, [pc, #44]	; (800a384 <vPortSetupTimerInterrupt+0x38>)
 800a358:	2200      	movs	r2, #0
 800a35a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a35c:	4b0a      	ldr	r3, [pc, #40]	; (800a388 <vPortSetupTimerInterrupt+0x3c>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a0a      	ldr	r2, [pc, #40]	; (800a38c <vPortSetupTimerInterrupt+0x40>)
 800a362:	fba2 2303 	umull	r2, r3, r2, r3
 800a366:	099b      	lsrs	r3, r3, #6
 800a368:	4a09      	ldr	r2, [pc, #36]	; (800a390 <vPortSetupTimerInterrupt+0x44>)
 800a36a:	3b01      	subs	r3, #1
 800a36c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a36e:	4b04      	ldr	r3, [pc, #16]	; (800a380 <vPortSetupTimerInterrupt+0x34>)
 800a370:	2207      	movs	r2, #7
 800a372:	601a      	str	r2, [r3, #0]
}
 800a374:	bf00      	nop
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop
 800a380:	e000e010 	.word	0xe000e010
 800a384:	e000e018 	.word	0xe000e018
 800a388:	20000088 	.word	0x20000088
 800a38c:	10624dd3 	.word	0x10624dd3
 800a390:	e000e014 	.word	0xe000e014

0800a394 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a394:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a3a4 <vPortEnableVFP+0x10>
 800a398:	6801      	ldr	r1, [r0, #0]
 800a39a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a39e:	6001      	str	r1, [r0, #0]
 800a3a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a3a2:	bf00      	nop
 800a3a4:	e000ed88 	.word	0xe000ed88

0800a3a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	; 0x28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3b4:	f7ff fae8 	bl	8009988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3b8:	4b5b      	ldr	r3, [pc, #364]	; (800a528 <pvPortMalloc+0x180>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d101      	bne.n	800a3c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3c0:	f000 f920 	bl	800a604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3c4:	4b59      	ldr	r3, [pc, #356]	; (800a52c <pvPortMalloc+0x184>)
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	f040 8093 	bne.w	800a4f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01d      	beq.n	800a414 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3d8:	2208      	movs	r2, #8
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4413      	add	r3, r2
 800a3de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f003 0307 	and.w	r3, r3, #7
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d014      	beq.n	800a414 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f023 0307 	bic.w	r3, r3, #7
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00a      	beq.n	800a414 <pvPortMalloc+0x6c>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	617b      	str	r3, [r7, #20]
}
 800a410:	bf00      	nop
 800a412:	e7fe      	b.n	800a412 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d06e      	beq.n	800a4f8 <pvPortMalloc+0x150>
 800a41a:	4b45      	ldr	r3, [pc, #276]	; (800a530 <pvPortMalloc+0x188>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	429a      	cmp	r2, r3
 800a422:	d869      	bhi.n	800a4f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a424:	4b43      	ldr	r3, [pc, #268]	; (800a534 <pvPortMalloc+0x18c>)
 800a426:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a428:	4b42      	ldr	r3, [pc, #264]	; (800a534 <pvPortMalloc+0x18c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a42e:	e004      	b.n	800a43a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a432:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	429a      	cmp	r2, r3
 800a442:	d903      	bls.n	800a44c <pvPortMalloc+0xa4>
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1f1      	bne.n	800a430 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a44c:	4b36      	ldr	r3, [pc, #216]	; (800a528 <pvPortMalloc+0x180>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a452:	429a      	cmp	r2, r3
 800a454:	d050      	beq.n	800a4f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a456:	6a3b      	ldr	r3, [r7, #32]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	2208      	movs	r2, #8
 800a45c:	4413      	add	r3, r2
 800a45e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	1ad2      	subs	r2, r2, r3
 800a470:	2308      	movs	r3, #8
 800a472:	005b      	lsls	r3, r3, #1
 800a474:	429a      	cmp	r2, r3
 800a476:	d91f      	bls.n	800a4b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4413      	add	r3, r2
 800a47e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	f003 0307 	and.w	r3, r3, #7
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	613b      	str	r3, [r7, #16]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	685a      	ldr	r2, [r3, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	1ad2      	subs	r2, r2, r3
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4b2:	69b8      	ldr	r0, [r7, #24]
 800a4b4:	f000 f908 	bl	800a6c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4b8:	4b1d      	ldr	r3, [pc, #116]	; (800a530 <pvPortMalloc+0x188>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	1ad3      	subs	r3, r2, r3
 800a4c2:	4a1b      	ldr	r2, [pc, #108]	; (800a530 <pvPortMalloc+0x188>)
 800a4c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4c6:	4b1a      	ldr	r3, [pc, #104]	; (800a530 <pvPortMalloc+0x188>)
 800a4c8:	681a      	ldr	r2, [r3, #0]
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	; (800a538 <pvPortMalloc+0x190>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d203      	bcs.n	800a4da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4d2:	4b17      	ldr	r3, [pc, #92]	; (800a530 <pvPortMalloc+0x188>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	4a18      	ldr	r2, [pc, #96]	; (800a538 <pvPortMalloc+0x190>)
 800a4d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <pvPortMalloc+0x184>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <pvPortMalloc+0x194>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	4a11      	ldr	r2, [pc, #68]	; (800a53c <pvPortMalloc+0x194>)
 800a4f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a4f8:	f7ff fa54 	bl	80099a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	f003 0307 	and.w	r3, r3, #7
 800a502:	2b00      	cmp	r3, #0
 800a504:	d00a      	beq.n	800a51c <pvPortMalloc+0x174>
	__asm volatile
 800a506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a50a:	f383 8811 	msr	BASEPRI, r3
 800a50e:	f3bf 8f6f 	isb	sy
 800a512:	f3bf 8f4f 	dsb	sy
 800a516:	60fb      	str	r3, [r7, #12]
}
 800a518:	bf00      	nop
 800a51a:	e7fe      	b.n	800a51a <pvPortMalloc+0x172>
	return pvReturn;
 800a51c:	69fb      	ldr	r3, [r7, #28]
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3728      	adds	r7, #40	; 0x28
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20001598 	.word	0x20001598
 800a52c:	200015ac 	.word	0x200015ac
 800a530:	2000159c 	.word	0x2000159c
 800a534:	20001590 	.word	0x20001590
 800a538:	200015a0 	.word	0x200015a0
 800a53c:	200015a4 	.word	0x200015a4

0800a540 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d04d      	beq.n	800a5ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a552:	2308      	movs	r3, #8
 800a554:	425b      	negs	r3, r3
 800a556:	697a      	ldr	r2, [r7, #20]
 800a558:	4413      	add	r3, r2
 800a55a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	685a      	ldr	r2, [r3, #4]
 800a564:	4b24      	ldr	r3, [pc, #144]	; (800a5f8 <vPortFree+0xb8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4013      	ands	r3, r2
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10a      	bne.n	800a584 <vPortFree+0x44>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	60fb      	str	r3, [r7, #12]
}
 800a580:	bf00      	nop
 800a582:	e7fe      	b.n	800a582 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00a      	beq.n	800a5a2 <vPortFree+0x62>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	60bb      	str	r3, [r7, #8]
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	4b14      	ldr	r3, [pc, #80]	; (800a5f8 <vPortFree+0xb8>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01e      	beq.n	800a5ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d11a      	bne.n	800a5ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	4b0e      	ldr	r3, [pc, #56]	; (800a5f8 <vPortFree+0xb8>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	43db      	mvns	r3, r3
 800a5c2:	401a      	ands	r2, r3
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5c8:	f7ff f9de 	bl	8009988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	685a      	ldr	r2, [r3, #4]
 800a5d0:	4b0a      	ldr	r3, [pc, #40]	; (800a5fc <vPortFree+0xbc>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	4a09      	ldr	r2, [pc, #36]	; (800a5fc <vPortFree+0xbc>)
 800a5d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5da:	6938      	ldr	r0, [r7, #16]
 800a5dc:	f000 f874 	bl	800a6c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5e0:	4b07      	ldr	r3, [pc, #28]	; (800a600 <vPortFree+0xc0>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	4a06      	ldr	r2, [pc, #24]	; (800a600 <vPortFree+0xc0>)
 800a5e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5ea:	f7ff f9db 	bl	80099a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5ee:	bf00      	nop
 800a5f0:	3718      	adds	r7, #24
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	200015ac 	.word	0x200015ac
 800a5fc:	2000159c 	.word	0x2000159c
 800a600:	200015a8 	.word	0x200015a8

0800a604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a60a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a60e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a610:	4b27      	ldr	r3, [pc, #156]	; (800a6b0 <prvHeapInit+0xac>)
 800a612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f003 0307 	and.w	r3, r3, #7
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00c      	beq.n	800a638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	3307      	adds	r3, #7
 800a622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f023 0307 	bic.w	r3, r3, #7
 800a62a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a62c:	68ba      	ldr	r2, [r7, #8]
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	1ad3      	subs	r3, r2, r3
 800a632:	4a1f      	ldr	r2, [pc, #124]	; (800a6b0 <prvHeapInit+0xac>)
 800a634:	4413      	add	r3, r2
 800a636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a63c:	4a1d      	ldr	r2, [pc, #116]	; (800a6b4 <prvHeapInit+0xb0>)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a642:	4b1c      	ldr	r3, [pc, #112]	; (800a6b4 <prvHeapInit+0xb0>)
 800a644:	2200      	movs	r2, #0
 800a646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68ba      	ldr	r2, [r7, #8]
 800a64c:	4413      	add	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a650:	2208      	movs	r2, #8
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	1a9b      	subs	r3, r3, r2
 800a656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f023 0307 	bic.w	r3, r3, #7
 800a65e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	4a15      	ldr	r2, [pc, #84]	; (800a6b8 <prvHeapInit+0xb4>)
 800a664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a666:	4b14      	ldr	r3, [pc, #80]	; (800a6b8 <prvHeapInit+0xb4>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	2200      	movs	r2, #0
 800a66c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a66e:	4b12      	ldr	r3, [pc, #72]	; (800a6b8 <prvHeapInit+0xb4>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2200      	movs	r2, #0
 800a674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	1ad2      	subs	r2, r2, r3
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a684:	4b0c      	ldr	r3, [pc, #48]	; (800a6b8 <prvHeapInit+0xb4>)
 800a686:	681a      	ldr	r2, [r3, #0]
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	4a0a      	ldr	r2, [pc, #40]	; (800a6bc <prvHeapInit+0xb8>)
 800a692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	685b      	ldr	r3, [r3, #4]
 800a698:	4a09      	ldr	r2, [pc, #36]	; (800a6c0 <prvHeapInit+0xbc>)
 800a69a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a69c:	4b09      	ldr	r3, [pc, #36]	; (800a6c4 <prvHeapInit+0xc0>)
 800a69e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6a2:	601a      	str	r2, [r3, #0]
}
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr
 800a6b0:	200009d8 	.word	0x200009d8
 800a6b4:	20001590 	.word	0x20001590
 800a6b8:	20001598 	.word	0x20001598
 800a6bc:	200015a0 	.word	0x200015a0
 800a6c0:	2000159c 	.word	0x2000159c
 800a6c4:	200015ac 	.word	0x200015ac

0800a6c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6d0:	4b28      	ldr	r3, [pc, #160]	; (800a774 <prvInsertBlockIntoFreeList+0xac>)
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	e002      	b.n	800a6dc <prvInsertBlockIntoFreeList+0x14>
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	60fb      	str	r3, [r7, #12]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d8f7      	bhi.n	800a6d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	68ba      	ldr	r2, [r7, #8]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d108      	bne.n	800a70a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	685a      	ldr	r2, [r3, #4]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	441a      	add	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	441a      	add	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d118      	bne.n	800a750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681a      	ldr	r2, [r3, #0]
 800a722:	4b15      	ldr	r3, [pc, #84]	; (800a778 <prvInsertBlockIntoFreeList+0xb0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	429a      	cmp	r2, r3
 800a728:	d00d      	beq.n	800a746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	441a      	add	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	e008      	b.n	800a758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a746:	4b0c      	ldr	r3, [pc, #48]	; (800a778 <prvInsertBlockIntoFreeList+0xb0>)
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	601a      	str	r2, [r3, #0]
 800a74e:	e003      	b.n	800a758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d002      	beq.n	800a766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a766:	bf00      	nop
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	20001590 	.word	0x20001590
 800a778:	20001598 	.word	0x20001598

0800a77c <__cvt>:
 800a77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a780:	ec55 4b10 	vmov	r4, r5, d0
 800a784:	2d00      	cmp	r5, #0
 800a786:	460e      	mov	r6, r1
 800a788:	4619      	mov	r1, r3
 800a78a:	462b      	mov	r3, r5
 800a78c:	bfbb      	ittet	lt
 800a78e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a792:	461d      	movlt	r5, r3
 800a794:	2300      	movge	r3, #0
 800a796:	232d      	movlt	r3, #45	; 0x2d
 800a798:	700b      	strb	r3, [r1, #0]
 800a79a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a79c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a7a0:	4691      	mov	r9, r2
 800a7a2:	f023 0820 	bic.w	r8, r3, #32
 800a7a6:	bfbc      	itt	lt
 800a7a8:	4622      	movlt	r2, r4
 800a7aa:	4614      	movlt	r4, r2
 800a7ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a7b0:	d005      	beq.n	800a7be <__cvt+0x42>
 800a7b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a7b6:	d100      	bne.n	800a7ba <__cvt+0x3e>
 800a7b8:	3601      	adds	r6, #1
 800a7ba:	2102      	movs	r1, #2
 800a7bc:	e000      	b.n	800a7c0 <__cvt+0x44>
 800a7be:	2103      	movs	r1, #3
 800a7c0:	ab03      	add	r3, sp, #12
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	ab02      	add	r3, sp, #8
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	ec45 4b10 	vmov	d0, r4, r5
 800a7cc:	4653      	mov	r3, sl
 800a7ce:	4632      	mov	r2, r6
 800a7d0:	f001 ff1a 	bl	800c608 <_dtoa_r>
 800a7d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a7d8:	4607      	mov	r7, r0
 800a7da:	d102      	bne.n	800a7e2 <__cvt+0x66>
 800a7dc:	f019 0f01 	tst.w	r9, #1
 800a7e0:	d022      	beq.n	800a828 <__cvt+0xac>
 800a7e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a7e6:	eb07 0906 	add.w	r9, r7, r6
 800a7ea:	d110      	bne.n	800a80e <__cvt+0x92>
 800a7ec:	783b      	ldrb	r3, [r7, #0]
 800a7ee:	2b30      	cmp	r3, #48	; 0x30
 800a7f0:	d10a      	bne.n	800a808 <__cvt+0x8c>
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	f7f6 f97d 	bl	8000af8 <__aeabi_dcmpeq>
 800a7fe:	b918      	cbnz	r0, 800a808 <__cvt+0x8c>
 800a800:	f1c6 0601 	rsb	r6, r6, #1
 800a804:	f8ca 6000 	str.w	r6, [sl]
 800a808:	f8da 3000 	ldr.w	r3, [sl]
 800a80c:	4499      	add	r9, r3
 800a80e:	2200      	movs	r2, #0
 800a810:	2300      	movs	r3, #0
 800a812:	4620      	mov	r0, r4
 800a814:	4629      	mov	r1, r5
 800a816:	f7f6 f96f 	bl	8000af8 <__aeabi_dcmpeq>
 800a81a:	b108      	cbz	r0, 800a820 <__cvt+0xa4>
 800a81c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a820:	2230      	movs	r2, #48	; 0x30
 800a822:	9b03      	ldr	r3, [sp, #12]
 800a824:	454b      	cmp	r3, r9
 800a826:	d307      	bcc.n	800a838 <__cvt+0xbc>
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a82c:	1bdb      	subs	r3, r3, r7
 800a82e:	4638      	mov	r0, r7
 800a830:	6013      	str	r3, [r2, #0]
 800a832:	b004      	add	sp, #16
 800a834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a838:	1c59      	adds	r1, r3, #1
 800a83a:	9103      	str	r1, [sp, #12]
 800a83c:	701a      	strb	r2, [r3, #0]
 800a83e:	e7f0      	b.n	800a822 <__cvt+0xa6>

0800a840 <__exponent>:
 800a840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a842:	4603      	mov	r3, r0
 800a844:	2900      	cmp	r1, #0
 800a846:	bfb8      	it	lt
 800a848:	4249      	neglt	r1, r1
 800a84a:	f803 2b02 	strb.w	r2, [r3], #2
 800a84e:	bfb4      	ite	lt
 800a850:	222d      	movlt	r2, #45	; 0x2d
 800a852:	222b      	movge	r2, #43	; 0x2b
 800a854:	2909      	cmp	r1, #9
 800a856:	7042      	strb	r2, [r0, #1]
 800a858:	dd2a      	ble.n	800a8b0 <__exponent+0x70>
 800a85a:	f10d 0207 	add.w	r2, sp, #7
 800a85e:	4617      	mov	r7, r2
 800a860:	260a      	movs	r6, #10
 800a862:	4694      	mov	ip, r2
 800a864:	fb91 f5f6 	sdiv	r5, r1, r6
 800a868:	fb06 1415 	mls	r4, r6, r5, r1
 800a86c:	3430      	adds	r4, #48	; 0x30
 800a86e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a872:	460c      	mov	r4, r1
 800a874:	2c63      	cmp	r4, #99	; 0x63
 800a876:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a87a:	4629      	mov	r1, r5
 800a87c:	dcf1      	bgt.n	800a862 <__exponent+0x22>
 800a87e:	3130      	adds	r1, #48	; 0x30
 800a880:	f1ac 0402 	sub.w	r4, ip, #2
 800a884:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a888:	1c41      	adds	r1, r0, #1
 800a88a:	4622      	mov	r2, r4
 800a88c:	42ba      	cmp	r2, r7
 800a88e:	d30a      	bcc.n	800a8a6 <__exponent+0x66>
 800a890:	f10d 0209 	add.w	r2, sp, #9
 800a894:	eba2 020c 	sub.w	r2, r2, ip
 800a898:	42bc      	cmp	r4, r7
 800a89a:	bf88      	it	hi
 800a89c:	2200      	movhi	r2, #0
 800a89e:	4413      	add	r3, r2
 800a8a0:	1a18      	subs	r0, r3, r0
 800a8a2:	b003      	add	sp, #12
 800a8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8a6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a8aa:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a8ae:	e7ed      	b.n	800a88c <__exponent+0x4c>
 800a8b0:	2330      	movs	r3, #48	; 0x30
 800a8b2:	3130      	adds	r1, #48	; 0x30
 800a8b4:	7083      	strb	r3, [r0, #2]
 800a8b6:	70c1      	strb	r1, [r0, #3]
 800a8b8:	1d03      	adds	r3, r0, #4
 800a8ba:	e7f1      	b.n	800a8a0 <__exponent+0x60>

0800a8bc <_printf_float>:
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	ed2d 8b02 	vpush	{d8}
 800a8c4:	b08d      	sub	sp, #52	; 0x34
 800a8c6:	460c      	mov	r4, r1
 800a8c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a8cc:	4616      	mov	r6, r2
 800a8ce:	461f      	mov	r7, r3
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	f001 fd6b 	bl	800c3ac <_localeconv_r>
 800a8d6:	f8d0 a000 	ldr.w	sl, [r0]
 800a8da:	4650      	mov	r0, sl
 800a8dc:	f7f5 fce0 	bl	80002a0 <strlen>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e4:	6823      	ldr	r3, [r4, #0]
 800a8e6:	9305      	str	r3, [sp, #20]
 800a8e8:	f8d8 3000 	ldr.w	r3, [r8]
 800a8ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a8f0:	3307      	adds	r3, #7
 800a8f2:	f023 0307 	bic.w	r3, r3, #7
 800a8f6:	f103 0208 	add.w	r2, r3, #8
 800a8fa:	f8c8 2000 	str.w	r2, [r8]
 800a8fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a902:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a906:	9307      	str	r3, [sp, #28]
 800a908:	f8cd 8018 	str.w	r8, [sp, #24]
 800a90c:	ee08 0a10 	vmov	s16, r0
 800a910:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a918:	4b9e      	ldr	r3, [pc, #632]	; (800ab94 <_printf_float+0x2d8>)
 800a91a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a91e:	f7f6 f91d 	bl	8000b5c <__aeabi_dcmpun>
 800a922:	bb88      	cbnz	r0, 800a988 <_printf_float+0xcc>
 800a924:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a928:	4b9a      	ldr	r3, [pc, #616]	; (800ab94 <_printf_float+0x2d8>)
 800a92a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a92e:	f7f6 f8f7 	bl	8000b20 <__aeabi_dcmple>
 800a932:	bb48      	cbnz	r0, 800a988 <_printf_float+0xcc>
 800a934:	2200      	movs	r2, #0
 800a936:	2300      	movs	r3, #0
 800a938:	4640      	mov	r0, r8
 800a93a:	4649      	mov	r1, r9
 800a93c:	f7f6 f8e6 	bl	8000b0c <__aeabi_dcmplt>
 800a940:	b110      	cbz	r0, 800a948 <_printf_float+0x8c>
 800a942:	232d      	movs	r3, #45	; 0x2d
 800a944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a948:	4a93      	ldr	r2, [pc, #588]	; (800ab98 <_printf_float+0x2dc>)
 800a94a:	4b94      	ldr	r3, [pc, #592]	; (800ab9c <_printf_float+0x2e0>)
 800a94c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a950:	bf94      	ite	ls
 800a952:	4690      	movls	r8, r2
 800a954:	4698      	movhi	r8, r3
 800a956:	2303      	movs	r3, #3
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	9b05      	ldr	r3, [sp, #20]
 800a95c:	f023 0304 	bic.w	r3, r3, #4
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	f04f 0900 	mov.w	r9, #0
 800a966:	9700      	str	r7, [sp, #0]
 800a968:	4633      	mov	r3, r6
 800a96a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a96c:	4621      	mov	r1, r4
 800a96e:	4628      	mov	r0, r5
 800a970:	f000 f9da 	bl	800ad28 <_printf_common>
 800a974:	3001      	adds	r0, #1
 800a976:	f040 8090 	bne.w	800aa9a <_printf_float+0x1de>
 800a97a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a97e:	b00d      	add	sp, #52	; 0x34
 800a980:	ecbd 8b02 	vpop	{d8}
 800a984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a988:	4642      	mov	r2, r8
 800a98a:	464b      	mov	r3, r9
 800a98c:	4640      	mov	r0, r8
 800a98e:	4649      	mov	r1, r9
 800a990:	f7f6 f8e4 	bl	8000b5c <__aeabi_dcmpun>
 800a994:	b140      	cbz	r0, 800a9a8 <_printf_float+0xec>
 800a996:	464b      	mov	r3, r9
 800a998:	2b00      	cmp	r3, #0
 800a99a:	bfbc      	itt	lt
 800a99c:	232d      	movlt	r3, #45	; 0x2d
 800a99e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a9a2:	4a7f      	ldr	r2, [pc, #508]	; (800aba0 <_printf_float+0x2e4>)
 800a9a4:	4b7f      	ldr	r3, [pc, #508]	; (800aba4 <_printf_float+0x2e8>)
 800a9a6:	e7d1      	b.n	800a94c <_printf_float+0x90>
 800a9a8:	6863      	ldr	r3, [r4, #4]
 800a9aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a9ae:	9206      	str	r2, [sp, #24]
 800a9b0:	1c5a      	adds	r2, r3, #1
 800a9b2:	d13f      	bne.n	800aa34 <_printf_float+0x178>
 800a9b4:	2306      	movs	r3, #6
 800a9b6:	6063      	str	r3, [r4, #4]
 800a9b8:	9b05      	ldr	r3, [sp, #20]
 800a9ba:	6861      	ldr	r1, [r4, #4]
 800a9bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	9303      	str	r3, [sp, #12]
 800a9c4:	ab0a      	add	r3, sp, #40	; 0x28
 800a9c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a9ca:	ab09      	add	r3, sp, #36	; 0x24
 800a9cc:	ec49 8b10 	vmov	d0, r8, r9
 800a9d0:	9300      	str	r3, [sp, #0]
 800a9d2:	6022      	str	r2, [r4, #0]
 800a9d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f7ff fecf 	bl	800a77c <__cvt>
 800a9de:	9b06      	ldr	r3, [sp, #24]
 800a9e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9e2:	2b47      	cmp	r3, #71	; 0x47
 800a9e4:	4680      	mov	r8, r0
 800a9e6:	d108      	bne.n	800a9fa <_printf_float+0x13e>
 800a9e8:	1cc8      	adds	r0, r1, #3
 800a9ea:	db02      	blt.n	800a9f2 <_printf_float+0x136>
 800a9ec:	6863      	ldr	r3, [r4, #4]
 800a9ee:	4299      	cmp	r1, r3
 800a9f0:	dd41      	ble.n	800aa76 <_printf_float+0x1ba>
 800a9f2:	f1ab 0302 	sub.w	r3, fp, #2
 800a9f6:	fa5f fb83 	uxtb.w	fp, r3
 800a9fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a9fe:	d820      	bhi.n	800aa42 <_printf_float+0x186>
 800aa00:	3901      	subs	r1, #1
 800aa02:	465a      	mov	r2, fp
 800aa04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aa08:	9109      	str	r1, [sp, #36]	; 0x24
 800aa0a:	f7ff ff19 	bl	800a840 <__exponent>
 800aa0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa10:	1813      	adds	r3, r2, r0
 800aa12:	2a01      	cmp	r2, #1
 800aa14:	4681      	mov	r9, r0
 800aa16:	6123      	str	r3, [r4, #16]
 800aa18:	dc02      	bgt.n	800aa20 <_printf_float+0x164>
 800aa1a:	6822      	ldr	r2, [r4, #0]
 800aa1c:	07d2      	lsls	r2, r2, #31
 800aa1e:	d501      	bpl.n	800aa24 <_printf_float+0x168>
 800aa20:	3301      	adds	r3, #1
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d09c      	beq.n	800a966 <_printf_float+0xaa>
 800aa2c:	232d      	movs	r3, #45	; 0x2d
 800aa2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa32:	e798      	b.n	800a966 <_printf_float+0xaa>
 800aa34:	9a06      	ldr	r2, [sp, #24]
 800aa36:	2a47      	cmp	r2, #71	; 0x47
 800aa38:	d1be      	bne.n	800a9b8 <_printf_float+0xfc>
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1bc      	bne.n	800a9b8 <_printf_float+0xfc>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e7b9      	b.n	800a9b6 <_printf_float+0xfa>
 800aa42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800aa46:	d118      	bne.n	800aa7a <_printf_float+0x1be>
 800aa48:	2900      	cmp	r1, #0
 800aa4a:	6863      	ldr	r3, [r4, #4]
 800aa4c:	dd0b      	ble.n	800aa66 <_printf_float+0x1aa>
 800aa4e:	6121      	str	r1, [r4, #16]
 800aa50:	b913      	cbnz	r3, 800aa58 <_printf_float+0x19c>
 800aa52:	6822      	ldr	r2, [r4, #0]
 800aa54:	07d0      	lsls	r0, r2, #31
 800aa56:	d502      	bpl.n	800aa5e <_printf_float+0x1a2>
 800aa58:	3301      	adds	r3, #1
 800aa5a:	440b      	add	r3, r1
 800aa5c:	6123      	str	r3, [r4, #16]
 800aa5e:	65a1      	str	r1, [r4, #88]	; 0x58
 800aa60:	f04f 0900 	mov.w	r9, #0
 800aa64:	e7de      	b.n	800aa24 <_printf_float+0x168>
 800aa66:	b913      	cbnz	r3, 800aa6e <_printf_float+0x1b2>
 800aa68:	6822      	ldr	r2, [r4, #0]
 800aa6a:	07d2      	lsls	r2, r2, #31
 800aa6c:	d501      	bpl.n	800aa72 <_printf_float+0x1b6>
 800aa6e:	3302      	adds	r3, #2
 800aa70:	e7f4      	b.n	800aa5c <_printf_float+0x1a0>
 800aa72:	2301      	movs	r3, #1
 800aa74:	e7f2      	b.n	800aa5c <_printf_float+0x1a0>
 800aa76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800aa7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa7c:	4299      	cmp	r1, r3
 800aa7e:	db05      	blt.n	800aa8c <_printf_float+0x1d0>
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	6121      	str	r1, [r4, #16]
 800aa84:	07d8      	lsls	r0, r3, #31
 800aa86:	d5ea      	bpl.n	800aa5e <_printf_float+0x1a2>
 800aa88:	1c4b      	adds	r3, r1, #1
 800aa8a:	e7e7      	b.n	800aa5c <_printf_float+0x1a0>
 800aa8c:	2900      	cmp	r1, #0
 800aa8e:	bfd4      	ite	le
 800aa90:	f1c1 0202 	rsble	r2, r1, #2
 800aa94:	2201      	movgt	r2, #1
 800aa96:	4413      	add	r3, r2
 800aa98:	e7e0      	b.n	800aa5c <_printf_float+0x1a0>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	055a      	lsls	r2, r3, #21
 800aa9e:	d407      	bmi.n	800aab0 <_printf_float+0x1f4>
 800aaa0:	6923      	ldr	r3, [r4, #16]
 800aaa2:	4642      	mov	r2, r8
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	d12c      	bne.n	800ab08 <_printf_float+0x24c>
 800aaae:	e764      	b.n	800a97a <_printf_float+0xbe>
 800aab0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800aab4:	f240 80e0 	bls.w	800ac78 <_printf_float+0x3bc>
 800aab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aabc:	2200      	movs	r2, #0
 800aabe:	2300      	movs	r3, #0
 800aac0:	f7f6 f81a 	bl	8000af8 <__aeabi_dcmpeq>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d034      	beq.n	800ab32 <_printf_float+0x276>
 800aac8:	4a37      	ldr	r2, [pc, #220]	; (800aba8 <_printf_float+0x2ec>)
 800aaca:	2301      	movs	r3, #1
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	f43f af51 	beq.w	800a97a <_printf_float+0xbe>
 800aad8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aadc:	429a      	cmp	r2, r3
 800aade:	db02      	blt.n	800aae6 <_printf_float+0x22a>
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	07d8      	lsls	r0, r3, #31
 800aae4:	d510      	bpl.n	800ab08 <_printf_float+0x24c>
 800aae6:	ee18 3a10 	vmov	r3, s16
 800aaea:	4652      	mov	r2, sl
 800aaec:	4631      	mov	r1, r6
 800aaee:	4628      	mov	r0, r5
 800aaf0:	47b8      	blx	r7
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	f43f af41 	beq.w	800a97a <_printf_float+0xbe>
 800aaf8:	f04f 0800 	mov.w	r8, #0
 800aafc:	f104 091a 	add.w	r9, r4, #26
 800ab00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab02:	3b01      	subs	r3, #1
 800ab04:	4543      	cmp	r3, r8
 800ab06:	dc09      	bgt.n	800ab1c <_printf_float+0x260>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	079b      	lsls	r3, r3, #30
 800ab0c:	f100 8107 	bmi.w	800ad1e <_printf_float+0x462>
 800ab10:	68e0      	ldr	r0, [r4, #12]
 800ab12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab14:	4298      	cmp	r0, r3
 800ab16:	bfb8      	it	lt
 800ab18:	4618      	movlt	r0, r3
 800ab1a:	e730      	b.n	800a97e <_printf_float+0xc2>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	464a      	mov	r2, r9
 800ab20:	4631      	mov	r1, r6
 800ab22:	4628      	mov	r0, r5
 800ab24:	47b8      	blx	r7
 800ab26:	3001      	adds	r0, #1
 800ab28:	f43f af27 	beq.w	800a97a <_printf_float+0xbe>
 800ab2c:	f108 0801 	add.w	r8, r8, #1
 800ab30:	e7e6      	b.n	800ab00 <_printf_float+0x244>
 800ab32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	dc39      	bgt.n	800abac <_printf_float+0x2f0>
 800ab38:	4a1b      	ldr	r2, [pc, #108]	; (800aba8 <_printf_float+0x2ec>)
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	4628      	mov	r0, r5
 800ab40:	47b8      	blx	r7
 800ab42:	3001      	adds	r0, #1
 800ab44:	f43f af19 	beq.w	800a97a <_printf_float+0xbe>
 800ab48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	d102      	bne.n	800ab56 <_printf_float+0x29a>
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	07d9      	lsls	r1, r3, #31
 800ab54:	d5d8      	bpl.n	800ab08 <_printf_float+0x24c>
 800ab56:	ee18 3a10 	vmov	r3, s16
 800ab5a:	4652      	mov	r2, sl
 800ab5c:	4631      	mov	r1, r6
 800ab5e:	4628      	mov	r0, r5
 800ab60:	47b8      	blx	r7
 800ab62:	3001      	adds	r0, #1
 800ab64:	f43f af09 	beq.w	800a97a <_printf_float+0xbe>
 800ab68:	f04f 0900 	mov.w	r9, #0
 800ab6c:	f104 0a1a 	add.w	sl, r4, #26
 800ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab72:	425b      	negs	r3, r3
 800ab74:	454b      	cmp	r3, r9
 800ab76:	dc01      	bgt.n	800ab7c <_printf_float+0x2c0>
 800ab78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab7a:	e792      	b.n	800aaa2 <_printf_float+0x1e6>
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	4652      	mov	r2, sl
 800ab80:	4631      	mov	r1, r6
 800ab82:	4628      	mov	r0, r5
 800ab84:	47b8      	blx	r7
 800ab86:	3001      	adds	r0, #1
 800ab88:	f43f aef7 	beq.w	800a97a <_printf_float+0xbe>
 800ab8c:	f109 0901 	add.w	r9, r9, #1
 800ab90:	e7ee      	b.n	800ab70 <_printf_float+0x2b4>
 800ab92:	bf00      	nop
 800ab94:	7fefffff 	.word	0x7fefffff
 800ab98:	0800f2f8 	.word	0x0800f2f8
 800ab9c:	0800f2fc 	.word	0x0800f2fc
 800aba0:	0800f300 	.word	0x0800f300
 800aba4:	0800f304 	.word	0x0800f304
 800aba8:	0800f308 	.word	0x0800f308
 800abac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abb0:	429a      	cmp	r2, r3
 800abb2:	bfa8      	it	ge
 800abb4:	461a      	movge	r2, r3
 800abb6:	2a00      	cmp	r2, #0
 800abb8:	4691      	mov	r9, r2
 800abba:	dc37      	bgt.n	800ac2c <_printf_float+0x370>
 800abbc:	f04f 0b00 	mov.w	fp, #0
 800abc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800abc4:	f104 021a 	add.w	r2, r4, #26
 800abc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800abca:	9305      	str	r3, [sp, #20]
 800abcc:	eba3 0309 	sub.w	r3, r3, r9
 800abd0:	455b      	cmp	r3, fp
 800abd2:	dc33      	bgt.n	800ac3c <_printf_float+0x380>
 800abd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abd8:	429a      	cmp	r2, r3
 800abda:	db3b      	blt.n	800ac54 <_printf_float+0x398>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	07da      	lsls	r2, r3, #31
 800abe0:	d438      	bmi.n	800ac54 <_printf_float+0x398>
 800abe2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800abe6:	eba2 0903 	sub.w	r9, r2, r3
 800abea:	9b05      	ldr	r3, [sp, #20]
 800abec:	1ad2      	subs	r2, r2, r3
 800abee:	4591      	cmp	r9, r2
 800abf0:	bfa8      	it	ge
 800abf2:	4691      	movge	r9, r2
 800abf4:	f1b9 0f00 	cmp.w	r9, #0
 800abf8:	dc35      	bgt.n	800ac66 <_printf_float+0x3aa>
 800abfa:	f04f 0800 	mov.w	r8, #0
 800abfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ac02:	f104 0a1a 	add.w	sl, r4, #26
 800ac06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac0a:	1a9b      	subs	r3, r3, r2
 800ac0c:	eba3 0309 	sub.w	r3, r3, r9
 800ac10:	4543      	cmp	r3, r8
 800ac12:	f77f af79 	ble.w	800ab08 <_printf_float+0x24c>
 800ac16:	2301      	movs	r3, #1
 800ac18:	4652      	mov	r2, sl
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b8      	blx	r7
 800ac20:	3001      	adds	r0, #1
 800ac22:	f43f aeaa 	beq.w	800a97a <_printf_float+0xbe>
 800ac26:	f108 0801 	add.w	r8, r8, #1
 800ac2a:	e7ec      	b.n	800ac06 <_printf_float+0x34a>
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	4631      	mov	r1, r6
 800ac30:	4642      	mov	r2, r8
 800ac32:	4628      	mov	r0, r5
 800ac34:	47b8      	blx	r7
 800ac36:	3001      	adds	r0, #1
 800ac38:	d1c0      	bne.n	800abbc <_printf_float+0x300>
 800ac3a:	e69e      	b.n	800a97a <_printf_float+0xbe>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	4631      	mov	r1, r6
 800ac40:	4628      	mov	r0, r5
 800ac42:	9205      	str	r2, [sp, #20]
 800ac44:	47b8      	blx	r7
 800ac46:	3001      	adds	r0, #1
 800ac48:	f43f ae97 	beq.w	800a97a <_printf_float+0xbe>
 800ac4c:	9a05      	ldr	r2, [sp, #20]
 800ac4e:	f10b 0b01 	add.w	fp, fp, #1
 800ac52:	e7b9      	b.n	800abc8 <_printf_float+0x30c>
 800ac54:	ee18 3a10 	vmov	r3, s16
 800ac58:	4652      	mov	r2, sl
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4628      	mov	r0, r5
 800ac5e:	47b8      	blx	r7
 800ac60:	3001      	adds	r0, #1
 800ac62:	d1be      	bne.n	800abe2 <_printf_float+0x326>
 800ac64:	e689      	b.n	800a97a <_printf_float+0xbe>
 800ac66:	9a05      	ldr	r2, [sp, #20]
 800ac68:	464b      	mov	r3, r9
 800ac6a:	4442      	add	r2, r8
 800ac6c:	4631      	mov	r1, r6
 800ac6e:	4628      	mov	r0, r5
 800ac70:	47b8      	blx	r7
 800ac72:	3001      	adds	r0, #1
 800ac74:	d1c1      	bne.n	800abfa <_printf_float+0x33e>
 800ac76:	e680      	b.n	800a97a <_printf_float+0xbe>
 800ac78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ac7a:	2a01      	cmp	r2, #1
 800ac7c:	dc01      	bgt.n	800ac82 <_printf_float+0x3c6>
 800ac7e:	07db      	lsls	r3, r3, #31
 800ac80:	d53a      	bpl.n	800acf8 <_printf_float+0x43c>
 800ac82:	2301      	movs	r3, #1
 800ac84:	4642      	mov	r2, r8
 800ac86:	4631      	mov	r1, r6
 800ac88:	4628      	mov	r0, r5
 800ac8a:	47b8      	blx	r7
 800ac8c:	3001      	adds	r0, #1
 800ac8e:	f43f ae74 	beq.w	800a97a <_printf_float+0xbe>
 800ac92:	ee18 3a10 	vmov	r3, s16
 800ac96:	4652      	mov	r2, sl
 800ac98:	4631      	mov	r1, r6
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	47b8      	blx	r7
 800ac9e:	3001      	adds	r0, #1
 800aca0:	f43f ae6b 	beq.w	800a97a <_printf_float+0xbe>
 800aca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aca8:	2200      	movs	r2, #0
 800acaa:	2300      	movs	r3, #0
 800acac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800acb0:	f7f5 ff22 	bl	8000af8 <__aeabi_dcmpeq>
 800acb4:	b9d8      	cbnz	r0, 800acee <_printf_float+0x432>
 800acb6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800acba:	f108 0201 	add.w	r2, r8, #1
 800acbe:	4631      	mov	r1, r6
 800acc0:	4628      	mov	r0, r5
 800acc2:	47b8      	blx	r7
 800acc4:	3001      	adds	r0, #1
 800acc6:	d10e      	bne.n	800ace6 <_printf_float+0x42a>
 800acc8:	e657      	b.n	800a97a <_printf_float+0xbe>
 800acca:	2301      	movs	r3, #1
 800accc:	4652      	mov	r2, sl
 800acce:	4631      	mov	r1, r6
 800acd0:	4628      	mov	r0, r5
 800acd2:	47b8      	blx	r7
 800acd4:	3001      	adds	r0, #1
 800acd6:	f43f ae50 	beq.w	800a97a <_printf_float+0xbe>
 800acda:	f108 0801 	add.w	r8, r8, #1
 800acde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ace0:	3b01      	subs	r3, #1
 800ace2:	4543      	cmp	r3, r8
 800ace4:	dcf1      	bgt.n	800acca <_printf_float+0x40e>
 800ace6:	464b      	mov	r3, r9
 800ace8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800acec:	e6da      	b.n	800aaa4 <_printf_float+0x1e8>
 800acee:	f04f 0800 	mov.w	r8, #0
 800acf2:	f104 0a1a 	add.w	sl, r4, #26
 800acf6:	e7f2      	b.n	800acde <_printf_float+0x422>
 800acf8:	2301      	movs	r3, #1
 800acfa:	4642      	mov	r2, r8
 800acfc:	e7df      	b.n	800acbe <_printf_float+0x402>
 800acfe:	2301      	movs	r3, #1
 800ad00:	464a      	mov	r2, r9
 800ad02:	4631      	mov	r1, r6
 800ad04:	4628      	mov	r0, r5
 800ad06:	47b8      	blx	r7
 800ad08:	3001      	adds	r0, #1
 800ad0a:	f43f ae36 	beq.w	800a97a <_printf_float+0xbe>
 800ad0e:	f108 0801 	add.w	r8, r8, #1
 800ad12:	68e3      	ldr	r3, [r4, #12]
 800ad14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ad16:	1a5b      	subs	r3, r3, r1
 800ad18:	4543      	cmp	r3, r8
 800ad1a:	dcf0      	bgt.n	800acfe <_printf_float+0x442>
 800ad1c:	e6f8      	b.n	800ab10 <_printf_float+0x254>
 800ad1e:	f04f 0800 	mov.w	r8, #0
 800ad22:	f104 0919 	add.w	r9, r4, #25
 800ad26:	e7f4      	b.n	800ad12 <_printf_float+0x456>

0800ad28 <_printf_common>:
 800ad28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad2c:	4616      	mov	r6, r2
 800ad2e:	4699      	mov	r9, r3
 800ad30:	688a      	ldr	r2, [r1, #8]
 800ad32:	690b      	ldr	r3, [r1, #16]
 800ad34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	bfb8      	it	lt
 800ad3c:	4613      	movlt	r3, r2
 800ad3e:	6033      	str	r3, [r6, #0]
 800ad40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad44:	4607      	mov	r7, r0
 800ad46:	460c      	mov	r4, r1
 800ad48:	b10a      	cbz	r2, 800ad4e <_printf_common+0x26>
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	6033      	str	r3, [r6, #0]
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	0699      	lsls	r1, r3, #26
 800ad52:	bf42      	ittt	mi
 800ad54:	6833      	ldrmi	r3, [r6, #0]
 800ad56:	3302      	addmi	r3, #2
 800ad58:	6033      	strmi	r3, [r6, #0]
 800ad5a:	6825      	ldr	r5, [r4, #0]
 800ad5c:	f015 0506 	ands.w	r5, r5, #6
 800ad60:	d106      	bne.n	800ad70 <_printf_common+0x48>
 800ad62:	f104 0a19 	add.w	sl, r4, #25
 800ad66:	68e3      	ldr	r3, [r4, #12]
 800ad68:	6832      	ldr	r2, [r6, #0]
 800ad6a:	1a9b      	subs	r3, r3, r2
 800ad6c:	42ab      	cmp	r3, r5
 800ad6e:	dc26      	bgt.n	800adbe <_printf_common+0x96>
 800ad70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad74:	1e13      	subs	r3, r2, #0
 800ad76:	6822      	ldr	r2, [r4, #0]
 800ad78:	bf18      	it	ne
 800ad7a:	2301      	movne	r3, #1
 800ad7c:	0692      	lsls	r2, r2, #26
 800ad7e:	d42b      	bmi.n	800add8 <_printf_common+0xb0>
 800ad80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad84:	4649      	mov	r1, r9
 800ad86:	4638      	mov	r0, r7
 800ad88:	47c0      	blx	r8
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	d01e      	beq.n	800adcc <_printf_common+0xa4>
 800ad8e:	6823      	ldr	r3, [r4, #0]
 800ad90:	6922      	ldr	r2, [r4, #16]
 800ad92:	f003 0306 	and.w	r3, r3, #6
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	bf02      	ittt	eq
 800ad9a:	68e5      	ldreq	r5, [r4, #12]
 800ad9c:	6833      	ldreq	r3, [r6, #0]
 800ad9e:	1aed      	subeq	r5, r5, r3
 800ada0:	68a3      	ldr	r3, [r4, #8]
 800ada2:	bf0c      	ite	eq
 800ada4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ada8:	2500      	movne	r5, #0
 800adaa:	4293      	cmp	r3, r2
 800adac:	bfc4      	itt	gt
 800adae:	1a9b      	subgt	r3, r3, r2
 800adb0:	18ed      	addgt	r5, r5, r3
 800adb2:	2600      	movs	r6, #0
 800adb4:	341a      	adds	r4, #26
 800adb6:	42b5      	cmp	r5, r6
 800adb8:	d11a      	bne.n	800adf0 <_printf_common+0xc8>
 800adba:	2000      	movs	r0, #0
 800adbc:	e008      	b.n	800add0 <_printf_common+0xa8>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4652      	mov	r2, sl
 800adc2:	4649      	mov	r1, r9
 800adc4:	4638      	mov	r0, r7
 800adc6:	47c0      	blx	r8
 800adc8:	3001      	adds	r0, #1
 800adca:	d103      	bne.n	800add4 <_printf_common+0xac>
 800adcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800add0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add4:	3501      	adds	r5, #1
 800add6:	e7c6      	b.n	800ad66 <_printf_common+0x3e>
 800add8:	18e1      	adds	r1, r4, r3
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	2030      	movs	r0, #48	; 0x30
 800adde:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ade2:	4422      	add	r2, r4
 800ade4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ade8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adec:	3302      	adds	r3, #2
 800adee:	e7c7      	b.n	800ad80 <_printf_common+0x58>
 800adf0:	2301      	movs	r3, #1
 800adf2:	4622      	mov	r2, r4
 800adf4:	4649      	mov	r1, r9
 800adf6:	4638      	mov	r0, r7
 800adf8:	47c0      	blx	r8
 800adfa:	3001      	adds	r0, #1
 800adfc:	d0e6      	beq.n	800adcc <_printf_common+0xa4>
 800adfe:	3601      	adds	r6, #1
 800ae00:	e7d9      	b.n	800adb6 <_printf_common+0x8e>
	...

0800ae04 <_printf_i>:
 800ae04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae08:	7e0f      	ldrb	r7, [r1, #24]
 800ae0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae0c:	2f78      	cmp	r7, #120	; 0x78
 800ae0e:	4691      	mov	r9, r2
 800ae10:	4680      	mov	r8, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	469a      	mov	sl, r3
 800ae16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae1a:	d807      	bhi.n	800ae2c <_printf_i+0x28>
 800ae1c:	2f62      	cmp	r7, #98	; 0x62
 800ae1e:	d80a      	bhi.n	800ae36 <_printf_i+0x32>
 800ae20:	2f00      	cmp	r7, #0
 800ae22:	f000 80d4 	beq.w	800afce <_printf_i+0x1ca>
 800ae26:	2f58      	cmp	r7, #88	; 0x58
 800ae28:	f000 80c0 	beq.w	800afac <_printf_i+0x1a8>
 800ae2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae34:	e03a      	b.n	800aeac <_printf_i+0xa8>
 800ae36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae3a:	2b15      	cmp	r3, #21
 800ae3c:	d8f6      	bhi.n	800ae2c <_printf_i+0x28>
 800ae3e:	a101      	add	r1, pc, #4	; (adr r1, 800ae44 <_printf_i+0x40>)
 800ae40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae44:	0800ae9d 	.word	0x0800ae9d
 800ae48:	0800aeb1 	.word	0x0800aeb1
 800ae4c:	0800ae2d 	.word	0x0800ae2d
 800ae50:	0800ae2d 	.word	0x0800ae2d
 800ae54:	0800ae2d 	.word	0x0800ae2d
 800ae58:	0800ae2d 	.word	0x0800ae2d
 800ae5c:	0800aeb1 	.word	0x0800aeb1
 800ae60:	0800ae2d 	.word	0x0800ae2d
 800ae64:	0800ae2d 	.word	0x0800ae2d
 800ae68:	0800ae2d 	.word	0x0800ae2d
 800ae6c:	0800ae2d 	.word	0x0800ae2d
 800ae70:	0800afb5 	.word	0x0800afb5
 800ae74:	0800aedd 	.word	0x0800aedd
 800ae78:	0800af6f 	.word	0x0800af6f
 800ae7c:	0800ae2d 	.word	0x0800ae2d
 800ae80:	0800ae2d 	.word	0x0800ae2d
 800ae84:	0800afd7 	.word	0x0800afd7
 800ae88:	0800ae2d 	.word	0x0800ae2d
 800ae8c:	0800aedd 	.word	0x0800aedd
 800ae90:	0800ae2d 	.word	0x0800ae2d
 800ae94:	0800ae2d 	.word	0x0800ae2d
 800ae98:	0800af77 	.word	0x0800af77
 800ae9c:	682b      	ldr	r3, [r5, #0]
 800ae9e:	1d1a      	adds	r2, r3, #4
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	602a      	str	r2, [r5, #0]
 800aea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aeac:	2301      	movs	r3, #1
 800aeae:	e09f      	b.n	800aff0 <_printf_i+0x1ec>
 800aeb0:	6820      	ldr	r0, [r4, #0]
 800aeb2:	682b      	ldr	r3, [r5, #0]
 800aeb4:	0607      	lsls	r7, r0, #24
 800aeb6:	f103 0104 	add.w	r1, r3, #4
 800aeba:	6029      	str	r1, [r5, #0]
 800aebc:	d501      	bpl.n	800aec2 <_printf_i+0xbe>
 800aebe:	681e      	ldr	r6, [r3, #0]
 800aec0:	e003      	b.n	800aeca <_printf_i+0xc6>
 800aec2:	0646      	lsls	r6, r0, #25
 800aec4:	d5fb      	bpl.n	800aebe <_printf_i+0xba>
 800aec6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aeca:	2e00      	cmp	r6, #0
 800aecc:	da03      	bge.n	800aed6 <_printf_i+0xd2>
 800aece:	232d      	movs	r3, #45	; 0x2d
 800aed0:	4276      	negs	r6, r6
 800aed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aed6:	485a      	ldr	r0, [pc, #360]	; (800b040 <_printf_i+0x23c>)
 800aed8:	230a      	movs	r3, #10
 800aeda:	e012      	b.n	800af02 <_printf_i+0xfe>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	6820      	ldr	r0, [r4, #0]
 800aee0:	1d19      	adds	r1, r3, #4
 800aee2:	6029      	str	r1, [r5, #0]
 800aee4:	0605      	lsls	r5, r0, #24
 800aee6:	d501      	bpl.n	800aeec <_printf_i+0xe8>
 800aee8:	681e      	ldr	r6, [r3, #0]
 800aeea:	e002      	b.n	800aef2 <_printf_i+0xee>
 800aeec:	0641      	lsls	r1, r0, #25
 800aeee:	d5fb      	bpl.n	800aee8 <_printf_i+0xe4>
 800aef0:	881e      	ldrh	r6, [r3, #0]
 800aef2:	4853      	ldr	r0, [pc, #332]	; (800b040 <_printf_i+0x23c>)
 800aef4:	2f6f      	cmp	r7, #111	; 0x6f
 800aef6:	bf0c      	ite	eq
 800aef8:	2308      	moveq	r3, #8
 800aefa:	230a      	movne	r3, #10
 800aefc:	2100      	movs	r1, #0
 800aefe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af02:	6865      	ldr	r5, [r4, #4]
 800af04:	60a5      	str	r5, [r4, #8]
 800af06:	2d00      	cmp	r5, #0
 800af08:	bfa2      	ittt	ge
 800af0a:	6821      	ldrge	r1, [r4, #0]
 800af0c:	f021 0104 	bicge.w	r1, r1, #4
 800af10:	6021      	strge	r1, [r4, #0]
 800af12:	b90e      	cbnz	r6, 800af18 <_printf_i+0x114>
 800af14:	2d00      	cmp	r5, #0
 800af16:	d04b      	beq.n	800afb0 <_printf_i+0x1ac>
 800af18:	4615      	mov	r5, r2
 800af1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800af1e:	fb03 6711 	mls	r7, r3, r1, r6
 800af22:	5dc7      	ldrb	r7, [r0, r7]
 800af24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af28:	4637      	mov	r7, r6
 800af2a:	42bb      	cmp	r3, r7
 800af2c:	460e      	mov	r6, r1
 800af2e:	d9f4      	bls.n	800af1a <_printf_i+0x116>
 800af30:	2b08      	cmp	r3, #8
 800af32:	d10b      	bne.n	800af4c <_printf_i+0x148>
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	07de      	lsls	r6, r3, #31
 800af38:	d508      	bpl.n	800af4c <_printf_i+0x148>
 800af3a:	6923      	ldr	r3, [r4, #16]
 800af3c:	6861      	ldr	r1, [r4, #4]
 800af3e:	4299      	cmp	r1, r3
 800af40:	bfde      	ittt	le
 800af42:	2330      	movle	r3, #48	; 0x30
 800af44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800af4c:	1b52      	subs	r2, r2, r5
 800af4e:	6122      	str	r2, [r4, #16]
 800af50:	f8cd a000 	str.w	sl, [sp]
 800af54:	464b      	mov	r3, r9
 800af56:	aa03      	add	r2, sp, #12
 800af58:	4621      	mov	r1, r4
 800af5a:	4640      	mov	r0, r8
 800af5c:	f7ff fee4 	bl	800ad28 <_printf_common>
 800af60:	3001      	adds	r0, #1
 800af62:	d14a      	bne.n	800affa <_printf_i+0x1f6>
 800af64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af68:	b004      	add	sp, #16
 800af6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	f043 0320 	orr.w	r3, r3, #32
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	4833      	ldr	r0, [pc, #204]	; (800b044 <_printf_i+0x240>)
 800af78:	2778      	movs	r7, #120	; 0x78
 800af7a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800af7e:	6823      	ldr	r3, [r4, #0]
 800af80:	6829      	ldr	r1, [r5, #0]
 800af82:	061f      	lsls	r7, r3, #24
 800af84:	f851 6b04 	ldr.w	r6, [r1], #4
 800af88:	d402      	bmi.n	800af90 <_printf_i+0x18c>
 800af8a:	065f      	lsls	r7, r3, #25
 800af8c:	bf48      	it	mi
 800af8e:	b2b6      	uxthmi	r6, r6
 800af90:	07df      	lsls	r7, r3, #31
 800af92:	bf48      	it	mi
 800af94:	f043 0320 	orrmi.w	r3, r3, #32
 800af98:	6029      	str	r1, [r5, #0]
 800af9a:	bf48      	it	mi
 800af9c:	6023      	strmi	r3, [r4, #0]
 800af9e:	b91e      	cbnz	r6, 800afa8 <_printf_i+0x1a4>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	f023 0320 	bic.w	r3, r3, #32
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	2310      	movs	r3, #16
 800afaa:	e7a7      	b.n	800aefc <_printf_i+0xf8>
 800afac:	4824      	ldr	r0, [pc, #144]	; (800b040 <_printf_i+0x23c>)
 800afae:	e7e4      	b.n	800af7a <_printf_i+0x176>
 800afb0:	4615      	mov	r5, r2
 800afb2:	e7bd      	b.n	800af30 <_printf_i+0x12c>
 800afb4:	682b      	ldr	r3, [r5, #0]
 800afb6:	6826      	ldr	r6, [r4, #0]
 800afb8:	6961      	ldr	r1, [r4, #20]
 800afba:	1d18      	adds	r0, r3, #4
 800afbc:	6028      	str	r0, [r5, #0]
 800afbe:	0635      	lsls	r5, r6, #24
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	d501      	bpl.n	800afc8 <_printf_i+0x1c4>
 800afc4:	6019      	str	r1, [r3, #0]
 800afc6:	e002      	b.n	800afce <_printf_i+0x1ca>
 800afc8:	0670      	lsls	r0, r6, #25
 800afca:	d5fb      	bpl.n	800afc4 <_printf_i+0x1c0>
 800afcc:	8019      	strh	r1, [r3, #0]
 800afce:	2300      	movs	r3, #0
 800afd0:	6123      	str	r3, [r4, #16]
 800afd2:	4615      	mov	r5, r2
 800afd4:	e7bc      	b.n	800af50 <_printf_i+0x14c>
 800afd6:	682b      	ldr	r3, [r5, #0]
 800afd8:	1d1a      	adds	r2, r3, #4
 800afda:	602a      	str	r2, [r5, #0]
 800afdc:	681d      	ldr	r5, [r3, #0]
 800afde:	6862      	ldr	r2, [r4, #4]
 800afe0:	2100      	movs	r1, #0
 800afe2:	4628      	mov	r0, r5
 800afe4:	f7f5 f90c 	bl	8000200 <memchr>
 800afe8:	b108      	cbz	r0, 800afee <_printf_i+0x1ea>
 800afea:	1b40      	subs	r0, r0, r5
 800afec:	6060      	str	r0, [r4, #4]
 800afee:	6863      	ldr	r3, [r4, #4]
 800aff0:	6123      	str	r3, [r4, #16]
 800aff2:	2300      	movs	r3, #0
 800aff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aff8:	e7aa      	b.n	800af50 <_printf_i+0x14c>
 800affa:	6923      	ldr	r3, [r4, #16]
 800affc:	462a      	mov	r2, r5
 800affe:	4649      	mov	r1, r9
 800b000:	4640      	mov	r0, r8
 800b002:	47d0      	blx	sl
 800b004:	3001      	adds	r0, #1
 800b006:	d0ad      	beq.n	800af64 <_printf_i+0x160>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	079b      	lsls	r3, r3, #30
 800b00c:	d413      	bmi.n	800b036 <_printf_i+0x232>
 800b00e:	68e0      	ldr	r0, [r4, #12]
 800b010:	9b03      	ldr	r3, [sp, #12]
 800b012:	4298      	cmp	r0, r3
 800b014:	bfb8      	it	lt
 800b016:	4618      	movlt	r0, r3
 800b018:	e7a6      	b.n	800af68 <_printf_i+0x164>
 800b01a:	2301      	movs	r3, #1
 800b01c:	4632      	mov	r2, r6
 800b01e:	4649      	mov	r1, r9
 800b020:	4640      	mov	r0, r8
 800b022:	47d0      	blx	sl
 800b024:	3001      	adds	r0, #1
 800b026:	d09d      	beq.n	800af64 <_printf_i+0x160>
 800b028:	3501      	adds	r5, #1
 800b02a:	68e3      	ldr	r3, [r4, #12]
 800b02c:	9903      	ldr	r1, [sp, #12]
 800b02e:	1a5b      	subs	r3, r3, r1
 800b030:	42ab      	cmp	r3, r5
 800b032:	dcf2      	bgt.n	800b01a <_printf_i+0x216>
 800b034:	e7eb      	b.n	800b00e <_printf_i+0x20a>
 800b036:	2500      	movs	r5, #0
 800b038:	f104 0619 	add.w	r6, r4, #25
 800b03c:	e7f5      	b.n	800b02a <_printf_i+0x226>
 800b03e:	bf00      	nop
 800b040:	0800f30a 	.word	0x0800f30a
 800b044:	0800f31b 	.word	0x0800f31b

0800b048 <_scanf_float>:
 800b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04c:	b087      	sub	sp, #28
 800b04e:	4617      	mov	r7, r2
 800b050:	9303      	str	r3, [sp, #12]
 800b052:	688b      	ldr	r3, [r1, #8]
 800b054:	1e5a      	subs	r2, r3, #1
 800b056:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b05a:	bf83      	ittte	hi
 800b05c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b060:	195b      	addhi	r3, r3, r5
 800b062:	9302      	strhi	r3, [sp, #8]
 800b064:	2300      	movls	r3, #0
 800b066:	bf86      	itte	hi
 800b068:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b06c:	608b      	strhi	r3, [r1, #8]
 800b06e:	9302      	strls	r3, [sp, #8]
 800b070:	680b      	ldr	r3, [r1, #0]
 800b072:	468b      	mov	fp, r1
 800b074:	2500      	movs	r5, #0
 800b076:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b07a:	f84b 3b1c 	str.w	r3, [fp], #28
 800b07e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b082:	4680      	mov	r8, r0
 800b084:	460c      	mov	r4, r1
 800b086:	465e      	mov	r6, fp
 800b088:	46aa      	mov	sl, r5
 800b08a:	46a9      	mov	r9, r5
 800b08c:	9501      	str	r5, [sp, #4]
 800b08e:	68a2      	ldr	r2, [r4, #8]
 800b090:	b152      	cbz	r2, 800b0a8 <_scanf_float+0x60>
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b4e      	cmp	r3, #78	; 0x4e
 800b098:	d864      	bhi.n	800b164 <_scanf_float+0x11c>
 800b09a:	2b40      	cmp	r3, #64	; 0x40
 800b09c:	d83c      	bhi.n	800b118 <_scanf_float+0xd0>
 800b09e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b0a2:	b2c8      	uxtb	r0, r1
 800b0a4:	280e      	cmp	r0, #14
 800b0a6:	d93a      	bls.n	800b11e <_scanf_float+0xd6>
 800b0a8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ac:	d003      	beq.n	800b0b6 <_scanf_float+0x6e>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b0ba:	f1ba 0f01 	cmp.w	sl, #1
 800b0be:	f200 8113 	bhi.w	800b2e8 <_scanf_float+0x2a0>
 800b0c2:	455e      	cmp	r6, fp
 800b0c4:	f200 8105 	bhi.w	800b2d2 <_scanf_float+0x28a>
 800b0c8:	2501      	movs	r5, #1
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	b007      	add	sp, #28
 800b0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b0d6:	2a0d      	cmp	r2, #13
 800b0d8:	d8e6      	bhi.n	800b0a8 <_scanf_float+0x60>
 800b0da:	a101      	add	r1, pc, #4	; (adr r1, 800b0e0 <_scanf_float+0x98>)
 800b0dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b0e0:	0800b21f 	.word	0x0800b21f
 800b0e4:	0800b0a9 	.word	0x0800b0a9
 800b0e8:	0800b0a9 	.word	0x0800b0a9
 800b0ec:	0800b0a9 	.word	0x0800b0a9
 800b0f0:	0800b27f 	.word	0x0800b27f
 800b0f4:	0800b257 	.word	0x0800b257
 800b0f8:	0800b0a9 	.word	0x0800b0a9
 800b0fc:	0800b0a9 	.word	0x0800b0a9
 800b100:	0800b22d 	.word	0x0800b22d
 800b104:	0800b0a9 	.word	0x0800b0a9
 800b108:	0800b0a9 	.word	0x0800b0a9
 800b10c:	0800b0a9 	.word	0x0800b0a9
 800b110:	0800b0a9 	.word	0x0800b0a9
 800b114:	0800b1e5 	.word	0x0800b1e5
 800b118:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b11c:	e7db      	b.n	800b0d6 <_scanf_float+0x8e>
 800b11e:	290e      	cmp	r1, #14
 800b120:	d8c2      	bhi.n	800b0a8 <_scanf_float+0x60>
 800b122:	a001      	add	r0, pc, #4	; (adr r0, 800b128 <_scanf_float+0xe0>)
 800b124:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b128:	0800b1d7 	.word	0x0800b1d7
 800b12c:	0800b0a9 	.word	0x0800b0a9
 800b130:	0800b1d7 	.word	0x0800b1d7
 800b134:	0800b26b 	.word	0x0800b26b
 800b138:	0800b0a9 	.word	0x0800b0a9
 800b13c:	0800b185 	.word	0x0800b185
 800b140:	0800b1c1 	.word	0x0800b1c1
 800b144:	0800b1c1 	.word	0x0800b1c1
 800b148:	0800b1c1 	.word	0x0800b1c1
 800b14c:	0800b1c1 	.word	0x0800b1c1
 800b150:	0800b1c1 	.word	0x0800b1c1
 800b154:	0800b1c1 	.word	0x0800b1c1
 800b158:	0800b1c1 	.word	0x0800b1c1
 800b15c:	0800b1c1 	.word	0x0800b1c1
 800b160:	0800b1c1 	.word	0x0800b1c1
 800b164:	2b6e      	cmp	r3, #110	; 0x6e
 800b166:	d809      	bhi.n	800b17c <_scanf_float+0x134>
 800b168:	2b60      	cmp	r3, #96	; 0x60
 800b16a:	d8b2      	bhi.n	800b0d2 <_scanf_float+0x8a>
 800b16c:	2b54      	cmp	r3, #84	; 0x54
 800b16e:	d077      	beq.n	800b260 <_scanf_float+0x218>
 800b170:	2b59      	cmp	r3, #89	; 0x59
 800b172:	d199      	bne.n	800b0a8 <_scanf_float+0x60>
 800b174:	2d07      	cmp	r5, #7
 800b176:	d197      	bne.n	800b0a8 <_scanf_float+0x60>
 800b178:	2508      	movs	r5, #8
 800b17a:	e029      	b.n	800b1d0 <_scanf_float+0x188>
 800b17c:	2b74      	cmp	r3, #116	; 0x74
 800b17e:	d06f      	beq.n	800b260 <_scanf_float+0x218>
 800b180:	2b79      	cmp	r3, #121	; 0x79
 800b182:	e7f6      	b.n	800b172 <_scanf_float+0x12a>
 800b184:	6821      	ldr	r1, [r4, #0]
 800b186:	05c8      	lsls	r0, r1, #23
 800b188:	d51a      	bpl.n	800b1c0 <_scanf_float+0x178>
 800b18a:	9b02      	ldr	r3, [sp, #8]
 800b18c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b190:	6021      	str	r1, [r4, #0]
 800b192:	f109 0901 	add.w	r9, r9, #1
 800b196:	b11b      	cbz	r3, 800b1a0 <_scanf_float+0x158>
 800b198:	3b01      	subs	r3, #1
 800b19a:	3201      	adds	r2, #1
 800b19c:	9302      	str	r3, [sp, #8]
 800b19e:	60a2      	str	r2, [r4, #8]
 800b1a0:	68a3      	ldr	r3, [r4, #8]
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	60a3      	str	r3, [r4, #8]
 800b1a6:	6923      	ldr	r3, [r4, #16]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	6123      	str	r3, [r4, #16]
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	607b      	str	r3, [r7, #4]
 800b1b4:	f340 8084 	ble.w	800b2c0 <_scanf_float+0x278>
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	603b      	str	r3, [r7, #0]
 800b1be:	e766      	b.n	800b08e <_scanf_float+0x46>
 800b1c0:	eb1a 0f05 	cmn.w	sl, r5
 800b1c4:	f47f af70 	bne.w	800b0a8 <_scanf_float+0x60>
 800b1c8:	6822      	ldr	r2, [r4, #0]
 800b1ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b1ce:	6022      	str	r2, [r4, #0]
 800b1d0:	f806 3b01 	strb.w	r3, [r6], #1
 800b1d4:	e7e4      	b.n	800b1a0 <_scanf_float+0x158>
 800b1d6:	6822      	ldr	r2, [r4, #0]
 800b1d8:	0610      	lsls	r0, r2, #24
 800b1da:	f57f af65 	bpl.w	800b0a8 <_scanf_float+0x60>
 800b1de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1e2:	e7f4      	b.n	800b1ce <_scanf_float+0x186>
 800b1e4:	f1ba 0f00 	cmp.w	sl, #0
 800b1e8:	d10e      	bne.n	800b208 <_scanf_float+0x1c0>
 800b1ea:	f1b9 0f00 	cmp.w	r9, #0
 800b1ee:	d10e      	bne.n	800b20e <_scanf_float+0x1c6>
 800b1f0:	6822      	ldr	r2, [r4, #0]
 800b1f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b1f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b1fa:	d108      	bne.n	800b20e <_scanf_float+0x1c6>
 800b1fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b200:	6022      	str	r2, [r4, #0]
 800b202:	f04f 0a01 	mov.w	sl, #1
 800b206:	e7e3      	b.n	800b1d0 <_scanf_float+0x188>
 800b208:	f1ba 0f02 	cmp.w	sl, #2
 800b20c:	d055      	beq.n	800b2ba <_scanf_float+0x272>
 800b20e:	2d01      	cmp	r5, #1
 800b210:	d002      	beq.n	800b218 <_scanf_float+0x1d0>
 800b212:	2d04      	cmp	r5, #4
 800b214:	f47f af48 	bne.w	800b0a8 <_scanf_float+0x60>
 800b218:	3501      	adds	r5, #1
 800b21a:	b2ed      	uxtb	r5, r5
 800b21c:	e7d8      	b.n	800b1d0 <_scanf_float+0x188>
 800b21e:	f1ba 0f01 	cmp.w	sl, #1
 800b222:	f47f af41 	bne.w	800b0a8 <_scanf_float+0x60>
 800b226:	f04f 0a02 	mov.w	sl, #2
 800b22a:	e7d1      	b.n	800b1d0 <_scanf_float+0x188>
 800b22c:	b97d      	cbnz	r5, 800b24e <_scanf_float+0x206>
 800b22e:	f1b9 0f00 	cmp.w	r9, #0
 800b232:	f47f af3c 	bne.w	800b0ae <_scanf_float+0x66>
 800b236:	6822      	ldr	r2, [r4, #0]
 800b238:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b23c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b240:	f47f af39 	bne.w	800b0b6 <_scanf_float+0x6e>
 800b244:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b248:	6022      	str	r2, [r4, #0]
 800b24a:	2501      	movs	r5, #1
 800b24c:	e7c0      	b.n	800b1d0 <_scanf_float+0x188>
 800b24e:	2d03      	cmp	r5, #3
 800b250:	d0e2      	beq.n	800b218 <_scanf_float+0x1d0>
 800b252:	2d05      	cmp	r5, #5
 800b254:	e7de      	b.n	800b214 <_scanf_float+0x1cc>
 800b256:	2d02      	cmp	r5, #2
 800b258:	f47f af26 	bne.w	800b0a8 <_scanf_float+0x60>
 800b25c:	2503      	movs	r5, #3
 800b25e:	e7b7      	b.n	800b1d0 <_scanf_float+0x188>
 800b260:	2d06      	cmp	r5, #6
 800b262:	f47f af21 	bne.w	800b0a8 <_scanf_float+0x60>
 800b266:	2507      	movs	r5, #7
 800b268:	e7b2      	b.n	800b1d0 <_scanf_float+0x188>
 800b26a:	6822      	ldr	r2, [r4, #0]
 800b26c:	0591      	lsls	r1, r2, #22
 800b26e:	f57f af1b 	bpl.w	800b0a8 <_scanf_float+0x60>
 800b272:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b276:	6022      	str	r2, [r4, #0]
 800b278:	f8cd 9004 	str.w	r9, [sp, #4]
 800b27c:	e7a8      	b.n	800b1d0 <_scanf_float+0x188>
 800b27e:	6822      	ldr	r2, [r4, #0]
 800b280:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b284:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b288:	d006      	beq.n	800b298 <_scanf_float+0x250>
 800b28a:	0550      	lsls	r0, r2, #21
 800b28c:	f57f af0c 	bpl.w	800b0a8 <_scanf_float+0x60>
 800b290:	f1b9 0f00 	cmp.w	r9, #0
 800b294:	f43f af0f 	beq.w	800b0b6 <_scanf_float+0x6e>
 800b298:	0591      	lsls	r1, r2, #22
 800b29a:	bf58      	it	pl
 800b29c:	9901      	ldrpl	r1, [sp, #4]
 800b29e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b2a2:	bf58      	it	pl
 800b2a4:	eba9 0101 	subpl.w	r1, r9, r1
 800b2a8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b2ac:	bf58      	it	pl
 800b2ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b2b2:	6022      	str	r2, [r4, #0]
 800b2b4:	f04f 0900 	mov.w	r9, #0
 800b2b8:	e78a      	b.n	800b1d0 <_scanf_float+0x188>
 800b2ba:	f04f 0a03 	mov.w	sl, #3
 800b2be:	e787      	b.n	800b1d0 <_scanf_float+0x188>
 800b2c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	4640      	mov	r0, r8
 800b2c8:	4798      	blx	r3
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	f43f aedf 	beq.w	800b08e <_scanf_float+0x46>
 800b2d0:	e6ea      	b.n	800b0a8 <_scanf_float+0x60>
 800b2d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2da:	463a      	mov	r2, r7
 800b2dc:	4640      	mov	r0, r8
 800b2de:	4798      	blx	r3
 800b2e0:	6923      	ldr	r3, [r4, #16]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	6123      	str	r3, [r4, #16]
 800b2e6:	e6ec      	b.n	800b0c2 <_scanf_float+0x7a>
 800b2e8:	1e6b      	subs	r3, r5, #1
 800b2ea:	2b06      	cmp	r3, #6
 800b2ec:	d825      	bhi.n	800b33a <_scanf_float+0x2f2>
 800b2ee:	2d02      	cmp	r5, #2
 800b2f0:	d836      	bhi.n	800b360 <_scanf_float+0x318>
 800b2f2:	455e      	cmp	r6, fp
 800b2f4:	f67f aee8 	bls.w	800b0c8 <_scanf_float+0x80>
 800b2f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b2fc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b300:	463a      	mov	r2, r7
 800b302:	4640      	mov	r0, r8
 800b304:	4798      	blx	r3
 800b306:	6923      	ldr	r3, [r4, #16]
 800b308:	3b01      	subs	r3, #1
 800b30a:	6123      	str	r3, [r4, #16]
 800b30c:	e7f1      	b.n	800b2f2 <_scanf_float+0x2aa>
 800b30e:	9802      	ldr	r0, [sp, #8]
 800b310:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b314:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b318:	9002      	str	r0, [sp, #8]
 800b31a:	463a      	mov	r2, r7
 800b31c:	4640      	mov	r0, r8
 800b31e:	4798      	blx	r3
 800b320:	6923      	ldr	r3, [r4, #16]
 800b322:	3b01      	subs	r3, #1
 800b324:	6123      	str	r3, [r4, #16]
 800b326:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b32a:	fa5f fa8a 	uxtb.w	sl, sl
 800b32e:	f1ba 0f02 	cmp.w	sl, #2
 800b332:	d1ec      	bne.n	800b30e <_scanf_float+0x2c6>
 800b334:	3d03      	subs	r5, #3
 800b336:	b2ed      	uxtb	r5, r5
 800b338:	1b76      	subs	r6, r6, r5
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	05da      	lsls	r2, r3, #23
 800b33e:	d52f      	bpl.n	800b3a0 <_scanf_float+0x358>
 800b340:	055b      	lsls	r3, r3, #21
 800b342:	d510      	bpl.n	800b366 <_scanf_float+0x31e>
 800b344:	455e      	cmp	r6, fp
 800b346:	f67f aebf 	bls.w	800b0c8 <_scanf_float+0x80>
 800b34a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b34e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b352:	463a      	mov	r2, r7
 800b354:	4640      	mov	r0, r8
 800b356:	4798      	blx	r3
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	6123      	str	r3, [r4, #16]
 800b35e:	e7f1      	b.n	800b344 <_scanf_float+0x2fc>
 800b360:	46aa      	mov	sl, r5
 800b362:	9602      	str	r6, [sp, #8]
 800b364:	e7df      	b.n	800b326 <_scanf_float+0x2de>
 800b366:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b36a:	6923      	ldr	r3, [r4, #16]
 800b36c:	2965      	cmp	r1, #101	; 0x65
 800b36e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b372:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800b376:	6123      	str	r3, [r4, #16]
 800b378:	d00c      	beq.n	800b394 <_scanf_float+0x34c>
 800b37a:	2945      	cmp	r1, #69	; 0x45
 800b37c:	d00a      	beq.n	800b394 <_scanf_float+0x34c>
 800b37e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b382:	463a      	mov	r2, r7
 800b384:	4640      	mov	r0, r8
 800b386:	4798      	blx	r3
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b38e:	3b01      	subs	r3, #1
 800b390:	1eb5      	subs	r5, r6, #2
 800b392:	6123      	str	r3, [r4, #16]
 800b394:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b398:	463a      	mov	r2, r7
 800b39a:	4640      	mov	r0, r8
 800b39c:	4798      	blx	r3
 800b39e:	462e      	mov	r6, r5
 800b3a0:	6825      	ldr	r5, [r4, #0]
 800b3a2:	f015 0510 	ands.w	r5, r5, #16
 800b3a6:	d158      	bne.n	800b45a <_scanf_float+0x412>
 800b3a8:	7035      	strb	r5, [r6, #0]
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b3b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3b4:	d11c      	bne.n	800b3f0 <_scanf_float+0x3a8>
 800b3b6:	9b01      	ldr	r3, [sp, #4]
 800b3b8:	454b      	cmp	r3, r9
 800b3ba:	eba3 0209 	sub.w	r2, r3, r9
 800b3be:	d124      	bne.n	800b40a <_scanf_float+0x3c2>
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	4659      	mov	r1, fp
 800b3c4:	4640      	mov	r0, r8
 800b3c6:	f000 ff1f 	bl	800c208 <_strtod_r>
 800b3ca:	9b03      	ldr	r3, [sp, #12]
 800b3cc:	6821      	ldr	r1, [r4, #0]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f011 0f02 	tst.w	r1, #2
 800b3d4:	ec57 6b10 	vmov	r6, r7, d0
 800b3d8:	f103 0204 	add.w	r2, r3, #4
 800b3dc:	d020      	beq.n	800b420 <_scanf_float+0x3d8>
 800b3de:	9903      	ldr	r1, [sp, #12]
 800b3e0:	600a      	str	r2, [r1, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	e9c3 6700 	strd	r6, r7, [r3]
 800b3e8:	68e3      	ldr	r3, [r4, #12]
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	60e3      	str	r3, [r4, #12]
 800b3ee:	e66c      	b.n	800b0ca <_scanf_float+0x82>
 800b3f0:	9b04      	ldr	r3, [sp, #16]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0e4      	beq.n	800b3c0 <_scanf_float+0x378>
 800b3f6:	9905      	ldr	r1, [sp, #20]
 800b3f8:	230a      	movs	r3, #10
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	3101      	adds	r1, #1
 800b3fe:	4640      	mov	r0, r8
 800b400:	f000 ff8a 	bl	800c318 <_strtol_r>
 800b404:	9b04      	ldr	r3, [sp, #16]
 800b406:	9e05      	ldr	r6, [sp, #20]
 800b408:	1ac2      	subs	r2, r0, r3
 800b40a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b40e:	429e      	cmp	r6, r3
 800b410:	bf28      	it	cs
 800b412:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b416:	4912      	ldr	r1, [pc, #72]	; (800b460 <_scanf_float+0x418>)
 800b418:	4630      	mov	r0, r6
 800b41a:	f000 f825 	bl	800b468 <siprintf>
 800b41e:	e7cf      	b.n	800b3c0 <_scanf_float+0x378>
 800b420:	f011 0f04 	tst.w	r1, #4
 800b424:	9903      	ldr	r1, [sp, #12]
 800b426:	600a      	str	r2, [r1, #0]
 800b428:	d1db      	bne.n	800b3e2 <_scanf_float+0x39a>
 800b42a:	f8d3 8000 	ldr.w	r8, [r3]
 800b42e:	ee10 2a10 	vmov	r2, s0
 800b432:	ee10 0a10 	vmov	r0, s0
 800b436:	463b      	mov	r3, r7
 800b438:	4639      	mov	r1, r7
 800b43a:	f7f5 fb8f 	bl	8000b5c <__aeabi_dcmpun>
 800b43e:	b128      	cbz	r0, 800b44c <_scanf_float+0x404>
 800b440:	4808      	ldr	r0, [pc, #32]	; (800b464 <_scanf_float+0x41c>)
 800b442:	f001 f851 	bl	800c4e8 <nanf>
 800b446:	ed88 0a00 	vstr	s0, [r8]
 800b44a:	e7cd      	b.n	800b3e8 <_scanf_float+0x3a0>
 800b44c:	4630      	mov	r0, r6
 800b44e:	4639      	mov	r1, r7
 800b450:	f7f5 fbe2 	bl	8000c18 <__aeabi_d2f>
 800b454:	f8c8 0000 	str.w	r0, [r8]
 800b458:	e7c6      	b.n	800b3e8 <_scanf_float+0x3a0>
 800b45a:	2500      	movs	r5, #0
 800b45c:	e635      	b.n	800b0ca <_scanf_float+0x82>
 800b45e:	bf00      	nop
 800b460:	0800f32c 	.word	0x0800f32c
 800b464:	0800f71f 	.word	0x0800f71f

0800b468 <siprintf>:
 800b468:	b40e      	push	{r1, r2, r3}
 800b46a:	b500      	push	{lr}
 800b46c:	b09c      	sub	sp, #112	; 0x70
 800b46e:	ab1d      	add	r3, sp, #116	; 0x74
 800b470:	9002      	str	r0, [sp, #8]
 800b472:	9006      	str	r0, [sp, #24]
 800b474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b478:	4809      	ldr	r0, [pc, #36]	; (800b4a0 <siprintf+0x38>)
 800b47a:	9107      	str	r1, [sp, #28]
 800b47c:	9104      	str	r1, [sp, #16]
 800b47e:	4909      	ldr	r1, [pc, #36]	; (800b4a4 <siprintf+0x3c>)
 800b480:	f853 2b04 	ldr.w	r2, [r3], #4
 800b484:	9105      	str	r1, [sp, #20]
 800b486:	6800      	ldr	r0, [r0, #0]
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	a902      	add	r1, sp, #8
 800b48c:	f002 faac 	bl	800d9e8 <_svfiprintf_r>
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	2200      	movs	r2, #0
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	b01c      	add	sp, #112	; 0x70
 800b498:	f85d eb04 	ldr.w	lr, [sp], #4
 800b49c:	b003      	add	sp, #12
 800b49e:	4770      	bx	lr
 800b4a0:	2000025c 	.word	0x2000025c
 800b4a4:	ffff0208 	.word	0xffff0208

0800b4a8 <std>:
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	b510      	push	{r4, lr}
 800b4ac:	4604      	mov	r4, r0
 800b4ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b4b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4b6:	6083      	str	r3, [r0, #8]
 800b4b8:	8181      	strh	r1, [r0, #12]
 800b4ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b4bc:	81c2      	strh	r2, [r0, #14]
 800b4be:	6183      	str	r3, [r0, #24]
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	2208      	movs	r2, #8
 800b4c4:	305c      	adds	r0, #92	; 0x5c
 800b4c6:	f000 ff68 	bl	800c39a <memset>
 800b4ca:	4b0d      	ldr	r3, [pc, #52]	; (800b500 <std+0x58>)
 800b4cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b4ce:	4b0d      	ldr	r3, [pc, #52]	; (800b504 <std+0x5c>)
 800b4d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4d2:	4b0d      	ldr	r3, [pc, #52]	; (800b508 <std+0x60>)
 800b4d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4d6:	4b0d      	ldr	r3, [pc, #52]	; (800b50c <std+0x64>)
 800b4d8:	6323      	str	r3, [r4, #48]	; 0x30
 800b4da:	4b0d      	ldr	r3, [pc, #52]	; (800b510 <std+0x68>)
 800b4dc:	6224      	str	r4, [r4, #32]
 800b4de:	429c      	cmp	r4, r3
 800b4e0:	d006      	beq.n	800b4f0 <std+0x48>
 800b4e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b4e6:	4294      	cmp	r4, r2
 800b4e8:	d002      	beq.n	800b4f0 <std+0x48>
 800b4ea:	33d0      	adds	r3, #208	; 0xd0
 800b4ec:	429c      	cmp	r4, r3
 800b4ee:	d105      	bne.n	800b4fc <std+0x54>
 800b4f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4f8:	f000 bfdc 	b.w	800c4b4 <__retarget_lock_init_recursive>
 800b4fc:	bd10      	pop	{r4, pc}
 800b4fe:	bf00      	nop
 800b500:	0800e827 	.word	0x0800e827
 800b504:	0800e849 	.word	0x0800e849
 800b508:	0800e881 	.word	0x0800e881
 800b50c:	0800e8a5 	.word	0x0800e8a5
 800b510:	200015b0 	.word	0x200015b0

0800b514 <stdio_exit_handler>:
 800b514:	4a02      	ldr	r2, [pc, #8]	; (800b520 <stdio_exit_handler+0xc>)
 800b516:	4903      	ldr	r1, [pc, #12]	; (800b524 <stdio_exit_handler+0x10>)
 800b518:	4803      	ldr	r0, [pc, #12]	; (800b528 <stdio_exit_handler+0x14>)
 800b51a:	f000 beff 	b.w	800c31c <_fwalk_sglue>
 800b51e:	bf00      	nop
 800b520:	20000098 	.word	0x20000098
 800b524:	0800de65 	.word	0x0800de65
 800b528:	20000210 	.word	0x20000210

0800b52c <cleanup_stdio>:
 800b52c:	6841      	ldr	r1, [r0, #4]
 800b52e:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <cleanup_stdio+0x34>)
 800b530:	4299      	cmp	r1, r3
 800b532:	b510      	push	{r4, lr}
 800b534:	4604      	mov	r4, r0
 800b536:	d001      	beq.n	800b53c <cleanup_stdio+0x10>
 800b538:	f002 fc94 	bl	800de64 <_fflush_r>
 800b53c:	68a1      	ldr	r1, [r4, #8]
 800b53e:	4b09      	ldr	r3, [pc, #36]	; (800b564 <cleanup_stdio+0x38>)
 800b540:	4299      	cmp	r1, r3
 800b542:	d002      	beq.n	800b54a <cleanup_stdio+0x1e>
 800b544:	4620      	mov	r0, r4
 800b546:	f002 fc8d 	bl	800de64 <_fflush_r>
 800b54a:	68e1      	ldr	r1, [r4, #12]
 800b54c:	4b06      	ldr	r3, [pc, #24]	; (800b568 <cleanup_stdio+0x3c>)
 800b54e:	4299      	cmp	r1, r3
 800b550:	d004      	beq.n	800b55c <cleanup_stdio+0x30>
 800b552:	4620      	mov	r0, r4
 800b554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b558:	f002 bc84 	b.w	800de64 <_fflush_r>
 800b55c:	bd10      	pop	{r4, pc}
 800b55e:	bf00      	nop
 800b560:	200015b0 	.word	0x200015b0
 800b564:	20001618 	.word	0x20001618
 800b568:	20001680 	.word	0x20001680

0800b56c <global_stdio_init.part.0>:
 800b56c:	b510      	push	{r4, lr}
 800b56e:	4b0b      	ldr	r3, [pc, #44]	; (800b59c <global_stdio_init.part.0+0x30>)
 800b570:	4c0b      	ldr	r4, [pc, #44]	; (800b5a0 <global_stdio_init.part.0+0x34>)
 800b572:	4a0c      	ldr	r2, [pc, #48]	; (800b5a4 <global_stdio_init.part.0+0x38>)
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	4620      	mov	r0, r4
 800b578:	2200      	movs	r2, #0
 800b57a:	2104      	movs	r1, #4
 800b57c:	f7ff ff94 	bl	800b4a8 <std>
 800b580:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b584:	2201      	movs	r2, #1
 800b586:	2109      	movs	r1, #9
 800b588:	f7ff ff8e 	bl	800b4a8 <std>
 800b58c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b590:	2202      	movs	r2, #2
 800b592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b596:	2112      	movs	r1, #18
 800b598:	f7ff bf86 	b.w	800b4a8 <std>
 800b59c:	200016e8 	.word	0x200016e8
 800b5a0:	200015b0 	.word	0x200015b0
 800b5a4:	0800b515 	.word	0x0800b515

0800b5a8 <__sfp_lock_acquire>:
 800b5a8:	4801      	ldr	r0, [pc, #4]	; (800b5b0 <__sfp_lock_acquire+0x8>)
 800b5aa:	f000 bf84 	b.w	800c4b6 <__retarget_lock_acquire_recursive>
 800b5ae:	bf00      	nop
 800b5b0:	200016f1 	.word	0x200016f1

0800b5b4 <__sfp_lock_release>:
 800b5b4:	4801      	ldr	r0, [pc, #4]	; (800b5bc <__sfp_lock_release+0x8>)
 800b5b6:	f000 bf7f 	b.w	800c4b8 <__retarget_lock_release_recursive>
 800b5ba:	bf00      	nop
 800b5bc:	200016f1 	.word	0x200016f1

0800b5c0 <__sinit>:
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	f7ff fff0 	bl	800b5a8 <__sfp_lock_acquire>
 800b5c8:	6a23      	ldr	r3, [r4, #32]
 800b5ca:	b11b      	cbz	r3, 800b5d4 <__sinit+0x14>
 800b5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5d0:	f7ff bff0 	b.w	800b5b4 <__sfp_lock_release>
 800b5d4:	4b04      	ldr	r3, [pc, #16]	; (800b5e8 <__sinit+0x28>)
 800b5d6:	6223      	str	r3, [r4, #32]
 800b5d8:	4b04      	ldr	r3, [pc, #16]	; (800b5ec <__sinit+0x2c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1f5      	bne.n	800b5cc <__sinit+0xc>
 800b5e0:	f7ff ffc4 	bl	800b56c <global_stdio_init.part.0>
 800b5e4:	e7f2      	b.n	800b5cc <__sinit+0xc>
 800b5e6:	bf00      	nop
 800b5e8:	0800b52d 	.word	0x0800b52d
 800b5ec:	200016e8 	.word	0x200016e8

0800b5f0 <sulp>:
 800b5f0:	b570      	push	{r4, r5, r6, lr}
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	460d      	mov	r5, r1
 800b5f6:	ec45 4b10 	vmov	d0, r4, r5
 800b5fa:	4616      	mov	r6, r2
 800b5fc:	f002 ffd2 	bl	800e5a4 <__ulp>
 800b600:	ec51 0b10 	vmov	r0, r1, d0
 800b604:	b17e      	cbz	r6, 800b626 <sulp+0x36>
 800b606:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b60a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b60e:	2b00      	cmp	r3, #0
 800b610:	dd09      	ble.n	800b626 <sulp+0x36>
 800b612:	051b      	lsls	r3, r3, #20
 800b614:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b618:	2400      	movs	r4, #0
 800b61a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b61e:	4622      	mov	r2, r4
 800b620:	462b      	mov	r3, r5
 800b622:	f7f5 f801 	bl	8000628 <__aeabi_dmul>
 800b626:	bd70      	pop	{r4, r5, r6, pc}

0800b628 <_strtod_l>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	ed2d 8b02 	vpush	{d8}
 800b630:	b09b      	sub	sp, #108	; 0x6c
 800b632:	4604      	mov	r4, r0
 800b634:	9213      	str	r2, [sp, #76]	; 0x4c
 800b636:	2200      	movs	r2, #0
 800b638:	9216      	str	r2, [sp, #88]	; 0x58
 800b63a:	460d      	mov	r5, r1
 800b63c:	f04f 0800 	mov.w	r8, #0
 800b640:	f04f 0900 	mov.w	r9, #0
 800b644:	460a      	mov	r2, r1
 800b646:	9215      	str	r2, [sp, #84]	; 0x54
 800b648:	7811      	ldrb	r1, [r2, #0]
 800b64a:	292b      	cmp	r1, #43	; 0x2b
 800b64c:	d04c      	beq.n	800b6e8 <_strtod_l+0xc0>
 800b64e:	d83a      	bhi.n	800b6c6 <_strtod_l+0x9e>
 800b650:	290d      	cmp	r1, #13
 800b652:	d834      	bhi.n	800b6be <_strtod_l+0x96>
 800b654:	2908      	cmp	r1, #8
 800b656:	d834      	bhi.n	800b6c2 <_strtod_l+0x9a>
 800b658:	2900      	cmp	r1, #0
 800b65a:	d03d      	beq.n	800b6d8 <_strtod_l+0xb0>
 800b65c:	2200      	movs	r2, #0
 800b65e:	920a      	str	r2, [sp, #40]	; 0x28
 800b660:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b662:	7832      	ldrb	r2, [r6, #0]
 800b664:	2a30      	cmp	r2, #48	; 0x30
 800b666:	f040 80b4 	bne.w	800b7d2 <_strtod_l+0x1aa>
 800b66a:	7872      	ldrb	r2, [r6, #1]
 800b66c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b670:	2a58      	cmp	r2, #88	; 0x58
 800b672:	d170      	bne.n	800b756 <_strtod_l+0x12e>
 800b674:	9302      	str	r3, [sp, #8]
 800b676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	ab16      	add	r3, sp, #88	; 0x58
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	4a8e      	ldr	r2, [pc, #568]	; (800b8b8 <_strtod_l+0x290>)
 800b680:	ab17      	add	r3, sp, #92	; 0x5c
 800b682:	a915      	add	r1, sp, #84	; 0x54
 800b684:	4620      	mov	r0, r4
 800b686:	f001 fe65 	bl	800d354 <__gethex>
 800b68a:	f010 070f 	ands.w	r7, r0, #15
 800b68e:	4605      	mov	r5, r0
 800b690:	d005      	beq.n	800b69e <_strtod_l+0x76>
 800b692:	2f06      	cmp	r7, #6
 800b694:	d12a      	bne.n	800b6ec <_strtod_l+0xc4>
 800b696:	3601      	adds	r6, #1
 800b698:	2300      	movs	r3, #0
 800b69a:	9615      	str	r6, [sp, #84]	; 0x54
 800b69c:	930a      	str	r3, [sp, #40]	; 0x28
 800b69e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f040 857f 	bne.w	800c1a4 <_strtod_l+0xb7c>
 800b6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a8:	b1db      	cbz	r3, 800b6e2 <_strtod_l+0xba>
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b6b0:	ec43 2b10 	vmov	d0, r2, r3
 800b6b4:	b01b      	add	sp, #108	; 0x6c
 800b6b6:	ecbd 8b02 	vpop	{d8}
 800b6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6be:	2920      	cmp	r1, #32
 800b6c0:	d1cc      	bne.n	800b65c <_strtod_l+0x34>
 800b6c2:	3201      	adds	r2, #1
 800b6c4:	e7bf      	b.n	800b646 <_strtod_l+0x1e>
 800b6c6:	292d      	cmp	r1, #45	; 0x2d
 800b6c8:	d1c8      	bne.n	800b65c <_strtod_l+0x34>
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	910a      	str	r1, [sp, #40]	; 0x28
 800b6ce:	1c51      	adds	r1, r2, #1
 800b6d0:	9115      	str	r1, [sp, #84]	; 0x54
 800b6d2:	7852      	ldrb	r2, [r2, #1]
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	d1c3      	bne.n	800b660 <_strtod_l+0x38>
 800b6d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b6da:	9515      	str	r5, [sp, #84]	; 0x54
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f040 855f 	bne.w	800c1a0 <_strtod_l+0xb78>
 800b6e2:	4642      	mov	r2, r8
 800b6e4:	464b      	mov	r3, r9
 800b6e6:	e7e3      	b.n	800b6b0 <_strtod_l+0x88>
 800b6e8:	2100      	movs	r1, #0
 800b6ea:	e7ef      	b.n	800b6cc <_strtod_l+0xa4>
 800b6ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b6ee:	b13a      	cbz	r2, 800b700 <_strtod_l+0xd8>
 800b6f0:	2135      	movs	r1, #53	; 0x35
 800b6f2:	a818      	add	r0, sp, #96	; 0x60
 800b6f4:	f003 f853 	bl	800e79e <__copybits>
 800b6f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f002 fc26 	bl	800df4c <_Bfree>
 800b700:	3f01      	subs	r7, #1
 800b702:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b704:	2f04      	cmp	r7, #4
 800b706:	d806      	bhi.n	800b716 <_strtod_l+0xee>
 800b708:	e8df f007 	tbb	[pc, r7]
 800b70c:	201d0314 	.word	0x201d0314
 800b710:	14          	.byte	0x14
 800b711:	00          	.byte	0x00
 800b712:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b716:	05e9      	lsls	r1, r5, #23
 800b718:	bf48      	it	mi
 800b71a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b71e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b722:	0d1b      	lsrs	r3, r3, #20
 800b724:	051b      	lsls	r3, r3, #20
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1b9      	bne.n	800b69e <_strtod_l+0x76>
 800b72a:	f000 fe99 	bl	800c460 <__errno>
 800b72e:	2322      	movs	r3, #34	; 0x22
 800b730:	6003      	str	r3, [r0, #0]
 800b732:	e7b4      	b.n	800b69e <_strtod_l+0x76>
 800b734:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b738:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b73c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b740:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b744:	e7e7      	b.n	800b716 <_strtod_l+0xee>
 800b746:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b8c0 <_strtod_l+0x298>
 800b74a:	e7e4      	b.n	800b716 <_strtod_l+0xee>
 800b74c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b750:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b754:	e7df      	b.n	800b716 <_strtod_l+0xee>
 800b756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b758:	1c5a      	adds	r2, r3, #1
 800b75a:	9215      	str	r2, [sp, #84]	; 0x54
 800b75c:	785b      	ldrb	r3, [r3, #1]
 800b75e:	2b30      	cmp	r3, #48	; 0x30
 800b760:	d0f9      	beq.n	800b756 <_strtod_l+0x12e>
 800b762:	2b00      	cmp	r3, #0
 800b764:	d09b      	beq.n	800b69e <_strtod_l+0x76>
 800b766:	2301      	movs	r3, #1
 800b768:	f04f 0a00 	mov.w	sl, #0
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b770:	930b      	str	r3, [sp, #44]	; 0x2c
 800b772:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b776:	46d3      	mov	fp, sl
 800b778:	220a      	movs	r2, #10
 800b77a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b77c:	7806      	ldrb	r6, [r0, #0]
 800b77e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b782:	b2d9      	uxtb	r1, r3
 800b784:	2909      	cmp	r1, #9
 800b786:	d926      	bls.n	800b7d6 <_strtod_l+0x1ae>
 800b788:	494c      	ldr	r1, [pc, #304]	; (800b8bc <_strtod_l+0x294>)
 800b78a:	2201      	movs	r2, #1
 800b78c:	f000 fdf3 	bl	800c376 <strncmp>
 800b790:	2800      	cmp	r0, #0
 800b792:	d030      	beq.n	800b7f6 <_strtod_l+0x1ce>
 800b794:	2000      	movs	r0, #0
 800b796:	4632      	mov	r2, r6
 800b798:	9005      	str	r0, [sp, #20]
 800b79a:	465e      	mov	r6, fp
 800b79c:	4603      	mov	r3, r0
 800b79e:	2a65      	cmp	r2, #101	; 0x65
 800b7a0:	d001      	beq.n	800b7a6 <_strtod_l+0x17e>
 800b7a2:	2a45      	cmp	r2, #69	; 0x45
 800b7a4:	d113      	bne.n	800b7ce <_strtod_l+0x1a6>
 800b7a6:	b91e      	cbnz	r6, 800b7b0 <_strtod_l+0x188>
 800b7a8:	9a04      	ldr	r2, [sp, #16]
 800b7aa:	4302      	orrs	r2, r0
 800b7ac:	d094      	beq.n	800b6d8 <_strtod_l+0xb0>
 800b7ae:	2600      	movs	r6, #0
 800b7b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b7b2:	1c6a      	adds	r2, r5, #1
 800b7b4:	9215      	str	r2, [sp, #84]	; 0x54
 800b7b6:	786a      	ldrb	r2, [r5, #1]
 800b7b8:	2a2b      	cmp	r2, #43	; 0x2b
 800b7ba:	d074      	beq.n	800b8a6 <_strtod_l+0x27e>
 800b7bc:	2a2d      	cmp	r2, #45	; 0x2d
 800b7be:	d078      	beq.n	800b8b2 <_strtod_l+0x28a>
 800b7c0:	f04f 0c00 	mov.w	ip, #0
 800b7c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b7c8:	2909      	cmp	r1, #9
 800b7ca:	d97f      	bls.n	800b8cc <_strtod_l+0x2a4>
 800b7cc:	9515      	str	r5, [sp, #84]	; 0x54
 800b7ce:	2700      	movs	r7, #0
 800b7d0:	e09e      	b.n	800b910 <_strtod_l+0x2e8>
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	e7c8      	b.n	800b768 <_strtod_l+0x140>
 800b7d6:	f1bb 0f08 	cmp.w	fp, #8
 800b7da:	bfd8      	it	le
 800b7dc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b7de:	f100 0001 	add.w	r0, r0, #1
 800b7e2:	bfda      	itte	le
 800b7e4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b7e8:	9309      	strle	r3, [sp, #36]	; 0x24
 800b7ea:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b7ee:	f10b 0b01 	add.w	fp, fp, #1
 800b7f2:	9015      	str	r0, [sp, #84]	; 0x54
 800b7f4:	e7c1      	b.n	800b77a <_strtod_l+0x152>
 800b7f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	9215      	str	r2, [sp, #84]	; 0x54
 800b7fc:	785a      	ldrb	r2, [r3, #1]
 800b7fe:	f1bb 0f00 	cmp.w	fp, #0
 800b802:	d037      	beq.n	800b874 <_strtod_l+0x24c>
 800b804:	9005      	str	r0, [sp, #20]
 800b806:	465e      	mov	r6, fp
 800b808:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	d912      	bls.n	800b836 <_strtod_l+0x20e>
 800b810:	2301      	movs	r3, #1
 800b812:	e7c4      	b.n	800b79e <_strtod_l+0x176>
 800b814:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	9215      	str	r2, [sp, #84]	; 0x54
 800b81a:	785a      	ldrb	r2, [r3, #1]
 800b81c:	3001      	adds	r0, #1
 800b81e:	2a30      	cmp	r2, #48	; 0x30
 800b820:	d0f8      	beq.n	800b814 <_strtod_l+0x1ec>
 800b822:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b826:	2b08      	cmp	r3, #8
 800b828:	f200 84c1 	bhi.w	800c1ae <_strtod_l+0xb86>
 800b82c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b82e:	9005      	str	r0, [sp, #20]
 800b830:	2000      	movs	r0, #0
 800b832:	930b      	str	r3, [sp, #44]	; 0x2c
 800b834:	4606      	mov	r6, r0
 800b836:	3a30      	subs	r2, #48	; 0x30
 800b838:	f100 0301 	add.w	r3, r0, #1
 800b83c:	d014      	beq.n	800b868 <_strtod_l+0x240>
 800b83e:	9905      	ldr	r1, [sp, #20]
 800b840:	4419      	add	r1, r3
 800b842:	9105      	str	r1, [sp, #20]
 800b844:	4633      	mov	r3, r6
 800b846:	eb00 0c06 	add.w	ip, r0, r6
 800b84a:	210a      	movs	r1, #10
 800b84c:	4563      	cmp	r3, ip
 800b84e:	d113      	bne.n	800b878 <_strtod_l+0x250>
 800b850:	1833      	adds	r3, r6, r0
 800b852:	2b08      	cmp	r3, #8
 800b854:	f106 0601 	add.w	r6, r6, #1
 800b858:	4406      	add	r6, r0
 800b85a:	dc1a      	bgt.n	800b892 <_strtod_l+0x26a>
 800b85c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b85e:	230a      	movs	r3, #10
 800b860:	fb03 2301 	mla	r3, r3, r1, r2
 800b864:	9309      	str	r3, [sp, #36]	; 0x24
 800b866:	2300      	movs	r3, #0
 800b868:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b86a:	1c51      	adds	r1, r2, #1
 800b86c:	9115      	str	r1, [sp, #84]	; 0x54
 800b86e:	7852      	ldrb	r2, [r2, #1]
 800b870:	4618      	mov	r0, r3
 800b872:	e7c9      	b.n	800b808 <_strtod_l+0x1e0>
 800b874:	4658      	mov	r0, fp
 800b876:	e7d2      	b.n	800b81e <_strtod_l+0x1f6>
 800b878:	2b08      	cmp	r3, #8
 800b87a:	f103 0301 	add.w	r3, r3, #1
 800b87e:	dc03      	bgt.n	800b888 <_strtod_l+0x260>
 800b880:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b882:	434f      	muls	r7, r1
 800b884:	9709      	str	r7, [sp, #36]	; 0x24
 800b886:	e7e1      	b.n	800b84c <_strtod_l+0x224>
 800b888:	2b10      	cmp	r3, #16
 800b88a:	bfd8      	it	le
 800b88c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b890:	e7dc      	b.n	800b84c <_strtod_l+0x224>
 800b892:	2e10      	cmp	r6, #16
 800b894:	bfdc      	itt	le
 800b896:	230a      	movle	r3, #10
 800b898:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b89c:	e7e3      	b.n	800b866 <_strtod_l+0x23e>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	9305      	str	r3, [sp, #20]
 800b8a2:	2301      	movs	r3, #1
 800b8a4:	e780      	b.n	800b7a8 <_strtod_l+0x180>
 800b8a6:	f04f 0c00 	mov.w	ip, #0
 800b8aa:	1caa      	adds	r2, r5, #2
 800b8ac:	9215      	str	r2, [sp, #84]	; 0x54
 800b8ae:	78aa      	ldrb	r2, [r5, #2]
 800b8b0:	e788      	b.n	800b7c4 <_strtod_l+0x19c>
 800b8b2:	f04f 0c01 	mov.w	ip, #1
 800b8b6:	e7f8      	b.n	800b8aa <_strtod_l+0x282>
 800b8b8:	0800f334 	.word	0x0800f334
 800b8bc:	0800f331 	.word	0x0800f331
 800b8c0:	7ff00000 	.word	0x7ff00000
 800b8c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8c6:	1c51      	adds	r1, r2, #1
 800b8c8:	9115      	str	r1, [sp, #84]	; 0x54
 800b8ca:	7852      	ldrb	r2, [r2, #1]
 800b8cc:	2a30      	cmp	r2, #48	; 0x30
 800b8ce:	d0f9      	beq.n	800b8c4 <_strtod_l+0x29c>
 800b8d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b8d4:	2908      	cmp	r1, #8
 800b8d6:	f63f af7a 	bhi.w	800b7ce <_strtod_l+0x1a6>
 800b8da:	3a30      	subs	r2, #48	; 0x30
 800b8dc:	9208      	str	r2, [sp, #32]
 800b8de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8e0:	920c      	str	r2, [sp, #48]	; 0x30
 800b8e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b8e4:	1c57      	adds	r7, r2, #1
 800b8e6:	9715      	str	r7, [sp, #84]	; 0x54
 800b8e8:	7852      	ldrb	r2, [r2, #1]
 800b8ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b8ee:	f1be 0f09 	cmp.w	lr, #9
 800b8f2:	d938      	bls.n	800b966 <_strtod_l+0x33e>
 800b8f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b8f6:	1a7f      	subs	r7, r7, r1
 800b8f8:	2f08      	cmp	r7, #8
 800b8fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b8fe:	dc03      	bgt.n	800b908 <_strtod_l+0x2e0>
 800b900:	9908      	ldr	r1, [sp, #32]
 800b902:	428f      	cmp	r7, r1
 800b904:	bfa8      	it	ge
 800b906:	460f      	movge	r7, r1
 800b908:	f1bc 0f00 	cmp.w	ip, #0
 800b90c:	d000      	beq.n	800b910 <_strtod_l+0x2e8>
 800b90e:	427f      	negs	r7, r7
 800b910:	2e00      	cmp	r6, #0
 800b912:	d14f      	bne.n	800b9b4 <_strtod_l+0x38c>
 800b914:	9904      	ldr	r1, [sp, #16]
 800b916:	4301      	orrs	r1, r0
 800b918:	f47f aec1 	bne.w	800b69e <_strtod_l+0x76>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	f47f aedb 	bne.w	800b6d8 <_strtod_l+0xb0>
 800b922:	2a69      	cmp	r2, #105	; 0x69
 800b924:	d029      	beq.n	800b97a <_strtod_l+0x352>
 800b926:	dc26      	bgt.n	800b976 <_strtod_l+0x34e>
 800b928:	2a49      	cmp	r2, #73	; 0x49
 800b92a:	d026      	beq.n	800b97a <_strtod_l+0x352>
 800b92c:	2a4e      	cmp	r2, #78	; 0x4e
 800b92e:	f47f aed3 	bne.w	800b6d8 <_strtod_l+0xb0>
 800b932:	499b      	ldr	r1, [pc, #620]	; (800bba0 <_strtod_l+0x578>)
 800b934:	a815      	add	r0, sp, #84	; 0x54
 800b936:	f001 ff4d 	bl	800d7d4 <__match>
 800b93a:	2800      	cmp	r0, #0
 800b93c:	f43f aecc 	beq.w	800b6d8 <_strtod_l+0xb0>
 800b940:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b28      	cmp	r3, #40	; 0x28
 800b946:	d12f      	bne.n	800b9a8 <_strtod_l+0x380>
 800b948:	4996      	ldr	r1, [pc, #600]	; (800bba4 <_strtod_l+0x57c>)
 800b94a:	aa18      	add	r2, sp, #96	; 0x60
 800b94c:	a815      	add	r0, sp, #84	; 0x54
 800b94e:	f001 ff55 	bl	800d7fc <__hexnan>
 800b952:	2805      	cmp	r0, #5
 800b954:	d128      	bne.n	800b9a8 <_strtod_l+0x380>
 800b956:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b958:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b95c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b960:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b964:	e69b      	b.n	800b69e <_strtod_l+0x76>
 800b966:	9f08      	ldr	r7, [sp, #32]
 800b968:	210a      	movs	r1, #10
 800b96a:	fb01 2107 	mla	r1, r1, r7, r2
 800b96e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b972:	9208      	str	r2, [sp, #32]
 800b974:	e7b5      	b.n	800b8e2 <_strtod_l+0x2ba>
 800b976:	2a6e      	cmp	r2, #110	; 0x6e
 800b978:	e7d9      	b.n	800b92e <_strtod_l+0x306>
 800b97a:	498b      	ldr	r1, [pc, #556]	; (800bba8 <_strtod_l+0x580>)
 800b97c:	a815      	add	r0, sp, #84	; 0x54
 800b97e:	f001 ff29 	bl	800d7d4 <__match>
 800b982:	2800      	cmp	r0, #0
 800b984:	f43f aea8 	beq.w	800b6d8 <_strtod_l+0xb0>
 800b988:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b98a:	4988      	ldr	r1, [pc, #544]	; (800bbac <_strtod_l+0x584>)
 800b98c:	3b01      	subs	r3, #1
 800b98e:	a815      	add	r0, sp, #84	; 0x54
 800b990:	9315      	str	r3, [sp, #84]	; 0x54
 800b992:	f001 ff1f 	bl	800d7d4 <__match>
 800b996:	b910      	cbnz	r0, 800b99e <_strtod_l+0x376>
 800b998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b99a:	3301      	adds	r3, #1
 800b99c:	9315      	str	r3, [sp, #84]	; 0x54
 800b99e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bbbc <_strtod_l+0x594>
 800b9a2:	f04f 0800 	mov.w	r8, #0
 800b9a6:	e67a      	b.n	800b69e <_strtod_l+0x76>
 800b9a8:	4881      	ldr	r0, [pc, #516]	; (800bbb0 <_strtod_l+0x588>)
 800b9aa:	f000 fd95 	bl	800c4d8 <nan>
 800b9ae:	ec59 8b10 	vmov	r8, r9, d0
 800b9b2:	e674      	b.n	800b69e <_strtod_l+0x76>
 800b9b4:	9b05      	ldr	r3, [sp, #20]
 800b9b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9b8:	1afb      	subs	r3, r7, r3
 800b9ba:	f1bb 0f00 	cmp.w	fp, #0
 800b9be:	bf08      	it	eq
 800b9c0:	46b3      	moveq	fp, r6
 800b9c2:	2e10      	cmp	r6, #16
 800b9c4:	9308      	str	r3, [sp, #32]
 800b9c6:	4635      	mov	r5, r6
 800b9c8:	bfa8      	it	ge
 800b9ca:	2510      	movge	r5, #16
 800b9cc:	f7f4 fdb2 	bl	8000534 <__aeabi_ui2d>
 800b9d0:	2e09      	cmp	r6, #9
 800b9d2:	4680      	mov	r8, r0
 800b9d4:	4689      	mov	r9, r1
 800b9d6:	dd13      	ble.n	800ba00 <_strtod_l+0x3d8>
 800b9d8:	4b76      	ldr	r3, [pc, #472]	; (800bbb4 <_strtod_l+0x58c>)
 800b9da:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b9de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b9e2:	f7f4 fe21 	bl	8000628 <__aeabi_dmul>
 800b9e6:	4680      	mov	r8, r0
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	4689      	mov	r9, r1
 800b9ec:	f7f4 fda2 	bl	8000534 <__aeabi_ui2d>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4640      	mov	r0, r8
 800b9f6:	4649      	mov	r1, r9
 800b9f8:	f7f4 fc60 	bl	80002bc <__adddf3>
 800b9fc:	4680      	mov	r8, r0
 800b9fe:	4689      	mov	r9, r1
 800ba00:	2e0f      	cmp	r6, #15
 800ba02:	dc38      	bgt.n	800ba76 <_strtod_l+0x44e>
 800ba04:	9b08      	ldr	r3, [sp, #32]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	f43f ae49 	beq.w	800b69e <_strtod_l+0x76>
 800ba0c:	dd24      	ble.n	800ba58 <_strtod_l+0x430>
 800ba0e:	2b16      	cmp	r3, #22
 800ba10:	dc0b      	bgt.n	800ba2a <_strtod_l+0x402>
 800ba12:	4968      	ldr	r1, [pc, #416]	; (800bbb4 <_strtod_l+0x58c>)
 800ba14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba1c:	4642      	mov	r2, r8
 800ba1e:	464b      	mov	r3, r9
 800ba20:	f7f4 fe02 	bl	8000628 <__aeabi_dmul>
 800ba24:	4680      	mov	r8, r0
 800ba26:	4689      	mov	r9, r1
 800ba28:	e639      	b.n	800b69e <_strtod_l+0x76>
 800ba2a:	9a08      	ldr	r2, [sp, #32]
 800ba2c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800ba30:	4293      	cmp	r3, r2
 800ba32:	db20      	blt.n	800ba76 <_strtod_l+0x44e>
 800ba34:	4c5f      	ldr	r4, [pc, #380]	; (800bbb4 <_strtod_l+0x58c>)
 800ba36:	f1c6 060f 	rsb	r6, r6, #15
 800ba3a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800ba3e:	4642      	mov	r2, r8
 800ba40:	464b      	mov	r3, r9
 800ba42:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba46:	f7f4 fdef 	bl	8000628 <__aeabi_dmul>
 800ba4a:	9b08      	ldr	r3, [sp, #32]
 800ba4c:	1b9e      	subs	r6, r3, r6
 800ba4e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800ba52:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ba56:	e7e3      	b.n	800ba20 <_strtod_l+0x3f8>
 800ba58:	9b08      	ldr	r3, [sp, #32]
 800ba5a:	3316      	adds	r3, #22
 800ba5c:	db0b      	blt.n	800ba76 <_strtod_l+0x44e>
 800ba5e:	9b05      	ldr	r3, [sp, #20]
 800ba60:	1bdf      	subs	r7, r3, r7
 800ba62:	4b54      	ldr	r3, [pc, #336]	; (800bbb4 <_strtod_l+0x58c>)
 800ba64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ba68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	4649      	mov	r1, r9
 800ba70:	f7f4 ff04 	bl	800087c <__aeabi_ddiv>
 800ba74:	e7d6      	b.n	800ba24 <_strtod_l+0x3fc>
 800ba76:	9b08      	ldr	r3, [sp, #32]
 800ba78:	1b75      	subs	r5, r6, r5
 800ba7a:	441d      	add	r5, r3
 800ba7c:	2d00      	cmp	r5, #0
 800ba7e:	dd70      	ble.n	800bb62 <_strtod_l+0x53a>
 800ba80:	f015 030f 	ands.w	r3, r5, #15
 800ba84:	d00a      	beq.n	800ba9c <_strtod_l+0x474>
 800ba86:	494b      	ldr	r1, [pc, #300]	; (800bbb4 <_strtod_l+0x58c>)
 800ba88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ba8c:	4642      	mov	r2, r8
 800ba8e:	464b      	mov	r3, r9
 800ba90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba94:	f7f4 fdc8 	bl	8000628 <__aeabi_dmul>
 800ba98:	4680      	mov	r8, r0
 800ba9a:	4689      	mov	r9, r1
 800ba9c:	f035 050f 	bics.w	r5, r5, #15
 800baa0:	d04d      	beq.n	800bb3e <_strtod_l+0x516>
 800baa2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800baa6:	dd22      	ble.n	800baee <_strtod_l+0x4c6>
 800baa8:	2500      	movs	r5, #0
 800baaa:	46ab      	mov	fp, r5
 800baac:	9509      	str	r5, [sp, #36]	; 0x24
 800baae:	9505      	str	r5, [sp, #20]
 800bab0:	2322      	movs	r3, #34	; 0x22
 800bab2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bbbc <_strtod_l+0x594>
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	f04f 0800 	mov.w	r8, #0
 800babc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f43f aded 	beq.w	800b69e <_strtod_l+0x76>
 800bac4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bac6:	4620      	mov	r0, r4
 800bac8:	f002 fa40 	bl	800df4c <_Bfree>
 800bacc:	9905      	ldr	r1, [sp, #20]
 800bace:	4620      	mov	r0, r4
 800bad0:	f002 fa3c 	bl	800df4c <_Bfree>
 800bad4:	4659      	mov	r1, fp
 800bad6:	4620      	mov	r0, r4
 800bad8:	f002 fa38 	bl	800df4c <_Bfree>
 800badc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bade:	4620      	mov	r0, r4
 800bae0:	f002 fa34 	bl	800df4c <_Bfree>
 800bae4:	4629      	mov	r1, r5
 800bae6:	4620      	mov	r0, r4
 800bae8:	f002 fa30 	bl	800df4c <_Bfree>
 800baec:	e5d7      	b.n	800b69e <_strtod_l+0x76>
 800baee:	4b32      	ldr	r3, [pc, #200]	; (800bbb8 <_strtod_l+0x590>)
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	2300      	movs	r3, #0
 800baf4:	112d      	asrs	r5, r5, #4
 800baf6:	4640      	mov	r0, r8
 800baf8:	4649      	mov	r1, r9
 800bafa:	469a      	mov	sl, r3
 800bafc:	2d01      	cmp	r5, #1
 800bafe:	dc21      	bgt.n	800bb44 <_strtod_l+0x51c>
 800bb00:	b10b      	cbz	r3, 800bb06 <_strtod_l+0x4de>
 800bb02:	4680      	mov	r8, r0
 800bb04:	4689      	mov	r9, r1
 800bb06:	492c      	ldr	r1, [pc, #176]	; (800bbb8 <_strtod_l+0x590>)
 800bb08:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bb0c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bb10:	4642      	mov	r2, r8
 800bb12:	464b      	mov	r3, r9
 800bb14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb18:	f7f4 fd86 	bl	8000628 <__aeabi_dmul>
 800bb1c:	4b27      	ldr	r3, [pc, #156]	; (800bbbc <_strtod_l+0x594>)
 800bb1e:	460a      	mov	r2, r1
 800bb20:	400b      	ands	r3, r1
 800bb22:	4927      	ldr	r1, [pc, #156]	; (800bbc0 <_strtod_l+0x598>)
 800bb24:	428b      	cmp	r3, r1
 800bb26:	4680      	mov	r8, r0
 800bb28:	d8be      	bhi.n	800baa8 <_strtod_l+0x480>
 800bb2a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bb2e:	428b      	cmp	r3, r1
 800bb30:	bf86      	itte	hi
 800bb32:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bbc4 <_strtod_l+0x59c>
 800bb36:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800bb3a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9304      	str	r3, [sp, #16]
 800bb42:	e07b      	b.n	800bc3c <_strtod_l+0x614>
 800bb44:	07ea      	lsls	r2, r5, #31
 800bb46:	d505      	bpl.n	800bb54 <_strtod_l+0x52c>
 800bb48:	9b04      	ldr	r3, [sp, #16]
 800bb4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb4e:	f7f4 fd6b 	bl	8000628 <__aeabi_dmul>
 800bb52:	2301      	movs	r3, #1
 800bb54:	9a04      	ldr	r2, [sp, #16]
 800bb56:	3208      	adds	r2, #8
 800bb58:	f10a 0a01 	add.w	sl, sl, #1
 800bb5c:	106d      	asrs	r5, r5, #1
 800bb5e:	9204      	str	r2, [sp, #16]
 800bb60:	e7cc      	b.n	800bafc <_strtod_l+0x4d4>
 800bb62:	d0ec      	beq.n	800bb3e <_strtod_l+0x516>
 800bb64:	426d      	negs	r5, r5
 800bb66:	f015 020f 	ands.w	r2, r5, #15
 800bb6a:	d00a      	beq.n	800bb82 <_strtod_l+0x55a>
 800bb6c:	4b11      	ldr	r3, [pc, #68]	; (800bbb4 <_strtod_l+0x58c>)
 800bb6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb72:	4640      	mov	r0, r8
 800bb74:	4649      	mov	r1, r9
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	f7f4 fe7f 	bl	800087c <__aeabi_ddiv>
 800bb7e:	4680      	mov	r8, r0
 800bb80:	4689      	mov	r9, r1
 800bb82:	112d      	asrs	r5, r5, #4
 800bb84:	d0db      	beq.n	800bb3e <_strtod_l+0x516>
 800bb86:	2d1f      	cmp	r5, #31
 800bb88:	dd1e      	ble.n	800bbc8 <_strtod_l+0x5a0>
 800bb8a:	2500      	movs	r5, #0
 800bb8c:	46ab      	mov	fp, r5
 800bb8e:	9509      	str	r5, [sp, #36]	; 0x24
 800bb90:	9505      	str	r5, [sp, #20]
 800bb92:	2322      	movs	r3, #34	; 0x22
 800bb94:	f04f 0800 	mov.w	r8, #0
 800bb98:	f04f 0900 	mov.w	r9, #0
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	e78d      	b.n	800babc <_strtod_l+0x494>
 800bba0:	0800f305 	.word	0x0800f305
 800bba4:	0800f348 	.word	0x0800f348
 800bba8:	0800f2fd 	.word	0x0800f2fd
 800bbac:	0800f494 	.word	0x0800f494
 800bbb0:	0800f71f 	.word	0x0800f71f
 800bbb4:	0800f610 	.word	0x0800f610
 800bbb8:	0800f5e8 	.word	0x0800f5e8
 800bbbc:	7ff00000 	.word	0x7ff00000
 800bbc0:	7ca00000 	.word	0x7ca00000
 800bbc4:	7fefffff 	.word	0x7fefffff
 800bbc8:	f015 0310 	ands.w	r3, r5, #16
 800bbcc:	bf18      	it	ne
 800bbce:	236a      	movne	r3, #106	; 0x6a
 800bbd0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bf74 <_strtod_l+0x94c>
 800bbd4:	9304      	str	r3, [sp, #16]
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	4649      	mov	r1, r9
 800bbda:	2300      	movs	r3, #0
 800bbdc:	07ea      	lsls	r2, r5, #31
 800bbde:	d504      	bpl.n	800bbea <_strtod_l+0x5c2>
 800bbe0:	e9da 2300 	ldrd	r2, r3, [sl]
 800bbe4:	f7f4 fd20 	bl	8000628 <__aeabi_dmul>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	106d      	asrs	r5, r5, #1
 800bbec:	f10a 0a08 	add.w	sl, sl, #8
 800bbf0:	d1f4      	bne.n	800bbdc <_strtod_l+0x5b4>
 800bbf2:	b10b      	cbz	r3, 800bbf8 <_strtod_l+0x5d0>
 800bbf4:	4680      	mov	r8, r0
 800bbf6:	4689      	mov	r9, r1
 800bbf8:	9b04      	ldr	r3, [sp, #16]
 800bbfa:	b1bb      	cbz	r3, 800bc2c <_strtod_l+0x604>
 800bbfc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bc00:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	4649      	mov	r1, r9
 800bc08:	dd10      	ble.n	800bc2c <_strtod_l+0x604>
 800bc0a:	2b1f      	cmp	r3, #31
 800bc0c:	f340 811e 	ble.w	800be4c <_strtod_l+0x824>
 800bc10:	2b34      	cmp	r3, #52	; 0x34
 800bc12:	bfde      	ittt	le
 800bc14:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800bc18:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bc1c:	4093      	lslle	r3, r2
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	bfcc      	ite	gt
 800bc24:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bc28:	ea03 0901 	andle.w	r9, r3, r1
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2300      	movs	r3, #0
 800bc30:	4640      	mov	r0, r8
 800bc32:	4649      	mov	r1, r9
 800bc34:	f7f4 ff60 	bl	8000af8 <__aeabi_dcmpeq>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d1a6      	bne.n	800bb8a <_strtod_l+0x562>
 800bc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc42:	4633      	mov	r3, r6
 800bc44:	465a      	mov	r2, fp
 800bc46:	4620      	mov	r0, r4
 800bc48:	f002 f9e8 	bl	800e01c <__s2b>
 800bc4c:	9009      	str	r0, [sp, #36]	; 0x24
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	f43f af2a 	beq.w	800baa8 <_strtod_l+0x480>
 800bc54:	9a08      	ldr	r2, [sp, #32]
 800bc56:	9b05      	ldr	r3, [sp, #20]
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	eba3 0307 	sub.w	r3, r3, r7
 800bc5e:	bfa8      	it	ge
 800bc60:	2300      	movge	r3, #0
 800bc62:	930c      	str	r3, [sp, #48]	; 0x30
 800bc64:	2500      	movs	r5, #0
 800bc66:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bc6a:	9312      	str	r3, [sp, #72]	; 0x48
 800bc6c:	46ab      	mov	fp, r5
 800bc6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc70:	4620      	mov	r0, r4
 800bc72:	6859      	ldr	r1, [r3, #4]
 800bc74:	f002 f92a 	bl	800decc <_Balloc>
 800bc78:	9005      	str	r0, [sp, #20]
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	f43f af18 	beq.w	800bab0 <_strtod_l+0x488>
 800bc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc82:	691a      	ldr	r2, [r3, #16]
 800bc84:	3202      	adds	r2, #2
 800bc86:	f103 010c 	add.w	r1, r3, #12
 800bc8a:	0092      	lsls	r2, r2, #2
 800bc8c:	300c      	adds	r0, #12
 800bc8e:	f000 fc14 	bl	800c4ba <memcpy>
 800bc92:	ec49 8b10 	vmov	d0, r8, r9
 800bc96:	aa18      	add	r2, sp, #96	; 0x60
 800bc98:	a917      	add	r1, sp, #92	; 0x5c
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f002 fcf2 	bl	800e684 <__d2b>
 800bca0:	ec49 8b18 	vmov	d8, r8, r9
 800bca4:	9016      	str	r0, [sp, #88]	; 0x58
 800bca6:	2800      	cmp	r0, #0
 800bca8:	f43f af02 	beq.w	800bab0 <_strtod_l+0x488>
 800bcac:	2101      	movs	r1, #1
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f002 fa4c 	bl	800e14c <__i2b>
 800bcb4:	4683      	mov	fp, r0
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f43f aefa 	beq.w	800bab0 <_strtod_l+0x488>
 800bcbc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bcbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bcc0:	2e00      	cmp	r6, #0
 800bcc2:	bfab      	itete	ge
 800bcc4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800bcc6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bcc8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bcca:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bcce:	bfac      	ite	ge
 800bcd0:	eb06 0a03 	addge.w	sl, r6, r3
 800bcd4:	1b9f      	sublt	r7, r3, r6
 800bcd6:	9b04      	ldr	r3, [sp, #16]
 800bcd8:	1af6      	subs	r6, r6, r3
 800bcda:	4416      	add	r6, r2
 800bcdc:	4ba0      	ldr	r3, [pc, #640]	; (800bf60 <_strtod_l+0x938>)
 800bcde:	3e01      	subs	r6, #1
 800bce0:	429e      	cmp	r6, r3
 800bce2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bce6:	f280 80c4 	bge.w	800be72 <_strtod_l+0x84a>
 800bcea:	1b9b      	subs	r3, r3, r6
 800bcec:	2b1f      	cmp	r3, #31
 800bcee:	eba2 0203 	sub.w	r2, r2, r3
 800bcf2:	f04f 0101 	mov.w	r1, #1
 800bcf6:	f300 80b0 	bgt.w	800be5a <_strtod_l+0x832>
 800bcfa:	fa01 f303 	lsl.w	r3, r1, r3
 800bcfe:	930e      	str	r3, [sp, #56]	; 0x38
 800bd00:	2300      	movs	r3, #0
 800bd02:	930d      	str	r3, [sp, #52]	; 0x34
 800bd04:	eb0a 0602 	add.w	r6, sl, r2
 800bd08:	9b04      	ldr	r3, [sp, #16]
 800bd0a:	45b2      	cmp	sl, r6
 800bd0c:	4417      	add	r7, r2
 800bd0e:	441f      	add	r7, r3
 800bd10:	4653      	mov	r3, sl
 800bd12:	bfa8      	it	ge
 800bd14:	4633      	movge	r3, r6
 800bd16:	42bb      	cmp	r3, r7
 800bd18:	bfa8      	it	ge
 800bd1a:	463b      	movge	r3, r7
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	bfc2      	ittt	gt
 800bd20:	1af6      	subgt	r6, r6, r3
 800bd22:	1aff      	subgt	r7, r7, r3
 800bd24:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bd28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	dd17      	ble.n	800bd5e <_strtod_l+0x736>
 800bd2e:	4659      	mov	r1, fp
 800bd30:	461a      	mov	r2, r3
 800bd32:	4620      	mov	r0, r4
 800bd34:	f002 faca 	bl	800e2cc <__pow5mult>
 800bd38:	4683      	mov	fp, r0
 800bd3a:	2800      	cmp	r0, #0
 800bd3c:	f43f aeb8 	beq.w	800bab0 <_strtod_l+0x488>
 800bd40:	4601      	mov	r1, r0
 800bd42:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bd44:	4620      	mov	r0, r4
 800bd46:	f002 fa17 	bl	800e178 <__multiply>
 800bd4a:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd4c:	2800      	cmp	r0, #0
 800bd4e:	f43f aeaf 	beq.w	800bab0 <_strtod_l+0x488>
 800bd52:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd54:	4620      	mov	r0, r4
 800bd56:	f002 f8f9 	bl	800df4c <_Bfree>
 800bd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd5c:	9316      	str	r3, [sp, #88]	; 0x58
 800bd5e:	2e00      	cmp	r6, #0
 800bd60:	f300 808c 	bgt.w	800be7c <_strtod_l+0x854>
 800bd64:	9b08      	ldr	r3, [sp, #32]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	dd08      	ble.n	800bd7c <_strtod_l+0x754>
 800bd6a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bd6c:	9905      	ldr	r1, [sp, #20]
 800bd6e:	4620      	mov	r0, r4
 800bd70:	f002 faac 	bl	800e2cc <__pow5mult>
 800bd74:	9005      	str	r0, [sp, #20]
 800bd76:	2800      	cmp	r0, #0
 800bd78:	f43f ae9a 	beq.w	800bab0 <_strtod_l+0x488>
 800bd7c:	2f00      	cmp	r7, #0
 800bd7e:	dd08      	ble.n	800bd92 <_strtod_l+0x76a>
 800bd80:	9905      	ldr	r1, [sp, #20]
 800bd82:	463a      	mov	r2, r7
 800bd84:	4620      	mov	r0, r4
 800bd86:	f002 fafb 	bl	800e380 <__lshift>
 800bd8a:	9005      	str	r0, [sp, #20]
 800bd8c:	2800      	cmp	r0, #0
 800bd8e:	f43f ae8f 	beq.w	800bab0 <_strtod_l+0x488>
 800bd92:	f1ba 0f00 	cmp.w	sl, #0
 800bd96:	dd08      	ble.n	800bdaa <_strtod_l+0x782>
 800bd98:	4659      	mov	r1, fp
 800bd9a:	4652      	mov	r2, sl
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	f002 faef 	bl	800e380 <__lshift>
 800bda2:	4683      	mov	fp, r0
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f43f ae83 	beq.w	800bab0 <_strtod_l+0x488>
 800bdaa:	9a05      	ldr	r2, [sp, #20]
 800bdac:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f002 fb6e 	bl	800e490 <__mdiff>
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	f43f ae7a 	beq.w	800bab0 <_strtod_l+0x488>
 800bdbc:	68c3      	ldr	r3, [r0, #12]
 800bdbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	60c3      	str	r3, [r0, #12]
 800bdc4:	4659      	mov	r1, fp
 800bdc6:	f002 fb47 	bl	800e458 <__mcmp>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	da60      	bge.n	800be90 <_strtod_l+0x868>
 800bdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bdd0:	ea53 0308 	orrs.w	r3, r3, r8
 800bdd4:	f040 8084 	bne.w	800bee0 <_strtod_l+0x8b8>
 800bdd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d17f      	bne.n	800bee0 <_strtod_l+0x8b8>
 800bde0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bde4:	0d1b      	lsrs	r3, r3, #20
 800bde6:	051b      	lsls	r3, r3, #20
 800bde8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bdec:	d978      	bls.n	800bee0 <_strtod_l+0x8b8>
 800bdee:	696b      	ldr	r3, [r5, #20]
 800bdf0:	b913      	cbnz	r3, 800bdf8 <_strtod_l+0x7d0>
 800bdf2:	692b      	ldr	r3, [r5, #16]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	dd73      	ble.n	800bee0 <_strtod_l+0x8b8>
 800bdf8:	4629      	mov	r1, r5
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	f002 fabf 	bl	800e380 <__lshift>
 800be02:	4659      	mov	r1, fp
 800be04:	4605      	mov	r5, r0
 800be06:	f002 fb27 	bl	800e458 <__mcmp>
 800be0a:	2800      	cmp	r0, #0
 800be0c:	dd68      	ble.n	800bee0 <_strtod_l+0x8b8>
 800be0e:	9904      	ldr	r1, [sp, #16]
 800be10:	4a54      	ldr	r2, [pc, #336]	; (800bf64 <_strtod_l+0x93c>)
 800be12:	464b      	mov	r3, r9
 800be14:	2900      	cmp	r1, #0
 800be16:	f000 8084 	beq.w	800bf22 <_strtod_l+0x8fa>
 800be1a:	ea02 0109 	and.w	r1, r2, r9
 800be1e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800be22:	dc7e      	bgt.n	800bf22 <_strtod_l+0x8fa>
 800be24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800be28:	f77f aeb3 	ble.w	800bb92 <_strtod_l+0x56a>
 800be2c:	4b4e      	ldr	r3, [pc, #312]	; (800bf68 <_strtod_l+0x940>)
 800be2e:	4640      	mov	r0, r8
 800be30:	4649      	mov	r1, r9
 800be32:	2200      	movs	r2, #0
 800be34:	f7f4 fbf8 	bl	8000628 <__aeabi_dmul>
 800be38:	4b4a      	ldr	r3, [pc, #296]	; (800bf64 <_strtod_l+0x93c>)
 800be3a:	400b      	ands	r3, r1
 800be3c:	4680      	mov	r8, r0
 800be3e:	4689      	mov	r9, r1
 800be40:	2b00      	cmp	r3, #0
 800be42:	f47f ae3f 	bne.w	800bac4 <_strtod_l+0x49c>
 800be46:	2322      	movs	r3, #34	; 0x22
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	e63b      	b.n	800bac4 <_strtod_l+0x49c>
 800be4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be50:	fa02 f303 	lsl.w	r3, r2, r3
 800be54:	ea03 0808 	and.w	r8, r3, r8
 800be58:	e6e8      	b.n	800bc2c <_strtod_l+0x604>
 800be5a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800be5e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800be62:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800be66:	36e2      	adds	r6, #226	; 0xe2
 800be68:	fa01 f306 	lsl.w	r3, r1, r6
 800be6c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800be70:	e748      	b.n	800bd04 <_strtod_l+0x6dc>
 800be72:	2100      	movs	r1, #0
 800be74:	2301      	movs	r3, #1
 800be76:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800be7a:	e743      	b.n	800bd04 <_strtod_l+0x6dc>
 800be7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be7e:	4632      	mov	r2, r6
 800be80:	4620      	mov	r0, r4
 800be82:	f002 fa7d 	bl	800e380 <__lshift>
 800be86:	9016      	str	r0, [sp, #88]	; 0x58
 800be88:	2800      	cmp	r0, #0
 800be8a:	f47f af6b 	bne.w	800bd64 <_strtod_l+0x73c>
 800be8e:	e60f      	b.n	800bab0 <_strtod_l+0x488>
 800be90:	46ca      	mov	sl, r9
 800be92:	d171      	bne.n	800bf78 <_strtod_l+0x950>
 800be94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be9a:	b352      	cbz	r2, 800bef2 <_strtod_l+0x8ca>
 800be9c:	4a33      	ldr	r2, [pc, #204]	; (800bf6c <_strtod_l+0x944>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d12a      	bne.n	800bef8 <_strtod_l+0x8d0>
 800bea2:	9b04      	ldr	r3, [sp, #16]
 800bea4:	4641      	mov	r1, r8
 800bea6:	b1fb      	cbz	r3, 800bee8 <_strtod_l+0x8c0>
 800bea8:	4b2e      	ldr	r3, [pc, #184]	; (800bf64 <_strtod_l+0x93c>)
 800beaa:	ea09 0303 	and.w	r3, r9, r3
 800beae:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800beb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beb6:	d81a      	bhi.n	800beee <_strtod_l+0x8c6>
 800beb8:	0d1b      	lsrs	r3, r3, #20
 800beba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bebe:	fa02 f303 	lsl.w	r3, r2, r3
 800bec2:	4299      	cmp	r1, r3
 800bec4:	d118      	bne.n	800bef8 <_strtod_l+0x8d0>
 800bec6:	4b2a      	ldr	r3, [pc, #168]	; (800bf70 <_strtod_l+0x948>)
 800bec8:	459a      	cmp	sl, r3
 800beca:	d102      	bne.n	800bed2 <_strtod_l+0x8aa>
 800becc:	3101      	adds	r1, #1
 800bece:	f43f adef 	beq.w	800bab0 <_strtod_l+0x488>
 800bed2:	4b24      	ldr	r3, [pc, #144]	; (800bf64 <_strtod_l+0x93c>)
 800bed4:	ea0a 0303 	and.w	r3, sl, r3
 800bed8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bedc:	f04f 0800 	mov.w	r8, #0
 800bee0:	9b04      	ldr	r3, [sp, #16]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1a2      	bne.n	800be2c <_strtod_l+0x804>
 800bee6:	e5ed      	b.n	800bac4 <_strtod_l+0x49c>
 800bee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800beec:	e7e9      	b.n	800bec2 <_strtod_l+0x89a>
 800beee:	4613      	mov	r3, r2
 800bef0:	e7e7      	b.n	800bec2 <_strtod_l+0x89a>
 800bef2:	ea53 0308 	orrs.w	r3, r3, r8
 800bef6:	d08a      	beq.n	800be0e <_strtod_l+0x7e6>
 800bef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800befa:	b1e3      	cbz	r3, 800bf36 <_strtod_l+0x90e>
 800befc:	ea13 0f0a 	tst.w	r3, sl
 800bf00:	d0ee      	beq.n	800bee0 <_strtod_l+0x8b8>
 800bf02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf04:	9a04      	ldr	r2, [sp, #16]
 800bf06:	4640      	mov	r0, r8
 800bf08:	4649      	mov	r1, r9
 800bf0a:	b1c3      	cbz	r3, 800bf3e <_strtod_l+0x916>
 800bf0c:	f7ff fb70 	bl	800b5f0 <sulp>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	ec51 0b18 	vmov	r0, r1, d8
 800bf18:	f7f4 f9d0 	bl	80002bc <__adddf3>
 800bf1c:	4680      	mov	r8, r0
 800bf1e:	4689      	mov	r9, r1
 800bf20:	e7de      	b.n	800bee0 <_strtod_l+0x8b8>
 800bf22:	4013      	ands	r3, r2
 800bf24:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bf28:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bf2c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bf30:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800bf34:	e7d4      	b.n	800bee0 <_strtod_l+0x8b8>
 800bf36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf38:	ea13 0f08 	tst.w	r3, r8
 800bf3c:	e7e0      	b.n	800bf00 <_strtod_l+0x8d8>
 800bf3e:	f7ff fb57 	bl	800b5f0 <sulp>
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	ec51 0b18 	vmov	r0, r1, d8
 800bf4a:	f7f4 f9b5 	bl	80002b8 <__aeabi_dsub>
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2300      	movs	r3, #0
 800bf52:	4680      	mov	r8, r0
 800bf54:	4689      	mov	r9, r1
 800bf56:	f7f4 fdcf 	bl	8000af8 <__aeabi_dcmpeq>
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	d0c0      	beq.n	800bee0 <_strtod_l+0x8b8>
 800bf5e:	e618      	b.n	800bb92 <_strtod_l+0x56a>
 800bf60:	fffffc02 	.word	0xfffffc02
 800bf64:	7ff00000 	.word	0x7ff00000
 800bf68:	39500000 	.word	0x39500000
 800bf6c:	000fffff 	.word	0x000fffff
 800bf70:	7fefffff 	.word	0x7fefffff
 800bf74:	0800f360 	.word	0x0800f360
 800bf78:	4659      	mov	r1, fp
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f002 fbdc 	bl	800e738 <__ratio>
 800bf80:	ec57 6b10 	vmov	r6, r7, d0
 800bf84:	ee10 0a10 	vmov	r0, s0
 800bf88:	2200      	movs	r2, #0
 800bf8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf8e:	4639      	mov	r1, r7
 800bf90:	f7f4 fdc6 	bl	8000b20 <__aeabi_dcmple>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d071      	beq.n	800c07c <_strtod_l+0xa54>
 800bf98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d17c      	bne.n	800c098 <_strtod_l+0xa70>
 800bf9e:	f1b8 0f00 	cmp.w	r8, #0
 800bfa2:	d15a      	bne.n	800c05a <_strtod_l+0xa32>
 800bfa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d15d      	bne.n	800c068 <_strtod_l+0xa40>
 800bfac:	4b90      	ldr	r3, [pc, #576]	; (800c1f0 <_strtod_l+0xbc8>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	4639      	mov	r1, r7
 800bfb4:	f7f4 fdaa 	bl	8000b0c <__aeabi_dcmplt>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d15c      	bne.n	800c076 <_strtod_l+0xa4e>
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	4639      	mov	r1, r7
 800bfc0:	4b8c      	ldr	r3, [pc, #560]	; (800c1f4 <_strtod_l+0xbcc>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f7f4 fb30 	bl	8000628 <__aeabi_dmul>
 800bfc8:	4606      	mov	r6, r0
 800bfca:	460f      	mov	r7, r1
 800bfcc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bfd0:	9606      	str	r6, [sp, #24]
 800bfd2:	9307      	str	r3, [sp, #28]
 800bfd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfd8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bfdc:	4b86      	ldr	r3, [pc, #536]	; (800c1f8 <_strtod_l+0xbd0>)
 800bfde:	ea0a 0303 	and.w	r3, sl, r3
 800bfe2:	930d      	str	r3, [sp, #52]	; 0x34
 800bfe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bfe6:	4b85      	ldr	r3, [pc, #532]	; (800c1fc <_strtod_l+0xbd4>)
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	f040 8090 	bne.w	800c10e <_strtod_l+0xae6>
 800bfee:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bff2:	ec49 8b10 	vmov	d0, r8, r9
 800bff6:	f002 fad5 	bl	800e5a4 <__ulp>
 800bffa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bffe:	ec51 0b10 	vmov	r0, r1, d0
 800c002:	f7f4 fb11 	bl	8000628 <__aeabi_dmul>
 800c006:	4642      	mov	r2, r8
 800c008:	464b      	mov	r3, r9
 800c00a:	f7f4 f957 	bl	80002bc <__adddf3>
 800c00e:	460b      	mov	r3, r1
 800c010:	4979      	ldr	r1, [pc, #484]	; (800c1f8 <_strtod_l+0xbd0>)
 800c012:	4a7b      	ldr	r2, [pc, #492]	; (800c200 <_strtod_l+0xbd8>)
 800c014:	4019      	ands	r1, r3
 800c016:	4291      	cmp	r1, r2
 800c018:	4680      	mov	r8, r0
 800c01a:	d944      	bls.n	800c0a6 <_strtod_l+0xa7e>
 800c01c:	ee18 2a90 	vmov	r2, s17
 800c020:	4b78      	ldr	r3, [pc, #480]	; (800c204 <_strtod_l+0xbdc>)
 800c022:	429a      	cmp	r2, r3
 800c024:	d104      	bne.n	800c030 <_strtod_l+0xa08>
 800c026:	ee18 3a10 	vmov	r3, s16
 800c02a:	3301      	adds	r3, #1
 800c02c:	f43f ad40 	beq.w	800bab0 <_strtod_l+0x488>
 800c030:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c204 <_strtod_l+0xbdc>
 800c034:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c038:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c03a:	4620      	mov	r0, r4
 800c03c:	f001 ff86 	bl	800df4c <_Bfree>
 800c040:	9905      	ldr	r1, [sp, #20]
 800c042:	4620      	mov	r0, r4
 800c044:	f001 ff82 	bl	800df4c <_Bfree>
 800c048:	4659      	mov	r1, fp
 800c04a:	4620      	mov	r0, r4
 800c04c:	f001 ff7e 	bl	800df4c <_Bfree>
 800c050:	4629      	mov	r1, r5
 800c052:	4620      	mov	r0, r4
 800c054:	f001 ff7a 	bl	800df4c <_Bfree>
 800c058:	e609      	b.n	800bc6e <_strtod_l+0x646>
 800c05a:	f1b8 0f01 	cmp.w	r8, #1
 800c05e:	d103      	bne.n	800c068 <_strtod_l+0xa40>
 800c060:	f1b9 0f00 	cmp.w	r9, #0
 800c064:	f43f ad95 	beq.w	800bb92 <_strtod_l+0x56a>
 800c068:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c1c0 <_strtod_l+0xb98>
 800c06c:	4f60      	ldr	r7, [pc, #384]	; (800c1f0 <_strtod_l+0xbc8>)
 800c06e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c072:	2600      	movs	r6, #0
 800c074:	e7ae      	b.n	800bfd4 <_strtod_l+0x9ac>
 800c076:	4f5f      	ldr	r7, [pc, #380]	; (800c1f4 <_strtod_l+0xbcc>)
 800c078:	2600      	movs	r6, #0
 800c07a:	e7a7      	b.n	800bfcc <_strtod_l+0x9a4>
 800c07c:	4b5d      	ldr	r3, [pc, #372]	; (800c1f4 <_strtod_l+0xbcc>)
 800c07e:	4630      	mov	r0, r6
 800c080:	4639      	mov	r1, r7
 800c082:	2200      	movs	r2, #0
 800c084:	f7f4 fad0 	bl	8000628 <__aeabi_dmul>
 800c088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c08a:	4606      	mov	r6, r0
 800c08c:	460f      	mov	r7, r1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d09c      	beq.n	800bfcc <_strtod_l+0x9a4>
 800c092:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c096:	e79d      	b.n	800bfd4 <_strtod_l+0x9ac>
 800c098:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c1c8 <_strtod_l+0xba0>
 800c09c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c0a0:	ec57 6b17 	vmov	r6, r7, d7
 800c0a4:	e796      	b.n	800bfd4 <_strtod_l+0x9ac>
 800c0a6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c0aa:	9b04      	ldr	r3, [sp, #16]
 800c0ac:	46ca      	mov	sl, r9
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1c2      	bne.n	800c038 <_strtod_l+0xa10>
 800c0b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c0b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0b8:	0d1b      	lsrs	r3, r3, #20
 800c0ba:	051b      	lsls	r3, r3, #20
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d1bb      	bne.n	800c038 <_strtod_l+0xa10>
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 fe10 	bl	8000ce8 <__aeabi_d2lz>
 800c0c8:	f7f4 fa80 	bl	80005cc <__aeabi_l2d>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	f7f4 f8f0 	bl	80002b8 <__aeabi_dsub>
 800c0d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0da:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0de:	ea43 0308 	orr.w	r3, r3, r8
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	460f      	mov	r7, r1
 800c0e8:	d054      	beq.n	800c194 <_strtod_l+0xb6c>
 800c0ea:	a339      	add	r3, pc, #228	; (adr r3, 800c1d0 <_strtod_l+0xba8>)
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f7f4 fd0c 	bl	8000b0c <__aeabi_dcmplt>
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	f47f ace5 	bne.w	800bac4 <_strtod_l+0x49c>
 800c0fa:	a337      	add	r3, pc, #220	; (adr r3, 800c1d8 <_strtod_l+0xbb0>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	4630      	mov	r0, r6
 800c102:	4639      	mov	r1, r7
 800c104:	f7f4 fd20 	bl	8000b48 <__aeabi_dcmpgt>
 800c108:	2800      	cmp	r0, #0
 800c10a:	d095      	beq.n	800c038 <_strtod_l+0xa10>
 800c10c:	e4da      	b.n	800bac4 <_strtod_l+0x49c>
 800c10e:	9b04      	ldr	r3, [sp, #16]
 800c110:	b333      	cbz	r3, 800c160 <_strtod_l+0xb38>
 800c112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c114:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c118:	d822      	bhi.n	800c160 <_strtod_l+0xb38>
 800c11a:	a331      	add	r3, pc, #196	; (adr r3, 800c1e0 <_strtod_l+0xbb8>)
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	4630      	mov	r0, r6
 800c122:	4639      	mov	r1, r7
 800c124:	f7f4 fcfc 	bl	8000b20 <__aeabi_dcmple>
 800c128:	b1a0      	cbz	r0, 800c154 <_strtod_l+0xb2c>
 800c12a:	4639      	mov	r1, r7
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7f4 fd53 	bl	8000bd8 <__aeabi_d2uiz>
 800c132:	2801      	cmp	r0, #1
 800c134:	bf38      	it	cc
 800c136:	2001      	movcc	r0, #1
 800c138:	f7f4 f9fc 	bl	8000534 <__aeabi_ui2d>
 800c13c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c13e:	4606      	mov	r6, r0
 800c140:	460f      	mov	r7, r1
 800c142:	bb23      	cbnz	r3, 800c18e <_strtod_l+0xb66>
 800c144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c148:	9010      	str	r0, [sp, #64]	; 0x40
 800c14a:	9311      	str	r3, [sp, #68]	; 0x44
 800c14c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c150:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c156:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c158:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c15c:	1a9b      	subs	r3, r3, r2
 800c15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c160:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c164:	eeb0 0a48 	vmov.f32	s0, s16
 800c168:	eef0 0a68 	vmov.f32	s1, s17
 800c16c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c170:	f002 fa18 	bl	800e5a4 <__ulp>
 800c174:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c178:	ec53 2b10 	vmov	r2, r3, d0
 800c17c:	f7f4 fa54 	bl	8000628 <__aeabi_dmul>
 800c180:	ec53 2b18 	vmov	r2, r3, d8
 800c184:	f7f4 f89a 	bl	80002bc <__adddf3>
 800c188:	4680      	mov	r8, r0
 800c18a:	4689      	mov	r9, r1
 800c18c:	e78d      	b.n	800c0aa <_strtod_l+0xa82>
 800c18e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c192:	e7db      	b.n	800c14c <_strtod_l+0xb24>
 800c194:	a314      	add	r3, pc, #80	; (adr r3, 800c1e8 <_strtod_l+0xbc0>)
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	f7f4 fcb7 	bl	8000b0c <__aeabi_dcmplt>
 800c19e:	e7b3      	b.n	800c108 <_strtod_l+0xae0>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c1a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c1a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1a8:	6013      	str	r3, [r2, #0]
 800c1aa:	f7ff ba7c 	b.w	800b6a6 <_strtod_l+0x7e>
 800c1ae:	2a65      	cmp	r2, #101	; 0x65
 800c1b0:	f43f ab75 	beq.w	800b89e <_strtod_l+0x276>
 800c1b4:	2a45      	cmp	r2, #69	; 0x45
 800c1b6:	f43f ab72 	beq.w	800b89e <_strtod_l+0x276>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	f7ff bbaa 	b.w	800b914 <_strtod_l+0x2ec>
 800c1c0:	00000000 	.word	0x00000000
 800c1c4:	bff00000 	.word	0xbff00000
 800c1c8:	00000000 	.word	0x00000000
 800c1cc:	3ff00000 	.word	0x3ff00000
 800c1d0:	94a03595 	.word	0x94a03595
 800c1d4:	3fdfffff 	.word	0x3fdfffff
 800c1d8:	35afe535 	.word	0x35afe535
 800c1dc:	3fe00000 	.word	0x3fe00000
 800c1e0:	ffc00000 	.word	0xffc00000
 800c1e4:	41dfffff 	.word	0x41dfffff
 800c1e8:	94a03595 	.word	0x94a03595
 800c1ec:	3fcfffff 	.word	0x3fcfffff
 800c1f0:	3ff00000 	.word	0x3ff00000
 800c1f4:	3fe00000 	.word	0x3fe00000
 800c1f8:	7ff00000 	.word	0x7ff00000
 800c1fc:	7fe00000 	.word	0x7fe00000
 800c200:	7c9fffff 	.word	0x7c9fffff
 800c204:	7fefffff 	.word	0x7fefffff

0800c208 <_strtod_r>:
 800c208:	4b01      	ldr	r3, [pc, #4]	; (800c210 <_strtod_r+0x8>)
 800c20a:	f7ff ba0d 	b.w	800b628 <_strtod_l>
 800c20e:	bf00      	nop
 800c210:	200000a4 	.word	0x200000a4

0800c214 <_strtol_l.constprop.0>:
 800c214:	2b01      	cmp	r3, #1
 800c216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c21a:	d001      	beq.n	800c220 <_strtol_l.constprop.0+0xc>
 800c21c:	2b24      	cmp	r3, #36	; 0x24
 800c21e:	d906      	bls.n	800c22e <_strtol_l.constprop.0+0x1a>
 800c220:	f000 f91e 	bl	800c460 <__errno>
 800c224:	2316      	movs	r3, #22
 800c226:	6003      	str	r3, [r0, #0]
 800c228:	2000      	movs	r0, #0
 800c22a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c22e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c314 <_strtol_l.constprop.0+0x100>
 800c232:	460d      	mov	r5, r1
 800c234:	462e      	mov	r6, r5
 800c236:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c23a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c23e:	f017 0708 	ands.w	r7, r7, #8
 800c242:	d1f7      	bne.n	800c234 <_strtol_l.constprop.0+0x20>
 800c244:	2c2d      	cmp	r4, #45	; 0x2d
 800c246:	d132      	bne.n	800c2ae <_strtol_l.constprop.0+0x9a>
 800c248:	782c      	ldrb	r4, [r5, #0]
 800c24a:	2701      	movs	r7, #1
 800c24c:	1cb5      	adds	r5, r6, #2
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d05b      	beq.n	800c30a <_strtol_l.constprop.0+0xf6>
 800c252:	2b10      	cmp	r3, #16
 800c254:	d109      	bne.n	800c26a <_strtol_l.constprop.0+0x56>
 800c256:	2c30      	cmp	r4, #48	; 0x30
 800c258:	d107      	bne.n	800c26a <_strtol_l.constprop.0+0x56>
 800c25a:	782c      	ldrb	r4, [r5, #0]
 800c25c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c260:	2c58      	cmp	r4, #88	; 0x58
 800c262:	d14d      	bne.n	800c300 <_strtol_l.constprop.0+0xec>
 800c264:	786c      	ldrb	r4, [r5, #1]
 800c266:	2310      	movs	r3, #16
 800c268:	3502      	adds	r5, #2
 800c26a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c26e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c272:	f04f 0e00 	mov.w	lr, #0
 800c276:	fbb8 f9f3 	udiv	r9, r8, r3
 800c27a:	4676      	mov	r6, lr
 800c27c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c280:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c284:	f1bc 0f09 	cmp.w	ip, #9
 800c288:	d816      	bhi.n	800c2b8 <_strtol_l.constprop.0+0xa4>
 800c28a:	4664      	mov	r4, ip
 800c28c:	42a3      	cmp	r3, r4
 800c28e:	dd24      	ble.n	800c2da <_strtol_l.constprop.0+0xc6>
 800c290:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c294:	d008      	beq.n	800c2a8 <_strtol_l.constprop.0+0x94>
 800c296:	45b1      	cmp	r9, r6
 800c298:	d31c      	bcc.n	800c2d4 <_strtol_l.constprop.0+0xc0>
 800c29a:	d101      	bne.n	800c2a0 <_strtol_l.constprop.0+0x8c>
 800c29c:	45a2      	cmp	sl, r4
 800c29e:	db19      	blt.n	800c2d4 <_strtol_l.constprop.0+0xc0>
 800c2a0:	fb06 4603 	mla	r6, r6, r3, r4
 800c2a4:	f04f 0e01 	mov.w	lr, #1
 800c2a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c2ac:	e7e8      	b.n	800c280 <_strtol_l.constprop.0+0x6c>
 800c2ae:	2c2b      	cmp	r4, #43	; 0x2b
 800c2b0:	bf04      	itt	eq
 800c2b2:	782c      	ldrbeq	r4, [r5, #0]
 800c2b4:	1cb5      	addeq	r5, r6, #2
 800c2b6:	e7ca      	b.n	800c24e <_strtol_l.constprop.0+0x3a>
 800c2b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c2bc:	f1bc 0f19 	cmp.w	ip, #25
 800c2c0:	d801      	bhi.n	800c2c6 <_strtol_l.constprop.0+0xb2>
 800c2c2:	3c37      	subs	r4, #55	; 0x37
 800c2c4:	e7e2      	b.n	800c28c <_strtol_l.constprop.0+0x78>
 800c2c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c2ca:	f1bc 0f19 	cmp.w	ip, #25
 800c2ce:	d804      	bhi.n	800c2da <_strtol_l.constprop.0+0xc6>
 800c2d0:	3c57      	subs	r4, #87	; 0x57
 800c2d2:	e7db      	b.n	800c28c <_strtol_l.constprop.0+0x78>
 800c2d4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800c2d8:	e7e6      	b.n	800c2a8 <_strtol_l.constprop.0+0x94>
 800c2da:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800c2de:	d105      	bne.n	800c2ec <_strtol_l.constprop.0+0xd8>
 800c2e0:	2322      	movs	r3, #34	; 0x22
 800c2e2:	6003      	str	r3, [r0, #0]
 800c2e4:	4646      	mov	r6, r8
 800c2e6:	b942      	cbnz	r2, 800c2fa <_strtol_l.constprop.0+0xe6>
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	e79e      	b.n	800c22a <_strtol_l.constprop.0+0x16>
 800c2ec:	b107      	cbz	r7, 800c2f0 <_strtol_l.constprop.0+0xdc>
 800c2ee:	4276      	negs	r6, r6
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	d0f9      	beq.n	800c2e8 <_strtol_l.constprop.0+0xd4>
 800c2f4:	f1be 0f00 	cmp.w	lr, #0
 800c2f8:	d000      	beq.n	800c2fc <_strtol_l.constprop.0+0xe8>
 800c2fa:	1e69      	subs	r1, r5, #1
 800c2fc:	6011      	str	r1, [r2, #0]
 800c2fe:	e7f3      	b.n	800c2e8 <_strtol_l.constprop.0+0xd4>
 800c300:	2430      	movs	r4, #48	; 0x30
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1b1      	bne.n	800c26a <_strtol_l.constprop.0+0x56>
 800c306:	2308      	movs	r3, #8
 800c308:	e7af      	b.n	800c26a <_strtol_l.constprop.0+0x56>
 800c30a:	2c30      	cmp	r4, #48	; 0x30
 800c30c:	d0a5      	beq.n	800c25a <_strtol_l.constprop.0+0x46>
 800c30e:	230a      	movs	r3, #10
 800c310:	e7ab      	b.n	800c26a <_strtol_l.constprop.0+0x56>
 800c312:	bf00      	nop
 800c314:	0800f391 	.word	0x0800f391

0800c318 <_strtol_r>:
 800c318:	f7ff bf7c 	b.w	800c214 <_strtol_l.constprop.0>

0800c31c <_fwalk_sglue>:
 800c31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c320:	4607      	mov	r7, r0
 800c322:	4688      	mov	r8, r1
 800c324:	4614      	mov	r4, r2
 800c326:	2600      	movs	r6, #0
 800c328:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c32c:	f1b9 0901 	subs.w	r9, r9, #1
 800c330:	d505      	bpl.n	800c33e <_fwalk_sglue+0x22>
 800c332:	6824      	ldr	r4, [r4, #0]
 800c334:	2c00      	cmp	r4, #0
 800c336:	d1f7      	bne.n	800c328 <_fwalk_sglue+0xc>
 800c338:	4630      	mov	r0, r6
 800c33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c33e:	89ab      	ldrh	r3, [r5, #12]
 800c340:	2b01      	cmp	r3, #1
 800c342:	d907      	bls.n	800c354 <_fwalk_sglue+0x38>
 800c344:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c348:	3301      	adds	r3, #1
 800c34a:	d003      	beq.n	800c354 <_fwalk_sglue+0x38>
 800c34c:	4629      	mov	r1, r5
 800c34e:	4638      	mov	r0, r7
 800c350:	47c0      	blx	r8
 800c352:	4306      	orrs	r6, r0
 800c354:	3568      	adds	r5, #104	; 0x68
 800c356:	e7e9      	b.n	800c32c <_fwalk_sglue+0x10>

0800c358 <strcat>:
 800c358:	b510      	push	{r4, lr}
 800c35a:	4602      	mov	r2, r0
 800c35c:	7814      	ldrb	r4, [r2, #0]
 800c35e:	4613      	mov	r3, r2
 800c360:	3201      	adds	r2, #1
 800c362:	2c00      	cmp	r4, #0
 800c364:	d1fa      	bne.n	800c35c <strcat+0x4>
 800c366:	3b01      	subs	r3, #1
 800c368:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c36c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c370:	2a00      	cmp	r2, #0
 800c372:	d1f9      	bne.n	800c368 <strcat+0x10>
 800c374:	bd10      	pop	{r4, pc}

0800c376 <strncmp>:
 800c376:	b510      	push	{r4, lr}
 800c378:	b16a      	cbz	r2, 800c396 <strncmp+0x20>
 800c37a:	3901      	subs	r1, #1
 800c37c:	1884      	adds	r4, r0, r2
 800c37e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c382:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c386:	429a      	cmp	r2, r3
 800c388:	d103      	bne.n	800c392 <strncmp+0x1c>
 800c38a:	42a0      	cmp	r0, r4
 800c38c:	d001      	beq.n	800c392 <strncmp+0x1c>
 800c38e:	2a00      	cmp	r2, #0
 800c390:	d1f5      	bne.n	800c37e <strncmp+0x8>
 800c392:	1ad0      	subs	r0, r2, r3
 800c394:	bd10      	pop	{r4, pc}
 800c396:	4610      	mov	r0, r2
 800c398:	e7fc      	b.n	800c394 <strncmp+0x1e>

0800c39a <memset>:
 800c39a:	4402      	add	r2, r0
 800c39c:	4603      	mov	r3, r0
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d100      	bne.n	800c3a4 <memset+0xa>
 800c3a2:	4770      	bx	lr
 800c3a4:	f803 1b01 	strb.w	r1, [r3], #1
 800c3a8:	e7f9      	b.n	800c39e <memset+0x4>
	...

0800c3ac <_localeconv_r>:
 800c3ac:	4800      	ldr	r0, [pc, #0]	; (800c3b0 <_localeconv_r+0x4>)
 800c3ae:	4770      	bx	lr
 800c3b0:	20000194 	.word	0x20000194

0800c3b4 <_reclaim_reent>:
 800c3b4:	4b29      	ldr	r3, [pc, #164]	; (800c45c <_reclaim_reent+0xa8>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4283      	cmp	r3, r0
 800c3ba:	b570      	push	{r4, r5, r6, lr}
 800c3bc:	4604      	mov	r4, r0
 800c3be:	d04b      	beq.n	800c458 <_reclaim_reent+0xa4>
 800c3c0:	69c3      	ldr	r3, [r0, #28]
 800c3c2:	b143      	cbz	r3, 800c3d6 <_reclaim_reent+0x22>
 800c3c4:	68db      	ldr	r3, [r3, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d144      	bne.n	800c454 <_reclaim_reent+0xa0>
 800c3ca:	69e3      	ldr	r3, [r4, #28]
 800c3cc:	6819      	ldr	r1, [r3, #0]
 800c3ce:	b111      	cbz	r1, 800c3d6 <_reclaim_reent+0x22>
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f000 ff0b 	bl	800d1ec <_free_r>
 800c3d6:	6961      	ldr	r1, [r4, #20]
 800c3d8:	b111      	cbz	r1, 800c3e0 <_reclaim_reent+0x2c>
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 ff06 	bl	800d1ec <_free_r>
 800c3e0:	69e1      	ldr	r1, [r4, #28]
 800c3e2:	b111      	cbz	r1, 800c3ea <_reclaim_reent+0x36>
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f000 ff01 	bl	800d1ec <_free_r>
 800c3ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c3ec:	b111      	cbz	r1, 800c3f4 <_reclaim_reent+0x40>
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f000 fefc 	bl	800d1ec <_free_r>
 800c3f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3f6:	b111      	cbz	r1, 800c3fe <_reclaim_reent+0x4a>
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 fef7 	bl	800d1ec <_free_r>
 800c3fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c400:	b111      	cbz	r1, 800c408 <_reclaim_reent+0x54>
 800c402:	4620      	mov	r0, r4
 800c404:	f000 fef2 	bl	800d1ec <_free_r>
 800c408:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c40a:	b111      	cbz	r1, 800c412 <_reclaim_reent+0x5e>
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 feed 	bl	800d1ec <_free_r>
 800c412:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c414:	b111      	cbz	r1, 800c41c <_reclaim_reent+0x68>
 800c416:	4620      	mov	r0, r4
 800c418:	f000 fee8 	bl	800d1ec <_free_r>
 800c41c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c41e:	b111      	cbz	r1, 800c426 <_reclaim_reent+0x72>
 800c420:	4620      	mov	r0, r4
 800c422:	f000 fee3 	bl	800d1ec <_free_r>
 800c426:	6a23      	ldr	r3, [r4, #32]
 800c428:	b1b3      	cbz	r3, 800c458 <_reclaim_reent+0xa4>
 800c42a:	4620      	mov	r0, r4
 800c42c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c430:	4718      	bx	r3
 800c432:	5949      	ldr	r1, [r1, r5]
 800c434:	b941      	cbnz	r1, 800c448 <_reclaim_reent+0x94>
 800c436:	3504      	adds	r5, #4
 800c438:	69e3      	ldr	r3, [r4, #28]
 800c43a:	2d80      	cmp	r5, #128	; 0x80
 800c43c:	68d9      	ldr	r1, [r3, #12]
 800c43e:	d1f8      	bne.n	800c432 <_reclaim_reent+0x7e>
 800c440:	4620      	mov	r0, r4
 800c442:	f000 fed3 	bl	800d1ec <_free_r>
 800c446:	e7c0      	b.n	800c3ca <_reclaim_reent+0x16>
 800c448:	680e      	ldr	r6, [r1, #0]
 800c44a:	4620      	mov	r0, r4
 800c44c:	f000 fece 	bl	800d1ec <_free_r>
 800c450:	4631      	mov	r1, r6
 800c452:	e7ef      	b.n	800c434 <_reclaim_reent+0x80>
 800c454:	2500      	movs	r5, #0
 800c456:	e7ef      	b.n	800c438 <_reclaim_reent+0x84>
 800c458:	bd70      	pop	{r4, r5, r6, pc}
 800c45a:	bf00      	nop
 800c45c:	2000025c 	.word	0x2000025c

0800c460 <__errno>:
 800c460:	4b01      	ldr	r3, [pc, #4]	; (800c468 <__errno+0x8>)
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	2000025c 	.word	0x2000025c

0800c46c <__libc_init_array>:
 800c46c:	b570      	push	{r4, r5, r6, lr}
 800c46e:	4d0d      	ldr	r5, [pc, #52]	; (800c4a4 <__libc_init_array+0x38>)
 800c470:	4c0d      	ldr	r4, [pc, #52]	; (800c4a8 <__libc_init_array+0x3c>)
 800c472:	1b64      	subs	r4, r4, r5
 800c474:	10a4      	asrs	r4, r4, #2
 800c476:	2600      	movs	r6, #0
 800c478:	42a6      	cmp	r6, r4
 800c47a:	d109      	bne.n	800c490 <__libc_init_array+0x24>
 800c47c:	4d0b      	ldr	r5, [pc, #44]	; (800c4ac <__libc_init_array+0x40>)
 800c47e:	4c0c      	ldr	r4, [pc, #48]	; (800c4b0 <__libc_init_array+0x44>)
 800c480:	f002 fdb6 	bl	800eff0 <_init>
 800c484:	1b64      	subs	r4, r4, r5
 800c486:	10a4      	asrs	r4, r4, #2
 800c488:	2600      	movs	r6, #0
 800c48a:	42a6      	cmp	r6, r4
 800c48c:	d105      	bne.n	800c49a <__libc_init_array+0x2e>
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
 800c490:	f855 3b04 	ldr.w	r3, [r5], #4
 800c494:	4798      	blx	r3
 800c496:	3601      	adds	r6, #1
 800c498:	e7ee      	b.n	800c478 <__libc_init_array+0xc>
 800c49a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c49e:	4798      	blx	r3
 800c4a0:	3601      	adds	r6, #1
 800c4a2:	e7f2      	b.n	800c48a <__libc_init_array+0x1e>
 800c4a4:	0800f728 	.word	0x0800f728
 800c4a8:	0800f728 	.word	0x0800f728
 800c4ac:	0800f728 	.word	0x0800f728
 800c4b0:	0800f72c 	.word	0x0800f72c

0800c4b4 <__retarget_lock_init_recursive>:
 800c4b4:	4770      	bx	lr

0800c4b6 <__retarget_lock_acquire_recursive>:
 800c4b6:	4770      	bx	lr

0800c4b8 <__retarget_lock_release_recursive>:
 800c4b8:	4770      	bx	lr

0800c4ba <memcpy>:
 800c4ba:	440a      	add	r2, r1
 800c4bc:	4291      	cmp	r1, r2
 800c4be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c4c2:	d100      	bne.n	800c4c6 <memcpy+0xc>
 800c4c4:	4770      	bx	lr
 800c4c6:	b510      	push	{r4, lr}
 800c4c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c4cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4d0:	4291      	cmp	r1, r2
 800c4d2:	d1f9      	bne.n	800c4c8 <memcpy+0xe>
 800c4d4:	bd10      	pop	{r4, pc}
	...

0800c4d8 <nan>:
 800c4d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c4e0 <nan+0x8>
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	00000000 	.word	0x00000000
 800c4e4:	7ff80000 	.word	0x7ff80000

0800c4e8 <nanf>:
 800c4e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c4f0 <nanf+0x8>
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop
 800c4f0:	7fc00000 	.word	0x7fc00000

0800c4f4 <quorem>:
 800c4f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f8:	6903      	ldr	r3, [r0, #16]
 800c4fa:	690c      	ldr	r4, [r1, #16]
 800c4fc:	42a3      	cmp	r3, r4
 800c4fe:	4607      	mov	r7, r0
 800c500:	db7e      	blt.n	800c600 <quorem+0x10c>
 800c502:	3c01      	subs	r4, #1
 800c504:	f101 0814 	add.w	r8, r1, #20
 800c508:	f100 0514 	add.w	r5, r0, #20
 800c50c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c510:	9301      	str	r3, [sp, #4]
 800c512:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c516:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c51a:	3301      	adds	r3, #1
 800c51c:	429a      	cmp	r2, r3
 800c51e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c522:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c526:	fbb2 f6f3 	udiv	r6, r2, r3
 800c52a:	d331      	bcc.n	800c590 <quorem+0x9c>
 800c52c:	f04f 0e00 	mov.w	lr, #0
 800c530:	4640      	mov	r0, r8
 800c532:	46ac      	mov	ip, r5
 800c534:	46f2      	mov	sl, lr
 800c536:	f850 2b04 	ldr.w	r2, [r0], #4
 800c53a:	b293      	uxth	r3, r2
 800c53c:	fb06 e303 	mla	r3, r6, r3, lr
 800c540:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c544:	0c1a      	lsrs	r2, r3, #16
 800c546:	b29b      	uxth	r3, r3
 800c548:	ebaa 0303 	sub.w	r3, sl, r3
 800c54c:	f8dc a000 	ldr.w	sl, [ip]
 800c550:	fa13 f38a 	uxtah	r3, r3, sl
 800c554:	fb06 220e 	mla	r2, r6, lr, r2
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	9b00      	ldr	r3, [sp, #0]
 800c55c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c560:	b292      	uxth	r2, r2
 800c562:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c566:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c56a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c56e:	4581      	cmp	r9, r0
 800c570:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c574:	f84c 3b04 	str.w	r3, [ip], #4
 800c578:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c57c:	d2db      	bcs.n	800c536 <quorem+0x42>
 800c57e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c582:	b92b      	cbnz	r3, 800c590 <quorem+0x9c>
 800c584:	9b01      	ldr	r3, [sp, #4]
 800c586:	3b04      	subs	r3, #4
 800c588:	429d      	cmp	r5, r3
 800c58a:	461a      	mov	r2, r3
 800c58c:	d32c      	bcc.n	800c5e8 <quorem+0xf4>
 800c58e:	613c      	str	r4, [r7, #16]
 800c590:	4638      	mov	r0, r7
 800c592:	f001 ff61 	bl	800e458 <__mcmp>
 800c596:	2800      	cmp	r0, #0
 800c598:	db22      	blt.n	800c5e0 <quorem+0xec>
 800c59a:	3601      	adds	r6, #1
 800c59c:	4629      	mov	r1, r5
 800c59e:	2000      	movs	r0, #0
 800c5a0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5a4:	f8d1 c000 	ldr.w	ip, [r1]
 800c5a8:	b293      	uxth	r3, r2
 800c5aa:	1ac3      	subs	r3, r0, r3
 800c5ac:	0c12      	lsrs	r2, r2, #16
 800c5ae:	fa13 f38c 	uxtah	r3, r3, ip
 800c5b2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c5b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5c0:	45c1      	cmp	r9, r8
 800c5c2:	f841 3b04 	str.w	r3, [r1], #4
 800c5c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5ca:	d2e9      	bcs.n	800c5a0 <quorem+0xac>
 800c5cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5d4:	b922      	cbnz	r2, 800c5e0 <quorem+0xec>
 800c5d6:	3b04      	subs	r3, #4
 800c5d8:	429d      	cmp	r5, r3
 800c5da:	461a      	mov	r2, r3
 800c5dc:	d30a      	bcc.n	800c5f4 <quorem+0x100>
 800c5de:	613c      	str	r4, [r7, #16]
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	b003      	add	sp, #12
 800c5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e8:	6812      	ldr	r2, [r2, #0]
 800c5ea:	3b04      	subs	r3, #4
 800c5ec:	2a00      	cmp	r2, #0
 800c5ee:	d1ce      	bne.n	800c58e <quorem+0x9a>
 800c5f0:	3c01      	subs	r4, #1
 800c5f2:	e7c9      	b.n	800c588 <quorem+0x94>
 800c5f4:	6812      	ldr	r2, [r2, #0]
 800c5f6:	3b04      	subs	r3, #4
 800c5f8:	2a00      	cmp	r2, #0
 800c5fa:	d1f0      	bne.n	800c5de <quorem+0xea>
 800c5fc:	3c01      	subs	r4, #1
 800c5fe:	e7eb      	b.n	800c5d8 <quorem+0xe4>
 800c600:	2000      	movs	r0, #0
 800c602:	e7ee      	b.n	800c5e2 <quorem+0xee>
 800c604:	0000      	movs	r0, r0
	...

0800c608 <_dtoa_r>:
 800c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	ed2d 8b04 	vpush	{d8-d9}
 800c610:	69c5      	ldr	r5, [r0, #28]
 800c612:	b093      	sub	sp, #76	; 0x4c
 800c614:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c618:	ec57 6b10 	vmov	r6, r7, d0
 800c61c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c620:	9107      	str	r1, [sp, #28]
 800c622:	4604      	mov	r4, r0
 800c624:	920a      	str	r2, [sp, #40]	; 0x28
 800c626:	930d      	str	r3, [sp, #52]	; 0x34
 800c628:	b975      	cbnz	r5, 800c648 <_dtoa_r+0x40>
 800c62a:	2010      	movs	r0, #16
 800c62c:	f001 fada 	bl	800dbe4 <malloc>
 800c630:	4602      	mov	r2, r0
 800c632:	61e0      	str	r0, [r4, #28]
 800c634:	b920      	cbnz	r0, 800c640 <_dtoa_r+0x38>
 800c636:	4bae      	ldr	r3, [pc, #696]	; (800c8f0 <_dtoa_r+0x2e8>)
 800c638:	21ef      	movs	r1, #239	; 0xef
 800c63a:	48ae      	ldr	r0, [pc, #696]	; (800c8f4 <_dtoa_r+0x2ec>)
 800c63c:	f002 f9e2 	bl	800ea04 <__assert_func>
 800c640:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c644:	6005      	str	r5, [r0, #0]
 800c646:	60c5      	str	r5, [r0, #12]
 800c648:	69e3      	ldr	r3, [r4, #28]
 800c64a:	6819      	ldr	r1, [r3, #0]
 800c64c:	b151      	cbz	r1, 800c664 <_dtoa_r+0x5c>
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	604a      	str	r2, [r1, #4]
 800c652:	2301      	movs	r3, #1
 800c654:	4093      	lsls	r3, r2
 800c656:	608b      	str	r3, [r1, #8]
 800c658:	4620      	mov	r0, r4
 800c65a:	f001 fc77 	bl	800df4c <_Bfree>
 800c65e:	69e3      	ldr	r3, [r4, #28]
 800c660:	2200      	movs	r2, #0
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	1e3b      	subs	r3, r7, #0
 800c666:	bfbb      	ittet	lt
 800c668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c66c:	9303      	strlt	r3, [sp, #12]
 800c66e:	2300      	movge	r3, #0
 800c670:	2201      	movlt	r2, #1
 800c672:	bfac      	ite	ge
 800c674:	f8c8 3000 	strge.w	r3, [r8]
 800c678:	f8c8 2000 	strlt.w	r2, [r8]
 800c67c:	4b9e      	ldr	r3, [pc, #632]	; (800c8f8 <_dtoa_r+0x2f0>)
 800c67e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c682:	ea33 0308 	bics.w	r3, r3, r8
 800c686:	d11b      	bne.n	800c6c0 <_dtoa_r+0xb8>
 800c688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c68a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c68e:	6013      	str	r3, [r2, #0]
 800c690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c694:	4333      	orrs	r3, r6
 800c696:	f000 8593 	beq.w	800d1c0 <_dtoa_r+0xbb8>
 800c69a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c69c:	b963      	cbnz	r3, 800c6b8 <_dtoa_r+0xb0>
 800c69e:	4b97      	ldr	r3, [pc, #604]	; (800c8fc <_dtoa_r+0x2f4>)
 800c6a0:	e027      	b.n	800c6f2 <_dtoa_r+0xea>
 800c6a2:	4b97      	ldr	r3, [pc, #604]	; (800c900 <_dtoa_r+0x2f8>)
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	3308      	adds	r3, #8
 800c6a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6aa:	6013      	str	r3, [r2, #0]
 800c6ac:	9800      	ldr	r0, [sp, #0]
 800c6ae:	b013      	add	sp, #76	; 0x4c
 800c6b0:	ecbd 8b04 	vpop	{d8-d9}
 800c6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b8:	4b90      	ldr	r3, [pc, #576]	; (800c8fc <_dtoa_r+0x2f4>)
 800c6ba:	9300      	str	r3, [sp, #0]
 800c6bc:	3303      	adds	r3, #3
 800c6be:	e7f3      	b.n	800c6a8 <_dtoa_r+0xa0>
 800c6c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	ec51 0b17 	vmov	r0, r1, d7
 800c6ca:	eeb0 8a47 	vmov.f32	s16, s14
 800c6ce:	eef0 8a67 	vmov.f32	s17, s15
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	f7f4 fa10 	bl	8000af8 <__aeabi_dcmpeq>
 800c6d8:	4681      	mov	r9, r0
 800c6da:	b160      	cbz	r0, 800c6f6 <_dtoa_r+0xee>
 800c6dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6de:	2301      	movs	r3, #1
 800c6e0:	6013      	str	r3, [r2, #0]
 800c6e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	f000 8568 	beq.w	800d1ba <_dtoa_r+0xbb2>
 800c6ea:	4b86      	ldr	r3, [pc, #536]	; (800c904 <_dtoa_r+0x2fc>)
 800c6ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6ee:	6013      	str	r3, [r2, #0]
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	9300      	str	r3, [sp, #0]
 800c6f4:	e7da      	b.n	800c6ac <_dtoa_r+0xa4>
 800c6f6:	aa10      	add	r2, sp, #64	; 0x40
 800c6f8:	a911      	add	r1, sp, #68	; 0x44
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	eeb0 0a48 	vmov.f32	s0, s16
 800c700:	eef0 0a68 	vmov.f32	s1, s17
 800c704:	f001 ffbe 	bl	800e684 <__d2b>
 800c708:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c70c:	4682      	mov	sl, r0
 800c70e:	2d00      	cmp	r5, #0
 800c710:	d07f      	beq.n	800c812 <_dtoa_r+0x20a>
 800c712:	ee18 3a90 	vmov	r3, s17
 800c716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c71a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c71e:	ec51 0b18 	vmov	r0, r1, d8
 800c722:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c72a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c72e:	4619      	mov	r1, r3
 800c730:	2200      	movs	r2, #0
 800c732:	4b75      	ldr	r3, [pc, #468]	; (800c908 <_dtoa_r+0x300>)
 800c734:	f7f3 fdc0 	bl	80002b8 <__aeabi_dsub>
 800c738:	a367      	add	r3, pc, #412	; (adr r3, 800c8d8 <_dtoa_r+0x2d0>)
 800c73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73e:	f7f3 ff73 	bl	8000628 <__aeabi_dmul>
 800c742:	a367      	add	r3, pc, #412	; (adr r3, 800c8e0 <_dtoa_r+0x2d8>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fdb8 	bl	80002bc <__adddf3>
 800c74c:	4606      	mov	r6, r0
 800c74e:	4628      	mov	r0, r5
 800c750:	460f      	mov	r7, r1
 800c752:	f7f3 feff 	bl	8000554 <__aeabi_i2d>
 800c756:	a364      	add	r3, pc, #400	; (adr r3, 800c8e8 <_dtoa_r+0x2e0>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f7f3 ff64 	bl	8000628 <__aeabi_dmul>
 800c760:	4602      	mov	r2, r0
 800c762:	460b      	mov	r3, r1
 800c764:	4630      	mov	r0, r6
 800c766:	4639      	mov	r1, r7
 800c768:	f7f3 fda8 	bl	80002bc <__adddf3>
 800c76c:	4606      	mov	r6, r0
 800c76e:	460f      	mov	r7, r1
 800c770:	f7f4 fa0a 	bl	8000b88 <__aeabi_d2iz>
 800c774:	2200      	movs	r2, #0
 800c776:	4683      	mov	fp, r0
 800c778:	2300      	movs	r3, #0
 800c77a:	4630      	mov	r0, r6
 800c77c:	4639      	mov	r1, r7
 800c77e:	f7f4 f9c5 	bl	8000b0c <__aeabi_dcmplt>
 800c782:	b148      	cbz	r0, 800c798 <_dtoa_r+0x190>
 800c784:	4658      	mov	r0, fp
 800c786:	f7f3 fee5 	bl	8000554 <__aeabi_i2d>
 800c78a:	4632      	mov	r2, r6
 800c78c:	463b      	mov	r3, r7
 800c78e:	f7f4 f9b3 	bl	8000af8 <__aeabi_dcmpeq>
 800c792:	b908      	cbnz	r0, 800c798 <_dtoa_r+0x190>
 800c794:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c798:	f1bb 0f16 	cmp.w	fp, #22
 800c79c:	d857      	bhi.n	800c84e <_dtoa_r+0x246>
 800c79e:	4b5b      	ldr	r3, [pc, #364]	; (800c90c <_dtoa_r+0x304>)
 800c7a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a8:	ec51 0b18 	vmov	r0, r1, d8
 800c7ac:	f7f4 f9ae 	bl	8000b0c <__aeabi_dcmplt>
 800c7b0:	2800      	cmp	r0, #0
 800c7b2:	d04e      	beq.n	800c852 <_dtoa_r+0x24a>
 800c7b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	930c      	str	r3, [sp, #48]	; 0x30
 800c7bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c7be:	1b5b      	subs	r3, r3, r5
 800c7c0:	1e5a      	subs	r2, r3, #1
 800c7c2:	bf45      	ittet	mi
 800c7c4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c7c8:	9305      	strmi	r3, [sp, #20]
 800c7ca:	2300      	movpl	r3, #0
 800c7cc:	2300      	movmi	r3, #0
 800c7ce:	9206      	str	r2, [sp, #24]
 800c7d0:	bf54      	ite	pl
 800c7d2:	9305      	strpl	r3, [sp, #20]
 800c7d4:	9306      	strmi	r3, [sp, #24]
 800c7d6:	f1bb 0f00 	cmp.w	fp, #0
 800c7da:	db3c      	blt.n	800c856 <_dtoa_r+0x24e>
 800c7dc:	9b06      	ldr	r3, [sp, #24]
 800c7de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c7e2:	445b      	add	r3, fp
 800c7e4:	9306      	str	r3, [sp, #24]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	9308      	str	r3, [sp, #32]
 800c7ea:	9b07      	ldr	r3, [sp, #28]
 800c7ec:	2b09      	cmp	r3, #9
 800c7ee:	d868      	bhi.n	800c8c2 <_dtoa_r+0x2ba>
 800c7f0:	2b05      	cmp	r3, #5
 800c7f2:	bfc4      	itt	gt
 800c7f4:	3b04      	subgt	r3, #4
 800c7f6:	9307      	strgt	r3, [sp, #28]
 800c7f8:	9b07      	ldr	r3, [sp, #28]
 800c7fa:	f1a3 0302 	sub.w	r3, r3, #2
 800c7fe:	bfcc      	ite	gt
 800c800:	2500      	movgt	r5, #0
 800c802:	2501      	movle	r5, #1
 800c804:	2b03      	cmp	r3, #3
 800c806:	f200 8085 	bhi.w	800c914 <_dtoa_r+0x30c>
 800c80a:	e8df f003 	tbb	[pc, r3]
 800c80e:	3b2e      	.short	0x3b2e
 800c810:	5839      	.short	0x5839
 800c812:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c816:	441d      	add	r5, r3
 800c818:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c81c:	2b20      	cmp	r3, #32
 800c81e:	bfc1      	itttt	gt
 800c820:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c824:	fa08 f803 	lslgt.w	r8, r8, r3
 800c828:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c82c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c830:	bfd6      	itet	le
 800c832:	f1c3 0320 	rsble	r3, r3, #32
 800c836:	ea48 0003 	orrgt.w	r0, r8, r3
 800c83a:	fa06 f003 	lslle.w	r0, r6, r3
 800c83e:	f7f3 fe79 	bl	8000534 <__aeabi_ui2d>
 800c842:	2201      	movs	r2, #1
 800c844:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c848:	3d01      	subs	r5, #1
 800c84a:	920e      	str	r2, [sp, #56]	; 0x38
 800c84c:	e76f      	b.n	800c72e <_dtoa_r+0x126>
 800c84e:	2301      	movs	r3, #1
 800c850:	e7b3      	b.n	800c7ba <_dtoa_r+0x1b2>
 800c852:	900c      	str	r0, [sp, #48]	; 0x30
 800c854:	e7b2      	b.n	800c7bc <_dtoa_r+0x1b4>
 800c856:	9b05      	ldr	r3, [sp, #20]
 800c858:	eba3 030b 	sub.w	r3, r3, fp
 800c85c:	9305      	str	r3, [sp, #20]
 800c85e:	f1cb 0300 	rsb	r3, fp, #0
 800c862:	9308      	str	r3, [sp, #32]
 800c864:	2300      	movs	r3, #0
 800c866:	930b      	str	r3, [sp, #44]	; 0x2c
 800c868:	e7bf      	b.n	800c7ea <_dtoa_r+0x1e2>
 800c86a:	2300      	movs	r3, #0
 800c86c:	9309      	str	r3, [sp, #36]	; 0x24
 800c86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c870:	2b00      	cmp	r3, #0
 800c872:	dc52      	bgt.n	800c91a <_dtoa_r+0x312>
 800c874:	2301      	movs	r3, #1
 800c876:	9301      	str	r3, [sp, #4]
 800c878:	9304      	str	r3, [sp, #16]
 800c87a:	461a      	mov	r2, r3
 800c87c:	920a      	str	r2, [sp, #40]	; 0x28
 800c87e:	e00b      	b.n	800c898 <_dtoa_r+0x290>
 800c880:	2301      	movs	r3, #1
 800c882:	e7f3      	b.n	800c86c <_dtoa_r+0x264>
 800c884:	2300      	movs	r3, #0
 800c886:	9309      	str	r3, [sp, #36]	; 0x24
 800c888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c88a:	445b      	add	r3, fp
 800c88c:	9301      	str	r3, [sp, #4]
 800c88e:	3301      	adds	r3, #1
 800c890:	2b01      	cmp	r3, #1
 800c892:	9304      	str	r3, [sp, #16]
 800c894:	bfb8      	it	lt
 800c896:	2301      	movlt	r3, #1
 800c898:	69e0      	ldr	r0, [r4, #28]
 800c89a:	2100      	movs	r1, #0
 800c89c:	2204      	movs	r2, #4
 800c89e:	f102 0614 	add.w	r6, r2, #20
 800c8a2:	429e      	cmp	r6, r3
 800c8a4:	d93d      	bls.n	800c922 <_dtoa_r+0x31a>
 800c8a6:	6041      	str	r1, [r0, #4]
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	f001 fb0f 	bl	800decc <_Balloc>
 800c8ae:	9000      	str	r0, [sp, #0]
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d139      	bne.n	800c928 <_dtoa_r+0x320>
 800c8b4:	4b16      	ldr	r3, [pc, #88]	; (800c910 <_dtoa_r+0x308>)
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	f240 11af 	movw	r1, #431	; 0x1af
 800c8bc:	e6bd      	b.n	800c63a <_dtoa_r+0x32>
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e7e1      	b.n	800c886 <_dtoa_r+0x27e>
 800c8c2:	2501      	movs	r5, #1
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	9307      	str	r3, [sp, #28]
 800c8c8:	9509      	str	r5, [sp, #36]	; 0x24
 800c8ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8ce:	9301      	str	r3, [sp, #4]
 800c8d0:	9304      	str	r3, [sp, #16]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	2312      	movs	r3, #18
 800c8d6:	e7d1      	b.n	800c87c <_dtoa_r+0x274>
 800c8d8:	636f4361 	.word	0x636f4361
 800c8dc:	3fd287a7 	.word	0x3fd287a7
 800c8e0:	8b60c8b3 	.word	0x8b60c8b3
 800c8e4:	3fc68a28 	.word	0x3fc68a28
 800c8e8:	509f79fb 	.word	0x509f79fb
 800c8ec:	3fd34413 	.word	0x3fd34413
 800c8f0:	0800f49e 	.word	0x0800f49e
 800c8f4:	0800f4b5 	.word	0x0800f4b5
 800c8f8:	7ff00000 	.word	0x7ff00000
 800c8fc:	0800f49a 	.word	0x0800f49a
 800c900:	0800f491 	.word	0x0800f491
 800c904:	0800f309 	.word	0x0800f309
 800c908:	3ff80000 	.word	0x3ff80000
 800c90c:	0800f610 	.word	0x0800f610
 800c910:	0800f50d 	.word	0x0800f50d
 800c914:	2301      	movs	r3, #1
 800c916:	9309      	str	r3, [sp, #36]	; 0x24
 800c918:	e7d7      	b.n	800c8ca <_dtoa_r+0x2c2>
 800c91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	9304      	str	r3, [sp, #16]
 800c920:	e7ba      	b.n	800c898 <_dtoa_r+0x290>
 800c922:	3101      	adds	r1, #1
 800c924:	0052      	lsls	r2, r2, #1
 800c926:	e7ba      	b.n	800c89e <_dtoa_r+0x296>
 800c928:	69e3      	ldr	r3, [r4, #28]
 800c92a:	9a00      	ldr	r2, [sp, #0]
 800c92c:	601a      	str	r2, [r3, #0]
 800c92e:	9b04      	ldr	r3, [sp, #16]
 800c930:	2b0e      	cmp	r3, #14
 800c932:	f200 80a8 	bhi.w	800ca86 <_dtoa_r+0x47e>
 800c936:	2d00      	cmp	r5, #0
 800c938:	f000 80a5 	beq.w	800ca86 <_dtoa_r+0x47e>
 800c93c:	f1bb 0f00 	cmp.w	fp, #0
 800c940:	dd38      	ble.n	800c9b4 <_dtoa_r+0x3ac>
 800c942:	4bc0      	ldr	r3, [pc, #768]	; (800cc44 <_dtoa_r+0x63c>)
 800c944:	f00b 020f 	and.w	r2, fp, #15
 800c948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c94c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c950:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c954:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c958:	d019      	beq.n	800c98e <_dtoa_r+0x386>
 800c95a:	4bbb      	ldr	r3, [pc, #748]	; (800cc48 <_dtoa_r+0x640>)
 800c95c:	ec51 0b18 	vmov	r0, r1, d8
 800c960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c964:	f7f3 ff8a 	bl	800087c <__aeabi_ddiv>
 800c968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c96c:	f008 080f 	and.w	r8, r8, #15
 800c970:	2503      	movs	r5, #3
 800c972:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cc48 <_dtoa_r+0x640>
 800c976:	f1b8 0f00 	cmp.w	r8, #0
 800c97a:	d10a      	bne.n	800c992 <_dtoa_r+0x38a>
 800c97c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c980:	4632      	mov	r2, r6
 800c982:	463b      	mov	r3, r7
 800c984:	f7f3 ff7a 	bl	800087c <__aeabi_ddiv>
 800c988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c98c:	e02b      	b.n	800c9e6 <_dtoa_r+0x3de>
 800c98e:	2502      	movs	r5, #2
 800c990:	e7ef      	b.n	800c972 <_dtoa_r+0x36a>
 800c992:	f018 0f01 	tst.w	r8, #1
 800c996:	d008      	beq.n	800c9aa <_dtoa_r+0x3a2>
 800c998:	4630      	mov	r0, r6
 800c99a:	4639      	mov	r1, r7
 800c99c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c9a0:	f7f3 fe42 	bl	8000628 <__aeabi_dmul>
 800c9a4:	3501      	adds	r5, #1
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460f      	mov	r7, r1
 800c9aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c9ae:	f109 0908 	add.w	r9, r9, #8
 800c9b2:	e7e0      	b.n	800c976 <_dtoa_r+0x36e>
 800c9b4:	f000 809f 	beq.w	800caf6 <_dtoa_r+0x4ee>
 800c9b8:	f1cb 0600 	rsb	r6, fp, #0
 800c9bc:	4ba1      	ldr	r3, [pc, #644]	; (800cc44 <_dtoa_r+0x63c>)
 800c9be:	4fa2      	ldr	r7, [pc, #648]	; (800cc48 <_dtoa_r+0x640>)
 800c9c0:	f006 020f 	and.w	r2, r6, #15
 800c9c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9cc:	ec51 0b18 	vmov	r0, r1, d8
 800c9d0:	f7f3 fe2a 	bl	8000628 <__aeabi_dmul>
 800c9d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9d8:	1136      	asrs	r6, r6, #4
 800c9da:	2300      	movs	r3, #0
 800c9dc:	2502      	movs	r5, #2
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	d17e      	bne.n	800cae0 <_dtoa_r+0x4d8>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1d0      	bne.n	800c988 <_dtoa_r+0x380>
 800c9e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c9e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 8084 	beq.w	800cafa <_dtoa_r+0x4f2>
 800c9f2:	4b96      	ldr	r3, [pc, #600]	; (800cc4c <_dtoa_r+0x644>)
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	4649      	mov	r1, r9
 800c9fa:	f7f4 f887 	bl	8000b0c <__aeabi_dcmplt>
 800c9fe:	2800      	cmp	r0, #0
 800ca00:	d07b      	beq.n	800cafa <_dtoa_r+0x4f2>
 800ca02:	9b04      	ldr	r3, [sp, #16]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d078      	beq.n	800cafa <_dtoa_r+0x4f2>
 800ca08:	9b01      	ldr	r3, [sp, #4]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	dd39      	ble.n	800ca82 <_dtoa_r+0x47a>
 800ca0e:	4b90      	ldr	r3, [pc, #576]	; (800cc50 <_dtoa_r+0x648>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	4640      	mov	r0, r8
 800ca14:	4649      	mov	r1, r9
 800ca16:	f7f3 fe07 	bl	8000628 <__aeabi_dmul>
 800ca1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca1e:	9e01      	ldr	r6, [sp, #4]
 800ca20:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800ca24:	3501      	adds	r5, #1
 800ca26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	f7f3 fd92 	bl	8000554 <__aeabi_i2d>
 800ca30:	4642      	mov	r2, r8
 800ca32:	464b      	mov	r3, r9
 800ca34:	f7f3 fdf8 	bl	8000628 <__aeabi_dmul>
 800ca38:	4b86      	ldr	r3, [pc, #536]	; (800cc54 <_dtoa_r+0x64c>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f7f3 fc3e 	bl	80002bc <__adddf3>
 800ca40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ca44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca48:	9303      	str	r3, [sp, #12]
 800ca4a:	2e00      	cmp	r6, #0
 800ca4c:	d158      	bne.n	800cb00 <_dtoa_r+0x4f8>
 800ca4e:	4b82      	ldr	r3, [pc, #520]	; (800cc58 <_dtoa_r+0x650>)
 800ca50:	2200      	movs	r2, #0
 800ca52:	4640      	mov	r0, r8
 800ca54:	4649      	mov	r1, r9
 800ca56:	f7f3 fc2f 	bl	80002b8 <__aeabi_dsub>
 800ca5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ca5e:	4680      	mov	r8, r0
 800ca60:	4689      	mov	r9, r1
 800ca62:	f7f4 f871 	bl	8000b48 <__aeabi_dcmpgt>
 800ca66:	2800      	cmp	r0, #0
 800ca68:	f040 8296 	bne.w	800cf98 <_dtoa_r+0x990>
 800ca6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ca70:	4640      	mov	r0, r8
 800ca72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca76:	4649      	mov	r1, r9
 800ca78:	f7f4 f848 	bl	8000b0c <__aeabi_dcmplt>
 800ca7c:	2800      	cmp	r0, #0
 800ca7e:	f040 8289 	bne.w	800cf94 <_dtoa_r+0x98c>
 800ca82:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ca86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f2c0 814e 	blt.w	800cd2a <_dtoa_r+0x722>
 800ca8e:	f1bb 0f0e 	cmp.w	fp, #14
 800ca92:	f300 814a 	bgt.w	800cd2a <_dtoa_r+0x722>
 800ca96:	4b6b      	ldr	r3, [pc, #428]	; (800cc44 <_dtoa_r+0x63c>)
 800ca98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800caa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f280 80dc 	bge.w	800cc60 <_dtoa_r+0x658>
 800caa8:	9b04      	ldr	r3, [sp, #16]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	f300 80d8 	bgt.w	800cc60 <_dtoa_r+0x658>
 800cab0:	f040 826f 	bne.w	800cf92 <_dtoa_r+0x98a>
 800cab4:	4b68      	ldr	r3, [pc, #416]	; (800cc58 <_dtoa_r+0x650>)
 800cab6:	2200      	movs	r2, #0
 800cab8:	4640      	mov	r0, r8
 800caba:	4649      	mov	r1, r9
 800cabc:	f7f3 fdb4 	bl	8000628 <__aeabi_dmul>
 800cac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cac4:	f7f4 f836 	bl	8000b34 <__aeabi_dcmpge>
 800cac8:	9e04      	ldr	r6, [sp, #16]
 800caca:	4637      	mov	r7, r6
 800cacc:	2800      	cmp	r0, #0
 800cace:	f040 8245 	bne.w	800cf5c <_dtoa_r+0x954>
 800cad2:	9d00      	ldr	r5, [sp, #0]
 800cad4:	2331      	movs	r3, #49	; 0x31
 800cad6:	f805 3b01 	strb.w	r3, [r5], #1
 800cada:	f10b 0b01 	add.w	fp, fp, #1
 800cade:	e241      	b.n	800cf64 <_dtoa_r+0x95c>
 800cae0:	07f2      	lsls	r2, r6, #31
 800cae2:	d505      	bpl.n	800caf0 <_dtoa_r+0x4e8>
 800cae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cae8:	f7f3 fd9e 	bl	8000628 <__aeabi_dmul>
 800caec:	3501      	adds	r5, #1
 800caee:	2301      	movs	r3, #1
 800caf0:	1076      	asrs	r6, r6, #1
 800caf2:	3708      	adds	r7, #8
 800caf4:	e773      	b.n	800c9de <_dtoa_r+0x3d6>
 800caf6:	2502      	movs	r5, #2
 800caf8:	e775      	b.n	800c9e6 <_dtoa_r+0x3de>
 800cafa:	9e04      	ldr	r6, [sp, #16]
 800cafc:	465f      	mov	r7, fp
 800cafe:	e792      	b.n	800ca26 <_dtoa_r+0x41e>
 800cb00:	9900      	ldr	r1, [sp, #0]
 800cb02:	4b50      	ldr	r3, [pc, #320]	; (800cc44 <_dtoa_r+0x63c>)
 800cb04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb08:	4431      	add	r1, r6
 800cb0a:	9102      	str	r1, [sp, #8]
 800cb0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb0e:	eeb0 9a47 	vmov.f32	s18, s14
 800cb12:	eef0 9a67 	vmov.f32	s19, s15
 800cb16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb1e:	2900      	cmp	r1, #0
 800cb20:	d044      	beq.n	800cbac <_dtoa_r+0x5a4>
 800cb22:	494e      	ldr	r1, [pc, #312]	; (800cc5c <_dtoa_r+0x654>)
 800cb24:	2000      	movs	r0, #0
 800cb26:	f7f3 fea9 	bl	800087c <__aeabi_ddiv>
 800cb2a:	ec53 2b19 	vmov	r2, r3, d9
 800cb2e:	f7f3 fbc3 	bl	80002b8 <__aeabi_dsub>
 800cb32:	9d00      	ldr	r5, [sp, #0]
 800cb34:	ec41 0b19 	vmov	d9, r0, r1
 800cb38:	4649      	mov	r1, r9
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	f7f4 f824 	bl	8000b88 <__aeabi_d2iz>
 800cb40:	4606      	mov	r6, r0
 800cb42:	f7f3 fd07 	bl	8000554 <__aeabi_i2d>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	4640      	mov	r0, r8
 800cb4c:	4649      	mov	r1, r9
 800cb4e:	f7f3 fbb3 	bl	80002b8 <__aeabi_dsub>
 800cb52:	3630      	adds	r6, #48	; 0x30
 800cb54:	f805 6b01 	strb.w	r6, [r5], #1
 800cb58:	ec53 2b19 	vmov	r2, r3, d9
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	4689      	mov	r9, r1
 800cb60:	f7f3 ffd4 	bl	8000b0c <__aeabi_dcmplt>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	d164      	bne.n	800cc32 <_dtoa_r+0x62a>
 800cb68:	4642      	mov	r2, r8
 800cb6a:	464b      	mov	r3, r9
 800cb6c:	4937      	ldr	r1, [pc, #220]	; (800cc4c <_dtoa_r+0x644>)
 800cb6e:	2000      	movs	r0, #0
 800cb70:	f7f3 fba2 	bl	80002b8 <__aeabi_dsub>
 800cb74:	ec53 2b19 	vmov	r2, r3, d9
 800cb78:	f7f3 ffc8 	bl	8000b0c <__aeabi_dcmplt>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	f040 80b6 	bne.w	800ccee <_dtoa_r+0x6e6>
 800cb82:	9b02      	ldr	r3, [sp, #8]
 800cb84:	429d      	cmp	r5, r3
 800cb86:	f43f af7c 	beq.w	800ca82 <_dtoa_r+0x47a>
 800cb8a:	4b31      	ldr	r3, [pc, #196]	; (800cc50 <_dtoa_r+0x648>)
 800cb8c:	ec51 0b19 	vmov	r0, r1, d9
 800cb90:	2200      	movs	r2, #0
 800cb92:	f7f3 fd49 	bl	8000628 <__aeabi_dmul>
 800cb96:	4b2e      	ldr	r3, [pc, #184]	; (800cc50 <_dtoa_r+0x648>)
 800cb98:	ec41 0b19 	vmov	d9, r0, r1
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	4640      	mov	r0, r8
 800cba0:	4649      	mov	r1, r9
 800cba2:	f7f3 fd41 	bl	8000628 <__aeabi_dmul>
 800cba6:	4680      	mov	r8, r0
 800cba8:	4689      	mov	r9, r1
 800cbaa:	e7c5      	b.n	800cb38 <_dtoa_r+0x530>
 800cbac:	ec51 0b17 	vmov	r0, r1, d7
 800cbb0:	f7f3 fd3a 	bl	8000628 <__aeabi_dmul>
 800cbb4:	9b02      	ldr	r3, [sp, #8]
 800cbb6:	9d00      	ldr	r5, [sp, #0]
 800cbb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbba:	ec41 0b19 	vmov	d9, r0, r1
 800cbbe:	4649      	mov	r1, r9
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	f7f3 ffe1 	bl	8000b88 <__aeabi_d2iz>
 800cbc6:	4606      	mov	r6, r0
 800cbc8:	f7f3 fcc4 	bl	8000554 <__aeabi_i2d>
 800cbcc:	3630      	adds	r6, #48	; 0x30
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4640      	mov	r0, r8
 800cbd4:	4649      	mov	r1, r9
 800cbd6:	f7f3 fb6f 	bl	80002b8 <__aeabi_dsub>
 800cbda:	f805 6b01 	strb.w	r6, [r5], #1
 800cbde:	9b02      	ldr	r3, [sp, #8]
 800cbe0:	429d      	cmp	r5, r3
 800cbe2:	4680      	mov	r8, r0
 800cbe4:	4689      	mov	r9, r1
 800cbe6:	f04f 0200 	mov.w	r2, #0
 800cbea:	d124      	bne.n	800cc36 <_dtoa_r+0x62e>
 800cbec:	4b1b      	ldr	r3, [pc, #108]	; (800cc5c <_dtoa_r+0x654>)
 800cbee:	ec51 0b19 	vmov	r0, r1, d9
 800cbf2:	f7f3 fb63 	bl	80002bc <__adddf3>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	460b      	mov	r3, r1
 800cbfa:	4640      	mov	r0, r8
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	f7f3 ffa3 	bl	8000b48 <__aeabi_dcmpgt>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d173      	bne.n	800ccee <_dtoa_r+0x6e6>
 800cc06:	ec53 2b19 	vmov	r2, r3, d9
 800cc0a:	4914      	ldr	r1, [pc, #80]	; (800cc5c <_dtoa_r+0x654>)
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	f7f3 fb53 	bl	80002b8 <__aeabi_dsub>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4640      	mov	r0, r8
 800cc18:	4649      	mov	r1, r9
 800cc1a:	f7f3 ff77 	bl	8000b0c <__aeabi_dcmplt>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f43f af2f 	beq.w	800ca82 <_dtoa_r+0x47a>
 800cc24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc26:	1e6b      	subs	r3, r5, #1
 800cc28:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc2e:	2b30      	cmp	r3, #48	; 0x30
 800cc30:	d0f8      	beq.n	800cc24 <_dtoa_r+0x61c>
 800cc32:	46bb      	mov	fp, r7
 800cc34:	e04a      	b.n	800cccc <_dtoa_r+0x6c4>
 800cc36:	4b06      	ldr	r3, [pc, #24]	; (800cc50 <_dtoa_r+0x648>)
 800cc38:	f7f3 fcf6 	bl	8000628 <__aeabi_dmul>
 800cc3c:	4680      	mov	r8, r0
 800cc3e:	4689      	mov	r9, r1
 800cc40:	e7bd      	b.n	800cbbe <_dtoa_r+0x5b6>
 800cc42:	bf00      	nop
 800cc44:	0800f610 	.word	0x0800f610
 800cc48:	0800f5e8 	.word	0x0800f5e8
 800cc4c:	3ff00000 	.word	0x3ff00000
 800cc50:	40240000 	.word	0x40240000
 800cc54:	401c0000 	.word	0x401c0000
 800cc58:	40140000 	.word	0x40140000
 800cc5c:	3fe00000 	.word	0x3fe00000
 800cc60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cc64:	9d00      	ldr	r5, [sp, #0]
 800cc66:	4642      	mov	r2, r8
 800cc68:	464b      	mov	r3, r9
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	f7f3 fe05 	bl	800087c <__aeabi_ddiv>
 800cc72:	f7f3 ff89 	bl	8000b88 <__aeabi_d2iz>
 800cc76:	9001      	str	r0, [sp, #4]
 800cc78:	f7f3 fc6c 	bl	8000554 <__aeabi_i2d>
 800cc7c:	4642      	mov	r2, r8
 800cc7e:	464b      	mov	r3, r9
 800cc80:	f7f3 fcd2 	bl	8000628 <__aeabi_dmul>
 800cc84:	4602      	mov	r2, r0
 800cc86:	460b      	mov	r3, r1
 800cc88:	4630      	mov	r0, r6
 800cc8a:	4639      	mov	r1, r7
 800cc8c:	f7f3 fb14 	bl	80002b8 <__aeabi_dsub>
 800cc90:	9e01      	ldr	r6, [sp, #4]
 800cc92:	9f04      	ldr	r7, [sp, #16]
 800cc94:	3630      	adds	r6, #48	; 0x30
 800cc96:	f805 6b01 	strb.w	r6, [r5], #1
 800cc9a:	9e00      	ldr	r6, [sp, #0]
 800cc9c:	1bae      	subs	r6, r5, r6
 800cc9e:	42b7      	cmp	r7, r6
 800cca0:	4602      	mov	r2, r0
 800cca2:	460b      	mov	r3, r1
 800cca4:	d134      	bne.n	800cd10 <_dtoa_r+0x708>
 800cca6:	f7f3 fb09 	bl	80002bc <__adddf3>
 800ccaa:	4642      	mov	r2, r8
 800ccac:	464b      	mov	r3, r9
 800ccae:	4606      	mov	r6, r0
 800ccb0:	460f      	mov	r7, r1
 800ccb2:	f7f3 ff49 	bl	8000b48 <__aeabi_dcmpgt>
 800ccb6:	b9c8      	cbnz	r0, 800ccec <_dtoa_r+0x6e4>
 800ccb8:	4642      	mov	r2, r8
 800ccba:	464b      	mov	r3, r9
 800ccbc:	4630      	mov	r0, r6
 800ccbe:	4639      	mov	r1, r7
 800ccc0:	f7f3 ff1a 	bl	8000af8 <__aeabi_dcmpeq>
 800ccc4:	b110      	cbz	r0, 800cccc <_dtoa_r+0x6c4>
 800ccc6:	9b01      	ldr	r3, [sp, #4]
 800ccc8:	07db      	lsls	r3, r3, #31
 800ccca:	d40f      	bmi.n	800ccec <_dtoa_r+0x6e4>
 800cccc:	4651      	mov	r1, sl
 800ccce:	4620      	mov	r0, r4
 800ccd0:	f001 f93c 	bl	800df4c <_Bfree>
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ccd8:	702b      	strb	r3, [r5, #0]
 800ccda:	f10b 0301 	add.w	r3, fp, #1
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	f43f ace2 	beq.w	800c6ac <_dtoa_r+0xa4>
 800cce8:	601d      	str	r5, [r3, #0]
 800ccea:	e4df      	b.n	800c6ac <_dtoa_r+0xa4>
 800ccec:	465f      	mov	r7, fp
 800ccee:	462b      	mov	r3, r5
 800ccf0:	461d      	mov	r5, r3
 800ccf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccf6:	2a39      	cmp	r2, #57	; 0x39
 800ccf8:	d106      	bne.n	800cd08 <_dtoa_r+0x700>
 800ccfa:	9a00      	ldr	r2, [sp, #0]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d1f7      	bne.n	800ccf0 <_dtoa_r+0x6e8>
 800cd00:	9900      	ldr	r1, [sp, #0]
 800cd02:	2230      	movs	r2, #48	; 0x30
 800cd04:	3701      	adds	r7, #1
 800cd06:	700a      	strb	r2, [r1, #0]
 800cd08:	781a      	ldrb	r2, [r3, #0]
 800cd0a:	3201      	adds	r2, #1
 800cd0c:	701a      	strb	r2, [r3, #0]
 800cd0e:	e790      	b.n	800cc32 <_dtoa_r+0x62a>
 800cd10:	4ba3      	ldr	r3, [pc, #652]	; (800cfa0 <_dtoa_r+0x998>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	f7f3 fc88 	bl	8000628 <__aeabi_dmul>
 800cd18:	2200      	movs	r2, #0
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	4606      	mov	r6, r0
 800cd1e:	460f      	mov	r7, r1
 800cd20:	f7f3 feea 	bl	8000af8 <__aeabi_dcmpeq>
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d09e      	beq.n	800cc66 <_dtoa_r+0x65e>
 800cd28:	e7d0      	b.n	800cccc <_dtoa_r+0x6c4>
 800cd2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd2c:	2a00      	cmp	r2, #0
 800cd2e:	f000 80ca 	beq.w	800cec6 <_dtoa_r+0x8be>
 800cd32:	9a07      	ldr	r2, [sp, #28]
 800cd34:	2a01      	cmp	r2, #1
 800cd36:	f300 80ad 	bgt.w	800ce94 <_dtoa_r+0x88c>
 800cd3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd3c:	2a00      	cmp	r2, #0
 800cd3e:	f000 80a5 	beq.w	800ce8c <_dtoa_r+0x884>
 800cd42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd46:	9e08      	ldr	r6, [sp, #32]
 800cd48:	9d05      	ldr	r5, [sp, #20]
 800cd4a:	9a05      	ldr	r2, [sp, #20]
 800cd4c:	441a      	add	r2, r3
 800cd4e:	9205      	str	r2, [sp, #20]
 800cd50:	9a06      	ldr	r2, [sp, #24]
 800cd52:	2101      	movs	r1, #1
 800cd54:	441a      	add	r2, r3
 800cd56:	4620      	mov	r0, r4
 800cd58:	9206      	str	r2, [sp, #24]
 800cd5a:	f001 f9f7 	bl	800e14c <__i2b>
 800cd5e:	4607      	mov	r7, r0
 800cd60:	b165      	cbz	r5, 800cd7c <_dtoa_r+0x774>
 800cd62:	9b06      	ldr	r3, [sp, #24]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	dd09      	ble.n	800cd7c <_dtoa_r+0x774>
 800cd68:	42ab      	cmp	r3, r5
 800cd6a:	9a05      	ldr	r2, [sp, #20]
 800cd6c:	bfa8      	it	ge
 800cd6e:	462b      	movge	r3, r5
 800cd70:	1ad2      	subs	r2, r2, r3
 800cd72:	9205      	str	r2, [sp, #20]
 800cd74:	9a06      	ldr	r2, [sp, #24]
 800cd76:	1aed      	subs	r5, r5, r3
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	9306      	str	r3, [sp, #24]
 800cd7c:	9b08      	ldr	r3, [sp, #32]
 800cd7e:	b1f3      	cbz	r3, 800cdbe <_dtoa_r+0x7b6>
 800cd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f000 80a3 	beq.w	800cece <_dtoa_r+0x8c6>
 800cd88:	2e00      	cmp	r6, #0
 800cd8a:	dd10      	ble.n	800cdae <_dtoa_r+0x7a6>
 800cd8c:	4639      	mov	r1, r7
 800cd8e:	4632      	mov	r2, r6
 800cd90:	4620      	mov	r0, r4
 800cd92:	f001 fa9b 	bl	800e2cc <__pow5mult>
 800cd96:	4652      	mov	r2, sl
 800cd98:	4601      	mov	r1, r0
 800cd9a:	4607      	mov	r7, r0
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f001 f9eb 	bl	800e178 <__multiply>
 800cda2:	4651      	mov	r1, sl
 800cda4:	4680      	mov	r8, r0
 800cda6:	4620      	mov	r0, r4
 800cda8:	f001 f8d0 	bl	800df4c <_Bfree>
 800cdac:	46c2      	mov	sl, r8
 800cdae:	9b08      	ldr	r3, [sp, #32]
 800cdb0:	1b9a      	subs	r2, r3, r6
 800cdb2:	d004      	beq.n	800cdbe <_dtoa_r+0x7b6>
 800cdb4:	4651      	mov	r1, sl
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f001 fa88 	bl	800e2cc <__pow5mult>
 800cdbc:	4682      	mov	sl, r0
 800cdbe:	2101      	movs	r1, #1
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f001 f9c3 	bl	800e14c <__i2b>
 800cdc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	4606      	mov	r6, r0
 800cdcc:	f340 8081 	ble.w	800ced2 <_dtoa_r+0x8ca>
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f001 fa79 	bl	800e2cc <__pow5mult>
 800cdda:	9b07      	ldr	r3, [sp, #28]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	4606      	mov	r6, r0
 800cde0:	dd7a      	ble.n	800ced8 <_dtoa_r+0x8d0>
 800cde2:	f04f 0800 	mov.w	r8, #0
 800cde6:	6933      	ldr	r3, [r6, #16]
 800cde8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cdec:	6918      	ldr	r0, [r3, #16]
 800cdee:	f001 f95f 	bl	800e0b0 <__hi0bits>
 800cdf2:	f1c0 0020 	rsb	r0, r0, #32
 800cdf6:	9b06      	ldr	r3, [sp, #24]
 800cdf8:	4418      	add	r0, r3
 800cdfa:	f010 001f 	ands.w	r0, r0, #31
 800cdfe:	f000 8094 	beq.w	800cf2a <_dtoa_r+0x922>
 800ce02:	f1c0 0320 	rsb	r3, r0, #32
 800ce06:	2b04      	cmp	r3, #4
 800ce08:	f340 8085 	ble.w	800cf16 <_dtoa_r+0x90e>
 800ce0c:	9b05      	ldr	r3, [sp, #20]
 800ce0e:	f1c0 001c 	rsb	r0, r0, #28
 800ce12:	4403      	add	r3, r0
 800ce14:	9305      	str	r3, [sp, #20]
 800ce16:	9b06      	ldr	r3, [sp, #24]
 800ce18:	4403      	add	r3, r0
 800ce1a:	4405      	add	r5, r0
 800ce1c:	9306      	str	r3, [sp, #24]
 800ce1e:	9b05      	ldr	r3, [sp, #20]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	dd05      	ble.n	800ce30 <_dtoa_r+0x828>
 800ce24:	4651      	mov	r1, sl
 800ce26:	461a      	mov	r2, r3
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f001 faa9 	bl	800e380 <__lshift>
 800ce2e:	4682      	mov	sl, r0
 800ce30:	9b06      	ldr	r3, [sp, #24]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	dd05      	ble.n	800ce42 <_dtoa_r+0x83a>
 800ce36:	4631      	mov	r1, r6
 800ce38:	461a      	mov	r2, r3
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	f001 faa0 	bl	800e380 <__lshift>
 800ce40:	4606      	mov	r6, r0
 800ce42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d072      	beq.n	800cf2e <_dtoa_r+0x926>
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4650      	mov	r0, sl
 800ce4c:	f001 fb04 	bl	800e458 <__mcmp>
 800ce50:	2800      	cmp	r0, #0
 800ce52:	da6c      	bge.n	800cf2e <_dtoa_r+0x926>
 800ce54:	2300      	movs	r3, #0
 800ce56:	4651      	mov	r1, sl
 800ce58:	220a      	movs	r2, #10
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f001 f898 	bl	800df90 <__multadd>
 800ce60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce62:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ce66:	4682      	mov	sl, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f000 81b0 	beq.w	800d1ce <_dtoa_r+0xbc6>
 800ce6e:	2300      	movs	r3, #0
 800ce70:	4639      	mov	r1, r7
 800ce72:	220a      	movs	r2, #10
 800ce74:	4620      	mov	r0, r4
 800ce76:	f001 f88b 	bl	800df90 <__multadd>
 800ce7a:	9b01      	ldr	r3, [sp, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	4607      	mov	r7, r0
 800ce80:	f300 8096 	bgt.w	800cfb0 <_dtoa_r+0x9a8>
 800ce84:	9b07      	ldr	r3, [sp, #28]
 800ce86:	2b02      	cmp	r3, #2
 800ce88:	dc59      	bgt.n	800cf3e <_dtoa_r+0x936>
 800ce8a:	e091      	b.n	800cfb0 <_dtoa_r+0x9a8>
 800ce8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ce92:	e758      	b.n	800cd46 <_dtoa_r+0x73e>
 800ce94:	9b04      	ldr	r3, [sp, #16]
 800ce96:	1e5e      	subs	r6, r3, #1
 800ce98:	9b08      	ldr	r3, [sp, #32]
 800ce9a:	42b3      	cmp	r3, r6
 800ce9c:	bfbf      	itttt	lt
 800ce9e:	9b08      	ldrlt	r3, [sp, #32]
 800cea0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cea2:	9608      	strlt	r6, [sp, #32]
 800cea4:	1af3      	sublt	r3, r6, r3
 800cea6:	bfb4      	ite	lt
 800cea8:	18d2      	addlt	r2, r2, r3
 800ceaa:	1b9e      	subge	r6, r3, r6
 800ceac:	9b04      	ldr	r3, [sp, #16]
 800ceae:	bfbc      	itt	lt
 800ceb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ceb2:	2600      	movlt	r6, #0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	bfb7      	itett	lt
 800ceb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cebc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cec0:	1a9d      	sublt	r5, r3, r2
 800cec2:	2300      	movlt	r3, #0
 800cec4:	e741      	b.n	800cd4a <_dtoa_r+0x742>
 800cec6:	9e08      	ldr	r6, [sp, #32]
 800cec8:	9d05      	ldr	r5, [sp, #20]
 800ceca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cecc:	e748      	b.n	800cd60 <_dtoa_r+0x758>
 800cece:	9a08      	ldr	r2, [sp, #32]
 800ced0:	e770      	b.n	800cdb4 <_dtoa_r+0x7ac>
 800ced2:	9b07      	ldr	r3, [sp, #28]
 800ced4:	2b01      	cmp	r3, #1
 800ced6:	dc19      	bgt.n	800cf0c <_dtoa_r+0x904>
 800ced8:	9b02      	ldr	r3, [sp, #8]
 800ceda:	b9bb      	cbnz	r3, 800cf0c <_dtoa_r+0x904>
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cee2:	b99b      	cbnz	r3, 800cf0c <_dtoa_r+0x904>
 800cee4:	9b03      	ldr	r3, [sp, #12]
 800cee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ceea:	0d1b      	lsrs	r3, r3, #20
 800ceec:	051b      	lsls	r3, r3, #20
 800ceee:	b183      	cbz	r3, 800cf12 <_dtoa_r+0x90a>
 800cef0:	9b05      	ldr	r3, [sp, #20]
 800cef2:	3301      	adds	r3, #1
 800cef4:	9305      	str	r3, [sp, #20]
 800cef6:	9b06      	ldr	r3, [sp, #24]
 800cef8:	3301      	adds	r3, #1
 800cefa:	9306      	str	r3, [sp, #24]
 800cefc:	f04f 0801 	mov.w	r8, #1
 800cf00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f47f af6f 	bne.w	800cde6 <_dtoa_r+0x7de>
 800cf08:	2001      	movs	r0, #1
 800cf0a:	e774      	b.n	800cdf6 <_dtoa_r+0x7ee>
 800cf0c:	f04f 0800 	mov.w	r8, #0
 800cf10:	e7f6      	b.n	800cf00 <_dtoa_r+0x8f8>
 800cf12:	4698      	mov	r8, r3
 800cf14:	e7f4      	b.n	800cf00 <_dtoa_r+0x8f8>
 800cf16:	d082      	beq.n	800ce1e <_dtoa_r+0x816>
 800cf18:	9a05      	ldr	r2, [sp, #20]
 800cf1a:	331c      	adds	r3, #28
 800cf1c:	441a      	add	r2, r3
 800cf1e:	9205      	str	r2, [sp, #20]
 800cf20:	9a06      	ldr	r2, [sp, #24]
 800cf22:	441a      	add	r2, r3
 800cf24:	441d      	add	r5, r3
 800cf26:	9206      	str	r2, [sp, #24]
 800cf28:	e779      	b.n	800ce1e <_dtoa_r+0x816>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	e7f4      	b.n	800cf18 <_dtoa_r+0x910>
 800cf2e:	9b04      	ldr	r3, [sp, #16]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	dc37      	bgt.n	800cfa4 <_dtoa_r+0x99c>
 800cf34:	9b07      	ldr	r3, [sp, #28]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	dd34      	ble.n	800cfa4 <_dtoa_r+0x99c>
 800cf3a:	9b04      	ldr	r3, [sp, #16]
 800cf3c:	9301      	str	r3, [sp, #4]
 800cf3e:	9b01      	ldr	r3, [sp, #4]
 800cf40:	b963      	cbnz	r3, 800cf5c <_dtoa_r+0x954>
 800cf42:	4631      	mov	r1, r6
 800cf44:	2205      	movs	r2, #5
 800cf46:	4620      	mov	r0, r4
 800cf48:	f001 f822 	bl	800df90 <__multadd>
 800cf4c:	4601      	mov	r1, r0
 800cf4e:	4606      	mov	r6, r0
 800cf50:	4650      	mov	r0, sl
 800cf52:	f001 fa81 	bl	800e458 <__mcmp>
 800cf56:	2800      	cmp	r0, #0
 800cf58:	f73f adbb 	bgt.w	800cad2 <_dtoa_r+0x4ca>
 800cf5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf5e:	9d00      	ldr	r5, [sp, #0]
 800cf60:	ea6f 0b03 	mvn.w	fp, r3
 800cf64:	f04f 0800 	mov.w	r8, #0
 800cf68:	4631      	mov	r1, r6
 800cf6a:	4620      	mov	r0, r4
 800cf6c:	f000 ffee 	bl	800df4c <_Bfree>
 800cf70:	2f00      	cmp	r7, #0
 800cf72:	f43f aeab 	beq.w	800cccc <_dtoa_r+0x6c4>
 800cf76:	f1b8 0f00 	cmp.w	r8, #0
 800cf7a:	d005      	beq.n	800cf88 <_dtoa_r+0x980>
 800cf7c:	45b8      	cmp	r8, r7
 800cf7e:	d003      	beq.n	800cf88 <_dtoa_r+0x980>
 800cf80:	4641      	mov	r1, r8
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 ffe2 	bl	800df4c <_Bfree>
 800cf88:	4639      	mov	r1, r7
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	f000 ffde 	bl	800df4c <_Bfree>
 800cf90:	e69c      	b.n	800cccc <_dtoa_r+0x6c4>
 800cf92:	2600      	movs	r6, #0
 800cf94:	4637      	mov	r7, r6
 800cf96:	e7e1      	b.n	800cf5c <_dtoa_r+0x954>
 800cf98:	46bb      	mov	fp, r7
 800cf9a:	4637      	mov	r7, r6
 800cf9c:	e599      	b.n	800cad2 <_dtoa_r+0x4ca>
 800cf9e:	bf00      	nop
 800cfa0:	40240000 	.word	0x40240000
 800cfa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f000 80c8 	beq.w	800d13c <_dtoa_r+0xb34>
 800cfac:	9b04      	ldr	r3, [sp, #16]
 800cfae:	9301      	str	r3, [sp, #4]
 800cfb0:	2d00      	cmp	r5, #0
 800cfb2:	dd05      	ble.n	800cfc0 <_dtoa_r+0x9b8>
 800cfb4:	4639      	mov	r1, r7
 800cfb6:	462a      	mov	r2, r5
 800cfb8:	4620      	mov	r0, r4
 800cfba:	f001 f9e1 	bl	800e380 <__lshift>
 800cfbe:	4607      	mov	r7, r0
 800cfc0:	f1b8 0f00 	cmp.w	r8, #0
 800cfc4:	d05b      	beq.n	800d07e <_dtoa_r+0xa76>
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f000 ff7f 	bl	800decc <_Balloc>
 800cfce:	4605      	mov	r5, r0
 800cfd0:	b928      	cbnz	r0, 800cfde <_dtoa_r+0x9d6>
 800cfd2:	4b83      	ldr	r3, [pc, #524]	; (800d1e0 <_dtoa_r+0xbd8>)
 800cfd4:	4602      	mov	r2, r0
 800cfd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800cfda:	f7ff bb2e 	b.w	800c63a <_dtoa_r+0x32>
 800cfde:	693a      	ldr	r2, [r7, #16]
 800cfe0:	3202      	adds	r2, #2
 800cfe2:	0092      	lsls	r2, r2, #2
 800cfe4:	f107 010c 	add.w	r1, r7, #12
 800cfe8:	300c      	adds	r0, #12
 800cfea:	f7ff fa66 	bl	800c4ba <memcpy>
 800cfee:	2201      	movs	r2, #1
 800cff0:	4629      	mov	r1, r5
 800cff2:	4620      	mov	r0, r4
 800cff4:	f001 f9c4 	bl	800e380 <__lshift>
 800cff8:	9b00      	ldr	r3, [sp, #0]
 800cffa:	3301      	adds	r3, #1
 800cffc:	9304      	str	r3, [sp, #16]
 800cffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d002:	4413      	add	r3, r2
 800d004:	9308      	str	r3, [sp, #32]
 800d006:	9b02      	ldr	r3, [sp, #8]
 800d008:	f003 0301 	and.w	r3, r3, #1
 800d00c:	46b8      	mov	r8, r7
 800d00e:	9306      	str	r3, [sp, #24]
 800d010:	4607      	mov	r7, r0
 800d012:	9b04      	ldr	r3, [sp, #16]
 800d014:	4631      	mov	r1, r6
 800d016:	3b01      	subs	r3, #1
 800d018:	4650      	mov	r0, sl
 800d01a:	9301      	str	r3, [sp, #4]
 800d01c:	f7ff fa6a 	bl	800c4f4 <quorem>
 800d020:	4641      	mov	r1, r8
 800d022:	9002      	str	r0, [sp, #8]
 800d024:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d028:	4650      	mov	r0, sl
 800d02a:	f001 fa15 	bl	800e458 <__mcmp>
 800d02e:	463a      	mov	r2, r7
 800d030:	9005      	str	r0, [sp, #20]
 800d032:	4631      	mov	r1, r6
 800d034:	4620      	mov	r0, r4
 800d036:	f001 fa2b 	bl	800e490 <__mdiff>
 800d03a:	68c2      	ldr	r2, [r0, #12]
 800d03c:	4605      	mov	r5, r0
 800d03e:	bb02      	cbnz	r2, 800d082 <_dtoa_r+0xa7a>
 800d040:	4601      	mov	r1, r0
 800d042:	4650      	mov	r0, sl
 800d044:	f001 fa08 	bl	800e458 <__mcmp>
 800d048:	4602      	mov	r2, r0
 800d04a:	4629      	mov	r1, r5
 800d04c:	4620      	mov	r0, r4
 800d04e:	9209      	str	r2, [sp, #36]	; 0x24
 800d050:	f000 ff7c 	bl	800df4c <_Bfree>
 800d054:	9b07      	ldr	r3, [sp, #28]
 800d056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d058:	9d04      	ldr	r5, [sp, #16]
 800d05a:	ea43 0102 	orr.w	r1, r3, r2
 800d05e:	9b06      	ldr	r3, [sp, #24]
 800d060:	4319      	orrs	r1, r3
 800d062:	d110      	bne.n	800d086 <_dtoa_r+0xa7e>
 800d064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d068:	d029      	beq.n	800d0be <_dtoa_r+0xab6>
 800d06a:	9b05      	ldr	r3, [sp, #20]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	dd02      	ble.n	800d076 <_dtoa_r+0xa6e>
 800d070:	9b02      	ldr	r3, [sp, #8]
 800d072:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d076:	9b01      	ldr	r3, [sp, #4]
 800d078:	f883 9000 	strb.w	r9, [r3]
 800d07c:	e774      	b.n	800cf68 <_dtoa_r+0x960>
 800d07e:	4638      	mov	r0, r7
 800d080:	e7ba      	b.n	800cff8 <_dtoa_r+0x9f0>
 800d082:	2201      	movs	r2, #1
 800d084:	e7e1      	b.n	800d04a <_dtoa_r+0xa42>
 800d086:	9b05      	ldr	r3, [sp, #20]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	db04      	blt.n	800d096 <_dtoa_r+0xa8e>
 800d08c:	9907      	ldr	r1, [sp, #28]
 800d08e:	430b      	orrs	r3, r1
 800d090:	9906      	ldr	r1, [sp, #24]
 800d092:	430b      	orrs	r3, r1
 800d094:	d120      	bne.n	800d0d8 <_dtoa_r+0xad0>
 800d096:	2a00      	cmp	r2, #0
 800d098:	dded      	ble.n	800d076 <_dtoa_r+0xa6e>
 800d09a:	4651      	mov	r1, sl
 800d09c:	2201      	movs	r2, #1
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f001 f96e 	bl	800e380 <__lshift>
 800d0a4:	4631      	mov	r1, r6
 800d0a6:	4682      	mov	sl, r0
 800d0a8:	f001 f9d6 	bl	800e458 <__mcmp>
 800d0ac:	2800      	cmp	r0, #0
 800d0ae:	dc03      	bgt.n	800d0b8 <_dtoa_r+0xab0>
 800d0b0:	d1e1      	bne.n	800d076 <_dtoa_r+0xa6e>
 800d0b2:	f019 0f01 	tst.w	r9, #1
 800d0b6:	d0de      	beq.n	800d076 <_dtoa_r+0xa6e>
 800d0b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0bc:	d1d8      	bne.n	800d070 <_dtoa_r+0xa68>
 800d0be:	9a01      	ldr	r2, [sp, #4]
 800d0c0:	2339      	movs	r3, #57	; 0x39
 800d0c2:	7013      	strb	r3, [r2, #0]
 800d0c4:	462b      	mov	r3, r5
 800d0c6:	461d      	mov	r5, r3
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d0ce:	2a39      	cmp	r2, #57	; 0x39
 800d0d0:	d06c      	beq.n	800d1ac <_dtoa_r+0xba4>
 800d0d2:	3201      	adds	r2, #1
 800d0d4:	701a      	strb	r2, [r3, #0]
 800d0d6:	e747      	b.n	800cf68 <_dtoa_r+0x960>
 800d0d8:	2a00      	cmp	r2, #0
 800d0da:	dd07      	ble.n	800d0ec <_dtoa_r+0xae4>
 800d0dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d0e0:	d0ed      	beq.n	800d0be <_dtoa_r+0xab6>
 800d0e2:	9a01      	ldr	r2, [sp, #4]
 800d0e4:	f109 0301 	add.w	r3, r9, #1
 800d0e8:	7013      	strb	r3, [r2, #0]
 800d0ea:	e73d      	b.n	800cf68 <_dtoa_r+0x960>
 800d0ec:	9b04      	ldr	r3, [sp, #16]
 800d0ee:	9a08      	ldr	r2, [sp, #32]
 800d0f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d043      	beq.n	800d180 <_dtoa_r+0xb78>
 800d0f8:	4651      	mov	r1, sl
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	220a      	movs	r2, #10
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 ff46 	bl	800df90 <__multadd>
 800d104:	45b8      	cmp	r8, r7
 800d106:	4682      	mov	sl, r0
 800d108:	f04f 0300 	mov.w	r3, #0
 800d10c:	f04f 020a 	mov.w	r2, #10
 800d110:	4641      	mov	r1, r8
 800d112:	4620      	mov	r0, r4
 800d114:	d107      	bne.n	800d126 <_dtoa_r+0xb1e>
 800d116:	f000 ff3b 	bl	800df90 <__multadd>
 800d11a:	4680      	mov	r8, r0
 800d11c:	4607      	mov	r7, r0
 800d11e:	9b04      	ldr	r3, [sp, #16]
 800d120:	3301      	adds	r3, #1
 800d122:	9304      	str	r3, [sp, #16]
 800d124:	e775      	b.n	800d012 <_dtoa_r+0xa0a>
 800d126:	f000 ff33 	bl	800df90 <__multadd>
 800d12a:	4639      	mov	r1, r7
 800d12c:	4680      	mov	r8, r0
 800d12e:	2300      	movs	r3, #0
 800d130:	220a      	movs	r2, #10
 800d132:	4620      	mov	r0, r4
 800d134:	f000 ff2c 	bl	800df90 <__multadd>
 800d138:	4607      	mov	r7, r0
 800d13a:	e7f0      	b.n	800d11e <_dtoa_r+0xb16>
 800d13c:	9b04      	ldr	r3, [sp, #16]
 800d13e:	9301      	str	r3, [sp, #4]
 800d140:	9d00      	ldr	r5, [sp, #0]
 800d142:	4631      	mov	r1, r6
 800d144:	4650      	mov	r0, sl
 800d146:	f7ff f9d5 	bl	800c4f4 <quorem>
 800d14a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d14e:	9b00      	ldr	r3, [sp, #0]
 800d150:	f805 9b01 	strb.w	r9, [r5], #1
 800d154:	1aea      	subs	r2, r5, r3
 800d156:	9b01      	ldr	r3, [sp, #4]
 800d158:	4293      	cmp	r3, r2
 800d15a:	dd07      	ble.n	800d16c <_dtoa_r+0xb64>
 800d15c:	4651      	mov	r1, sl
 800d15e:	2300      	movs	r3, #0
 800d160:	220a      	movs	r2, #10
 800d162:	4620      	mov	r0, r4
 800d164:	f000 ff14 	bl	800df90 <__multadd>
 800d168:	4682      	mov	sl, r0
 800d16a:	e7ea      	b.n	800d142 <_dtoa_r+0xb3a>
 800d16c:	9b01      	ldr	r3, [sp, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	bfc8      	it	gt
 800d172:	461d      	movgt	r5, r3
 800d174:	9b00      	ldr	r3, [sp, #0]
 800d176:	bfd8      	it	le
 800d178:	2501      	movle	r5, #1
 800d17a:	441d      	add	r5, r3
 800d17c:	f04f 0800 	mov.w	r8, #0
 800d180:	4651      	mov	r1, sl
 800d182:	2201      	movs	r2, #1
 800d184:	4620      	mov	r0, r4
 800d186:	f001 f8fb 	bl	800e380 <__lshift>
 800d18a:	4631      	mov	r1, r6
 800d18c:	4682      	mov	sl, r0
 800d18e:	f001 f963 	bl	800e458 <__mcmp>
 800d192:	2800      	cmp	r0, #0
 800d194:	dc96      	bgt.n	800d0c4 <_dtoa_r+0xabc>
 800d196:	d102      	bne.n	800d19e <_dtoa_r+0xb96>
 800d198:	f019 0f01 	tst.w	r9, #1
 800d19c:	d192      	bne.n	800d0c4 <_dtoa_r+0xabc>
 800d19e:	462b      	mov	r3, r5
 800d1a0:	461d      	mov	r5, r3
 800d1a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1a6:	2a30      	cmp	r2, #48	; 0x30
 800d1a8:	d0fa      	beq.n	800d1a0 <_dtoa_r+0xb98>
 800d1aa:	e6dd      	b.n	800cf68 <_dtoa_r+0x960>
 800d1ac:	9a00      	ldr	r2, [sp, #0]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d189      	bne.n	800d0c6 <_dtoa_r+0xabe>
 800d1b2:	f10b 0b01 	add.w	fp, fp, #1
 800d1b6:	2331      	movs	r3, #49	; 0x31
 800d1b8:	e796      	b.n	800d0e8 <_dtoa_r+0xae0>
 800d1ba:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <_dtoa_r+0xbdc>)
 800d1bc:	f7ff ba99 	b.w	800c6f2 <_dtoa_r+0xea>
 800d1c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f47f aa6d 	bne.w	800c6a2 <_dtoa_r+0x9a>
 800d1c8:	4b07      	ldr	r3, [pc, #28]	; (800d1e8 <_dtoa_r+0xbe0>)
 800d1ca:	f7ff ba92 	b.w	800c6f2 <_dtoa_r+0xea>
 800d1ce:	9b01      	ldr	r3, [sp, #4]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	dcb5      	bgt.n	800d140 <_dtoa_r+0xb38>
 800d1d4:	9b07      	ldr	r3, [sp, #28]
 800d1d6:	2b02      	cmp	r3, #2
 800d1d8:	f73f aeb1 	bgt.w	800cf3e <_dtoa_r+0x936>
 800d1dc:	e7b0      	b.n	800d140 <_dtoa_r+0xb38>
 800d1de:	bf00      	nop
 800d1e0:	0800f50d 	.word	0x0800f50d
 800d1e4:	0800f308 	.word	0x0800f308
 800d1e8:	0800f491 	.word	0x0800f491

0800d1ec <_free_r>:
 800d1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1ee:	2900      	cmp	r1, #0
 800d1f0:	d044      	beq.n	800d27c <_free_r+0x90>
 800d1f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1f6:	9001      	str	r0, [sp, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f1a1 0404 	sub.w	r4, r1, #4
 800d1fe:	bfb8      	it	lt
 800d200:	18e4      	addlt	r4, r4, r3
 800d202:	f000 fe57 	bl	800deb4 <__malloc_lock>
 800d206:	4a1e      	ldr	r2, [pc, #120]	; (800d280 <_free_r+0x94>)
 800d208:	9801      	ldr	r0, [sp, #4]
 800d20a:	6813      	ldr	r3, [r2, #0]
 800d20c:	b933      	cbnz	r3, 800d21c <_free_r+0x30>
 800d20e:	6063      	str	r3, [r4, #4]
 800d210:	6014      	str	r4, [r2, #0]
 800d212:	b003      	add	sp, #12
 800d214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d218:	f000 be52 	b.w	800dec0 <__malloc_unlock>
 800d21c:	42a3      	cmp	r3, r4
 800d21e:	d908      	bls.n	800d232 <_free_r+0x46>
 800d220:	6825      	ldr	r5, [r4, #0]
 800d222:	1961      	adds	r1, r4, r5
 800d224:	428b      	cmp	r3, r1
 800d226:	bf01      	itttt	eq
 800d228:	6819      	ldreq	r1, [r3, #0]
 800d22a:	685b      	ldreq	r3, [r3, #4]
 800d22c:	1949      	addeq	r1, r1, r5
 800d22e:	6021      	streq	r1, [r4, #0]
 800d230:	e7ed      	b.n	800d20e <_free_r+0x22>
 800d232:	461a      	mov	r2, r3
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	b10b      	cbz	r3, 800d23c <_free_r+0x50>
 800d238:	42a3      	cmp	r3, r4
 800d23a:	d9fa      	bls.n	800d232 <_free_r+0x46>
 800d23c:	6811      	ldr	r1, [r2, #0]
 800d23e:	1855      	adds	r5, r2, r1
 800d240:	42a5      	cmp	r5, r4
 800d242:	d10b      	bne.n	800d25c <_free_r+0x70>
 800d244:	6824      	ldr	r4, [r4, #0]
 800d246:	4421      	add	r1, r4
 800d248:	1854      	adds	r4, r2, r1
 800d24a:	42a3      	cmp	r3, r4
 800d24c:	6011      	str	r1, [r2, #0]
 800d24e:	d1e0      	bne.n	800d212 <_free_r+0x26>
 800d250:	681c      	ldr	r4, [r3, #0]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	6053      	str	r3, [r2, #4]
 800d256:	440c      	add	r4, r1
 800d258:	6014      	str	r4, [r2, #0]
 800d25a:	e7da      	b.n	800d212 <_free_r+0x26>
 800d25c:	d902      	bls.n	800d264 <_free_r+0x78>
 800d25e:	230c      	movs	r3, #12
 800d260:	6003      	str	r3, [r0, #0]
 800d262:	e7d6      	b.n	800d212 <_free_r+0x26>
 800d264:	6825      	ldr	r5, [r4, #0]
 800d266:	1961      	adds	r1, r4, r5
 800d268:	428b      	cmp	r3, r1
 800d26a:	bf04      	itt	eq
 800d26c:	6819      	ldreq	r1, [r3, #0]
 800d26e:	685b      	ldreq	r3, [r3, #4]
 800d270:	6063      	str	r3, [r4, #4]
 800d272:	bf04      	itt	eq
 800d274:	1949      	addeq	r1, r1, r5
 800d276:	6021      	streq	r1, [r4, #0]
 800d278:	6054      	str	r4, [r2, #4]
 800d27a:	e7ca      	b.n	800d212 <_free_r+0x26>
 800d27c:	b003      	add	sp, #12
 800d27e:	bd30      	pop	{r4, r5, pc}
 800d280:	200016f4 	.word	0x200016f4

0800d284 <rshift>:
 800d284:	6903      	ldr	r3, [r0, #16]
 800d286:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d28a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d28e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d292:	f100 0414 	add.w	r4, r0, #20
 800d296:	dd45      	ble.n	800d324 <rshift+0xa0>
 800d298:	f011 011f 	ands.w	r1, r1, #31
 800d29c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d2a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d2a4:	d10c      	bne.n	800d2c0 <rshift+0x3c>
 800d2a6:	f100 0710 	add.w	r7, r0, #16
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	42b1      	cmp	r1, r6
 800d2ae:	d334      	bcc.n	800d31a <rshift+0x96>
 800d2b0:	1a9b      	subs	r3, r3, r2
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	1eea      	subs	r2, r5, #3
 800d2b6:	4296      	cmp	r6, r2
 800d2b8:	bf38      	it	cc
 800d2ba:	2300      	movcc	r3, #0
 800d2bc:	4423      	add	r3, r4
 800d2be:	e015      	b.n	800d2ec <rshift+0x68>
 800d2c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d2c4:	f1c1 0820 	rsb	r8, r1, #32
 800d2c8:	40cf      	lsrs	r7, r1
 800d2ca:	f105 0e04 	add.w	lr, r5, #4
 800d2ce:	46a1      	mov	r9, r4
 800d2d0:	4576      	cmp	r6, lr
 800d2d2:	46f4      	mov	ip, lr
 800d2d4:	d815      	bhi.n	800d302 <rshift+0x7e>
 800d2d6:	1a9a      	subs	r2, r3, r2
 800d2d8:	0092      	lsls	r2, r2, #2
 800d2da:	3a04      	subs	r2, #4
 800d2dc:	3501      	adds	r5, #1
 800d2de:	42ae      	cmp	r6, r5
 800d2e0:	bf38      	it	cc
 800d2e2:	2200      	movcc	r2, #0
 800d2e4:	18a3      	adds	r3, r4, r2
 800d2e6:	50a7      	str	r7, [r4, r2]
 800d2e8:	b107      	cbz	r7, 800d2ec <rshift+0x68>
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	1b1a      	subs	r2, r3, r4
 800d2ee:	42a3      	cmp	r3, r4
 800d2f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d2f4:	bf08      	it	eq
 800d2f6:	2300      	moveq	r3, #0
 800d2f8:	6102      	str	r2, [r0, #16]
 800d2fa:	bf08      	it	eq
 800d2fc:	6143      	streq	r3, [r0, #20]
 800d2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d302:	f8dc c000 	ldr.w	ip, [ip]
 800d306:	fa0c fc08 	lsl.w	ip, ip, r8
 800d30a:	ea4c 0707 	orr.w	r7, ip, r7
 800d30e:	f849 7b04 	str.w	r7, [r9], #4
 800d312:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d316:	40cf      	lsrs	r7, r1
 800d318:	e7da      	b.n	800d2d0 <rshift+0x4c>
 800d31a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d31e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d322:	e7c3      	b.n	800d2ac <rshift+0x28>
 800d324:	4623      	mov	r3, r4
 800d326:	e7e1      	b.n	800d2ec <rshift+0x68>

0800d328 <__hexdig_fun>:
 800d328:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d32c:	2b09      	cmp	r3, #9
 800d32e:	d802      	bhi.n	800d336 <__hexdig_fun+0xe>
 800d330:	3820      	subs	r0, #32
 800d332:	b2c0      	uxtb	r0, r0
 800d334:	4770      	bx	lr
 800d336:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d33a:	2b05      	cmp	r3, #5
 800d33c:	d801      	bhi.n	800d342 <__hexdig_fun+0x1a>
 800d33e:	3847      	subs	r0, #71	; 0x47
 800d340:	e7f7      	b.n	800d332 <__hexdig_fun+0xa>
 800d342:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d346:	2b05      	cmp	r3, #5
 800d348:	d801      	bhi.n	800d34e <__hexdig_fun+0x26>
 800d34a:	3827      	subs	r0, #39	; 0x27
 800d34c:	e7f1      	b.n	800d332 <__hexdig_fun+0xa>
 800d34e:	2000      	movs	r0, #0
 800d350:	4770      	bx	lr
	...

0800d354 <__gethex>:
 800d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d358:	4617      	mov	r7, r2
 800d35a:	680a      	ldr	r2, [r1, #0]
 800d35c:	b085      	sub	sp, #20
 800d35e:	f102 0b02 	add.w	fp, r2, #2
 800d362:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d366:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d36a:	4681      	mov	r9, r0
 800d36c:	468a      	mov	sl, r1
 800d36e:	9302      	str	r3, [sp, #8]
 800d370:	32fe      	adds	r2, #254	; 0xfe
 800d372:	eb02 030b 	add.w	r3, r2, fp
 800d376:	46d8      	mov	r8, fp
 800d378:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	2830      	cmp	r0, #48	; 0x30
 800d380:	d0f7      	beq.n	800d372 <__gethex+0x1e>
 800d382:	f7ff ffd1 	bl	800d328 <__hexdig_fun>
 800d386:	4604      	mov	r4, r0
 800d388:	2800      	cmp	r0, #0
 800d38a:	d138      	bne.n	800d3fe <__gethex+0xaa>
 800d38c:	49a7      	ldr	r1, [pc, #668]	; (800d62c <__gethex+0x2d8>)
 800d38e:	2201      	movs	r2, #1
 800d390:	4640      	mov	r0, r8
 800d392:	f7fe fff0 	bl	800c376 <strncmp>
 800d396:	4606      	mov	r6, r0
 800d398:	2800      	cmp	r0, #0
 800d39a:	d169      	bne.n	800d470 <__gethex+0x11c>
 800d39c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d3a0:	465d      	mov	r5, fp
 800d3a2:	f7ff ffc1 	bl	800d328 <__hexdig_fun>
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d064      	beq.n	800d474 <__gethex+0x120>
 800d3aa:	465a      	mov	r2, fp
 800d3ac:	7810      	ldrb	r0, [r2, #0]
 800d3ae:	2830      	cmp	r0, #48	; 0x30
 800d3b0:	4690      	mov	r8, r2
 800d3b2:	f102 0201 	add.w	r2, r2, #1
 800d3b6:	d0f9      	beq.n	800d3ac <__gethex+0x58>
 800d3b8:	f7ff ffb6 	bl	800d328 <__hexdig_fun>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	fab0 f480 	clz	r4, r0
 800d3c2:	0964      	lsrs	r4, r4, #5
 800d3c4:	465e      	mov	r6, fp
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	4642      	mov	r2, r8
 800d3ca:	4615      	mov	r5, r2
 800d3cc:	3201      	adds	r2, #1
 800d3ce:	7828      	ldrb	r0, [r5, #0]
 800d3d0:	f7ff ffaa 	bl	800d328 <__hexdig_fun>
 800d3d4:	2800      	cmp	r0, #0
 800d3d6:	d1f8      	bne.n	800d3ca <__gethex+0x76>
 800d3d8:	4994      	ldr	r1, [pc, #592]	; (800d62c <__gethex+0x2d8>)
 800d3da:	2201      	movs	r2, #1
 800d3dc:	4628      	mov	r0, r5
 800d3de:	f7fe ffca 	bl	800c376 <strncmp>
 800d3e2:	b978      	cbnz	r0, 800d404 <__gethex+0xb0>
 800d3e4:	b946      	cbnz	r6, 800d3f8 <__gethex+0xa4>
 800d3e6:	1c6e      	adds	r6, r5, #1
 800d3e8:	4632      	mov	r2, r6
 800d3ea:	4615      	mov	r5, r2
 800d3ec:	3201      	adds	r2, #1
 800d3ee:	7828      	ldrb	r0, [r5, #0]
 800d3f0:	f7ff ff9a 	bl	800d328 <__hexdig_fun>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d1f8      	bne.n	800d3ea <__gethex+0x96>
 800d3f8:	1b73      	subs	r3, r6, r5
 800d3fa:	009e      	lsls	r6, r3, #2
 800d3fc:	e004      	b.n	800d408 <__gethex+0xb4>
 800d3fe:	2400      	movs	r4, #0
 800d400:	4626      	mov	r6, r4
 800d402:	e7e1      	b.n	800d3c8 <__gethex+0x74>
 800d404:	2e00      	cmp	r6, #0
 800d406:	d1f7      	bne.n	800d3f8 <__gethex+0xa4>
 800d408:	782b      	ldrb	r3, [r5, #0]
 800d40a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d40e:	2b50      	cmp	r3, #80	; 0x50
 800d410:	d13d      	bne.n	800d48e <__gethex+0x13a>
 800d412:	786b      	ldrb	r3, [r5, #1]
 800d414:	2b2b      	cmp	r3, #43	; 0x2b
 800d416:	d02f      	beq.n	800d478 <__gethex+0x124>
 800d418:	2b2d      	cmp	r3, #45	; 0x2d
 800d41a:	d031      	beq.n	800d480 <__gethex+0x12c>
 800d41c:	1c69      	adds	r1, r5, #1
 800d41e:	f04f 0b00 	mov.w	fp, #0
 800d422:	7808      	ldrb	r0, [r1, #0]
 800d424:	f7ff ff80 	bl	800d328 <__hexdig_fun>
 800d428:	1e42      	subs	r2, r0, #1
 800d42a:	b2d2      	uxtb	r2, r2
 800d42c:	2a18      	cmp	r2, #24
 800d42e:	d82e      	bhi.n	800d48e <__gethex+0x13a>
 800d430:	f1a0 0210 	sub.w	r2, r0, #16
 800d434:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d438:	f7ff ff76 	bl	800d328 <__hexdig_fun>
 800d43c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800d440:	fa5f fc8c 	uxtb.w	ip, ip
 800d444:	f1bc 0f18 	cmp.w	ip, #24
 800d448:	d91d      	bls.n	800d486 <__gethex+0x132>
 800d44a:	f1bb 0f00 	cmp.w	fp, #0
 800d44e:	d000      	beq.n	800d452 <__gethex+0xfe>
 800d450:	4252      	negs	r2, r2
 800d452:	4416      	add	r6, r2
 800d454:	f8ca 1000 	str.w	r1, [sl]
 800d458:	b1dc      	cbz	r4, 800d492 <__gethex+0x13e>
 800d45a:	9b01      	ldr	r3, [sp, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	bf14      	ite	ne
 800d460:	f04f 0800 	movne.w	r8, #0
 800d464:	f04f 0806 	moveq.w	r8, #6
 800d468:	4640      	mov	r0, r8
 800d46a:	b005      	add	sp, #20
 800d46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d470:	4645      	mov	r5, r8
 800d472:	4626      	mov	r6, r4
 800d474:	2401      	movs	r4, #1
 800d476:	e7c7      	b.n	800d408 <__gethex+0xb4>
 800d478:	f04f 0b00 	mov.w	fp, #0
 800d47c:	1ca9      	adds	r1, r5, #2
 800d47e:	e7d0      	b.n	800d422 <__gethex+0xce>
 800d480:	f04f 0b01 	mov.w	fp, #1
 800d484:	e7fa      	b.n	800d47c <__gethex+0x128>
 800d486:	230a      	movs	r3, #10
 800d488:	fb03 0002 	mla	r0, r3, r2, r0
 800d48c:	e7d0      	b.n	800d430 <__gethex+0xdc>
 800d48e:	4629      	mov	r1, r5
 800d490:	e7e0      	b.n	800d454 <__gethex+0x100>
 800d492:	eba5 0308 	sub.w	r3, r5, r8
 800d496:	3b01      	subs	r3, #1
 800d498:	4621      	mov	r1, r4
 800d49a:	2b07      	cmp	r3, #7
 800d49c:	dc0a      	bgt.n	800d4b4 <__gethex+0x160>
 800d49e:	4648      	mov	r0, r9
 800d4a0:	f000 fd14 	bl	800decc <_Balloc>
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	b940      	cbnz	r0, 800d4ba <__gethex+0x166>
 800d4a8:	4b61      	ldr	r3, [pc, #388]	; (800d630 <__gethex+0x2dc>)
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	21e4      	movs	r1, #228	; 0xe4
 800d4ae:	4861      	ldr	r0, [pc, #388]	; (800d634 <__gethex+0x2e0>)
 800d4b0:	f001 faa8 	bl	800ea04 <__assert_func>
 800d4b4:	3101      	adds	r1, #1
 800d4b6:	105b      	asrs	r3, r3, #1
 800d4b8:	e7ef      	b.n	800d49a <__gethex+0x146>
 800d4ba:	f100 0a14 	add.w	sl, r0, #20
 800d4be:	2300      	movs	r3, #0
 800d4c0:	495a      	ldr	r1, [pc, #360]	; (800d62c <__gethex+0x2d8>)
 800d4c2:	f8cd a004 	str.w	sl, [sp, #4]
 800d4c6:	469b      	mov	fp, r3
 800d4c8:	45a8      	cmp	r8, r5
 800d4ca:	d342      	bcc.n	800d552 <__gethex+0x1fe>
 800d4cc:	9801      	ldr	r0, [sp, #4]
 800d4ce:	f840 bb04 	str.w	fp, [r0], #4
 800d4d2:	eba0 000a 	sub.w	r0, r0, sl
 800d4d6:	1080      	asrs	r0, r0, #2
 800d4d8:	6120      	str	r0, [r4, #16]
 800d4da:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d4de:	4658      	mov	r0, fp
 800d4e0:	f000 fde6 	bl	800e0b0 <__hi0bits>
 800d4e4:	683d      	ldr	r5, [r7, #0]
 800d4e6:	eba8 0000 	sub.w	r0, r8, r0
 800d4ea:	42a8      	cmp	r0, r5
 800d4ec:	dd59      	ble.n	800d5a2 <__gethex+0x24e>
 800d4ee:	eba0 0805 	sub.w	r8, r0, r5
 800d4f2:	4641      	mov	r1, r8
 800d4f4:	4620      	mov	r0, r4
 800d4f6:	f001 f975 	bl	800e7e4 <__any_on>
 800d4fa:	4683      	mov	fp, r0
 800d4fc:	b1b8      	cbz	r0, 800d52e <__gethex+0x1da>
 800d4fe:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800d502:	1159      	asrs	r1, r3, #5
 800d504:	f003 021f 	and.w	r2, r3, #31
 800d508:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d50c:	f04f 0b01 	mov.w	fp, #1
 800d510:	fa0b f202 	lsl.w	r2, fp, r2
 800d514:	420a      	tst	r2, r1
 800d516:	d00a      	beq.n	800d52e <__gethex+0x1da>
 800d518:	455b      	cmp	r3, fp
 800d51a:	dd06      	ble.n	800d52a <__gethex+0x1d6>
 800d51c:	f1a8 0102 	sub.w	r1, r8, #2
 800d520:	4620      	mov	r0, r4
 800d522:	f001 f95f 	bl	800e7e4 <__any_on>
 800d526:	2800      	cmp	r0, #0
 800d528:	d138      	bne.n	800d59c <__gethex+0x248>
 800d52a:	f04f 0b02 	mov.w	fp, #2
 800d52e:	4641      	mov	r1, r8
 800d530:	4620      	mov	r0, r4
 800d532:	f7ff fea7 	bl	800d284 <rshift>
 800d536:	4446      	add	r6, r8
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	42b3      	cmp	r3, r6
 800d53c:	da41      	bge.n	800d5c2 <__gethex+0x26e>
 800d53e:	4621      	mov	r1, r4
 800d540:	4648      	mov	r0, r9
 800d542:	f000 fd03 	bl	800df4c <_Bfree>
 800d546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d548:	2300      	movs	r3, #0
 800d54a:	6013      	str	r3, [r2, #0]
 800d54c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d550:	e78a      	b.n	800d468 <__gethex+0x114>
 800d552:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d556:	2a2e      	cmp	r2, #46	; 0x2e
 800d558:	d014      	beq.n	800d584 <__gethex+0x230>
 800d55a:	2b20      	cmp	r3, #32
 800d55c:	d106      	bne.n	800d56c <__gethex+0x218>
 800d55e:	9b01      	ldr	r3, [sp, #4]
 800d560:	f843 bb04 	str.w	fp, [r3], #4
 800d564:	f04f 0b00 	mov.w	fp, #0
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	465b      	mov	r3, fp
 800d56c:	7828      	ldrb	r0, [r5, #0]
 800d56e:	9303      	str	r3, [sp, #12]
 800d570:	f7ff feda 	bl	800d328 <__hexdig_fun>
 800d574:	9b03      	ldr	r3, [sp, #12]
 800d576:	f000 000f 	and.w	r0, r0, #15
 800d57a:	4098      	lsls	r0, r3
 800d57c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d580:	3304      	adds	r3, #4
 800d582:	e7a1      	b.n	800d4c8 <__gethex+0x174>
 800d584:	45a8      	cmp	r8, r5
 800d586:	d8e8      	bhi.n	800d55a <__gethex+0x206>
 800d588:	2201      	movs	r2, #1
 800d58a:	4628      	mov	r0, r5
 800d58c:	9303      	str	r3, [sp, #12]
 800d58e:	f7fe fef2 	bl	800c376 <strncmp>
 800d592:	4926      	ldr	r1, [pc, #152]	; (800d62c <__gethex+0x2d8>)
 800d594:	9b03      	ldr	r3, [sp, #12]
 800d596:	2800      	cmp	r0, #0
 800d598:	d1df      	bne.n	800d55a <__gethex+0x206>
 800d59a:	e795      	b.n	800d4c8 <__gethex+0x174>
 800d59c:	f04f 0b03 	mov.w	fp, #3
 800d5a0:	e7c5      	b.n	800d52e <__gethex+0x1da>
 800d5a2:	da0b      	bge.n	800d5bc <__gethex+0x268>
 800d5a4:	eba5 0800 	sub.w	r8, r5, r0
 800d5a8:	4621      	mov	r1, r4
 800d5aa:	4642      	mov	r2, r8
 800d5ac:	4648      	mov	r0, r9
 800d5ae:	f000 fee7 	bl	800e380 <__lshift>
 800d5b2:	eba6 0608 	sub.w	r6, r6, r8
 800d5b6:	4604      	mov	r4, r0
 800d5b8:	f100 0a14 	add.w	sl, r0, #20
 800d5bc:	f04f 0b00 	mov.w	fp, #0
 800d5c0:	e7ba      	b.n	800d538 <__gethex+0x1e4>
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	42b3      	cmp	r3, r6
 800d5c6:	dd73      	ble.n	800d6b0 <__gethex+0x35c>
 800d5c8:	1b9e      	subs	r6, r3, r6
 800d5ca:	42b5      	cmp	r5, r6
 800d5cc:	dc34      	bgt.n	800d638 <__gethex+0x2e4>
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d023      	beq.n	800d61c <__gethex+0x2c8>
 800d5d4:	2b03      	cmp	r3, #3
 800d5d6:	d025      	beq.n	800d624 <__gethex+0x2d0>
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d115      	bne.n	800d608 <__gethex+0x2b4>
 800d5dc:	42b5      	cmp	r5, r6
 800d5de:	d113      	bne.n	800d608 <__gethex+0x2b4>
 800d5e0:	2d01      	cmp	r5, #1
 800d5e2:	d10b      	bne.n	800d5fc <__gethex+0x2a8>
 800d5e4:	9a02      	ldr	r2, [sp, #8]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6013      	str	r3, [r2, #0]
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	6123      	str	r3, [r4, #16]
 800d5ee:	f8ca 3000 	str.w	r3, [sl]
 800d5f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d5f4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d5f8:	601c      	str	r4, [r3, #0]
 800d5fa:	e735      	b.n	800d468 <__gethex+0x114>
 800d5fc:	1e69      	subs	r1, r5, #1
 800d5fe:	4620      	mov	r0, r4
 800d600:	f001 f8f0 	bl	800e7e4 <__any_on>
 800d604:	2800      	cmp	r0, #0
 800d606:	d1ed      	bne.n	800d5e4 <__gethex+0x290>
 800d608:	4621      	mov	r1, r4
 800d60a:	4648      	mov	r0, r9
 800d60c:	f000 fc9e 	bl	800df4c <_Bfree>
 800d610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d612:	2300      	movs	r3, #0
 800d614:	6013      	str	r3, [r2, #0]
 800d616:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d61a:	e725      	b.n	800d468 <__gethex+0x114>
 800d61c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d1f2      	bne.n	800d608 <__gethex+0x2b4>
 800d622:	e7df      	b.n	800d5e4 <__gethex+0x290>
 800d624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d626:	2b00      	cmp	r3, #0
 800d628:	d1dc      	bne.n	800d5e4 <__gethex+0x290>
 800d62a:	e7ed      	b.n	800d608 <__gethex+0x2b4>
 800d62c:	0800f331 	.word	0x0800f331
 800d630:	0800f50d 	.word	0x0800f50d
 800d634:	0800f51e 	.word	0x0800f51e
 800d638:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d63c:	f1bb 0f00 	cmp.w	fp, #0
 800d640:	d133      	bne.n	800d6aa <__gethex+0x356>
 800d642:	f1b8 0f00 	cmp.w	r8, #0
 800d646:	d004      	beq.n	800d652 <__gethex+0x2fe>
 800d648:	4641      	mov	r1, r8
 800d64a:	4620      	mov	r0, r4
 800d64c:	f001 f8ca 	bl	800e7e4 <__any_on>
 800d650:	4683      	mov	fp, r0
 800d652:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d656:	2301      	movs	r3, #1
 800d658:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d65c:	f008 081f 	and.w	r8, r8, #31
 800d660:	fa03 f308 	lsl.w	r3, r3, r8
 800d664:	4213      	tst	r3, r2
 800d666:	4631      	mov	r1, r6
 800d668:	4620      	mov	r0, r4
 800d66a:	bf18      	it	ne
 800d66c:	f04b 0b02 	orrne.w	fp, fp, #2
 800d670:	1bad      	subs	r5, r5, r6
 800d672:	f7ff fe07 	bl	800d284 <rshift>
 800d676:	687e      	ldr	r6, [r7, #4]
 800d678:	f04f 0802 	mov.w	r8, #2
 800d67c:	f1bb 0f00 	cmp.w	fp, #0
 800d680:	d04a      	beq.n	800d718 <__gethex+0x3c4>
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	2b02      	cmp	r3, #2
 800d686:	d016      	beq.n	800d6b6 <__gethex+0x362>
 800d688:	2b03      	cmp	r3, #3
 800d68a:	d018      	beq.n	800d6be <__gethex+0x36a>
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d109      	bne.n	800d6a4 <__gethex+0x350>
 800d690:	f01b 0f02 	tst.w	fp, #2
 800d694:	d006      	beq.n	800d6a4 <__gethex+0x350>
 800d696:	f8da 3000 	ldr.w	r3, [sl]
 800d69a:	ea4b 0b03 	orr.w	fp, fp, r3
 800d69e:	f01b 0f01 	tst.w	fp, #1
 800d6a2:	d10f      	bne.n	800d6c4 <__gethex+0x370>
 800d6a4:	f048 0810 	orr.w	r8, r8, #16
 800d6a8:	e036      	b.n	800d718 <__gethex+0x3c4>
 800d6aa:	f04f 0b01 	mov.w	fp, #1
 800d6ae:	e7d0      	b.n	800d652 <__gethex+0x2fe>
 800d6b0:	f04f 0801 	mov.w	r8, #1
 800d6b4:	e7e2      	b.n	800d67c <__gethex+0x328>
 800d6b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6b8:	f1c3 0301 	rsb	r3, r3, #1
 800d6bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d0ef      	beq.n	800d6a4 <__gethex+0x350>
 800d6c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d6c8:	f104 0214 	add.w	r2, r4, #20
 800d6cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d6d0:	9301      	str	r3, [sp, #4]
 800d6d2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	4694      	mov	ip, r2
 800d6da:	f852 1b04 	ldr.w	r1, [r2], #4
 800d6de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d6e2:	d01e      	beq.n	800d722 <__gethex+0x3ce>
 800d6e4:	3101      	adds	r1, #1
 800d6e6:	f8cc 1000 	str.w	r1, [ip]
 800d6ea:	f1b8 0f02 	cmp.w	r8, #2
 800d6ee:	f104 0214 	add.w	r2, r4, #20
 800d6f2:	d13d      	bne.n	800d770 <__gethex+0x41c>
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	42ab      	cmp	r3, r5
 800d6fa:	d10b      	bne.n	800d714 <__gethex+0x3c0>
 800d6fc:	1169      	asrs	r1, r5, #5
 800d6fe:	2301      	movs	r3, #1
 800d700:	f005 051f 	and.w	r5, r5, #31
 800d704:	fa03 f505 	lsl.w	r5, r3, r5
 800d708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d70c:	421d      	tst	r5, r3
 800d70e:	bf18      	it	ne
 800d710:	f04f 0801 	movne.w	r8, #1
 800d714:	f048 0820 	orr.w	r8, r8, #32
 800d718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d71a:	601c      	str	r4, [r3, #0]
 800d71c:	9b02      	ldr	r3, [sp, #8]
 800d71e:	601e      	str	r6, [r3, #0]
 800d720:	e6a2      	b.n	800d468 <__gethex+0x114>
 800d722:	4290      	cmp	r0, r2
 800d724:	f842 3c04 	str.w	r3, [r2, #-4]
 800d728:	d8d6      	bhi.n	800d6d8 <__gethex+0x384>
 800d72a:	68a2      	ldr	r2, [r4, #8]
 800d72c:	4593      	cmp	fp, r2
 800d72e:	db17      	blt.n	800d760 <__gethex+0x40c>
 800d730:	6861      	ldr	r1, [r4, #4]
 800d732:	4648      	mov	r0, r9
 800d734:	3101      	adds	r1, #1
 800d736:	f000 fbc9 	bl	800decc <_Balloc>
 800d73a:	4682      	mov	sl, r0
 800d73c:	b918      	cbnz	r0, 800d746 <__gethex+0x3f2>
 800d73e:	4b1b      	ldr	r3, [pc, #108]	; (800d7ac <__gethex+0x458>)
 800d740:	4602      	mov	r2, r0
 800d742:	2184      	movs	r1, #132	; 0x84
 800d744:	e6b3      	b.n	800d4ae <__gethex+0x15a>
 800d746:	6922      	ldr	r2, [r4, #16]
 800d748:	3202      	adds	r2, #2
 800d74a:	f104 010c 	add.w	r1, r4, #12
 800d74e:	0092      	lsls	r2, r2, #2
 800d750:	300c      	adds	r0, #12
 800d752:	f7fe feb2 	bl	800c4ba <memcpy>
 800d756:	4621      	mov	r1, r4
 800d758:	4648      	mov	r0, r9
 800d75a:	f000 fbf7 	bl	800df4c <_Bfree>
 800d75e:	4654      	mov	r4, sl
 800d760:	6922      	ldr	r2, [r4, #16]
 800d762:	1c51      	adds	r1, r2, #1
 800d764:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d768:	6121      	str	r1, [r4, #16]
 800d76a:	2101      	movs	r1, #1
 800d76c:	6151      	str	r1, [r2, #20]
 800d76e:	e7bc      	b.n	800d6ea <__gethex+0x396>
 800d770:	6921      	ldr	r1, [r4, #16]
 800d772:	4559      	cmp	r1, fp
 800d774:	dd0b      	ble.n	800d78e <__gethex+0x43a>
 800d776:	2101      	movs	r1, #1
 800d778:	4620      	mov	r0, r4
 800d77a:	f7ff fd83 	bl	800d284 <rshift>
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	3601      	adds	r6, #1
 800d782:	42b3      	cmp	r3, r6
 800d784:	f6ff aedb 	blt.w	800d53e <__gethex+0x1ea>
 800d788:	f04f 0801 	mov.w	r8, #1
 800d78c:	e7c2      	b.n	800d714 <__gethex+0x3c0>
 800d78e:	f015 051f 	ands.w	r5, r5, #31
 800d792:	d0f9      	beq.n	800d788 <__gethex+0x434>
 800d794:	9b01      	ldr	r3, [sp, #4]
 800d796:	441a      	add	r2, r3
 800d798:	f1c5 0520 	rsb	r5, r5, #32
 800d79c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d7a0:	f000 fc86 	bl	800e0b0 <__hi0bits>
 800d7a4:	42a8      	cmp	r0, r5
 800d7a6:	dbe6      	blt.n	800d776 <__gethex+0x422>
 800d7a8:	e7ee      	b.n	800d788 <__gethex+0x434>
 800d7aa:	bf00      	nop
 800d7ac:	0800f50d 	.word	0x0800f50d

0800d7b0 <L_shift>:
 800d7b0:	f1c2 0208 	rsb	r2, r2, #8
 800d7b4:	0092      	lsls	r2, r2, #2
 800d7b6:	b570      	push	{r4, r5, r6, lr}
 800d7b8:	f1c2 0620 	rsb	r6, r2, #32
 800d7bc:	6843      	ldr	r3, [r0, #4]
 800d7be:	6804      	ldr	r4, [r0, #0]
 800d7c0:	fa03 f506 	lsl.w	r5, r3, r6
 800d7c4:	432c      	orrs	r4, r5
 800d7c6:	40d3      	lsrs	r3, r2
 800d7c8:	6004      	str	r4, [r0, #0]
 800d7ca:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7ce:	4288      	cmp	r0, r1
 800d7d0:	d3f4      	bcc.n	800d7bc <L_shift+0xc>
 800d7d2:	bd70      	pop	{r4, r5, r6, pc}

0800d7d4 <__match>:
 800d7d4:	b530      	push	{r4, r5, lr}
 800d7d6:	6803      	ldr	r3, [r0, #0]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7de:	b914      	cbnz	r4, 800d7e6 <__match+0x12>
 800d7e0:	6003      	str	r3, [r0, #0]
 800d7e2:	2001      	movs	r0, #1
 800d7e4:	bd30      	pop	{r4, r5, pc}
 800d7e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d7ee:	2d19      	cmp	r5, #25
 800d7f0:	bf98      	it	ls
 800d7f2:	3220      	addls	r2, #32
 800d7f4:	42a2      	cmp	r2, r4
 800d7f6:	d0f0      	beq.n	800d7da <__match+0x6>
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	e7f3      	b.n	800d7e4 <__match+0x10>

0800d7fc <__hexnan>:
 800d7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d800:	680b      	ldr	r3, [r1, #0]
 800d802:	6801      	ldr	r1, [r0, #0]
 800d804:	115e      	asrs	r6, r3, #5
 800d806:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d80a:	f013 031f 	ands.w	r3, r3, #31
 800d80e:	b087      	sub	sp, #28
 800d810:	bf18      	it	ne
 800d812:	3604      	addne	r6, #4
 800d814:	2500      	movs	r5, #0
 800d816:	1f37      	subs	r7, r6, #4
 800d818:	4682      	mov	sl, r0
 800d81a:	4690      	mov	r8, r2
 800d81c:	9301      	str	r3, [sp, #4]
 800d81e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d822:	46b9      	mov	r9, r7
 800d824:	463c      	mov	r4, r7
 800d826:	9502      	str	r5, [sp, #8]
 800d828:	46ab      	mov	fp, r5
 800d82a:	784a      	ldrb	r2, [r1, #1]
 800d82c:	1c4b      	adds	r3, r1, #1
 800d82e:	9303      	str	r3, [sp, #12]
 800d830:	b342      	cbz	r2, 800d884 <__hexnan+0x88>
 800d832:	4610      	mov	r0, r2
 800d834:	9105      	str	r1, [sp, #20]
 800d836:	9204      	str	r2, [sp, #16]
 800d838:	f7ff fd76 	bl	800d328 <__hexdig_fun>
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d14f      	bne.n	800d8e0 <__hexnan+0xe4>
 800d840:	9a04      	ldr	r2, [sp, #16]
 800d842:	9905      	ldr	r1, [sp, #20]
 800d844:	2a20      	cmp	r2, #32
 800d846:	d818      	bhi.n	800d87a <__hexnan+0x7e>
 800d848:	9b02      	ldr	r3, [sp, #8]
 800d84a:	459b      	cmp	fp, r3
 800d84c:	dd13      	ble.n	800d876 <__hexnan+0x7a>
 800d84e:	454c      	cmp	r4, r9
 800d850:	d206      	bcs.n	800d860 <__hexnan+0x64>
 800d852:	2d07      	cmp	r5, #7
 800d854:	dc04      	bgt.n	800d860 <__hexnan+0x64>
 800d856:	462a      	mov	r2, r5
 800d858:	4649      	mov	r1, r9
 800d85a:	4620      	mov	r0, r4
 800d85c:	f7ff ffa8 	bl	800d7b0 <L_shift>
 800d860:	4544      	cmp	r4, r8
 800d862:	d950      	bls.n	800d906 <__hexnan+0x10a>
 800d864:	2300      	movs	r3, #0
 800d866:	f1a4 0904 	sub.w	r9, r4, #4
 800d86a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d86e:	f8cd b008 	str.w	fp, [sp, #8]
 800d872:	464c      	mov	r4, r9
 800d874:	461d      	mov	r5, r3
 800d876:	9903      	ldr	r1, [sp, #12]
 800d878:	e7d7      	b.n	800d82a <__hexnan+0x2e>
 800d87a:	2a29      	cmp	r2, #41	; 0x29
 800d87c:	d155      	bne.n	800d92a <__hexnan+0x12e>
 800d87e:	3102      	adds	r1, #2
 800d880:	f8ca 1000 	str.w	r1, [sl]
 800d884:	f1bb 0f00 	cmp.w	fp, #0
 800d888:	d04f      	beq.n	800d92a <__hexnan+0x12e>
 800d88a:	454c      	cmp	r4, r9
 800d88c:	d206      	bcs.n	800d89c <__hexnan+0xa0>
 800d88e:	2d07      	cmp	r5, #7
 800d890:	dc04      	bgt.n	800d89c <__hexnan+0xa0>
 800d892:	462a      	mov	r2, r5
 800d894:	4649      	mov	r1, r9
 800d896:	4620      	mov	r0, r4
 800d898:	f7ff ff8a 	bl	800d7b0 <L_shift>
 800d89c:	4544      	cmp	r4, r8
 800d89e:	d934      	bls.n	800d90a <__hexnan+0x10e>
 800d8a0:	f1a8 0204 	sub.w	r2, r8, #4
 800d8a4:	4623      	mov	r3, r4
 800d8a6:	f853 1b04 	ldr.w	r1, [r3], #4
 800d8aa:	f842 1f04 	str.w	r1, [r2, #4]!
 800d8ae:	429f      	cmp	r7, r3
 800d8b0:	d2f9      	bcs.n	800d8a6 <__hexnan+0xaa>
 800d8b2:	1b3b      	subs	r3, r7, r4
 800d8b4:	f023 0303 	bic.w	r3, r3, #3
 800d8b8:	3304      	adds	r3, #4
 800d8ba:	3e03      	subs	r6, #3
 800d8bc:	3401      	adds	r4, #1
 800d8be:	42a6      	cmp	r6, r4
 800d8c0:	bf38      	it	cc
 800d8c2:	2304      	movcc	r3, #4
 800d8c4:	4443      	add	r3, r8
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	f843 2b04 	str.w	r2, [r3], #4
 800d8cc:	429f      	cmp	r7, r3
 800d8ce:	d2fb      	bcs.n	800d8c8 <__hexnan+0xcc>
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	b91b      	cbnz	r3, 800d8dc <__hexnan+0xe0>
 800d8d4:	4547      	cmp	r7, r8
 800d8d6:	d126      	bne.n	800d926 <__hexnan+0x12a>
 800d8d8:	2301      	movs	r3, #1
 800d8da:	603b      	str	r3, [r7, #0]
 800d8dc:	2005      	movs	r0, #5
 800d8de:	e025      	b.n	800d92c <__hexnan+0x130>
 800d8e0:	3501      	adds	r5, #1
 800d8e2:	2d08      	cmp	r5, #8
 800d8e4:	f10b 0b01 	add.w	fp, fp, #1
 800d8e8:	dd06      	ble.n	800d8f8 <__hexnan+0xfc>
 800d8ea:	4544      	cmp	r4, r8
 800d8ec:	d9c3      	bls.n	800d876 <__hexnan+0x7a>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8f4:	2501      	movs	r5, #1
 800d8f6:	3c04      	subs	r4, #4
 800d8f8:	6822      	ldr	r2, [r4, #0]
 800d8fa:	f000 000f 	and.w	r0, r0, #15
 800d8fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d902:	6020      	str	r0, [r4, #0]
 800d904:	e7b7      	b.n	800d876 <__hexnan+0x7a>
 800d906:	2508      	movs	r5, #8
 800d908:	e7b5      	b.n	800d876 <__hexnan+0x7a>
 800d90a:	9b01      	ldr	r3, [sp, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d0df      	beq.n	800d8d0 <__hexnan+0xd4>
 800d910:	f1c3 0320 	rsb	r3, r3, #32
 800d914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d918:	40da      	lsrs	r2, r3
 800d91a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d91e:	4013      	ands	r3, r2
 800d920:	f846 3c04 	str.w	r3, [r6, #-4]
 800d924:	e7d4      	b.n	800d8d0 <__hexnan+0xd4>
 800d926:	3f04      	subs	r7, #4
 800d928:	e7d2      	b.n	800d8d0 <__hexnan+0xd4>
 800d92a:	2004      	movs	r0, #4
 800d92c:	b007      	add	sp, #28
 800d92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d932 <__ssputs_r>:
 800d932:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d936:	688e      	ldr	r6, [r1, #8]
 800d938:	461f      	mov	r7, r3
 800d93a:	42be      	cmp	r6, r7
 800d93c:	680b      	ldr	r3, [r1, #0]
 800d93e:	4682      	mov	sl, r0
 800d940:	460c      	mov	r4, r1
 800d942:	4690      	mov	r8, r2
 800d944:	d82c      	bhi.n	800d9a0 <__ssputs_r+0x6e>
 800d946:	898a      	ldrh	r2, [r1, #12]
 800d948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d94c:	d026      	beq.n	800d99c <__ssputs_r+0x6a>
 800d94e:	6965      	ldr	r5, [r4, #20]
 800d950:	6909      	ldr	r1, [r1, #16]
 800d952:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d956:	eba3 0901 	sub.w	r9, r3, r1
 800d95a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d95e:	1c7b      	adds	r3, r7, #1
 800d960:	444b      	add	r3, r9
 800d962:	106d      	asrs	r5, r5, #1
 800d964:	429d      	cmp	r5, r3
 800d966:	bf38      	it	cc
 800d968:	461d      	movcc	r5, r3
 800d96a:	0553      	lsls	r3, r2, #21
 800d96c:	d527      	bpl.n	800d9be <__ssputs_r+0x8c>
 800d96e:	4629      	mov	r1, r5
 800d970:	f000 f960 	bl	800dc34 <_malloc_r>
 800d974:	4606      	mov	r6, r0
 800d976:	b360      	cbz	r0, 800d9d2 <__ssputs_r+0xa0>
 800d978:	6921      	ldr	r1, [r4, #16]
 800d97a:	464a      	mov	r2, r9
 800d97c:	f7fe fd9d 	bl	800c4ba <memcpy>
 800d980:	89a3      	ldrh	r3, [r4, #12]
 800d982:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d986:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d98a:	81a3      	strh	r3, [r4, #12]
 800d98c:	6126      	str	r6, [r4, #16]
 800d98e:	6165      	str	r5, [r4, #20]
 800d990:	444e      	add	r6, r9
 800d992:	eba5 0509 	sub.w	r5, r5, r9
 800d996:	6026      	str	r6, [r4, #0]
 800d998:	60a5      	str	r5, [r4, #8]
 800d99a:	463e      	mov	r6, r7
 800d99c:	42be      	cmp	r6, r7
 800d99e:	d900      	bls.n	800d9a2 <__ssputs_r+0x70>
 800d9a0:	463e      	mov	r6, r7
 800d9a2:	6820      	ldr	r0, [r4, #0]
 800d9a4:	4632      	mov	r2, r6
 800d9a6:	4641      	mov	r1, r8
 800d9a8:	f000 ffbc 	bl	800e924 <memmove>
 800d9ac:	68a3      	ldr	r3, [r4, #8]
 800d9ae:	1b9b      	subs	r3, r3, r6
 800d9b0:	60a3      	str	r3, [r4, #8]
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	4433      	add	r3, r6
 800d9b6:	6023      	str	r3, [r4, #0]
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9be:	462a      	mov	r2, r5
 800d9c0:	f000 ff74 	bl	800e8ac <_realloc_r>
 800d9c4:	4606      	mov	r6, r0
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d1e0      	bne.n	800d98c <__ssputs_r+0x5a>
 800d9ca:	6921      	ldr	r1, [r4, #16]
 800d9cc:	4650      	mov	r0, sl
 800d9ce:	f7ff fc0d 	bl	800d1ec <_free_r>
 800d9d2:	230c      	movs	r3, #12
 800d9d4:	f8ca 3000 	str.w	r3, [sl]
 800d9d8:	89a3      	ldrh	r3, [r4, #12]
 800d9da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9de:	81a3      	strh	r3, [r4, #12]
 800d9e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d9e4:	e7e9      	b.n	800d9ba <__ssputs_r+0x88>
	...

0800d9e8 <_svfiprintf_r>:
 800d9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ec:	4698      	mov	r8, r3
 800d9ee:	898b      	ldrh	r3, [r1, #12]
 800d9f0:	061b      	lsls	r3, r3, #24
 800d9f2:	b09d      	sub	sp, #116	; 0x74
 800d9f4:	4607      	mov	r7, r0
 800d9f6:	460d      	mov	r5, r1
 800d9f8:	4614      	mov	r4, r2
 800d9fa:	d50e      	bpl.n	800da1a <_svfiprintf_r+0x32>
 800d9fc:	690b      	ldr	r3, [r1, #16]
 800d9fe:	b963      	cbnz	r3, 800da1a <_svfiprintf_r+0x32>
 800da00:	2140      	movs	r1, #64	; 0x40
 800da02:	f000 f917 	bl	800dc34 <_malloc_r>
 800da06:	6028      	str	r0, [r5, #0]
 800da08:	6128      	str	r0, [r5, #16]
 800da0a:	b920      	cbnz	r0, 800da16 <_svfiprintf_r+0x2e>
 800da0c:	230c      	movs	r3, #12
 800da0e:	603b      	str	r3, [r7, #0]
 800da10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da14:	e0d0      	b.n	800dbb8 <_svfiprintf_r+0x1d0>
 800da16:	2340      	movs	r3, #64	; 0x40
 800da18:	616b      	str	r3, [r5, #20]
 800da1a:	2300      	movs	r3, #0
 800da1c:	9309      	str	r3, [sp, #36]	; 0x24
 800da1e:	2320      	movs	r3, #32
 800da20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da24:	f8cd 800c 	str.w	r8, [sp, #12]
 800da28:	2330      	movs	r3, #48	; 0x30
 800da2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dbd0 <_svfiprintf_r+0x1e8>
 800da2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da32:	f04f 0901 	mov.w	r9, #1
 800da36:	4623      	mov	r3, r4
 800da38:	469a      	mov	sl, r3
 800da3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da3e:	b10a      	cbz	r2, 800da44 <_svfiprintf_r+0x5c>
 800da40:	2a25      	cmp	r2, #37	; 0x25
 800da42:	d1f9      	bne.n	800da38 <_svfiprintf_r+0x50>
 800da44:	ebba 0b04 	subs.w	fp, sl, r4
 800da48:	d00b      	beq.n	800da62 <_svfiprintf_r+0x7a>
 800da4a:	465b      	mov	r3, fp
 800da4c:	4622      	mov	r2, r4
 800da4e:	4629      	mov	r1, r5
 800da50:	4638      	mov	r0, r7
 800da52:	f7ff ff6e 	bl	800d932 <__ssputs_r>
 800da56:	3001      	adds	r0, #1
 800da58:	f000 80a9 	beq.w	800dbae <_svfiprintf_r+0x1c6>
 800da5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da5e:	445a      	add	r2, fp
 800da60:	9209      	str	r2, [sp, #36]	; 0x24
 800da62:	f89a 3000 	ldrb.w	r3, [sl]
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 80a1 	beq.w	800dbae <_svfiprintf_r+0x1c6>
 800da6c:	2300      	movs	r3, #0
 800da6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da76:	f10a 0a01 	add.w	sl, sl, #1
 800da7a:	9304      	str	r3, [sp, #16]
 800da7c:	9307      	str	r3, [sp, #28]
 800da7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da82:	931a      	str	r3, [sp, #104]	; 0x68
 800da84:	4654      	mov	r4, sl
 800da86:	2205      	movs	r2, #5
 800da88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da8c:	4850      	ldr	r0, [pc, #320]	; (800dbd0 <_svfiprintf_r+0x1e8>)
 800da8e:	f7f2 fbb7 	bl	8000200 <memchr>
 800da92:	9a04      	ldr	r2, [sp, #16]
 800da94:	b9d8      	cbnz	r0, 800dace <_svfiprintf_r+0xe6>
 800da96:	06d0      	lsls	r0, r2, #27
 800da98:	bf44      	itt	mi
 800da9a:	2320      	movmi	r3, #32
 800da9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daa0:	0711      	lsls	r1, r2, #28
 800daa2:	bf44      	itt	mi
 800daa4:	232b      	movmi	r3, #43	; 0x2b
 800daa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daaa:	f89a 3000 	ldrb.w	r3, [sl]
 800daae:	2b2a      	cmp	r3, #42	; 0x2a
 800dab0:	d015      	beq.n	800dade <_svfiprintf_r+0xf6>
 800dab2:	9a07      	ldr	r2, [sp, #28]
 800dab4:	4654      	mov	r4, sl
 800dab6:	2000      	movs	r0, #0
 800dab8:	f04f 0c0a 	mov.w	ip, #10
 800dabc:	4621      	mov	r1, r4
 800dabe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dac2:	3b30      	subs	r3, #48	; 0x30
 800dac4:	2b09      	cmp	r3, #9
 800dac6:	d94d      	bls.n	800db64 <_svfiprintf_r+0x17c>
 800dac8:	b1b0      	cbz	r0, 800daf8 <_svfiprintf_r+0x110>
 800daca:	9207      	str	r2, [sp, #28]
 800dacc:	e014      	b.n	800daf8 <_svfiprintf_r+0x110>
 800dace:	eba0 0308 	sub.w	r3, r0, r8
 800dad2:	fa09 f303 	lsl.w	r3, r9, r3
 800dad6:	4313      	orrs	r3, r2
 800dad8:	9304      	str	r3, [sp, #16]
 800dada:	46a2      	mov	sl, r4
 800dadc:	e7d2      	b.n	800da84 <_svfiprintf_r+0x9c>
 800dade:	9b03      	ldr	r3, [sp, #12]
 800dae0:	1d19      	adds	r1, r3, #4
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	9103      	str	r1, [sp, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	bfbb      	ittet	lt
 800daea:	425b      	neglt	r3, r3
 800daec:	f042 0202 	orrlt.w	r2, r2, #2
 800daf0:	9307      	strge	r3, [sp, #28]
 800daf2:	9307      	strlt	r3, [sp, #28]
 800daf4:	bfb8      	it	lt
 800daf6:	9204      	strlt	r2, [sp, #16]
 800daf8:	7823      	ldrb	r3, [r4, #0]
 800dafa:	2b2e      	cmp	r3, #46	; 0x2e
 800dafc:	d10c      	bne.n	800db18 <_svfiprintf_r+0x130>
 800dafe:	7863      	ldrb	r3, [r4, #1]
 800db00:	2b2a      	cmp	r3, #42	; 0x2a
 800db02:	d134      	bne.n	800db6e <_svfiprintf_r+0x186>
 800db04:	9b03      	ldr	r3, [sp, #12]
 800db06:	1d1a      	adds	r2, r3, #4
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	9203      	str	r2, [sp, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	bfb8      	it	lt
 800db10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800db14:	3402      	adds	r4, #2
 800db16:	9305      	str	r3, [sp, #20]
 800db18:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dbe0 <_svfiprintf_r+0x1f8>
 800db1c:	7821      	ldrb	r1, [r4, #0]
 800db1e:	2203      	movs	r2, #3
 800db20:	4650      	mov	r0, sl
 800db22:	f7f2 fb6d 	bl	8000200 <memchr>
 800db26:	b138      	cbz	r0, 800db38 <_svfiprintf_r+0x150>
 800db28:	9b04      	ldr	r3, [sp, #16]
 800db2a:	eba0 000a 	sub.w	r0, r0, sl
 800db2e:	2240      	movs	r2, #64	; 0x40
 800db30:	4082      	lsls	r2, r0
 800db32:	4313      	orrs	r3, r2
 800db34:	3401      	adds	r4, #1
 800db36:	9304      	str	r3, [sp, #16]
 800db38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3c:	4825      	ldr	r0, [pc, #148]	; (800dbd4 <_svfiprintf_r+0x1ec>)
 800db3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db42:	2206      	movs	r2, #6
 800db44:	f7f2 fb5c 	bl	8000200 <memchr>
 800db48:	2800      	cmp	r0, #0
 800db4a:	d038      	beq.n	800dbbe <_svfiprintf_r+0x1d6>
 800db4c:	4b22      	ldr	r3, [pc, #136]	; (800dbd8 <_svfiprintf_r+0x1f0>)
 800db4e:	bb1b      	cbnz	r3, 800db98 <_svfiprintf_r+0x1b0>
 800db50:	9b03      	ldr	r3, [sp, #12]
 800db52:	3307      	adds	r3, #7
 800db54:	f023 0307 	bic.w	r3, r3, #7
 800db58:	3308      	adds	r3, #8
 800db5a:	9303      	str	r3, [sp, #12]
 800db5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db5e:	4433      	add	r3, r6
 800db60:	9309      	str	r3, [sp, #36]	; 0x24
 800db62:	e768      	b.n	800da36 <_svfiprintf_r+0x4e>
 800db64:	fb0c 3202 	mla	r2, ip, r2, r3
 800db68:	460c      	mov	r4, r1
 800db6a:	2001      	movs	r0, #1
 800db6c:	e7a6      	b.n	800dabc <_svfiprintf_r+0xd4>
 800db6e:	2300      	movs	r3, #0
 800db70:	3401      	adds	r4, #1
 800db72:	9305      	str	r3, [sp, #20]
 800db74:	4619      	mov	r1, r3
 800db76:	f04f 0c0a 	mov.w	ip, #10
 800db7a:	4620      	mov	r0, r4
 800db7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db80:	3a30      	subs	r2, #48	; 0x30
 800db82:	2a09      	cmp	r2, #9
 800db84:	d903      	bls.n	800db8e <_svfiprintf_r+0x1a6>
 800db86:	2b00      	cmp	r3, #0
 800db88:	d0c6      	beq.n	800db18 <_svfiprintf_r+0x130>
 800db8a:	9105      	str	r1, [sp, #20]
 800db8c:	e7c4      	b.n	800db18 <_svfiprintf_r+0x130>
 800db8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800db92:	4604      	mov	r4, r0
 800db94:	2301      	movs	r3, #1
 800db96:	e7f0      	b.n	800db7a <_svfiprintf_r+0x192>
 800db98:	ab03      	add	r3, sp, #12
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	462a      	mov	r2, r5
 800db9e:	4b0f      	ldr	r3, [pc, #60]	; (800dbdc <_svfiprintf_r+0x1f4>)
 800dba0:	a904      	add	r1, sp, #16
 800dba2:	4638      	mov	r0, r7
 800dba4:	f7fc fe8a 	bl	800a8bc <_printf_float>
 800dba8:	1c42      	adds	r2, r0, #1
 800dbaa:	4606      	mov	r6, r0
 800dbac:	d1d6      	bne.n	800db5c <_svfiprintf_r+0x174>
 800dbae:	89ab      	ldrh	r3, [r5, #12]
 800dbb0:	065b      	lsls	r3, r3, #25
 800dbb2:	f53f af2d 	bmi.w	800da10 <_svfiprintf_r+0x28>
 800dbb6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbb8:	b01d      	add	sp, #116	; 0x74
 800dbba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbbe:	ab03      	add	r3, sp, #12
 800dbc0:	9300      	str	r3, [sp, #0]
 800dbc2:	462a      	mov	r2, r5
 800dbc4:	4b05      	ldr	r3, [pc, #20]	; (800dbdc <_svfiprintf_r+0x1f4>)
 800dbc6:	a904      	add	r1, sp, #16
 800dbc8:	4638      	mov	r0, r7
 800dbca:	f7fd f91b 	bl	800ae04 <_printf_i>
 800dbce:	e7eb      	b.n	800dba8 <_svfiprintf_r+0x1c0>
 800dbd0:	0800f57e 	.word	0x0800f57e
 800dbd4:	0800f588 	.word	0x0800f588
 800dbd8:	0800a8bd 	.word	0x0800a8bd
 800dbdc:	0800d933 	.word	0x0800d933
 800dbe0:	0800f584 	.word	0x0800f584

0800dbe4 <malloc>:
 800dbe4:	4b02      	ldr	r3, [pc, #8]	; (800dbf0 <malloc+0xc>)
 800dbe6:	4601      	mov	r1, r0
 800dbe8:	6818      	ldr	r0, [r3, #0]
 800dbea:	f000 b823 	b.w	800dc34 <_malloc_r>
 800dbee:	bf00      	nop
 800dbf0:	2000025c 	.word	0x2000025c

0800dbf4 <sbrk_aligned>:
 800dbf4:	b570      	push	{r4, r5, r6, lr}
 800dbf6:	4e0e      	ldr	r6, [pc, #56]	; (800dc30 <sbrk_aligned+0x3c>)
 800dbf8:	460c      	mov	r4, r1
 800dbfa:	6831      	ldr	r1, [r6, #0]
 800dbfc:	4605      	mov	r5, r0
 800dbfe:	b911      	cbnz	r1, 800dc06 <sbrk_aligned+0x12>
 800dc00:	f000 fede 	bl	800e9c0 <_sbrk_r>
 800dc04:	6030      	str	r0, [r6, #0]
 800dc06:	4621      	mov	r1, r4
 800dc08:	4628      	mov	r0, r5
 800dc0a:	f000 fed9 	bl	800e9c0 <_sbrk_r>
 800dc0e:	1c43      	adds	r3, r0, #1
 800dc10:	d00a      	beq.n	800dc28 <sbrk_aligned+0x34>
 800dc12:	1cc4      	adds	r4, r0, #3
 800dc14:	f024 0403 	bic.w	r4, r4, #3
 800dc18:	42a0      	cmp	r0, r4
 800dc1a:	d007      	beq.n	800dc2c <sbrk_aligned+0x38>
 800dc1c:	1a21      	subs	r1, r4, r0
 800dc1e:	4628      	mov	r0, r5
 800dc20:	f000 fece 	bl	800e9c0 <_sbrk_r>
 800dc24:	3001      	adds	r0, #1
 800dc26:	d101      	bne.n	800dc2c <sbrk_aligned+0x38>
 800dc28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800dc2c:	4620      	mov	r0, r4
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}
 800dc30:	200016f8 	.word	0x200016f8

0800dc34 <_malloc_r>:
 800dc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc38:	1ccd      	adds	r5, r1, #3
 800dc3a:	f025 0503 	bic.w	r5, r5, #3
 800dc3e:	3508      	adds	r5, #8
 800dc40:	2d0c      	cmp	r5, #12
 800dc42:	bf38      	it	cc
 800dc44:	250c      	movcc	r5, #12
 800dc46:	2d00      	cmp	r5, #0
 800dc48:	4607      	mov	r7, r0
 800dc4a:	db01      	blt.n	800dc50 <_malloc_r+0x1c>
 800dc4c:	42a9      	cmp	r1, r5
 800dc4e:	d905      	bls.n	800dc5c <_malloc_r+0x28>
 800dc50:	230c      	movs	r3, #12
 800dc52:	603b      	str	r3, [r7, #0]
 800dc54:	2600      	movs	r6, #0
 800dc56:	4630      	mov	r0, r6
 800dc58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dd30 <_malloc_r+0xfc>
 800dc60:	f000 f928 	bl	800deb4 <__malloc_lock>
 800dc64:	f8d8 3000 	ldr.w	r3, [r8]
 800dc68:	461c      	mov	r4, r3
 800dc6a:	bb5c      	cbnz	r4, 800dcc4 <_malloc_r+0x90>
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	4638      	mov	r0, r7
 800dc70:	f7ff ffc0 	bl	800dbf4 <sbrk_aligned>
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	4604      	mov	r4, r0
 800dc78:	d155      	bne.n	800dd26 <_malloc_r+0xf2>
 800dc7a:	f8d8 4000 	ldr.w	r4, [r8]
 800dc7e:	4626      	mov	r6, r4
 800dc80:	2e00      	cmp	r6, #0
 800dc82:	d145      	bne.n	800dd10 <_malloc_r+0xdc>
 800dc84:	2c00      	cmp	r4, #0
 800dc86:	d048      	beq.n	800dd1a <_malloc_r+0xe6>
 800dc88:	6823      	ldr	r3, [r4, #0]
 800dc8a:	4631      	mov	r1, r6
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	eb04 0903 	add.w	r9, r4, r3
 800dc92:	f000 fe95 	bl	800e9c0 <_sbrk_r>
 800dc96:	4581      	cmp	r9, r0
 800dc98:	d13f      	bne.n	800dd1a <_malloc_r+0xe6>
 800dc9a:	6821      	ldr	r1, [r4, #0]
 800dc9c:	1a6d      	subs	r5, r5, r1
 800dc9e:	4629      	mov	r1, r5
 800dca0:	4638      	mov	r0, r7
 800dca2:	f7ff ffa7 	bl	800dbf4 <sbrk_aligned>
 800dca6:	3001      	adds	r0, #1
 800dca8:	d037      	beq.n	800dd1a <_malloc_r+0xe6>
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	442b      	add	r3, r5
 800dcae:	6023      	str	r3, [r4, #0]
 800dcb0:	f8d8 3000 	ldr.w	r3, [r8]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d038      	beq.n	800dd2a <_malloc_r+0xf6>
 800dcb8:	685a      	ldr	r2, [r3, #4]
 800dcba:	42a2      	cmp	r2, r4
 800dcbc:	d12b      	bne.n	800dd16 <_malloc_r+0xe2>
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	605a      	str	r2, [r3, #4]
 800dcc2:	e00f      	b.n	800dce4 <_malloc_r+0xb0>
 800dcc4:	6822      	ldr	r2, [r4, #0]
 800dcc6:	1b52      	subs	r2, r2, r5
 800dcc8:	d41f      	bmi.n	800dd0a <_malloc_r+0xd6>
 800dcca:	2a0b      	cmp	r2, #11
 800dccc:	d917      	bls.n	800dcfe <_malloc_r+0xca>
 800dcce:	1961      	adds	r1, r4, r5
 800dcd0:	42a3      	cmp	r3, r4
 800dcd2:	6025      	str	r5, [r4, #0]
 800dcd4:	bf18      	it	ne
 800dcd6:	6059      	strne	r1, [r3, #4]
 800dcd8:	6863      	ldr	r3, [r4, #4]
 800dcda:	bf08      	it	eq
 800dcdc:	f8c8 1000 	streq.w	r1, [r8]
 800dce0:	5162      	str	r2, [r4, r5]
 800dce2:	604b      	str	r3, [r1, #4]
 800dce4:	4638      	mov	r0, r7
 800dce6:	f104 060b 	add.w	r6, r4, #11
 800dcea:	f000 f8e9 	bl	800dec0 <__malloc_unlock>
 800dcee:	f026 0607 	bic.w	r6, r6, #7
 800dcf2:	1d23      	adds	r3, r4, #4
 800dcf4:	1af2      	subs	r2, r6, r3
 800dcf6:	d0ae      	beq.n	800dc56 <_malloc_r+0x22>
 800dcf8:	1b9b      	subs	r3, r3, r6
 800dcfa:	50a3      	str	r3, [r4, r2]
 800dcfc:	e7ab      	b.n	800dc56 <_malloc_r+0x22>
 800dcfe:	42a3      	cmp	r3, r4
 800dd00:	6862      	ldr	r2, [r4, #4]
 800dd02:	d1dd      	bne.n	800dcc0 <_malloc_r+0x8c>
 800dd04:	f8c8 2000 	str.w	r2, [r8]
 800dd08:	e7ec      	b.n	800dce4 <_malloc_r+0xb0>
 800dd0a:	4623      	mov	r3, r4
 800dd0c:	6864      	ldr	r4, [r4, #4]
 800dd0e:	e7ac      	b.n	800dc6a <_malloc_r+0x36>
 800dd10:	4634      	mov	r4, r6
 800dd12:	6876      	ldr	r6, [r6, #4]
 800dd14:	e7b4      	b.n	800dc80 <_malloc_r+0x4c>
 800dd16:	4613      	mov	r3, r2
 800dd18:	e7cc      	b.n	800dcb4 <_malloc_r+0x80>
 800dd1a:	230c      	movs	r3, #12
 800dd1c:	603b      	str	r3, [r7, #0]
 800dd1e:	4638      	mov	r0, r7
 800dd20:	f000 f8ce 	bl	800dec0 <__malloc_unlock>
 800dd24:	e797      	b.n	800dc56 <_malloc_r+0x22>
 800dd26:	6025      	str	r5, [r4, #0]
 800dd28:	e7dc      	b.n	800dce4 <_malloc_r+0xb0>
 800dd2a:	605b      	str	r3, [r3, #4]
 800dd2c:	deff      	udf	#255	; 0xff
 800dd2e:	bf00      	nop
 800dd30:	200016f4 	.word	0x200016f4

0800dd34 <__ascii_mbtowc>:
 800dd34:	b082      	sub	sp, #8
 800dd36:	b901      	cbnz	r1, 800dd3a <__ascii_mbtowc+0x6>
 800dd38:	a901      	add	r1, sp, #4
 800dd3a:	b142      	cbz	r2, 800dd4e <__ascii_mbtowc+0x1a>
 800dd3c:	b14b      	cbz	r3, 800dd52 <__ascii_mbtowc+0x1e>
 800dd3e:	7813      	ldrb	r3, [r2, #0]
 800dd40:	600b      	str	r3, [r1, #0]
 800dd42:	7812      	ldrb	r2, [r2, #0]
 800dd44:	1e10      	subs	r0, r2, #0
 800dd46:	bf18      	it	ne
 800dd48:	2001      	movne	r0, #1
 800dd4a:	b002      	add	sp, #8
 800dd4c:	4770      	bx	lr
 800dd4e:	4610      	mov	r0, r2
 800dd50:	e7fb      	b.n	800dd4a <__ascii_mbtowc+0x16>
 800dd52:	f06f 0001 	mvn.w	r0, #1
 800dd56:	e7f8      	b.n	800dd4a <__ascii_mbtowc+0x16>

0800dd58 <__sflush_r>:
 800dd58:	898a      	ldrh	r2, [r1, #12]
 800dd5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd5e:	4605      	mov	r5, r0
 800dd60:	0710      	lsls	r0, r2, #28
 800dd62:	460c      	mov	r4, r1
 800dd64:	d458      	bmi.n	800de18 <__sflush_r+0xc0>
 800dd66:	684b      	ldr	r3, [r1, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	dc05      	bgt.n	800dd78 <__sflush_r+0x20>
 800dd6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	dc02      	bgt.n	800dd78 <__sflush_r+0x20>
 800dd72:	2000      	movs	r0, #0
 800dd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd7a:	2e00      	cmp	r6, #0
 800dd7c:	d0f9      	beq.n	800dd72 <__sflush_r+0x1a>
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd84:	682f      	ldr	r7, [r5, #0]
 800dd86:	6a21      	ldr	r1, [r4, #32]
 800dd88:	602b      	str	r3, [r5, #0]
 800dd8a:	d032      	beq.n	800ddf2 <__sflush_r+0x9a>
 800dd8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd8e:	89a3      	ldrh	r3, [r4, #12]
 800dd90:	075a      	lsls	r2, r3, #29
 800dd92:	d505      	bpl.n	800dda0 <__sflush_r+0x48>
 800dd94:	6863      	ldr	r3, [r4, #4]
 800dd96:	1ac0      	subs	r0, r0, r3
 800dd98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd9a:	b10b      	cbz	r3, 800dda0 <__sflush_r+0x48>
 800dd9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd9e:	1ac0      	subs	r0, r0, r3
 800dda0:	2300      	movs	r3, #0
 800dda2:	4602      	mov	r2, r0
 800dda4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dda6:	6a21      	ldr	r1, [r4, #32]
 800dda8:	4628      	mov	r0, r5
 800ddaa:	47b0      	blx	r6
 800ddac:	1c43      	adds	r3, r0, #1
 800ddae:	89a3      	ldrh	r3, [r4, #12]
 800ddb0:	d106      	bne.n	800ddc0 <__sflush_r+0x68>
 800ddb2:	6829      	ldr	r1, [r5, #0]
 800ddb4:	291d      	cmp	r1, #29
 800ddb6:	d82b      	bhi.n	800de10 <__sflush_r+0xb8>
 800ddb8:	4a29      	ldr	r2, [pc, #164]	; (800de60 <__sflush_r+0x108>)
 800ddba:	410a      	asrs	r2, r1
 800ddbc:	07d6      	lsls	r6, r2, #31
 800ddbe:	d427      	bmi.n	800de10 <__sflush_r+0xb8>
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	6062      	str	r2, [r4, #4]
 800ddc4:	04d9      	lsls	r1, r3, #19
 800ddc6:	6922      	ldr	r2, [r4, #16]
 800ddc8:	6022      	str	r2, [r4, #0]
 800ddca:	d504      	bpl.n	800ddd6 <__sflush_r+0x7e>
 800ddcc:	1c42      	adds	r2, r0, #1
 800ddce:	d101      	bne.n	800ddd4 <__sflush_r+0x7c>
 800ddd0:	682b      	ldr	r3, [r5, #0]
 800ddd2:	b903      	cbnz	r3, 800ddd6 <__sflush_r+0x7e>
 800ddd4:	6560      	str	r0, [r4, #84]	; 0x54
 800ddd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddd8:	602f      	str	r7, [r5, #0]
 800ddda:	2900      	cmp	r1, #0
 800dddc:	d0c9      	beq.n	800dd72 <__sflush_r+0x1a>
 800ddde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dde2:	4299      	cmp	r1, r3
 800dde4:	d002      	beq.n	800ddec <__sflush_r+0x94>
 800dde6:	4628      	mov	r0, r5
 800dde8:	f7ff fa00 	bl	800d1ec <_free_r>
 800ddec:	2000      	movs	r0, #0
 800ddee:	6360      	str	r0, [r4, #52]	; 0x34
 800ddf0:	e7c0      	b.n	800dd74 <__sflush_r+0x1c>
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	47b0      	blx	r6
 800ddf8:	1c41      	adds	r1, r0, #1
 800ddfa:	d1c8      	bne.n	800dd8e <__sflush_r+0x36>
 800ddfc:	682b      	ldr	r3, [r5, #0]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d0c5      	beq.n	800dd8e <__sflush_r+0x36>
 800de02:	2b1d      	cmp	r3, #29
 800de04:	d001      	beq.n	800de0a <__sflush_r+0xb2>
 800de06:	2b16      	cmp	r3, #22
 800de08:	d101      	bne.n	800de0e <__sflush_r+0xb6>
 800de0a:	602f      	str	r7, [r5, #0]
 800de0c:	e7b1      	b.n	800dd72 <__sflush_r+0x1a>
 800de0e:	89a3      	ldrh	r3, [r4, #12]
 800de10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de14:	81a3      	strh	r3, [r4, #12]
 800de16:	e7ad      	b.n	800dd74 <__sflush_r+0x1c>
 800de18:	690f      	ldr	r7, [r1, #16]
 800de1a:	2f00      	cmp	r7, #0
 800de1c:	d0a9      	beq.n	800dd72 <__sflush_r+0x1a>
 800de1e:	0793      	lsls	r3, r2, #30
 800de20:	680e      	ldr	r6, [r1, #0]
 800de22:	bf08      	it	eq
 800de24:	694b      	ldreq	r3, [r1, #20]
 800de26:	600f      	str	r7, [r1, #0]
 800de28:	bf18      	it	ne
 800de2a:	2300      	movne	r3, #0
 800de2c:	eba6 0807 	sub.w	r8, r6, r7
 800de30:	608b      	str	r3, [r1, #8]
 800de32:	f1b8 0f00 	cmp.w	r8, #0
 800de36:	dd9c      	ble.n	800dd72 <__sflush_r+0x1a>
 800de38:	6a21      	ldr	r1, [r4, #32]
 800de3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de3c:	4643      	mov	r3, r8
 800de3e:	463a      	mov	r2, r7
 800de40:	4628      	mov	r0, r5
 800de42:	47b0      	blx	r6
 800de44:	2800      	cmp	r0, #0
 800de46:	dc06      	bgt.n	800de56 <__sflush_r+0xfe>
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de4e:	81a3      	strh	r3, [r4, #12]
 800de50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de54:	e78e      	b.n	800dd74 <__sflush_r+0x1c>
 800de56:	4407      	add	r7, r0
 800de58:	eba8 0800 	sub.w	r8, r8, r0
 800de5c:	e7e9      	b.n	800de32 <__sflush_r+0xda>
 800de5e:	bf00      	nop
 800de60:	dfbffffe 	.word	0xdfbffffe

0800de64 <_fflush_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	690b      	ldr	r3, [r1, #16]
 800de68:	4605      	mov	r5, r0
 800de6a:	460c      	mov	r4, r1
 800de6c:	b913      	cbnz	r3, 800de74 <_fflush_r+0x10>
 800de6e:	2500      	movs	r5, #0
 800de70:	4628      	mov	r0, r5
 800de72:	bd38      	pop	{r3, r4, r5, pc}
 800de74:	b118      	cbz	r0, 800de7e <_fflush_r+0x1a>
 800de76:	6a03      	ldr	r3, [r0, #32]
 800de78:	b90b      	cbnz	r3, 800de7e <_fflush_r+0x1a>
 800de7a:	f7fd fba1 	bl	800b5c0 <__sinit>
 800de7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d0f3      	beq.n	800de6e <_fflush_r+0xa>
 800de86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de88:	07d0      	lsls	r0, r2, #31
 800de8a:	d404      	bmi.n	800de96 <_fflush_r+0x32>
 800de8c:	0599      	lsls	r1, r3, #22
 800de8e:	d402      	bmi.n	800de96 <_fflush_r+0x32>
 800de90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de92:	f7fe fb10 	bl	800c4b6 <__retarget_lock_acquire_recursive>
 800de96:	4628      	mov	r0, r5
 800de98:	4621      	mov	r1, r4
 800de9a:	f7ff ff5d 	bl	800dd58 <__sflush_r>
 800de9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dea0:	07da      	lsls	r2, r3, #31
 800dea2:	4605      	mov	r5, r0
 800dea4:	d4e4      	bmi.n	800de70 <_fflush_r+0xc>
 800dea6:	89a3      	ldrh	r3, [r4, #12]
 800dea8:	059b      	lsls	r3, r3, #22
 800deaa:	d4e1      	bmi.n	800de70 <_fflush_r+0xc>
 800deac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800deae:	f7fe fb03 	bl	800c4b8 <__retarget_lock_release_recursive>
 800deb2:	e7dd      	b.n	800de70 <_fflush_r+0xc>

0800deb4 <__malloc_lock>:
 800deb4:	4801      	ldr	r0, [pc, #4]	; (800debc <__malloc_lock+0x8>)
 800deb6:	f7fe bafe 	b.w	800c4b6 <__retarget_lock_acquire_recursive>
 800deba:	bf00      	nop
 800debc:	200016f0 	.word	0x200016f0

0800dec0 <__malloc_unlock>:
 800dec0:	4801      	ldr	r0, [pc, #4]	; (800dec8 <__malloc_unlock+0x8>)
 800dec2:	f7fe baf9 	b.w	800c4b8 <__retarget_lock_release_recursive>
 800dec6:	bf00      	nop
 800dec8:	200016f0 	.word	0x200016f0

0800decc <_Balloc>:
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	69c6      	ldr	r6, [r0, #28]
 800ded0:	4604      	mov	r4, r0
 800ded2:	460d      	mov	r5, r1
 800ded4:	b976      	cbnz	r6, 800def4 <_Balloc+0x28>
 800ded6:	2010      	movs	r0, #16
 800ded8:	f7ff fe84 	bl	800dbe4 <malloc>
 800dedc:	4602      	mov	r2, r0
 800dede:	61e0      	str	r0, [r4, #28]
 800dee0:	b920      	cbnz	r0, 800deec <_Balloc+0x20>
 800dee2:	4b18      	ldr	r3, [pc, #96]	; (800df44 <_Balloc+0x78>)
 800dee4:	4818      	ldr	r0, [pc, #96]	; (800df48 <_Balloc+0x7c>)
 800dee6:	216b      	movs	r1, #107	; 0x6b
 800dee8:	f000 fd8c 	bl	800ea04 <__assert_func>
 800deec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800def0:	6006      	str	r6, [r0, #0]
 800def2:	60c6      	str	r6, [r0, #12]
 800def4:	69e6      	ldr	r6, [r4, #28]
 800def6:	68f3      	ldr	r3, [r6, #12]
 800def8:	b183      	cbz	r3, 800df1c <_Balloc+0x50>
 800defa:	69e3      	ldr	r3, [r4, #28]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800df02:	b9b8      	cbnz	r0, 800df34 <_Balloc+0x68>
 800df04:	2101      	movs	r1, #1
 800df06:	fa01 f605 	lsl.w	r6, r1, r5
 800df0a:	1d72      	adds	r2, r6, #5
 800df0c:	0092      	lsls	r2, r2, #2
 800df0e:	4620      	mov	r0, r4
 800df10:	f000 fd96 	bl	800ea40 <_calloc_r>
 800df14:	b160      	cbz	r0, 800df30 <_Balloc+0x64>
 800df16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800df1a:	e00e      	b.n	800df3a <_Balloc+0x6e>
 800df1c:	2221      	movs	r2, #33	; 0x21
 800df1e:	2104      	movs	r1, #4
 800df20:	4620      	mov	r0, r4
 800df22:	f000 fd8d 	bl	800ea40 <_calloc_r>
 800df26:	69e3      	ldr	r3, [r4, #28]
 800df28:	60f0      	str	r0, [r6, #12]
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d1e4      	bne.n	800defa <_Balloc+0x2e>
 800df30:	2000      	movs	r0, #0
 800df32:	bd70      	pop	{r4, r5, r6, pc}
 800df34:	6802      	ldr	r2, [r0, #0]
 800df36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800df3a:	2300      	movs	r3, #0
 800df3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800df40:	e7f7      	b.n	800df32 <_Balloc+0x66>
 800df42:	bf00      	nop
 800df44:	0800f49e 	.word	0x0800f49e
 800df48:	0800f58f 	.word	0x0800f58f

0800df4c <_Bfree>:
 800df4c:	b570      	push	{r4, r5, r6, lr}
 800df4e:	69c6      	ldr	r6, [r0, #28]
 800df50:	4605      	mov	r5, r0
 800df52:	460c      	mov	r4, r1
 800df54:	b976      	cbnz	r6, 800df74 <_Bfree+0x28>
 800df56:	2010      	movs	r0, #16
 800df58:	f7ff fe44 	bl	800dbe4 <malloc>
 800df5c:	4602      	mov	r2, r0
 800df5e:	61e8      	str	r0, [r5, #28]
 800df60:	b920      	cbnz	r0, 800df6c <_Bfree+0x20>
 800df62:	4b09      	ldr	r3, [pc, #36]	; (800df88 <_Bfree+0x3c>)
 800df64:	4809      	ldr	r0, [pc, #36]	; (800df8c <_Bfree+0x40>)
 800df66:	218f      	movs	r1, #143	; 0x8f
 800df68:	f000 fd4c 	bl	800ea04 <__assert_func>
 800df6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df70:	6006      	str	r6, [r0, #0]
 800df72:	60c6      	str	r6, [r0, #12]
 800df74:	b13c      	cbz	r4, 800df86 <_Bfree+0x3a>
 800df76:	69eb      	ldr	r3, [r5, #28]
 800df78:	6862      	ldr	r2, [r4, #4]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df80:	6021      	str	r1, [r4, #0]
 800df82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df86:	bd70      	pop	{r4, r5, r6, pc}
 800df88:	0800f49e 	.word	0x0800f49e
 800df8c:	0800f58f 	.word	0x0800f58f

0800df90 <__multadd>:
 800df90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df94:	690d      	ldr	r5, [r1, #16]
 800df96:	4607      	mov	r7, r0
 800df98:	460c      	mov	r4, r1
 800df9a:	461e      	mov	r6, r3
 800df9c:	f101 0c14 	add.w	ip, r1, #20
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	f8dc 3000 	ldr.w	r3, [ip]
 800dfa6:	b299      	uxth	r1, r3
 800dfa8:	fb02 6101 	mla	r1, r2, r1, r6
 800dfac:	0c1e      	lsrs	r6, r3, #16
 800dfae:	0c0b      	lsrs	r3, r1, #16
 800dfb0:	fb02 3306 	mla	r3, r2, r6, r3
 800dfb4:	b289      	uxth	r1, r1
 800dfb6:	3001      	adds	r0, #1
 800dfb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dfbc:	4285      	cmp	r5, r0
 800dfbe:	f84c 1b04 	str.w	r1, [ip], #4
 800dfc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dfc6:	dcec      	bgt.n	800dfa2 <__multadd+0x12>
 800dfc8:	b30e      	cbz	r6, 800e00e <__multadd+0x7e>
 800dfca:	68a3      	ldr	r3, [r4, #8]
 800dfcc:	42ab      	cmp	r3, r5
 800dfce:	dc19      	bgt.n	800e004 <__multadd+0x74>
 800dfd0:	6861      	ldr	r1, [r4, #4]
 800dfd2:	4638      	mov	r0, r7
 800dfd4:	3101      	adds	r1, #1
 800dfd6:	f7ff ff79 	bl	800decc <_Balloc>
 800dfda:	4680      	mov	r8, r0
 800dfdc:	b928      	cbnz	r0, 800dfea <__multadd+0x5a>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	4b0c      	ldr	r3, [pc, #48]	; (800e014 <__multadd+0x84>)
 800dfe2:	480d      	ldr	r0, [pc, #52]	; (800e018 <__multadd+0x88>)
 800dfe4:	21ba      	movs	r1, #186	; 0xba
 800dfe6:	f000 fd0d 	bl	800ea04 <__assert_func>
 800dfea:	6922      	ldr	r2, [r4, #16]
 800dfec:	3202      	adds	r2, #2
 800dfee:	f104 010c 	add.w	r1, r4, #12
 800dff2:	0092      	lsls	r2, r2, #2
 800dff4:	300c      	adds	r0, #12
 800dff6:	f7fe fa60 	bl	800c4ba <memcpy>
 800dffa:	4621      	mov	r1, r4
 800dffc:	4638      	mov	r0, r7
 800dffe:	f7ff ffa5 	bl	800df4c <_Bfree>
 800e002:	4644      	mov	r4, r8
 800e004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e008:	3501      	adds	r5, #1
 800e00a:	615e      	str	r6, [r3, #20]
 800e00c:	6125      	str	r5, [r4, #16]
 800e00e:	4620      	mov	r0, r4
 800e010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e014:	0800f50d 	.word	0x0800f50d
 800e018:	0800f58f 	.word	0x0800f58f

0800e01c <__s2b>:
 800e01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e020:	460c      	mov	r4, r1
 800e022:	4615      	mov	r5, r2
 800e024:	461f      	mov	r7, r3
 800e026:	2209      	movs	r2, #9
 800e028:	3308      	adds	r3, #8
 800e02a:	4606      	mov	r6, r0
 800e02c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e030:	2100      	movs	r1, #0
 800e032:	2201      	movs	r2, #1
 800e034:	429a      	cmp	r2, r3
 800e036:	db09      	blt.n	800e04c <__s2b+0x30>
 800e038:	4630      	mov	r0, r6
 800e03a:	f7ff ff47 	bl	800decc <_Balloc>
 800e03e:	b940      	cbnz	r0, 800e052 <__s2b+0x36>
 800e040:	4602      	mov	r2, r0
 800e042:	4b19      	ldr	r3, [pc, #100]	; (800e0a8 <__s2b+0x8c>)
 800e044:	4819      	ldr	r0, [pc, #100]	; (800e0ac <__s2b+0x90>)
 800e046:	21d3      	movs	r1, #211	; 0xd3
 800e048:	f000 fcdc 	bl	800ea04 <__assert_func>
 800e04c:	0052      	lsls	r2, r2, #1
 800e04e:	3101      	adds	r1, #1
 800e050:	e7f0      	b.n	800e034 <__s2b+0x18>
 800e052:	9b08      	ldr	r3, [sp, #32]
 800e054:	6143      	str	r3, [r0, #20]
 800e056:	2d09      	cmp	r5, #9
 800e058:	f04f 0301 	mov.w	r3, #1
 800e05c:	6103      	str	r3, [r0, #16]
 800e05e:	dd16      	ble.n	800e08e <__s2b+0x72>
 800e060:	f104 0909 	add.w	r9, r4, #9
 800e064:	46c8      	mov	r8, r9
 800e066:	442c      	add	r4, r5
 800e068:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e06c:	4601      	mov	r1, r0
 800e06e:	3b30      	subs	r3, #48	; 0x30
 800e070:	220a      	movs	r2, #10
 800e072:	4630      	mov	r0, r6
 800e074:	f7ff ff8c 	bl	800df90 <__multadd>
 800e078:	45a0      	cmp	r8, r4
 800e07a:	d1f5      	bne.n	800e068 <__s2b+0x4c>
 800e07c:	f1a5 0408 	sub.w	r4, r5, #8
 800e080:	444c      	add	r4, r9
 800e082:	1b2d      	subs	r5, r5, r4
 800e084:	1963      	adds	r3, r4, r5
 800e086:	42bb      	cmp	r3, r7
 800e088:	db04      	blt.n	800e094 <__s2b+0x78>
 800e08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e08e:	340a      	adds	r4, #10
 800e090:	2509      	movs	r5, #9
 800e092:	e7f6      	b.n	800e082 <__s2b+0x66>
 800e094:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e098:	4601      	mov	r1, r0
 800e09a:	3b30      	subs	r3, #48	; 0x30
 800e09c:	220a      	movs	r2, #10
 800e09e:	4630      	mov	r0, r6
 800e0a0:	f7ff ff76 	bl	800df90 <__multadd>
 800e0a4:	e7ee      	b.n	800e084 <__s2b+0x68>
 800e0a6:	bf00      	nop
 800e0a8:	0800f50d 	.word	0x0800f50d
 800e0ac:	0800f58f 	.word	0x0800f58f

0800e0b0 <__hi0bits>:
 800e0b0:	0c03      	lsrs	r3, r0, #16
 800e0b2:	041b      	lsls	r3, r3, #16
 800e0b4:	b9d3      	cbnz	r3, 800e0ec <__hi0bits+0x3c>
 800e0b6:	0400      	lsls	r0, r0, #16
 800e0b8:	2310      	movs	r3, #16
 800e0ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e0be:	bf04      	itt	eq
 800e0c0:	0200      	lsleq	r0, r0, #8
 800e0c2:	3308      	addeq	r3, #8
 800e0c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e0c8:	bf04      	itt	eq
 800e0ca:	0100      	lsleq	r0, r0, #4
 800e0cc:	3304      	addeq	r3, #4
 800e0ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e0d2:	bf04      	itt	eq
 800e0d4:	0080      	lsleq	r0, r0, #2
 800e0d6:	3302      	addeq	r3, #2
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	db05      	blt.n	800e0e8 <__hi0bits+0x38>
 800e0dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e0e0:	f103 0301 	add.w	r3, r3, #1
 800e0e4:	bf08      	it	eq
 800e0e6:	2320      	moveq	r3, #32
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	4770      	bx	lr
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	e7e4      	b.n	800e0ba <__hi0bits+0xa>

0800e0f0 <__lo0bits>:
 800e0f0:	6803      	ldr	r3, [r0, #0]
 800e0f2:	f013 0207 	ands.w	r2, r3, #7
 800e0f6:	d00c      	beq.n	800e112 <__lo0bits+0x22>
 800e0f8:	07d9      	lsls	r1, r3, #31
 800e0fa:	d422      	bmi.n	800e142 <__lo0bits+0x52>
 800e0fc:	079a      	lsls	r2, r3, #30
 800e0fe:	bf49      	itett	mi
 800e100:	085b      	lsrmi	r3, r3, #1
 800e102:	089b      	lsrpl	r3, r3, #2
 800e104:	6003      	strmi	r3, [r0, #0]
 800e106:	2201      	movmi	r2, #1
 800e108:	bf5c      	itt	pl
 800e10a:	6003      	strpl	r3, [r0, #0]
 800e10c:	2202      	movpl	r2, #2
 800e10e:	4610      	mov	r0, r2
 800e110:	4770      	bx	lr
 800e112:	b299      	uxth	r1, r3
 800e114:	b909      	cbnz	r1, 800e11a <__lo0bits+0x2a>
 800e116:	0c1b      	lsrs	r3, r3, #16
 800e118:	2210      	movs	r2, #16
 800e11a:	b2d9      	uxtb	r1, r3
 800e11c:	b909      	cbnz	r1, 800e122 <__lo0bits+0x32>
 800e11e:	3208      	adds	r2, #8
 800e120:	0a1b      	lsrs	r3, r3, #8
 800e122:	0719      	lsls	r1, r3, #28
 800e124:	bf04      	itt	eq
 800e126:	091b      	lsreq	r3, r3, #4
 800e128:	3204      	addeq	r2, #4
 800e12a:	0799      	lsls	r1, r3, #30
 800e12c:	bf04      	itt	eq
 800e12e:	089b      	lsreq	r3, r3, #2
 800e130:	3202      	addeq	r2, #2
 800e132:	07d9      	lsls	r1, r3, #31
 800e134:	d403      	bmi.n	800e13e <__lo0bits+0x4e>
 800e136:	085b      	lsrs	r3, r3, #1
 800e138:	f102 0201 	add.w	r2, r2, #1
 800e13c:	d003      	beq.n	800e146 <__lo0bits+0x56>
 800e13e:	6003      	str	r3, [r0, #0]
 800e140:	e7e5      	b.n	800e10e <__lo0bits+0x1e>
 800e142:	2200      	movs	r2, #0
 800e144:	e7e3      	b.n	800e10e <__lo0bits+0x1e>
 800e146:	2220      	movs	r2, #32
 800e148:	e7e1      	b.n	800e10e <__lo0bits+0x1e>
	...

0800e14c <__i2b>:
 800e14c:	b510      	push	{r4, lr}
 800e14e:	460c      	mov	r4, r1
 800e150:	2101      	movs	r1, #1
 800e152:	f7ff febb 	bl	800decc <_Balloc>
 800e156:	4602      	mov	r2, r0
 800e158:	b928      	cbnz	r0, 800e166 <__i2b+0x1a>
 800e15a:	4b05      	ldr	r3, [pc, #20]	; (800e170 <__i2b+0x24>)
 800e15c:	4805      	ldr	r0, [pc, #20]	; (800e174 <__i2b+0x28>)
 800e15e:	f240 1145 	movw	r1, #325	; 0x145
 800e162:	f000 fc4f 	bl	800ea04 <__assert_func>
 800e166:	2301      	movs	r3, #1
 800e168:	6144      	str	r4, [r0, #20]
 800e16a:	6103      	str	r3, [r0, #16]
 800e16c:	bd10      	pop	{r4, pc}
 800e16e:	bf00      	nop
 800e170:	0800f50d 	.word	0x0800f50d
 800e174:	0800f58f 	.word	0x0800f58f

0800e178 <__multiply>:
 800e178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17c:	4691      	mov	r9, r2
 800e17e:	690a      	ldr	r2, [r1, #16]
 800e180:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e184:	429a      	cmp	r2, r3
 800e186:	bfb8      	it	lt
 800e188:	460b      	movlt	r3, r1
 800e18a:	460c      	mov	r4, r1
 800e18c:	bfbc      	itt	lt
 800e18e:	464c      	movlt	r4, r9
 800e190:	4699      	movlt	r9, r3
 800e192:	6927      	ldr	r7, [r4, #16]
 800e194:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e198:	68a3      	ldr	r3, [r4, #8]
 800e19a:	6861      	ldr	r1, [r4, #4]
 800e19c:	eb07 060a 	add.w	r6, r7, sl
 800e1a0:	42b3      	cmp	r3, r6
 800e1a2:	b085      	sub	sp, #20
 800e1a4:	bfb8      	it	lt
 800e1a6:	3101      	addlt	r1, #1
 800e1a8:	f7ff fe90 	bl	800decc <_Balloc>
 800e1ac:	b930      	cbnz	r0, 800e1bc <__multiply+0x44>
 800e1ae:	4602      	mov	r2, r0
 800e1b0:	4b44      	ldr	r3, [pc, #272]	; (800e2c4 <__multiply+0x14c>)
 800e1b2:	4845      	ldr	r0, [pc, #276]	; (800e2c8 <__multiply+0x150>)
 800e1b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e1b8:	f000 fc24 	bl	800ea04 <__assert_func>
 800e1bc:	f100 0514 	add.w	r5, r0, #20
 800e1c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e1c4:	462b      	mov	r3, r5
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	4543      	cmp	r3, r8
 800e1ca:	d321      	bcc.n	800e210 <__multiply+0x98>
 800e1cc:	f104 0314 	add.w	r3, r4, #20
 800e1d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e1d4:	f109 0314 	add.w	r3, r9, #20
 800e1d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e1dc:	9202      	str	r2, [sp, #8]
 800e1de:	1b3a      	subs	r2, r7, r4
 800e1e0:	3a15      	subs	r2, #21
 800e1e2:	f022 0203 	bic.w	r2, r2, #3
 800e1e6:	3204      	adds	r2, #4
 800e1e8:	f104 0115 	add.w	r1, r4, #21
 800e1ec:	428f      	cmp	r7, r1
 800e1ee:	bf38      	it	cc
 800e1f0:	2204      	movcc	r2, #4
 800e1f2:	9201      	str	r2, [sp, #4]
 800e1f4:	9a02      	ldr	r2, [sp, #8]
 800e1f6:	9303      	str	r3, [sp, #12]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d80c      	bhi.n	800e216 <__multiply+0x9e>
 800e1fc:	2e00      	cmp	r6, #0
 800e1fe:	dd03      	ble.n	800e208 <__multiply+0x90>
 800e200:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e204:	2b00      	cmp	r3, #0
 800e206:	d05b      	beq.n	800e2c0 <__multiply+0x148>
 800e208:	6106      	str	r6, [r0, #16]
 800e20a:	b005      	add	sp, #20
 800e20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e210:	f843 2b04 	str.w	r2, [r3], #4
 800e214:	e7d8      	b.n	800e1c8 <__multiply+0x50>
 800e216:	f8b3 a000 	ldrh.w	sl, [r3]
 800e21a:	f1ba 0f00 	cmp.w	sl, #0
 800e21e:	d024      	beq.n	800e26a <__multiply+0xf2>
 800e220:	f104 0e14 	add.w	lr, r4, #20
 800e224:	46a9      	mov	r9, r5
 800e226:	f04f 0c00 	mov.w	ip, #0
 800e22a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e22e:	f8d9 1000 	ldr.w	r1, [r9]
 800e232:	fa1f fb82 	uxth.w	fp, r2
 800e236:	b289      	uxth	r1, r1
 800e238:	fb0a 110b 	mla	r1, sl, fp, r1
 800e23c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e240:	f8d9 2000 	ldr.w	r2, [r9]
 800e244:	4461      	add	r1, ip
 800e246:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e24a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e24e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e252:	b289      	uxth	r1, r1
 800e254:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e258:	4577      	cmp	r7, lr
 800e25a:	f849 1b04 	str.w	r1, [r9], #4
 800e25e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e262:	d8e2      	bhi.n	800e22a <__multiply+0xb2>
 800e264:	9a01      	ldr	r2, [sp, #4]
 800e266:	f845 c002 	str.w	ip, [r5, r2]
 800e26a:	9a03      	ldr	r2, [sp, #12]
 800e26c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e270:	3304      	adds	r3, #4
 800e272:	f1b9 0f00 	cmp.w	r9, #0
 800e276:	d021      	beq.n	800e2bc <__multiply+0x144>
 800e278:	6829      	ldr	r1, [r5, #0]
 800e27a:	f104 0c14 	add.w	ip, r4, #20
 800e27e:	46ae      	mov	lr, r5
 800e280:	f04f 0a00 	mov.w	sl, #0
 800e284:	f8bc b000 	ldrh.w	fp, [ip]
 800e288:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e28c:	fb09 220b 	mla	r2, r9, fp, r2
 800e290:	4452      	add	r2, sl
 800e292:	b289      	uxth	r1, r1
 800e294:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e298:	f84e 1b04 	str.w	r1, [lr], #4
 800e29c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e2a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2a4:	f8be 1000 	ldrh.w	r1, [lr]
 800e2a8:	fb09 110a 	mla	r1, r9, sl, r1
 800e2ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800e2b0:	4567      	cmp	r7, ip
 800e2b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e2b6:	d8e5      	bhi.n	800e284 <__multiply+0x10c>
 800e2b8:	9a01      	ldr	r2, [sp, #4]
 800e2ba:	50a9      	str	r1, [r5, r2]
 800e2bc:	3504      	adds	r5, #4
 800e2be:	e799      	b.n	800e1f4 <__multiply+0x7c>
 800e2c0:	3e01      	subs	r6, #1
 800e2c2:	e79b      	b.n	800e1fc <__multiply+0x84>
 800e2c4:	0800f50d 	.word	0x0800f50d
 800e2c8:	0800f58f 	.word	0x0800f58f

0800e2cc <__pow5mult>:
 800e2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2d0:	4615      	mov	r5, r2
 800e2d2:	f012 0203 	ands.w	r2, r2, #3
 800e2d6:	4606      	mov	r6, r0
 800e2d8:	460f      	mov	r7, r1
 800e2da:	d007      	beq.n	800e2ec <__pow5mult+0x20>
 800e2dc:	4c25      	ldr	r4, [pc, #148]	; (800e374 <__pow5mult+0xa8>)
 800e2de:	3a01      	subs	r2, #1
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e2e6:	f7ff fe53 	bl	800df90 <__multadd>
 800e2ea:	4607      	mov	r7, r0
 800e2ec:	10ad      	asrs	r5, r5, #2
 800e2ee:	d03d      	beq.n	800e36c <__pow5mult+0xa0>
 800e2f0:	69f4      	ldr	r4, [r6, #28]
 800e2f2:	b97c      	cbnz	r4, 800e314 <__pow5mult+0x48>
 800e2f4:	2010      	movs	r0, #16
 800e2f6:	f7ff fc75 	bl	800dbe4 <malloc>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	61f0      	str	r0, [r6, #28]
 800e2fe:	b928      	cbnz	r0, 800e30c <__pow5mult+0x40>
 800e300:	4b1d      	ldr	r3, [pc, #116]	; (800e378 <__pow5mult+0xac>)
 800e302:	481e      	ldr	r0, [pc, #120]	; (800e37c <__pow5mult+0xb0>)
 800e304:	f240 11b3 	movw	r1, #435	; 0x1b3
 800e308:	f000 fb7c 	bl	800ea04 <__assert_func>
 800e30c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e310:	6004      	str	r4, [r0, #0]
 800e312:	60c4      	str	r4, [r0, #12]
 800e314:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e318:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e31c:	b94c      	cbnz	r4, 800e332 <__pow5mult+0x66>
 800e31e:	f240 2171 	movw	r1, #625	; 0x271
 800e322:	4630      	mov	r0, r6
 800e324:	f7ff ff12 	bl	800e14c <__i2b>
 800e328:	2300      	movs	r3, #0
 800e32a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e32e:	4604      	mov	r4, r0
 800e330:	6003      	str	r3, [r0, #0]
 800e332:	f04f 0900 	mov.w	r9, #0
 800e336:	07eb      	lsls	r3, r5, #31
 800e338:	d50a      	bpl.n	800e350 <__pow5mult+0x84>
 800e33a:	4639      	mov	r1, r7
 800e33c:	4622      	mov	r2, r4
 800e33e:	4630      	mov	r0, r6
 800e340:	f7ff ff1a 	bl	800e178 <__multiply>
 800e344:	4639      	mov	r1, r7
 800e346:	4680      	mov	r8, r0
 800e348:	4630      	mov	r0, r6
 800e34a:	f7ff fdff 	bl	800df4c <_Bfree>
 800e34e:	4647      	mov	r7, r8
 800e350:	106d      	asrs	r5, r5, #1
 800e352:	d00b      	beq.n	800e36c <__pow5mult+0xa0>
 800e354:	6820      	ldr	r0, [r4, #0]
 800e356:	b938      	cbnz	r0, 800e368 <__pow5mult+0x9c>
 800e358:	4622      	mov	r2, r4
 800e35a:	4621      	mov	r1, r4
 800e35c:	4630      	mov	r0, r6
 800e35e:	f7ff ff0b 	bl	800e178 <__multiply>
 800e362:	6020      	str	r0, [r4, #0]
 800e364:	f8c0 9000 	str.w	r9, [r0]
 800e368:	4604      	mov	r4, r0
 800e36a:	e7e4      	b.n	800e336 <__pow5mult+0x6a>
 800e36c:	4638      	mov	r0, r7
 800e36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e372:	bf00      	nop
 800e374:	0800f6d8 	.word	0x0800f6d8
 800e378:	0800f49e 	.word	0x0800f49e
 800e37c:	0800f58f 	.word	0x0800f58f

0800e380 <__lshift>:
 800e380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e384:	460c      	mov	r4, r1
 800e386:	6849      	ldr	r1, [r1, #4]
 800e388:	6923      	ldr	r3, [r4, #16]
 800e38a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e38e:	68a3      	ldr	r3, [r4, #8]
 800e390:	4607      	mov	r7, r0
 800e392:	4691      	mov	r9, r2
 800e394:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e398:	f108 0601 	add.w	r6, r8, #1
 800e39c:	42b3      	cmp	r3, r6
 800e39e:	db0b      	blt.n	800e3b8 <__lshift+0x38>
 800e3a0:	4638      	mov	r0, r7
 800e3a2:	f7ff fd93 	bl	800decc <_Balloc>
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	b948      	cbnz	r0, 800e3be <__lshift+0x3e>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	4b28      	ldr	r3, [pc, #160]	; (800e450 <__lshift+0xd0>)
 800e3ae:	4829      	ldr	r0, [pc, #164]	; (800e454 <__lshift+0xd4>)
 800e3b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e3b4:	f000 fb26 	bl	800ea04 <__assert_func>
 800e3b8:	3101      	adds	r1, #1
 800e3ba:	005b      	lsls	r3, r3, #1
 800e3bc:	e7ee      	b.n	800e39c <__lshift+0x1c>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f100 0114 	add.w	r1, r0, #20
 800e3c4:	f100 0210 	add.w	r2, r0, #16
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	4553      	cmp	r3, sl
 800e3cc:	db33      	blt.n	800e436 <__lshift+0xb6>
 800e3ce:	6920      	ldr	r0, [r4, #16]
 800e3d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e3d4:	f104 0314 	add.w	r3, r4, #20
 800e3d8:	f019 091f 	ands.w	r9, r9, #31
 800e3dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e3e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e3e4:	d02b      	beq.n	800e43e <__lshift+0xbe>
 800e3e6:	f1c9 0e20 	rsb	lr, r9, #32
 800e3ea:	468a      	mov	sl, r1
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	6818      	ldr	r0, [r3, #0]
 800e3f0:	fa00 f009 	lsl.w	r0, r0, r9
 800e3f4:	4310      	orrs	r0, r2
 800e3f6:	f84a 0b04 	str.w	r0, [sl], #4
 800e3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3fe:	459c      	cmp	ip, r3
 800e400:	fa22 f20e 	lsr.w	r2, r2, lr
 800e404:	d8f3      	bhi.n	800e3ee <__lshift+0x6e>
 800e406:	ebac 0304 	sub.w	r3, ip, r4
 800e40a:	3b15      	subs	r3, #21
 800e40c:	f023 0303 	bic.w	r3, r3, #3
 800e410:	3304      	adds	r3, #4
 800e412:	f104 0015 	add.w	r0, r4, #21
 800e416:	4584      	cmp	ip, r0
 800e418:	bf38      	it	cc
 800e41a:	2304      	movcc	r3, #4
 800e41c:	50ca      	str	r2, [r1, r3]
 800e41e:	b10a      	cbz	r2, 800e424 <__lshift+0xa4>
 800e420:	f108 0602 	add.w	r6, r8, #2
 800e424:	3e01      	subs	r6, #1
 800e426:	4638      	mov	r0, r7
 800e428:	612e      	str	r6, [r5, #16]
 800e42a:	4621      	mov	r1, r4
 800e42c:	f7ff fd8e 	bl	800df4c <_Bfree>
 800e430:	4628      	mov	r0, r5
 800e432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e436:	f842 0f04 	str.w	r0, [r2, #4]!
 800e43a:	3301      	adds	r3, #1
 800e43c:	e7c5      	b.n	800e3ca <__lshift+0x4a>
 800e43e:	3904      	subs	r1, #4
 800e440:	f853 2b04 	ldr.w	r2, [r3], #4
 800e444:	f841 2f04 	str.w	r2, [r1, #4]!
 800e448:	459c      	cmp	ip, r3
 800e44a:	d8f9      	bhi.n	800e440 <__lshift+0xc0>
 800e44c:	e7ea      	b.n	800e424 <__lshift+0xa4>
 800e44e:	bf00      	nop
 800e450:	0800f50d 	.word	0x0800f50d
 800e454:	0800f58f 	.word	0x0800f58f

0800e458 <__mcmp>:
 800e458:	b530      	push	{r4, r5, lr}
 800e45a:	6902      	ldr	r2, [r0, #16]
 800e45c:	690c      	ldr	r4, [r1, #16]
 800e45e:	1b12      	subs	r2, r2, r4
 800e460:	d10e      	bne.n	800e480 <__mcmp+0x28>
 800e462:	f100 0314 	add.w	r3, r0, #20
 800e466:	3114      	adds	r1, #20
 800e468:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e46c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e470:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e474:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e478:	42a5      	cmp	r5, r4
 800e47a:	d003      	beq.n	800e484 <__mcmp+0x2c>
 800e47c:	d305      	bcc.n	800e48a <__mcmp+0x32>
 800e47e:	2201      	movs	r2, #1
 800e480:	4610      	mov	r0, r2
 800e482:	bd30      	pop	{r4, r5, pc}
 800e484:	4283      	cmp	r3, r0
 800e486:	d3f3      	bcc.n	800e470 <__mcmp+0x18>
 800e488:	e7fa      	b.n	800e480 <__mcmp+0x28>
 800e48a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e48e:	e7f7      	b.n	800e480 <__mcmp+0x28>

0800e490 <__mdiff>:
 800e490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e494:	460c      	mov	r4, r1
 800e496:	4606      	mov	r6, r0
 800e498:	4611      	mov	r1, r2
 800e49a:	4620      	mov	r0, r4
 800e49c:	4690      	mov	r8, r2
 800e49e:	f7ff ffdb 	bl	800e458 <__mcmp>
 800e4a2:	1e05      	subs	r5, r0, #0
 800e4a4:	d110      	bne.n	800e4c8 <__mdiff+0x38>
 800e4a6:	4629      	mov	r1, r5
 800e4a8:	4630      	mov	r0, r6
 800e4aa:	f7ff fd0f 	bl	800decc <_Balloc>
 800e4ae:	b930      	cbnz	r0, 800e4be <__mdiff+0x2e>
 800e4b0:	4b3a      	ldr	r3, [pc, #232]	; (800e59c <__mdiff+0x10c>)
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	f240 2137 	movw	r1, #567	; 0x237
 800e4b8:	4839      	ldr	r0, [pc, #228]	; (800e5a0 <__mdiff+0x110>)
 800e4ba:	f000 faa3 	bl	800ea04 <__assert_func>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e4c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c8:	bfa4      	itt	ge
 800e4ca:	4643      	movge	r3, r8
 800e4cc:	46a0      	movge	r8, r4
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e4d4:	bfa6      	itte	ge
 800e4d6:	461c      	movge	r4, r3
 800e4d8:	2500      	movge	r5, #0
 800e4da:	2501      	movlt	r5, #1
 800e4dc:	f7ff fcf6 	bl	800decc <_Balloc>
 800e4e0:	b920      	cbnz	r0, 800e4ec <__mdiff+0x5c>
 800e4e2:	4b2e      	ldr	r3, [pc, #184]	; (800e59c <__mdiff+0x10c>)
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	f240 2145 	movw	r1, #581	; 0x245
 800e4ea:	e7e5      	b.n	800e4b8 <__mdiff+0x28>
 800e4ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e4f0:	6926      	ldr	r6, [r4, #16]
 800e4f2:	60c5      	str	r5, [r0, #12]
 800e4f4:	f104 0914 	add.w	r9, r4, #20
 800e4f8:	f108 0514 	add.w	r5, r8, #20
 800e4fc:	f100 0e14 	add.w	lr, r0, #20
 800e500:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e504:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e508:	f108 0210 	add.w	r2, r8, #16
 800e50c:	46f2      	mov	sl, lr
 800e50e:	2100      	movs	r1, #0
 800e510:	f859 3b04 	ldr.w	r3, [r9], #4
 800e514:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e518:	fa11 f88b 	uxtah	r8, r1, fp
 800e51c:	b299      	uxth	r1, r3
 800e51e:	0c1b      	lsrs	r3, r3, #16
 800e520:	eba8 0801 	sub.w	r8, r8, r1
 800e524:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e528:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e52c:	fa1f f888 	uxth.w	r8, r8
 800e530:	1419      	asrs	r1, r3, #16
 800e532:	454e      	cmp	r6, r9
 800e534:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e538:	f84a 3b04 	str.w	r3, [sl], #4
 800e53c:	d8e8      	bhi.n	800e510 <__mdiff+0x80>
 800e53e:	1b33      	subs	r3, r6, r4
 800e540:	3b15      	subs	r3, #21
 800e542:	f023 0303 	bic.w	r3, r3, #3
 800e546:	3304      	adds	r3, #4
 800e548:	3415      	adds	r4, #21
 800e54a:	42a6      	cmp	r6, r4
 800e54c:	bf38      	it	cc
 800e54e:	2304      	movcc	r3, #4
 800e550:	441d      	add	r5, r3
 800e552:	4473      	add	r3, lr
 800e554:	469e      	mov	lr, r3
 800e556:	462e      	mov	r6, r5
 800e558:	4566      	cmp	r6, ip
 800e55a:	d30e      	bcc.n	800e57a <__mdiff+0xea>
 800e55c:	f10c 0203 	add.w	r2, ip, #3
 800e560:	1b52      	subs	r2, r2, r5
 800e562:	f022 0203 	bic.w	r2, r2, #3
 800e566:	3d03      	subs	r5, #3
 800e568:	45ac      	cmp	ip, r5
 800e56a:	bf38      	it	cc
 800e56c:	2200      	movcc	r2, #0
 800e56e:	4413      	add	r3, r2
 800e570:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e574:	b17a      	cbz	r2, 800e596 <__mdiff+0x106>
 800e576:	6107      	str	r7, [r0, #16]
 800e578:	e7a4      	b.n	800e4c4 <__mdiff+0x34>
 800e57a:	f856 8b04 	ldr.w	r8, [r6], #4
 800e57e:	fa11 f288 	uxtah	r2, r1, r8
 800e582:	1414      	asrs	r4, r2, #16
 800e584:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e588:	b292      	uxth	r2, r2
 800e58a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e58e:	f84e 2b04 	str.w	r2, [lr], #4
 800e592:	1421      	asrs	r1, r4, #16
 800e594:	e7e0      	b.n	800e558 <__mdiff+0xc8>
 800e596:	3f01      	subs	r7, #1
 800e598:	e7ea      	b.n	800e570 <__mdiff+0xe0>
 800e59a:	bf00      	nop
 800e59c:	0800f50d 	.word	0x0800f50d
 800e5a0:	0800f58f 	.word	0x0800f58f

0800e5a4 <__ulp>:
 800e5a4:	b082      	sub	sp, #8
 800e5a6:	ed8d 0b00 	vstr	d0, [sp]
 800e5aa:	9a01      	ldr	r2, [sp, #4]
 800e5ac:	4b0f      	ldr	r3, [pc, #60]	; (800e5ec <__ulp+0x48>)
 800e5ae:	4013      	ands	r3, r2
 800e5b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dc08      	bgt.n	800e5ca <__ulp+0x26>
 800e5b8:	425b      	negs	r3, r3
 800e5ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e5be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e5c2:	da04      	bge.n	800e5ce <__ulp+0x2a>
 800e5c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e5c8:	4113      	asrs	r3, r2
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	e008      	b.n	800e5e0 <__ulp+0x3c>
 800e5ce:	f1a2 0314 	sub.w	r3, r2, #20
 800e5d2:	2b1e      	cmp	r3, #30
 800e5d4:	bfda      	itte	le
 800e5d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e5da:	40da      	lsrle	r2, r3
 800e5dc:	2201      	movgt	r2, #1
 800e5de:	2300      	movs	r3, #0
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	4610      	mov	r0, r2
 800e5e4:	ec41 0b10 	vmov	d0, r0, r1
 800e5e8:	b002      	add	sp, #8
 800e5ea:	4770      	bx	lr
 800e5ec:	7ff00000 	.word	0x7ff00000

0800e5f0 <__b2d>:
 800e5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f4:	6906      	ldr	r6, [r0, #16]
 800e5f6:	f100 0814 	add.w	r8, r0, #20
 800e5fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e5fe:	1f37      	subs	r7, r6, #4
 800e600:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e604:	4610      	mov	r0, r2
 800e606:	f7ff fd53 	bl	800e0b0 <__hi0bits>
 800e60a:	f1c0 0320 	rsb	r3, r0, #32
 800e60e:	280a      	cmp	r0, #10
 800e610:	600b      	str	r3, [r1, #0]
 800e612:	491b      	ldr	r1, [pc, #108]	; (800e680 <__b2d+0x90>)
 800e614:	dc15      	bgt.n	800e642 <__b2d+0x52>
 800e616:	f1c0 0c0b 	rsb	ip, r0, #11
 800e61a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e61e:	45b8      	cmp	r8, r7
 800e620:	ea43 0501 	orr.w	r5, r3, r1
 800e624:	bf34      	ite	cc
 800e626:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e62a:	2300      	movcs	r3, #0
 800e62c:	3015      	adds	r0, #21
 800e62e:	fa02 f000 	lsl.w	r0, r2, r0
 800e632:	fa23 f30c 	lsr.w	r3, r3, ip
 800e636:	4303      	orrs	r3, r0
 800e638:	461c      	mov	r4, r3
 800e63a:	ec45 4b10 	vmov	d0, r4, r5
 800e63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e642:	45b8      	cmp	r8, r7
 800e644:	bf3a      	itte	cc
 800e646:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e64a:	f1a6 0708 	subcc.w	r7, r6, #8
 800e64e:	2300      	movcs	r3, #0
 800e650:	380b      	subs	r0, #11
 800e652:	d012      	beq.n	800e67a <__b2d+0x8a>
 800e654:	f1c0 0120 	rsb	r1, r0, #32
 800e658:	fa23 f401 	lsr.w	r4, r3, r1
 800e65c:	4082      	lsls	r2, r0
 800e65e:	4322      	orrs	r2, r4
 800e660:	4547      	cmp	r7, r8
 800e662:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e666:	bf8c      	ite	hi
 800e668:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e66c:	2200      	movls	r2, #0
 800e66e:	4083      	lsls	r3, r0
 800e670:	40ca      	lsrs	r2, r1
 800e672:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e676:	4313      	orrs	r3, r2
 800e678:	e7de      	b.n	800e638 <__b2d+0x48>
 800e67a:	ea42 0501 	orr.w	r5, r2, r1
 800e67e:	e7db      	b.n	800e638 <__b2d+0x48>
 800e680:	3ff00000 	.word	0x3ff00000

0800e684 <__d2b>:
 800e684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e688:	460f      	mov	r7, r1
 800e68a:	2101      	movs	r1, #1
 800e68c:	ec59 8b10 	vmov	r8, r9, d0
 800e690:	4616      	mov	r6, r2
 800e692:	f7ff fc1b 	bl	800decc <_Balloc>
 800e696:	4604      	mov	r4, r0
 800e698:	b930      	cbnz	r0, 800e6a8 <__d2b+0x24>
 800e69a:	4602      	mov	r2, r0
 800e69c:	4b24      	ldr	r3, [pc, #144]	; (800e730 <__d2b+0xac>)
 800e69e:	4825      	ldr	r0, [pc, #148]	; (800e734 <__d2b+0xb0>)
 800e6a0:	f240 310f 	movw	r1, #783	; 0x30f
 800e6a4:	f000 f9ae 	bl	800ea04 <__assert_func>
 800e6a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e6ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6b0:	bb2d      	cbnz	r5, 800e6fe <__d2b+0x7a>
 800e6b2:	9301      	str	r3, [sp, #4]
 800e6b4:	f1b8 0300 	subs.w	r3, r8, #0
 800e6b8:	d026      	beq.n	800e708 <__d2b+0x84>
 800e6ba:	4668      	mov	r0, sp
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	f7ff fd17 	bl	800e0f0 <__lo0bits>
 800e6c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e6c6:	b1e8      	cbz	r0, 800e704 <__d2b+0x80>
 800e6c8:	f1c0 0320 	rsb	r3, r0, #32
 800e6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e6d0:	430b      	orrs	r3, r1
 800e6d2:	40c2      	lsrs	r2, r0
 800e6d4:	6163      	str	r3, [r4, #20]
 800e6d6:	9201      	str	r2, [sp, #4]
 800e6d8:	9b01      	ldr	r3, [sp, #4]
 800e6da:	61a3      	str	r3, [r4, #24]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	bf14      	ite	ne
 800e6e0:	2202      	movne	r2, #2
 800e6e2:	2201      	moveq	r2, #1
 800e6e4:	6122      	str	r2, [r4, #16]
 800e6e6:	b1bd      	cbz	r5, 800e718 <__d2b+0x94>
 800e6e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e6ec:	4405      	add	r5, r0
 800e6ee:	603d      	str	r5, [r7, #0]
 800e6f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e6f4:	6030      	str	r0, [r6, #0]
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	b003      	add	sp, #12
 800e6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e702:	e7d6      	b.n	800e6b2 <__d2b+0x2e>
 800e704:	6161      	str	r1, [r4, #20]
 800e706:	e7e7      	b.n	800e6d8 <__d2b+0x54>
 800e708:	a801      	add	r0, sp, #4
 800e70a:	f7ff fcf1 	bl	800e0f0 <__lo0bits>
 800e70e:	9b01      	ldr	r3, [sp, #4]
 800e710:	6163      	str	r3, [r4, #20]
 800e712:	3020      	adds	r0, #32
 800e714:	2201      	movs	r2, #1
 800e716:	e7e5      	b.n	800e6e4 <__d2b+0x60>
 800e718:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e71c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e720:	6038      	str	r0, [r7, #0]
 800e722:	6918      	ldr	r0, [r3, #16]
 800e724:	f7ff fcc4 	bl	800e0b0 <__hi0bits>
 800e728:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e72c:	e7e2      	b.n	800e6f4 <__d2b+0x70>
 800e72e:	bf00      	nop
 800e730:	0800f50d 	.word	0x0800f50d
 800e734:	0800f58f 	.word	0x0800f58f

0800e738 <__ratio>:
 800e738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73c:	4688      	mov	r8, r1
 800e73e:	4669      	mov	r1, sp
 800e740:	4681      	mov	r9, r0
 800e742:	f7ff ff55 	bl	800e5f0 <__b2d>
 800e746:	a901      	add	r1, sp, #4
 800e748:	4640      	mov	r0, r8
 800e74a:	ec55 4b10 	vmov	r4, r5, d0
 800e74e:	f7ff ff4f 	bl	800e5f0 <__b2d>
 800e752:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e756:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e75a:	eba3 0c02 	sub.w	ip, r3, r2
 800e75e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e762:	1a9b      	subs	r3, r3, r2
 800e764:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e768:	ec51 0b10 	vmov	r0, r1, d0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	bfd6      	itet	le
 800e770:	460a      	movle	r2, r1
 800e772:	462a      	movgt	r2, r5
 800e774:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e778:	468b      	mov	fp, r1
 800e77a:	462f      	mov	r7, r5
 800e77c:	bfd4      	ite	le
 800e77e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e782:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e786:	4620      	mov	r0, r4
 800e788:	ee10 2a10 	vmov	r2, s0
 800e78c:	465b      	mov	r3, fp
 800e78e:	4639      	mov	r1, r7
 800e790:	f7f2 f874 	bl	800087c <__aeabi_ddiv>
 800e794:	ec41 0b10 	vmov	d0, r0, r1
 800e798:	b003      	add	sp, #12
 800e79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e79e <__copybits>:
 800e79e:	3901      	subs	r1, #1
 800e7a0:	b570      	push	{r4, r5, r6, lr}
 800e7a2:	1149      	asrs	r1, r1, #5
 800e7a4:	6914      	ldr	r4, [r2, #16]
 800e7a6:	3101      	adds	r1, #1
 800e7a8:	f102 0314 	add.w	r3, r2, #20
 800e7ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e7b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e7b4:	1f05      	subs	r5, r0, #4
 800e7b6:	42a3      	cmp	r3, r4
 800e7b8:	d30c      	bcc.n	800e7d4 <__copybits+0x36>
 800e7ba:	1aa3      	subs	r3, r4, r2
 800e7bc:	3b11      	subs	r3, #17
 800e7be:	f023 0303 	bic.w	r3, r3, #3
 800e7c2:	3211      	adds	r2, #17
 800e7c4:	42a2      	cmp	r2, r4
 800e7c6:	bf88      	it	hi
 800e7c8:	2300      	movhi	r3, #0
 800e7ca:	4418      	add	r0, r3
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	4288      	cmp	r0, r1
 800e7d0:	d305      	bcc.n	800e7de <__copybits+0x40>
 800e7d2:	bd70      	pop	{r4, r5, r6, pc}
 800e7d4:	f853 6b04 	ldr.w	r6, [r3], #4
 800e7d8:	f845 6f04 	str.w	r6, [r5, #4]!
 800e7dc:	e7eb      	b.n	800e7b6 <__copybits+0x18>
 800e7de:	f840 3b04 	str.w	r3, [r0], #4
 800e7e2:	e7f4      	b.n	800e7ce <__copybits+0x30>

0800e7e4 <__any_on>:
 800e7e4:	f100 0214 	add.w	r2, r0, #20
 800e7e8:	6900      	ldr	r0, [r0, #16]
 800e7ea:	114b      	asrs	r3, r1, #5
 800e7ec:	4298      	cmp	r0, r3
 800e7ee:	b510      	push	{r4, lr}
 800e7f0:	db11      	blt.n	800e816 <__any_on+0x32>
 800e7f2:	dd0a      	ble.n	800e80a <__any_on+0x26>
 800e7f4:	f011 011f 	ands.w	r1, r1, #31
 800e7f8:	d007      	beq.n	800e80a <__any_on+0x26>
 800e7fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e7fe:	fa24 f001 	lsr.w	r0, r4, r1
 800e802:	fa00 f101 	lsl.w	r1, r0, r1
 800e806:	428c      	cmp	r4, r1
 800e808:	d10b      	bne.n	800e822 <__any_on+0x3e>
 800e80a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e80e:	4293      	cmp	r3, r2
 800e810:	d803      	bhi.n	800e81a <__any_on+0x36>
 800e812:	2000      	movs	r0, #0
 800e814:	bd10      	pop	{r4, pc}
 800e816:	4603      	mov	r3, r0
 800e818:	e7f7      	b.n	800e80a <__any_on+0x26>
 800e81a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e81e:	2900      	cmp	r1, #0
 800e820:	d0f5      	beq.n	800e80e <__any_on+0x2a>
 800e822:	2001      	movs	r0, #1
 800e824:	e7f6      	b.n	800e814 <__any_on+0x30>

0800e826 <__sread>:
 800e826:	b510      	push	{r4, lr}
 800e828:	460c      	mov	r4, r1
 800e82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e82e:	f000 f8b5 	bl	800e99c <_read_r>
 800e832:	2800      	cmp	r0, #0
 800e834:	bfab      	itete	ge
 800e836:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e838:	89a3      	ldrhlt	r3, [r4, #12]
 800e83a:	181b      	addge	r3, r3, r0
 800e83c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e840:	bfac      	ite	ge
 800e842:	6563      	strge	r3, [r4, #84]	; 0x54
 800e844:	81a3      	strhlt	r3, [r4, #12]
 800e846:	bd10      	pop	{r4, pc}

0800e848 <__swrite>:
 800e848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e84c:	461f      	mov	r7, r3
 800e84e:	898b      	ldrh	r3, [r1, #12]
 800e850:	05db      	lsls	r3, r3, #23
 800e852:	4605      	mov	r5, r0
 800e854:	460c      	mov	r4, r1
 800e856:	4616      	mov	r6, r2
 800e858:	d505      	bpl.n	800e866 <__swrite+0x1e>
 800e85a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e85e:	2302      	movs	r3, #2
 800e860:	2200      	movs	r2, #0
 800e862:	f000 f889 	bl	800e978 <_lseek_r>
 800e866:	89a3      	ldrh	r3, [r4, #12]
 800e868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e86c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e870:	81a3      	strh	r3, [r4, #12]
 800e872:	4632      	mov	r2, r6
 800e874:	463b      	mov	r3, r7
 800e876:	4628      	mov	r0, r5
 800e878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e87c:	f000 b8b0 	b.w	800e9e0 <_write_r>

0800e880 <__sseek>:
 800e880:	b510      	push	{r4, lr}
 800e882:	460c      	mov	r4, r1
 800e884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e888:	f000 f876 	bl	800e978 <_lseek_r>
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	89a3      	ldrh	r3, [r4, #12]
 800e890:	bf15      	itete	ne
 800e892:	6560      	strne	r0, [r4, #84]	; 0x54
 800e894:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e898:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e89c:	81a3      	strheq	r3, [r4, #12]
 800e89e:	bf18      	it	ne
 800e8a0:	81a3      	strhne	r3, [r4, #12]
 800e8a2:	bd10      	pop	{r4, pc}

0800e8a4 <__sclose>:
 800e8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8a8:	f000 b856 	b.w	800e958 <_close_r>

0800e8ac <_realloc_r>:
 800e8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b0:	4680      	mov	r8, r0
 800e8b2:	4614      	mov	r4, r2
 800e8b4:	460e      	mov	r6, r1
 800e8b6:	b921      	cbnz	r1, 800e8c2 <_realloc_r+0x16>
 800e8b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8bc:	4611      	mov	r1, r2
 800e8be:	f7ff b9b9 	b.w	800dc34 <_malloc_r>
 800e8c2:	b92a      	cbnz	r2, 800e8d0 <_realloc_r+0x24>
 800e8c4:	f7fe fc92 	bl	800d1ec <_free_r>
 800e8c8:	4625      	mov	r5, r4
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d0:	f000 f8cc 	bl	800ea6c <_malloc_usable_size_r>
 800e8d4:	4284      	cmp	r4, r0
 800e8d6:	4607      	mov	r7, r0
 800e8d8:	d802      	bhi.n	800e8e0 <_realloc_r+0x34>
 800e8da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8de:	d812      	bhi.n	800e906 <_realloc_r+0x5a>
 800e8e0:	4621      	mov	r1, r4
 800e8e2:	4640      	mov	r0, r8
 800e8e4:	f7ff f9a6 	bl	800dc34 <_malloc_r>
 800e8e8:	4605      	mov	r5, r0
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d0ed      	beq.n	800e8ca <_realloc_r+0x1e>
 800e8ee:	42bc      	cmp	r4, r7
 800e8f0:	4622      	mov	r2, r4
 800e8f2:	4631      	mov	r1, r6
 800e8f4:	bf28      	it	cs
 800e8f6:	463a      	movcs	r2, r7
 800e8f8:	f7fd fddf 	bl	800c4ba <memcpy>
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4640      	mov	r0, r8
 800e900:	f7fe fc74 	bl	800d1ec <_free_r>
 800e904:	e7e1      	b.n	800e8ca <_realloc_r+0x1e>
 800e906:	4635      	mov	r5, r6
 800e908:	e7df      	b.n	800e8ca <_realloc_r+0x1e>

0800e90a <__ascii_wctomb>:
 800e90a:	b149      	cbz	r1, 800e920 <__ascii_wctomb+0x16>
 800e90c:	2aff      	cmp	r2, #255	; 0xff
 800e90e:	bf85      	ittet	hi
 800e910:	238a      	movhi	r3, #138	; 0x8a
 800e912:	6003      	strhi	r3, [r0, #0]
 800e914:	700a      	strbls	r2, [r1, #0]
 800e916:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e91a:	bf98      	it	ls
 800e91c:	2001      	movls	r0, #1
 800e91e:	4770      	bx	lr
 800e920:	4608      	mov	r0, r1
 800e922:	4770      	bx	lr

0800e924 <memmove>:
 800e924:	4288      	cmp	r0, r1
 800e926:	b510      	push	{r4, lr}
 800e928:	eb01 0402 	add.w	r4, r1, r2
 800e92c:	d902      	bls.n	800e934 <memmove+0x10>
 800e92e:	4284      	cmp	r4, r0
 800e930:	4623      	mov	r3, r4
 800e932:	d807      	bhi.n	800e944 <memmove+0x20>
 800e934:	1e43      	subs	r3, r0, #1
 800e936:	42a1      	cmp	r1, r4
 800e938:	d008      	beq.n	800e94c <memmove+0x28>
 800e93a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e93e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e942:	e7f8      	b.n	800e936 <memmove+0x12>
 800e944:	4402      	add	r2, r0
 800e946:	4601      	mov	r1, r0
 800e948:	428a      	cmp	r2, r1
 800e94a:	d100      	bne.n	800e94e <memmove+0x2a>
 800e94c:	bd10      	pop	{r4, pc}
 800e94e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e956:	e7f7      	b.n	800e948 <memmove+0x24>

0800e958 <_close_r>:
 800e958:	b538      	push	{r3, r4, r5, lr}
 800e95a:	4d06      	ldr	r5, [pc, #24]	; (800e974 <_close_r+0x1c>)
 800e95c:	2300      	movs	r3, #0
 800e95e:	4604      	mov	r4, r0
 800e960:	4608      	mov	r0, r1
 800e962:	602b      	str	r3, [r5, #0]
 800e964:	f7f5 fac9 	bl	8003efa <_close>
 800e968:	1c43      	adds	r3, r0, #1
 800e96a:	d102      	bne.n	800e972 <_close_r+0x1a>
 800e96c:	682b      	ldr	r3, [r5, #0]
 800e96e:	b103      	cbz	r3, 800e972 <_close_r+0x1a>
 800e970:	6023      	str	r3, [r4, #0]
 800e972:	bd38      	pop	{r3, r4, r5, pc}
 800e974:	200016ec 	.word	0x200016ec

0800e978 <_lseek_r>:
 800e978:	b538      	push	{r3, r4, r5, lr}
 800e97a:	4d07      	ldr	r5, [pc, #28]	; (800e998 <_lseek_r+0x20>)
 800e97c:	4604      	mov	r4, r0
 800e97e:	4608      	mov	r0, r1
 800e980:	4611      	mov	r1, r2
 800e982:	2200      	movs	r2, #0
 800e984:	602a      	str	r2, [r5, #0]
 800e986:	461a      	mov	r2, r3
 800e988:	f7f5 fade 	bl	8003f48 <_lseek>
 800e98c:	1c43      	adds	r3, r0, #1
 800e98e:	d102      	bne.n	800e996 <_lseek_r+0x1e>
 800e990:	682b      	ldr	r3, [r5, #0]
 800e992:	b103      	cbz	r3, 800e996 <_lseek_r+0x1e>
 800e994:	6023      	str	r3, [r4, #0]
 800e996:	bd38      	pop	{r3, r4, r5, pc}
 800e998:	200016ec 	.word	0x200016ec

0800e99c <_read_r>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	4d07      	ldr	r5, [pc, #28]	; (800e9bc <_read_r+0x20>)
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	4608      	mov	r0, r1
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	602a      	str	r2, [r5, #0]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	f7f5 fa6c 	bl	8003e88 <_read>
 800e9b0:	1c43      	adds	r3, r0, #1
 800e9b2:	d102      	bne.n	800e9ba <_read_r+0x1e>
 800e9b4:	682b      	ldr	r3, [r5, #0]
 800e9b6:	b103      	cbz	r3, 800e9ba <_read_r+0x1e>
 800e9b8:	6023      	str	r3, [r4, #0]
 800e9ba:	bd38      	pop	{r3, r4, r5, pc}
 800e9bc:	200016ec 	.word	0x200016ec

0800e9c0 <_sbrk_r>:
 800e9c0:	b538      	push	{r3, r4, r5, lr}
 800e9c2:	4d06      	ldr	r5, [pc, #24]	; (800e9dc <_sbrk_r+0x1c>)
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	4604      	mov	r4, r0
 800e9c8:	4608      	mov	r0, r1
 800e9ca:	602b      	str	r3, [r5, #0]
 800e9cc:	f7f5 faca 	bl	8003f64 <_sbrk>
 800e9d0:	1c43      	adds	r3, r0, #1
 800e9d2:	d102      	bne.n	800e9da <_sbrk_r+0x1a>
 800e9d4:	682b      	ldr	r3, [r5, #0]
 800e9d6:	b103      	cbz	r3, 800e9da <_sbrk_r+0x1a>
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	bd38      	pop	{r3, r4, r5, pc}
 800e9dc:	200016ec 	.word	0x200016ec

0800e9e0 <_write_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4d07      	ldr	r5, [pc, #28]	; (800ea00 <_write_r+0x20>)
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	4608      	mov	r0, r1
 800e9e8:	4611      	mov	r1, r2
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	602a      	str	r2, [r5, #0]
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	f7f5 fa67 	bl	8003ec2 <_write>
 800e9f4:	1c43      	adds	r3, r0, #1
 800e9f6:	d102      	bne.n	800e9fe <_write_r+0x1e>
 800e9f8:	682b      	ldr	r3, [r5, #0]
 800e9fa:	b103      	cbz	r3, 800e9fe <_write_r+0x1e>
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ea00:	200016ec 	.word	0x200016ec

0800ea04 <__assert_func>:
 800ea04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea06:	4614      	mov	r4, r2
 800ea08:	461a      	mov	r2, r3
 800ea0a:	4b09      	ldr	r3, [pc, #36]	; (800ea30 <__assert_func+0x2c>)
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	4605      	mov	r5, r0
 800ea10:	68d8      	ldr	r0, [r3, #12]
 800ea12:	b14c      	cbz	r4, 800ea28 <__assert_func+0x24>
 800ea14:	4b07      	ldr	r3, [pc, #28]	; (800ea34 <__assert_func+0x30>)
 800ea16:	9100      	str	r1, [sp, #0]
 800ea18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea1c:	4906      	ldr	r1, [pc, #24]	; (800ea38 <__assert_func+0x34>)
 800ea1e:	462b      	mov	r3, r5
 800ea20:	f000 f82c 	bl	800ea7c <fiprintf>
 800ea24:	f000 f83c 	bl	800eaa0 <abort>
 800ea28:	4b04      	ldr	r3, [pc, #16]	; (800ea3c <__assert_func+0x38>)
 800ea2a:	461c      	mov	r4, r3
 800ea2c:	e7f3      	b.n	800ea16 <__assert_func+0x12>
 800ea2e:	bf00      	nop
 800ea30:	2000025c 	.word	0x2000025c
 800ea34:	0800f6e4 	.word	0x0800f6e4
 800ea38:	0800f6f1 	.word	0x0800f6f1
 800ea3c:	0800f71f 	.word	0x0800f71f

0800ea40 <_calloc_r>:
 800ea40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea42:	fba1 2402 	umull	r2, r4, r1, r2
 800ea46:	b94c      	cbnz	r4, 800ea5c <_calloc_r+0x1c>
 800ea48:	4611      	mov	r1, r2
 800ea4a:	9201      	str	r2, [sp, #4]
 800ea4c:	f7ff f8f2 	bl	800dc34 <_malloc_r>
 800ea50:	9a01      	ldr	r2, [sp, #4]
 800ea52:	4605      	mov	r5, r0
 800ea54:	b930      	cbnz	r0, 800ea64 <_calloc_r+0x24>
 800ea56:	4628      	mov	r0, r5
 800ea58:	b003      	add	sp, #12
 800ea5a:	bd30      	pop	{r4, r5, pc}
 800ea5c:	220c      	movs	r2, #12
 800ea5e:	6002      	str	r2, [r0, #0]
 800ea60:	2500      	movs	r5, #0
 800ea62:	e7f8      	b.n	800ea56 <_calloc_r+0x16>
 800ea64:	4621      	mov	r1, r4
 800ea66:	f7fd fc98 	bl	800c39a <memset>
 800ea6a:	e7f4      	b.n	800ea56 <_calloc_r+0x16>

0800ea6c <_malloc_usable_size_r>:
 800ea6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea70:	1f18      	subs	r0, r3, #4
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	bfbc      	itt	lt
 800ea76:	580b      	ldrlt	r3, [r1, r0]
 800ea78:	18c0      	addlt	r0, r0, r3
 800ea7a:	4770      	bx	lr

0800ea7c <fiprintf>:
 800ea7c:	b40e      	push	{r1, r2, r3}
 800ea7e:	b503      	push	{r0, r1, lr}
 800ea80:	4601      	mov	r1, r0
 800ea82:	ab03      	add	r3, sp, #12
 800ea84:	4805      	ldr	r0, [pc, #20]	; (800ea9c <fiprintf+0x20>)
 800ea86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea8a:	6800      	ldr	r0, [r0, #0]
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	f000 f837 	bl	800eb00 <_vfiprintf_r>
 800ea92:	b002      	add	sp, #8
 800ea94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea98:	b003      	add	sp, #12
 800ea9a:	4770      	bx	lr
 800ea9c:	2000025c 	.word	0x2000025c

0800eaa0 <abort>:
 800eaa0:	b508      	push	{r3, lr}
 800eaa2:	2006      	movs	r0, #6
 800eaa4:	f000 fa88 	bl	800efb8 <raise>
 800eaa8:	2001      	movs	r0, #1
 800eaaa:	f7f5 f9e3 	bl	8003e74 <_exit>

0800eaae <__sfputc_r>:
 800eaae:	6893      	ldr	r3, [r2, #8]
 800eab0:	3b01      	subs	r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	b410      	push	{r4}
 800eab6:	6093      	str	r3, [r2, #8]
 800eab8:	da08      	bge.n	800eacc <__sfputc_r+0x1e>
 800eaba:	6994      	ldr	r4, [r2, #24]
 800eabc:	42a3      	cmp	r3, r4
 800eabe:	db01      	blt.n	800eac4 <__sfputc_r+0x16>
 800eac0:	290a      	cmp	r1, #10
 800eac2:	d103      	bne.n	800eacc <__sfputc_r+0x1e>
 800eac4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eac8:	f000 b934 	b.w	800ed34 <__swbuf_r>
 800eacc:	6813      	ldr	r3, [r2, #0]
 800eace:	1c58      	adds	r0, r3, #1
 800ead0:	6010      	str	r0, [r2, #0]
 800ead2:	7019      	strb	r1, [r3, #0]
 800ead4:	4608      	mov	r0, r1
 800ead6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <__sfputs_r>:
 800eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eade:	4606      	mov	r6, r0
 800eae0:	460f      	mov	r7, r1
 800eae2:	4614      	mov	r4, r2
 800eae4:	18d5      	adds	r5, r2, r3
 800eae6:	42ac      	cmp	r4, r5
 800eae8:	d101      	bne.n	800eaee <__sfputs_r+0x12>
 800eaea:	2000      	movs	r0, #0
 800eaec:	e007      	b.n	800eafe <__sfputs_r+0x22>
 800eaee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaf2:	463a      	mov	r2, r7
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	f7ff ffda 	bl	800eaae <__sfputc_r>
 800eafa:	1c43      	adds	r3, r0, #1
 800eafc:	d1f3      	bne.n	800eae6 <__sfputs_r+0xa>
 800eafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800eb00 <_vfiprintf_r>:
 800eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb04:	460d      	mov	r5, r1
 800eb06:	b09d      	sub	sp, #116	; 0x74
 800eb08:	4614      	mov	r4, r2
 800eb0a:	4698      	mov	r8, r3
 800eb0c:	4606      	mov	r6, r0
 800eb0e:	b118      	cbz	r0, 800eb18 <_vfiprintf_r+0x18>
 800eb10:	6a03      	ldr	r3, [r0, #32]
 800eb12:	b90b      	cbnz	r3, 800eb18 <_vfiprintf_r+0x18>
 800eb14:	f7fc fd54 	bl	800b5c0 <__sinit>
 800eb18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb1a:	07d9      	lsls	r1, r3, #31
 800eb1c:	d405      	bmi.n	800eb2a <_vfiprintf_r+0x2a>
 800eb1e:	89ab      	ldrh	r3, [r5, #12]
 800eb20:	059a      	lsls	r2, r3, #22
 800eb22:	d402      	bmi.n	800eb2a <_vfiprintf_r+0x2a>
 800eb24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb26:	f7fd fcc6 	bl	800c4b6 <__retarget_lock_acquire_recursive>
 800eb2a:	89ab      	ldrh	r3, [r5, #12]
 800eb2c:	071b      	lsls	r3, r3, #28
 800eb2e:	d501      	bpl.n	800eb34 <_vfiprintf_r+0x34>
 800eb30:	692b      	ldr	r3, [r5, #16]
 800eb32:	b99b      	cbnz	r3, 800eb5c <_vfiprintf_r+0x5c>
 800eb34:	4629      	mov	r1, r5
 800eb36:	4630      	mov	r0, r6
 800eb38:	f000 f93a 	bl	800edb0 <__swsetup_r>
 800eb3c:	b170      	cbz	r0, 800eb5c <_vfiprintf_r+0x5c>
 800eb3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb40:	07dc      	lsls	r4, r3, #31
 800eb42:	d504      	bpl.n	800eb4e <_vfiprintf_r+0x4e>
 800eb44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb48:	b01d      	add	sp, #116	; 0x74
 800eb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb4e:	89ab      	ldrh	r3, [r5, #12]
 800eb50:	0598      	lsls	r0, r3, #22
 800eb52:	d4f7      	bmi.n	800eb44 <_vfiprintf_r+0x44>
 800eb54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb56:	f7fd fcaf 	bl	800c4b8 <__retarget_lock_release_recursive>
 800eb5a:	e7f3      	b.n	800eb44 <_vfiprintf_r+0x44>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	9309      	str	r3, [sp, #36]	; 0x24
 800eb60:	2320      	movs	r3, #32
 800eb62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb66:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb6a:	2330      	movs	r3, #48	; 0x30
 800eb6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ed20 <_vfiprintf_r+0x220>
 800eb70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb74:	f04f 0901 	mov.w	r9, #1
 800eb78:	4623      	mov	r3, r4
 800eb7a:	469a      	mov	sl, r3
 800eb7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb80:	b10a      	cbz	r2, 800eb86 <_vfiprintf_r+0x86>
 800eb82:	2a25      	cmp	r2, #37	; 0x25
 800eb84:	d1f9      	bne.n	800eb7a <_vfiprintf_r+0x7a>
 800eb86:	ebba 0b04 	subs.w	fp, sl, r4
 800eb8a:	d00b      	beq.n	800eba4 <_vfiprintf_r+0xa4>
 800eb8c:	465b      	mov	r3, fp
 800eb8e:	4622      	mov	r2, r4
 800eb90:	4629      	mov	r1, r5
 800eb92:	4630      	mov	r0, r6
 800eb94:	f7ff ffa2 	bl	800eadc <__sfputs_r>
 800eb98:	3001      	adds	r0, #1
 800eb9a:	f000 80a9 	beq.w	800ecf0 <_vfiprintf_r+0x1f0>
 800eb9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eba0:	445a      	add	r2, fp
 800eba2:	9209      	str	r2, [sp, #36]	; 0x24
 800eba4:	f89a 3000 	ldrb.w	r3, [sl]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	f000 80a1 	beq.w	800ecf0 <_vfiprintf_r+0x1f0>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ebb8:	f10a 0a01 	add.w	sl, sl, #1
 800ebbc:	9304      	str	r3, [sp, #16]
 800ebbe:	9307      	str	r3, [sp, #28]
 800ebc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ebc4:	931a      	str	r3, [sp, #104]	; 0x68
 800ebc6:	4654      	mov	r4, sl
 800ebc8:	2205      	movs	r2, #5
 800ebca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebce:	4854      	ldr	r0, [pc, #336]	; (800ed20 <_vfiprintf_r+0x220>)
 800ebd0:	f7f1 fb16 	bl	8000200 <memchr>
 800ebd4:	9a04      	ldr	r2, [sp, #16]
 800ebd6:	b9d8      	cbnz	r0, 800ec10 <_vfiprintf_r+0x110>
 800ebd8:	06d1      	lsls	r1, r2, #27
 800ebda:	bf44      	itt	mi
 800ebdc:	2320      	movmi	r3, #32
 800ebde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebe2:	0713      	lsls	r3, r2, #28
 800ebe4:	bf44      	itt	mi
 800ebe6:	232b      	movmi	r3, #43	; 0x2b
 800ebe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ebec:	f89a 3000 	ldrb.w	r3, [sl]
 800ebf0:	2b2a      	cmp	r3, #42	; 0x2a
 800ebf2:	d015      	beq.n	800ec20 <_vfiprintf_r+0x120>
 800ebf4:	9a07      	ldr	r2, [sp, #28]
 800ebf6:	4654      	mov	r4, sl
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	f04f 0c0a 	mov.w	ip, #10
 800ebfe:	4621      	mov	r1, r4
 800ec00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec04:	3b30      	subs	r3, #48	; 0x30
 800ec06:	2b09      	cmp	r3, #9
 800ec08:	d94d      	bls.n	800eca6 <_vfiprintf_r+0x1a6>
 800ec0a:	b1b0      	cbz	r0, 800ec3a <_vfiprintf_r+0x13a>
 800ec0c:	9207      	str	r2, [sp, #28]
 800ec0e:	e014      	b.n	800ec3a <_vfiprintf_r+0x13a>
 800ec10:	eba0 0308 	sub.w	r3, r0, r8
 800ec14:	fa09 f303 	lsl.w	r3, r9, r3
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	9304      	str	r3, [sp, #16]
 800ec1c:	46a2      	mov	sl, r4
 800ec1e:	e7d2      	b.n	800ebc6 <_vfiprintf_r+0xc6>
 800ec20:	9b03      	ldr	r3, [sp, #12]
 800ec22:	1d19      	adds	r1, r3, #4
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	9103      	str	r1, [sp, #12]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	bfbb      	ittet	lt
 800ec2c:	425b      	neglt	r3, r3
 800ec2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ec32:	9307      	strge	r3, [sp, #28]
 800ec34:	9307      	strlt	r3, [sp, #28]
 800ec36:	bfb8      	it	lt
 800ec38:	9204      	strlt	r2, [sp, #16]
 800ec3a:	7823      	ldrb	r3, [r4, #0]
 800ec3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ec3e:	d10c      	bne.n	800ec5a <_vfiprintf_r+0x15a>
 800ec40:	7863      	ldrb	r3, [r4, #1]
 800ec42:	2b2a      	cmp	r3, #42	; 0x2a
 800ec44:	d134      	bne.n	800ecb0 <_vfiprintf_r+0x1b0>
 800ec46:	9b03      	ldr	r3, [sp, #12]
 800ec48:	1d1a      	adds	r2, r3, #4
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	9203      	str	r2, [sp, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	bfb8      	it	lt
 800ec52:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ec56:	3402      	adds	r4, #2
 800ec58:	9305      	str	r3, [sp, #20]
 800ec5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ed30 <_vfiprintf_r+0x230>
 800ec5e:	7821      	ldrb	r1, [r4, #0]
 800ec60:	2203      	movs	r2, #3
 800ec62:	4650      	mov	r0, sl
 800ec64:	f7f1 facc 	bl	8000200 <memchr>
 800ec68:	b138      	cbz	r0, 800ec7a <_vfiprintf_r+0x17a>
 800ec6a:	9b04      	ldr	r3, [sp, #16]
 800ec6c:	eba0 000a 	sub.w	r0, r0, sl
 800ec70:	2240      	movs	r2, #64	; 0x40
 800ec72:	4082      	lsls	r2, r0
 800ec74:	4313      	orrs	r3, r2
 800ec76:	3401      	adds	r4, #1
 800ec78:	9304      	str	r3, [sp, #16]
 800ec7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec7e:	4829      	ldr	r0, [pc, #164]	; (800ed24 <_vfiprintf_r+0x224>)
 800ec80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec84:	2206      	movs	r2, #6
 800ec86:	f7f1 fabb 	bl	8000200 <memchr>
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	d03f      	beq.n	800ed0e <_vfiprintf_r+0x20e>
 800ec8e:	4b26      	ldr	r3, [pc, #152]	; (800ed28 <_vfiprintf_r+0x228>)
 800ec90:	bb1b      	cbnz	r3, 800ecda <_vfiprintf_r+0x1da>
 800ec92:	9b03      	ldr	r3, [sp, #12]
 800ec94:	3307      	adds	r3, #7
 800ec96:	f023 0307 	bic.w	r3, r3, #7
 800ec9a:	3308      	adds	r3, #8
 800ec9c:	9303      	str	r3, [sp, #12]
 800ec9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eca0:	443b      	add	r3, r7
 800eca2:	9309      	str	r3, [sp, #36]	; 0x24
 800eca4:	e768      	b.n	800eb78 <_vfiprintf_r+0x78>
 800eca6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ecaa:	460c      	mov	r4, r1
 800ecac:	2001      	movs	r0, #1
 800ecae:	e7a6      	b.n	800ebfe <_vfiprintf_r+0xfe>
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	3401      	adds	r4, #1
 800ecb4:	9305      	str	r3, [sp, #20]
 800ecb6:	4619      	mov	r1, r3
 800ecb8:	f04f 0c0a 	mov.w	ip, #10
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ecc2:	3a30      	subs	r2, #48	; 0x30
 800ecc4:	2a09      	cmp	r2, #9
 800ecc6:	d903      	bls.n	800ecd0 <_vfiprintf_r+0x1d0>
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d0c6      	beq.n	800ec5a <_vfiprintf_r+0x15a>
 800eccc:	9105      	str	r1, [sp, #20]
 800ecce:	e7c4      	b.n	800ec5a <_vfiprintf_r+0x15a>
 800ecd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ecd4:	4604      	mov	r4, r0
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	e7f0      	b.n	800ecbc <_vfiprintf_r+0x1bc>
 800ecda:	ab03      	add	r3, sp, #12
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	462a      	mov	r2, r5
 800ece0:	4b12      	ldr	r3, [pc, #72]	; (800ed2c <_vfiprintf_r+0x22c>)
 800ece2:	a904      	add	r1, sp, #16
 800ece4:	4630      	mov	r0, r6
 800ece6:	f7fb fde9 	bl	800a8bc <_printf_float>
 800ecea:	4607      	mov	r7, r0
 800ecec:	1c78      	adds	r0, r7, #1
 800ecee:	d1d6      	bne.n	800ec9e <_vfiprintf_r+0x19e>
 800ecf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecf2:	07d9      	lsls	r1, r3, #31
 800ecf4:	d405      	bmi.n	800ed02 <_vfiprintf_r+0x202>
 800ecf6:	89ab      	ldrh	r3, [r5, #12]
 800ecf8:	059a      	lsls	r2, r3, #22
 800ecfa:	d402      	bmi.n	800ed02 <_vfiprintf_r+0x202>
 800ecfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ecfe:	f7fd fbdb 	bl	800c4b8 <__retarget_lock_release_recursive>
 800ed02:	89ab      	ldrh	r3, [r5, #12]
 800ed04:	065b      	lsls	r3, r3, #25
 800ed06:	f53f af1d 	bmi.w	800eb44 <_vfiprintf_r+0x44>
 800ed0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed0c:	e71c      	b.n	800eb48 <_vfiprintf_r+0x48>
 800ed0e:	ab03      	add	r3, sp, #12
 800ed10:	9300      	str	r3, [sp, #0]
 800ed12:	462a      	mov	r2, r5
 800ed14:	4b05      	ldr	r3, [pc, #20]	; (800ed2c <_vfiprintf_r+0x22c>)
 800ed16:	a904      	add	r1, sp, #16
 800ed18:	4630      	mov	r0, r6
 800ed1a:	f7fc f873 	bl	800ae04 <_printf_i>
 800ed1e:	e7e4      	b.n	800ecea <_vfiprintf_r+0x1ea>
 800ed20:	0800f57e 	.word	0x0800f57e
 800ed24:	0800f588 	.word	0x0800f588
 800ed28:	0800a8bd 	.word	0x0800a8bd
 800ed2c:	0800eadd 	.word	0x0800eadd
 800ed30:	0800f584 	.word	0x0800f584

0800ed34 <__swbuf_r>:
 800ed34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed36:	460e      	mov	r6, r1
 800ed38:	4614      	mov	r4, r2
 800ed3a:	4605      	mov	r5, r0
 800ed3c:	b118      	cbz	r0, 800ed46 <__swbuf_r+0x12>
 800ed3e:	6a03      	ldr	r3, [r0, #32]
 800ed40:	b90b      	cbnz	r3, 800ed46 <__swbuf_r+0x12>
 800ed42:	f7fc fc3d 	bl	800b5c0 <__sinit>
 800ed46:	69a3      	ldr	r3, [r4, #24]
 800ed48:	60a3      	str	r3, [r4, #8]
 800ed4a:	89a3      	ldrh	r3, [r4, #12]
 800ed4c:	071a      	lsls	r2, r3, #28
 800ed4e:	d525      	bpl.n	800ed9c <__swbuf_r+0x68>
 800ed50:	6923      	ldr	r3, [r4, #16]
 800ed52:	b31b      	cbz	r3, 800ed9c <__swbuf_r+0x68>
 800ed54:	6823      	ldr	r3, [r4, #0]
 800ed56:	6922      	ldr	r2, [r4, #16]
 800ed58:	1a98      	subs	r0, r3, r2
 800ed5a:	6963      	ldr	r3, [r4, #20]
 800ed5c:	b2f6      	uxtb	r6, r6
 800ed5e:	4283      	cmp	r3, r0
 800ed60:	4637      	mov	r7, r6
 800ed62:	dc04      	bgt.n	800ed6e <__swbuf_r+0x3a>
 800ed64:	4621      	mov	r1, r4
 800ed66:	4628      	mov	r0, r5
 800ed68:	f7ff f87c 	bl	800de64 <_fflush_r>
 800ed6c:	b9e0      	cbnz	r0, 800eda8 <__swbuf_r+0x74>
 800ed6e:	68a3      	ldr	r3, [r4, #8]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	60a3      	str	r3, [r4, #8]
 800ed74:	6823      	ldr	r3, [r4, #0]
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	6022      	str	r2, [r4, #0]
 800ed7a:	701e      	strb	r6, [r3, #0]
 800ed7c:	6962      	ldr	r2, [r4, #20]
 800ed7e:	1c43      	adds	r3, r0, #1
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d004      	beq.n	800ed8e <__swbuf_r+0x5a>
 800ed84:	89a3      	ldrh	r3, [r4, #12]
 800ed86:	07db      	lsls	r3, r3, #31
 800ed88:	d506      	bpl.n	800ed98 <__swbuf_r+0x64>
 800ed8a:	2e0a      	cmp	r6, #10
 800ed8c:	d104      	bne.n	800ed98 <__swbuf_r+0x64>
 800ed8e:	4621      	mov	r1, r4
 800ed90:	4628      	mov	r0, r5
 800ed92:	f7ff f867 	bl	800de64 <_fflush_r>
 800ed96:	b938      	cbnz	r0, 800eda8 <__swbuf_r+0x74>
 800ed98:	4638      	mov	r0, r7
 800ed9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	4628      	mov	r0, r5
 800eda0:	f000 f806 	bl	800edb0 <__swsetup_r>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d0d5      	beq.n	800ed54 <__swbuf_r+0x20>
 800eda8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800edac:	e7f4      	b.n	800ed98 <__swbuf_r+0x64>
	...

0800edb0 <__swsetup_r>:
 800edb0:	b538      	push	{r3, r4, r5, lr}
 800edb2:	4b2a      	ldr	r3, [pc, #168]	; (800ee5c <__swsetup_r+0xac>)
 800edb4:	4605      	mov	r5, r0
 800edb6:	6818      	ldr	r0, [r3, #0]
 800edb8:	460c      	mov	r4, r1
 800edba:	b118      	cbz	r0, 800edc4 <__swsetup_r+0x14>
 800edbc:	6a03      	ldr	r3, [r0, #32]
 800edbe:	b90b      	cbnz	r3, 800edc4 <__swsetup_r+0x14>
 800edc0:	f7fc fbfe 	bl	800b5c0 <__sinit>
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edca:	0718      	lsls	r0, r3, #28
 800edcc:	d422      	bmi.n	800ee14 <__swsetup_r+0x64>
 800edce:	06d9      	lsls	r1, r3, #27
 800edd0:	d407      	bmi.n	800ede2 <__swsetup_r+0x32>
 800edd2:	2309      	movs	r3, #9
 800edd4:	602b      	str	r3, [r5, #0]
 800edd6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800edda:	81a3      	strh	r3, [r4, #12]
 800eddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ede0:	e034      	b.n	800ee4c <__swsetup_r+0x9c>
 800ede2:	0758      	lsls	r0, r3, #29
 800ede4:	d512      	bpl.n	800ee0c <__swsetup_r+0x5c>
 800ede6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ede8:	b141      	cbz	r1, 800edfc <__swsetup_r+0x4c>
 800edea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800edee:	4299      	cmp	r1, r3
 800edf0:	d002      	beq.n	800edf8 <__swsetup_r+0x48>
 800edf2:	4628      	mov	r0, r5
 800edf4:	f7fe f9fa 	bl	800d1ec <_free_r>
 800edf8:	2300      	movs	r3, #0
 800edfa:	6363      	str	r3, [r4, #52]	; 0x34
 800edfc:	89a3      	ldrh	r3, [r4, #12]
 800edfe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ee02:	81a3      	strh	r3, [r4, #12]
 800ee04:	2300      	movs	r3, #0
 800ee06:	6063      	str	r3, [r4, #4]
 800ee08:	6923      	ldr	r3, [r4, #16]
 800ee0a:	6023      	str	r3, [r4, #0]
 800ee0c:	89a3      	ldrh	r3, [r4, #12]
 800ee0e:	f043 0308 	orr.w	r3, r3, #8
 800ee12:	81a3      	strh	r3, [r4, #12]
 800ee14:	6923      	ldr	r3, [r4, #16]
 800ee16:	b94b      	cbnz	r3, 800ee2c <__swsetup_r+0x7c>
 800ee18:	89a3      	ldrh	r3, [r4, #12]
 800ee1a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee22:	d003      	beq.n	800ee2c <__swsetup_r+0x7c>
 800ee24:	4621      	mov	r1, r4
 800ee26:	4628      	mov	r0, r5
 800ee28:	f000 f840 	bl	800eeac <__smakebuf_r>
 800ee2c:	89a0      	ldrh	r0, [r4, #12]
 800ee2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee32:	f010 0301 	ands.w	r3, r0, #1
 800ee36:	d00a      	beq.n	800ee4e <__swsetup_r+0x9e>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	60a3      	str	r3, [r4, #8]
 800ee3c:	6963      	ldr	r3, [r4, #20]
 800ee3e:	425b      	negs	r3, r3
 800ee40:	61a3      	str	r3, [r4, #24]
 800ee42:	6923      	ldr	r3, [r4, #16]
 800ee44:	b943      	cbnz	r3, 800ee58 <__swsetup_r+0xa8>
 800ee46:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee4a:	d1c4      	bne.n	800edd6 <__swsetup_r+0x26>
 800ee4c:	bd38      	pop	{r3, r4, r5, pc}
 800ee4e:	0781      	lsls	r1, r0, #30
 800ee50:	bf58      	it	pl
 800ee52:	6963      	ldrpl	r3, [r4, #20]
 800ee54:	60a3      	str	r3, [r4, #8]
 800ee56:	e7f4      	b.n	800ee42 <__swsetup_r+0x92>
 800ee58:	2000      	movs	r0, #0
 800ee5a:	e7f7      	b.n	800ee4c <__swsetup_r+0x9c>
 800ee5c:	2000025c 	.word	0x2000025c

0800ee60 <__swhatbuf_r>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	460c      	mov	r4, r1
 800ee64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee68:	2900      	cmp	r1, #0
 800ee6a:	b096      	sub	sp, #88	; 0x58
 800ee6c:	4615      	mov	r5, r2
 800ee6e:	461e      	mov	r6, r3
 800ee70:	da0d      	bge.n	800ee8e <__swhatbuf_r+0x2e>
 800ee72:	89a3      	ldrh	r3, [r4, #12]
 800ee74:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ee78:	f04f 0100 	mov.w	r1, #0
 800ee7c:	bf0c      	ite	eq
 800ee7e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ee82:	2340      	movne	r3, #64	; 0x40
 800ee84:	2000      	movs	r0, #0
 800ee86:	6031      	str	r1, [r6, #0]
 800ee88:	602b      	str	r3, [r5, #0]
 800ee8a:	b016      	add	sp, #88	; 0x58
 800ee8c:	bd70      	pop	{r4, r5, r6, pc}
 800ee8e:	466a      	mov	r2, sp
 800ee90:	f000 f848 	bl	800ef24 <_fstat_r>
 800ee94:	2800      	cmp	r0, #0
 800ee96:	dbec      	blt.n	800ee72 <__swhatbuf_r+0x12>
 800ee98:	9901      	ldr	r1, [sp, #4]
 800ee9a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ee9e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eea2:	4259      	negs	r1, r3
 800eea4:	4159      	adcs	r1, r3
 800eea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eeaa:	e7eb      	b.n	800ee84 <__swhatbuf_r+0x24>

0800eeac <__smakebuf_r>:
 800eeac:	898b      	ldrh	r3, [r1, #12]
 800eeae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eeb0:	079d      	lsls	r5, r3, #30
 800eeb2:	4606      	mov	r6, r0
 800eeb4:	460c      	mov	r4, r1
 800eeb6:	d507      	bpl.n	800eec8 <__smakebuf_r+0x1c>
 800eeb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800eebc:	6023      	str	r3, [r4, #0]
 800eebe:	6123      	str	r3, [r4, #16]
 800eec0:	2301      	movs	r3, #1
 800eec2:	6163      	str	r3, [r4, #20]
 800eec4:	b002      	add	sp, #8
 800eec6:	bd70      	pop	{r4, r5, r6, pc}
 800eec8:	ab01      	add	r3, sp, #4
 800eeca:	466a      	mov	r2, sp
 800eecc:	f7ff ffc8 	bl	800ee60 <__swhatbuf_r>
 800eed0:	9900      	ldr	r1, [sp, #0]
 800eed2:	4605      	mov	r5, r0
 800eed4:	4630      	mov	r0, r6
 800eed6:	f7fe fead 	bl	800dc34 <_malloc_r>
 800eeda:	b948      	cbnz	r0, 800eef0 <__smakebuf_r+0x44>
 800eedc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eee0:	059a      	lsls	r2, r3, #22
 800eee2:	d4ef      	bmi.n	800eec4 <__smakebuf_r+0x18>
 800eee4:	f023 0303 	bic.w	r3, r3, #3
 800eee8:	f043 0302 	orr.w	r3, r3, #2
 800eeec:	81a3      	strh	r3, [r4, #12]
 800eeee:	e7e3      	b.n	800eeb8 <__smakebuf_r+0xc>
 800eef0:	89a3      	ldrh	r3, [r4, #12]
 800eef2:	6020      	str	r0, [r4, #0]
 800eef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eef8:	81a3      	strh	r3, [r4, #12]
 800eefa:	9b00      	ldr	r3, [sp, #0]
 800eefc:	6163      	str	r3, [r4, #20]
 800eefe:	9b01      	ldr	r3, [sp, #4]
 800ef00:	6120      	str	r0, [r4, #16]
 800ef02:	b15b      	cbz	r3, 800ef1c <__smakebuf_r+0x70>
 800ef04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ef08:	4630      	mov	r0, r6
 800ef0a:	f000 f81d 	bl	800ef48 <_isatty_r>
 800ef0e:	b128      	cbz	r0, 800ef1c <__smakebuf_r+0x70>
 800ef10:	89a3      	ldrh	r3, [r4, #12]
 800ef12:	f023 0303 	bic.w	r3, r3, #3
 800ef16:	f043 0301 	orr.w	r3, r3, #1
 800ef1a:	81a3      	strh	r3, [r4, #12]
 800ef1c:	89a3      	ldrh	r3, [r4, #12]
 800ef1e:	431d      	orrs	r5, r3
 800ef20:	81a5      	strh	r5, [r4, #12]
 800ef22:	e7cf      	b.n	800eec4 <__smakebuf_r+0x18>

0800ef24 <_fstat_r>:
 800ef24:	b538      	push	{r3, r4, r5, lr}
 800ef26:	4d07      	ldr	r5, [pc, #28]	; (800ef44 <_fstat_r+0x20>)
 800ef28:	2300      	movs	r3, #0
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	4608      	mov	r0, r1
 800ef2e:	4611      	mov	r1, r2
 800ef30:	602b      	str	r3, [r5, #0]
 800ef32:	f7f4 ffee 	bl	8003f12 <_fstat>
 800ef36:	1c43      	adds	r3, r0, #1
 800ef38:	d102      	bne.n	800ef40 <_fstat_r+0x1c>
 800ef3a:	682b      	ldr	r3, [r5, #0]
 800ef3c:	b103      	cbz	r3, 800ef40 <_fstat_r+0x1c>
 800ef3e:	6023      	str	r3, [r4, #0]
 800ef40:	bd38      	pop	{r3, r4, r5, pc}
 800ef42:	bf00      	nop
 800ef44:	200016ec 	.word	0x200016ec

0800ef48 <_isatty_r>:
 800ef48:	b538      	push	{r3, r4, r5, lr}
 800ef4a:	4d06      	ldr	r5, [pc, #24]	; (800ef64 <_isatty_r+0x1c>)
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	4604      	mov	r4, r0
 800ef50:	4608      	mov	r0, r1
 800ef52:	602b      	str	r3, [r5, #0]
 800ef54:	f7f4 ffed 	bl	8003f32 <_isatty>
 800ef58:	1c43      	adds	r3, r0, #1
 800ef5a:	d102      	bne.n	800ef62 <_isatty_r+0x1a>
 800ef5c:	682b      	ldr	r3, [r5, #0]
 800ef5e:	b103      	cbz	r3, 800ef62 <_isatty_r+0x1a>
 800ef60:	6023      	str	r3, [r4, #0]
 800ef62:	bd38      	pop	{r3, r4, r5, pc}
 800ef64:	200016ec 	.word	0x200016ec

0800ef68 <_raise_r>:
 800ef68:	291f      	cmp	r1, #31
 800ef6a:	b538      	push	{r3, r4, r5, lr}
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	460d      	mov	r5, r1
 800ef70:	d904      	bls.n	800ef7c <_raise_r+0x14>
 800ef72:	2316      	movs	r3, #22
 800ef74:	6003      	str	r3, [r0, #0]
 800ef76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef7a:	bd38      	pop	{r3, r4, r5, pc}
 800ef7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ef7e:	b112      	cbz	r2, 800ef86 <_raise_r+0x1e>
 800ef80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef84:	b94b      	cbnz	r3, 800ef9a <_raise_r+0x32>
 800ef86:	4620      	mov	r0, r4
 800ef88:	f000 f830 	bl	800efec <_getpid_r>
 800ef8c:	462a      	mov	r2, r5
 800ef8e:	4601      	mov	r1, r0
 800ef90:	4620      	mov	r0, r4
 800ef92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef96:	f000 b817 	b.w	800efc8 <_kill_r>
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d00a      	beq.n	800efb4 <_raise_r+0x4c>
 800ef9e:	1c59      	adds	r1, r3, #1
 800efa0:	d103      	bne.n	800efaa <_raise_r+0x42>
 800efa2:	2316      	movs	r3, #22
 800efa4:	6003      	str	r3, [r0, #0]
 800efa6:	2001      	movs	r0, #1
 800efa8:	e7e7      	b.n	800ef7a <_raise_r+0x12>
 800efaa:	2400      	movs	r4, #0
 800efac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800efb0:	4628      	mov	r0, r5
 800efb2:	4798      	blx	r3
 800efb4:	2000      	movs	r0, #0
 800efb6:	e7e0      	b.n	800ef7a <_raise_r+0x12>

0800efb8 <raise>:
 800efb8:	4b02      	ldr	r3, [pc, #8]	; (800efc4 <raise+0xc>)
 800efba:	4601      	mov	r1, r0
 800efbc:	6818      	ldr	r0, [r3, #0]
 800efbe:	f7ff bfd3 	b.w	800ef68 <_raise_r>
 800efc2:	bf00      	nop
 800efc4:	2000025c 	.word	0x2000025c

0800efc8 <_kill_r>:
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	4d07      	ldr	r5, [pc, #28]	; (800efe8 <_kill_r+0x20>)
 800efcc:	2300      	movs	r3, #0
 800efce:	4604      	mov	r4, r0
 800efd0:	4608      	mov	r0, r1
 800efd2:	4611      	mov	r1, r2
 800efd4:	602b      	str	r3, [r5, #0]
 800efd6:	f7f4 ff3d 	bl	8003e54 <_kill>
 800efda:	1c43      	adds	r3, r0, #1
 800efdc:	d102      	bne.n	800efe4 <_kill_r+0x1c>
 800efde:	682b      	ldr	r3, [r5, #0]
 800efe0:	b103      	cbz	r3, 800efe4 <_kill_r+0x1c>
 800efe2:	6023      	str	r3, [r4, #0]
 800efe4:	bd38      	pop	{r3, r4, r5, pc}
 800efe6:	bf00      	nop
 800efe8:	200016ec 	.word	0x200016ec

0800efec <_getpid_r>:
 800efec:	f7f4 bf2a 	b.w	8003e44 <_getpid>

0800eff0 <_init>:
 800eff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eff2:	bf00      	nop
 800eff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eff6:	bc08      	pop	{r3}
 800eff8:	469e      	mov	lr, r3
 800effa:	4770      	bx	lr

0800effc <_fini>:
 800effc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800effe:	bf00      	nop
 800f000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f002:	bc08      	pop	{r3}
 800f004:	469e      	mov	lr, r3
 800f006:	4770      	bx	lr
