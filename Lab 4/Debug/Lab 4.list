
Lab 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb38  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800ecf8  0800ecf8  0001ecf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f400  0800f400  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800f400  0800f400  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f408  0800f408  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f408  0800f408  0001f408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f40c  0800f40c  0001f40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800f410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001410  20000260  0800f670  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001670  0800f670  00021670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023e74  00000000  00000000  000202d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e3b  00000000  00000000  00044147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  00048f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016e1  00000000  00000000  0004ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030597  00000000  00000000  0004c3f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023766  00000000  00000000  0007c988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00120c8b  00000000  00000000  000a00ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008f90  00000000  00000000  001c0d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001c9d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000260 	.word	0x20000260
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ece0 	.word	0x0800ece0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000264 	.word	0x20000264
 80001fc:	0800ece0 	.word	0x0800ece0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ccc:	f000 b9a6 	b.w	800101c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9e08      	ldr	r6, [sp, #32]
 8000d5a:	460d      	mov	r5, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460f      	mov	r7, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4694      	mov	ip, r2
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0xe2>
 8000d6a:	fab2 f382 	clz	r3, r2
 8000d6e:	b143      	cbz	r3, 8000d82 <__udivmoddi4+0x2e>
 8000d70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d74:	f1c3 0220 	rsb	r2, r3, #32
 8000d78:	409f      	lsls	r7, r3
 8000d7a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	409c      	lsls	r4, r3
 8000d82:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d86:	fa1f f58c 	uxth.w	r5, ip
 8000d8a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d8e:	0c22      	lsrs	r2, r4, #16
 8000d90:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	fb01 f005 	mul.w	r0, r1, r5
 8000d9c:	4290      	cmp	r0, r2
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da0:	eb1c 0202 	adds.w	r2, ip, r2
 8000da4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000da8:	f080 811c 	bcs.w	8000fe4 <__udivmoddi4+0x290>
 8000dac:	4290      	cmp	r0, r2
 8000dae:	f240 8119 	bls.w	8000fe4 <__udivmoddi4+0x290>
 8000db2:	3902      	subs	r1, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a12      	subs	r2, r2, r0
 8000db8:	b2a4      	uxth	r4, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dc6:	fb00 f505 	mul.w	r5, r0, r5
 8000dca:	42a5      	cmp	r5, r4
 8000dcc:	d90a      	bls.n	8000de4 <__udivmoddi4+0x90>
 8000dce:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x294>
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x294>
 8000de0:	4464      	add	r4, ip
 8000de2:	3802      	subs	r0, #2
 8000de4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de8:	1b64      	subs	r4, r4, r5
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11e      	cbz	r6, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40dc      	lsrs	r4, r3
 8000df0:	2300      	movs	r3, #0
 8000df2:	e9c6 4300 	strd	r4, r3, [r6]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0xbc>
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	f000 80ed 	beq.w	8000fde <__udivmoddi4+0x28a>
 8000e04:	2100      	movs	r1, #0
 8000e06:	e9c6 0500 	strd	r0, r5, [r6]
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e10:	fab3 f183 	clz	r1, r3
 8000e14:	2900      	cmp	r1, #0
 8000e16:	d149      	bne.n	8000eac <__udivmoddi4+0x158>
 8000e18:	42ab      	cmp	r3, r5
 8000e1a:	d302      	bcc.n	8000e22 <__udivmoddi4+0xce>
 8000e1c:	4282      	cmp	r2, r0
 8000e1e:	f200 80f8 	bhi.w	8001012 <__udivmoddi4+0x2be>
 8000e22:	1a84      	subs	r4, r0, r2
 8000e24:	eb65 0203 	sbc.w	r2, r5, r3
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4617      	mov	r7, r2
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0e2      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	e9c6 4700 	strd	r4, r7, [r6]
 8000e34:	e7df      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e36:	b902      	cbnz	r2, 8000e3a <__udivmoddi4+0xe6>
 8000e38:	deff      	udf	#255	; 0xff
 8000e3a:	fab2 f382 	clz	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8090 	bne.w	8000f64 <__udivmoddi4+0x210>
 8000e44:	1a8a      	subs	r2, r1, r2
 8000e46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4a:	fa1f fe8c 	uxth.w	lr, ip
 8000e4e:	2101      	movs	r1, #1
 8000e50:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e54:	fb07 2015 	mls	r0, r7, r5, r2
 8000e58:	0c22      	lsrs	r2, r4, #16
 8000e5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e5e:	fb0e f005 	mul.w	r0, lr, r5
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x124>
 8000e66:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x122>
 8000e70:	4290      	cmp	r0, r2
 8000e72:	f200 80cb 	bhi.w	800100c <__udivmoddi4+0x2b8>
 8000e76:	4645      	mov	r5, r8
 8000e78:	1a12      	subs	r2, r2, r0
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e80:	fb07 2210 	mls	r2, r7, r0, r2
 8000e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e88:	fb0e fe00 	mul.w	lr, lr, r0
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x14e>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x14c>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	f200 80bb 	bhi.w	8001016 <__udivmoddi4+0x2c2>
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eaa:	e79f      	b.n	8000dec <__udivmoddi4+0x98>
 8000eac:	f1c1 0720 	rsb	r7, r1, #32
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eba:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebe:	fa20 f307 	lsr.w	r3, r0, r7
 8000ec2:	40fd      	lsrs	r5, r7
 8000ec4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec8:	4323      	orrs	r3, r4
 8000eca:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ece:	fa1f fe8c 	uxth.w	lr, ip
 8000ed2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ed6:	0c1c      	lsrs	r4, r3, #16
 8000ed8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000edc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ee0:	42a5      	cmp	r5, r4
 8000ee2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eea:	d90b      	bls.n	8000f04 <__udivmoddi4+0x1b0>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ef4:	f080 8088 	bcs.w	8001008 <__udivmoddi4+0x2b4>
 8000ef8:	42a5      	cmp	r5, r4
 8000efa:	f240 8085 	bls.w	8001008 <__udivmoddi4+0x2b4>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4464      	add	r4, ip
 8000f04:	1b64      	subs	r4, r4, r5
 8000f06:	b29d      	uxth	r5, r3
 8000f08:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f0c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f10:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f14:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f18:	45a6      	cmp	lr, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x1da>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000f24:	d26c      	bcs.n	8001000 <__udivmoddi4+0x2ac>
 8000f26:	45a6      	cmp	lr, r4
 8000f28:	d96a      	bls.n	8001000 <__udivmoddi4+0x2ac>
 8000f2a:	3b02      	subs	r3, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f32:	fba3 9502 	umull	r9, r5, r3, r2
 8000f36:	eba4 040e 	sub.w	r4, r4, lr
 8000f3a:	42ac      	cmp	r4, r5
 8000f3c:	46c8      	mov	r8, r9
 8000f3e:	46ae      	mov	lr, r5
 8000f40:	d356      	bcc.n	8000ff0 <__udivmoddi4+0x29c>
 8000f42:	d053      	beq.n	8000fec <__udivmoddi4+0x298>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x208>
 8000f46:	ebb0 0208 	subs.w	r2, r0, r8
 8000f4a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40ca      	lsrs	r2, r1
 8000f54:	40cc      	lsrs	r4, r1
 8000f56:	4317      	orrs	r7, r2
 8000f58:	e9c6 7400 	strd	r7, r4, [r6]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	2100      	movs	r1, #0
 8000f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f64:	f1c3 0120 	rsb	r1, r3, #32
 8000f68:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f6c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f70:	fa25 f101 	lsr.w	r1, r5, r1
 8000f74:	409d      	lsls	r5, r3
 8000f76:	432a      	orrs	r2, r5
 8000f78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f7c:	fa1f fe8c 	uxth.w	lr, ip
 8000f80:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f84:	fb07 1510 	mls	r5, r7, r0, r1
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f8e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f92:	428d      	cmp	r5, r1
 8000f94:	fa04 f403 	lsl.w	r4, r4, r3
 8000f98:	d908      	bls.n	8000fac <__udivmoddi4+0x258>
 8000f9a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f9e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fa2:	d22f      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fa4:	428d      	cmp	r5, r1
 8000fa6:	d92d      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fa8:	3802      	subs	r0, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	1b49      	subs	r1, r1, r5
 8000fae:	b292      	uxth	r2, r2
 8000fb0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fb4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fb8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fbc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fc0:	4291      	cmp	r1, r2
 8000fc2:	d908      	bls.n	8000fd6 <__udivmoddi4+0x282>
 8000fc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fcc:	d216      	bcs.n	8000ffc <__udivmoddi4+0x2a8>
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d914      	bls.n	8000ffc <__udivmoddi4+0x2a8>
 8000fd2:	3d02      	subs	r5, #2
 8000fd4:	4462      	add	r2, ip
 8000fd6:	1a52      	subs	r2, r2, r1
 8000fd8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fdc:	e738      	b.n	8000e50 <__udivmoddi4+0xfc>
 8000fde:	4631      	mov	r1, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e708      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000fe4:	4639      	mov	r1, r7
 8000fe6:	e6e6      	b.n	8000db6 <__udivmoddi4+0x62>
 8000fe8:	4610      	mov	r0, r2
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x90>
 8000fec:	4548      	cmp	r0, r9
 8000fee:	d2a9      	bcs.n	8000f44 <__udivmoddi4+0x1f0>
 8000ff0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ff4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	e7a3      	b.n	8000f44 <__udivmoddi4+0x1f0>
 8000ffc:	4645      	mov	r5, r8
 8000ffe:	e7ea      	b.n	8000fd6 <__udivmoddi4+0x282>
 8001000:	462b      	mov	r3, r5
 8001002:	e794      	b.n	8000f2e <__udivmoddi4+0x1da>
 8001004:	4640      	mov	r0, r8
 8001006:	e7d1      	b.n	8000fac <__udivmoddi4+0x258>
 8001008:	46d0      	mov	r8, sl
 800100a:	e77b      	b.n	8000f04 <__udivmoddi4+0x1b0>
 800100c:	3d02      	subs	r5, #2
 800100e:	4462      	add	r2, ip
 8001010:	e732      	b.n	8000e78 <__udivmoddi4+0x124>
 8001012:	4608      	mov	r0, r1
 8001014:	e70a      	b.n	8000e2c <__udivmoddi4+0xd8>
 8001016:	4464      	add	r4, ip
 8001018:	3802      	subs	r0, #2
 800101a:	e742      	b.n	8000ea2 <__udivmoddi4+0x14e>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <vApplicationGetIdleTaskMemory+0x2c>)
 8001030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <vApplicationGetIdleTaskMemory+0x30>)
 8001036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000027c 	.word	0x2000027c
 8001050:	2000031c 	.word	0x2000031c

08001054 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2120      	movs	r1, #32
 8001066:	4618      	mov	r0, r3
 8001068:	f001 fdb6 	bl	8002bd8 <SENSOR_IO_Read>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001096:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	7bfa      	ldrb	r2, [r7, #15]
 800109e:	2120      	movs	r1, #32
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 fd7f 	bl	8002ba4 <SENSOR_IO_Write>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b088      	sub	sp, #32
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	b2d8      	uxtb	r0, r3
 80010bc:	f107 0208 	add.w	r2, r7, #8
 80010c0:	2302      	movs	r3, #2
 80010c2:	21b2      	movs	r1, #178	; 0xb2
 80010c4:	f001 fda6 	bl	8002c14 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80010c8:	88fb      	ldrh	r3, [r7, #6]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2135      	movs	r1, #53	; 0x35
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 fd82 	bl	8002bd8 <SENSOR_IO_Read>
 80010d4:	4603      	mov	r3, r0
 80010d6:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80010d8:	7ffb      	ldrb	r3, [r7, #31]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21b      	sxth	r3, r3
 80010de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7a3b      	ldrb	r3, [r7, #8]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80010ec:	7ffb      	ldrb	r3, [r7, #31]
 80010ee:	019b      	lsls	r3, r3, #6
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7a7b      	ldrb	r3, [r7, #9]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001100:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001104:	10db      	asrs	r3, r3, #3
 8001106:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001108:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800110c:	10db      	asrs	r3, r3, #3
 800110e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	b2d8      	uxtb	r0, r3
 8001114:	f107 0208 	add.w	r2, r7, #8
 8001118:	2304      	movs	r3, #4
 800111a:	21bc      	movs	r1, #188	; 0xbc
 800111c:	f001 fd7a 	bl	8002c14 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001120:	7a7b      	ldrb	r3, [r7, #9]
 8001122:	021b      	lsls	r3, r3, #8
 8001124:	b21a      	sxth	r2, r3
 8001126:	7a3b      	ldrb	r3, [r7, #8]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7abb      	ldrb	r3, [r7, #10]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	b2d8      	uxtb	r0, r3
 8001140:	f107 0208 	add.w	r2, r7, #8
 8001144:	2302      	movs	r3, #2
 8001146:	21aa      	movs	r1, #170	; 0xaa
 8001148:	f001 fd64 	bl	8002c14 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800114c:	7a7b      	ldrb	r3, [r7, #9]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	b21a      	sxth	r2, r3
 8001152:	7a3b      	ldrb	r3, [r7, #8]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800115a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800115e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001170:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	ee07 3a90 	vmov	s15, r3
 800117a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001182:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001186:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001194:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001198:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011a8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	ee07 3a90 	vmov	s15, r3
}
 80011b2:	eeb0 0a67 	vmov.f32	s0, s15
 80011b6:	3720      	adds	r7, #32
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	463b      	mov	r3, r7
 80011c4:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 80011c8:	783b      	ldrb	r3, [r7, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	2120      	movs	r1, #32
 80011ce:	203c      	movs	r0, #60	; 0x3c
 80011d0:	f001 fce8 	bl	8002ba4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2121      	movs	r1, #33	; 0x21
 80011da:	203c      	movs	r0, #60	; 0x3c
 80011dc:	f001 fce2 	bl	8002ba4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 80011e0:	78bb      	ldrb	r3, [r7, #2]
 80011e2:	461a      	mov	r2, r3
 80011e4:	2122      	movs	r1, #34	; 0x22
 80011e6:	203c      	movs	r0, #60	; 0x3c
 80011e8:	f001 fcdc 	bl	8002ba4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	461a      	mov	r2, r3
 80011f0:	2123      	movs	r1, #35	; 0x23
 80011f2:	203c      	movs	r0, #60	; 0x3c
 80011f4:	f001 fcd6 	bl	8002ba4 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 80011f8:	793b      	ldrb	r3, [r7, #4]
 80011fa:	461a      	mov	r2, r3
 80011fc:	2124      	movs	r1, #36	; 0x24
 80011fe:	203c      	movs	r0, #60	; 0x3c
 8001200:	f001 fcd0 	bl	8002ba4 <SENSOR_IO_Write>
}
 8001204:	bf00      	nop
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001216:	2122      	movs	r1, #34	; 0x22
 8001218:	203c      	movs	r0, #60	; 0x3c
 800121a:	f001 fcdd 	bl	8002bd8 <SENSOR_IO_Read>
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f023 0303 	bic.w	r3, r3, #3
 8001228:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f043 0303 	orr.w	r3, r3, #3
 8001230:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	461a      	mov	r2, r3
 8001236:	2122      	movs	r1, #34	; 0x22
 8001238:	203c      	movs	r0, #60	; 0x3c
 800123a:	f001 fcb3 	bl	8002ba4 <SENSOR_IO_Write>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800124a:	f001 fca1 	bl	8002b90 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800124e:	210f      	movs	r1, #15
 8001250:	203c      	movs	r0, #60	; 0x3c
 8001252:	f001 fcc1 	bl	8002bd8 <SENSOR_IO_Read>
 8001256:	4603      	mov	r3, r0
}
 8001258:	4618      	mov	r0, r3
 800125a:	bd80      	pop	{r7, pc}

0800125c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800126a:	2122      	movs	r1, #34	; 0x22
 800126c:	203c      	movs	r0, #60	; 0x3c
 800126e:	f001 fcb3 	bl	8002bd8 <SENSOR_IO_Read>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001276:	7bfb      	ldrb	r3, [r7, #15]
 8001278:	f023 0320 	bic.w	r3, r3, #32
 800127c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f043 0320 	orr.w	r3, r3, #32
 800128a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800128c:	7bfb      	ldrb	r3, [r7, #15]
 800128e:	461a      	mov	r2, r3
 8001290:	2122      	movs	r1, #34	; 0x22
 8001292:	203c      	movs	r0, #60	; 0x3c
 8001294:	f001 fc86 	bl	8002ba4 <SENSOR_IO_Write>
}
 8001298:	bf00      	nop
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80012b6:	2121      	movs	r1, #33	; 0x21
 80012b8:	203c      	movs	r0, #60	; 0x3c
 80012ba:	f001 fc8d 	bl	8002bd8 <SENSOR_IO_Read>
 80012be:	4603      	mov	r3, r0
 80012c0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 80012c2:	f107 0208 	add.w	r2, r7, #8
 80012c6:	2306      	movs	r3, #6
 80012c8:	21a8      	movs	r1, #168	; 0xa8
 80012ca:	203c      	movs	r0, #60	; 0x3c
 80012cc:	f001 fca2 	bl	8002c14 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	77fb      	strb	r3, [r7, #31]
 80012d4:	e01c      	b.n	8001310 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80012d6:	7ffb      	ldrb	r3, [r7, #31]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	3301      	adds	r3, #1
 80012dc:	3320      	adds	r3, #32
 80012de:	443b      	add	r3, r7
 80012e0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	7ffb      	ldrb	r3, [r7, #31]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	3320      	adds	r3, #32
 80012f0:	443b      	add	r3, r7
 80012f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	7ffb      	ldrb	r3, [r7, #31]
 80012fe:	b212      	sxth	r2, r2
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	3320      	adds	r3, #32
 8001304:	443b      	add	r3, r7
 8001306:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800130a:	7ffb      	ldrb	r3, [r7, #31]
 800130c:	3301      	adds	r3, #1
 800130e:	77fb      	strb	r3, [r7, #31]
 8001310:	7ffb      	ldrb	r3, [r7, #31]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d9df      	bls.n	80012d6 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800131c:	2b60      	cmp	r3, #96	; 0x60
 800131e:	d013      	beq.n	8001348 <LIS3MDL_MagReadXYZ+0xa8>
 8001320:	2b60      	cmp	r3, #96	; 0x60
 8001322:	dc14      	bgt.n	800134e <LIS3MDL_MagReadXYZ+0xae>
 8001324:	2b40      	cmp	r3, #64	; 0x40
 8001326:	d00c      	beq.n	8001342 <LIS3MDL_MagReadXYZ+0xa2>
 8001328:	2b40      	cmp	r3, #64	; 0x40
 800132a:	dc10      	bgt.n	800134e <LIS3MDL_MagReadXYZ+0xae>
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <LIS3MDL_MagReadXYZ+0x96>
 8001330:	2b20      	cmp	r3, #32
 8001332:	d003      	beq.n	800133c <LIS3MDL_MagReadXYZ+0x9c>
 8001334:	e00b      	b.n	800134e <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <LIS3MDL_MagReadXYZ+0xfc>)
 8001338:	61bb      	str	r3, [r7, #24]
    break;
 800133a:	e008      	b.n	800134e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <LIS3MDL_MagReadXYZ+0x100>)
 800133e:	61bb      	str	r3, [r7, #24]
    break;
 8001340:	e005      	b.n	800134e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <LIS3MDL_MagReadXYZ+0x104>)
 8001344:	61bb      	str	r3, [r7, #24]
    break;
 8001346:	e002      	b.n	800134e <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001348:	4b17      	ldr	r3, [pc, #92]	; (80013a8 <LIS3MDL_MagReadXYZ+0x108>)
 800134a:	61bb      	str	r3, [r7, #24]
    break;    
 800134c:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800134e:	2300      	movs	r3, #0
 8001350:	77fb      	strb	r3, [r7, #31]
 8001352:	e01a      	b.n	800138a <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001354:	7ffb      	ldrb	r3, [r7, #31]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	3320      	adds	r3, #32
 800135a:	443b      	add	r3, r7
 800135c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001368:	edd7 7a06 	vldr	s15, [r7, #24]
 800136c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001370:	7ffb      	ldrb	r3, [r7, #31]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137c:	ee17 2a90 	vmov	r2, s15
 8001380:	b212      	sxth	r2, r2
 8001382:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001384:	7ffb      	ldrb	r3, [r7, #31]
 8001386:	3301      	adds	r3, #1
 8001388:	77fb      	strb	r3, [r7, #31]
 800138a:	7ffb      	ldrb	r3, [r7, #31]
 800138c:	2b02      	cmp	r3, #2
 800138e:	d9e1      	bls.n	8001354 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	3e0f5c29 	.word	0x3e0f5c29
 80013a0:	3e947ae1 	.word	0x3e947ae1
 80013a4:	3edc28f6 	.word	0x3edc28f6
 80013a8:	3f147ae1 	.word	0x3f147ae1

080013ac <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f879 	bl	80014b0 <LPS22HB_Init>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 80013d4:	f001 fbdc 	bl	8002b90 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	210f      	movs	r1, #15
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fbfa 	bl	8002bd8 <SENSOR_IO_Read>
 80013e4:	4603      	mov	r3, r0
 80013e6:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8001402:	2300      	movs	r3, #0
 8001404:	74fb      	strb	r3, [r7, #19]
 8001406:	e013      	b.n	8001430 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	7cfb      	ldrb	r3, [r7, #19]
 800140e:	3328      	adds	r3, #40	; 0x28
 8001410:	b2db      	uxtb	r3, r3
 8001412:	7cfc      	ldrb	r4, [r7, #19]
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f001 fbde 	bl	8002bd8 <SENSOR_IO_Read>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	f104 0318 	add.w	r3, r4, #24
 8001424:	443b      	add	r3, r7
 8001426:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800142a:	7cfb      	ldrb	r3, [r7, #19]
 800142c:	3301      	adds	r3, #1
 800142e:	74fb      	strb	r3, [r7, #19]
 8001430:	7cfb      	ldrb	r3, [r7, #19]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d9e8      	bls.n	8001408 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	74fb      	strb	r3, [r7, #19]
 800143a:	e00f      	b.n	800145c <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	3318      	adds	r3, #24
 8001440:	443b      	add	r3, r7
 8001442:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001446:	461a      	mov	r2, r3
 8001448:	7cfb      	ldrb	r3, [r7, #19]
 800144a:	00db      	lsls	r3, r3, #3
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	4313      	orrs	r3, r2
 8001454:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8001456:	7cfb      	ldrb	r3, [r7, #19]
 8001458:	3301      	adds	r3, #1
 800145a:	74fb      	strb	r3, [r7, #19]
 800145c:	7cfb      	ldrb	r3, [r7, #19]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d9ec      	bls.n	800143c <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001472:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2264      	movs	r2, #100	; 0x64
 800147c:	fb02 f303 	mul.w	r3, r2, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	da01      	bge.n	8001488 <LPS22HB_P_ReadPressure+0x94>
 8001484:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001488:	131b      	asrs	r3, r3, #12
 800148a:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	ee07 3a90 	vmov	s15, r3
 8001492:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001496:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80014ac <LPS22HB_P_ReadPressure+0xb8>
 800149a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800149e:	eef0 7a66 	vmov.f32	s15, s13
}
 80014a2:	eeb0 0a67 	vmov.f32	s0, s15
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	42c80000 	.word	0x42c80000

080014b0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	211a      	movs	r1, #26
 80014c0:	4618      	mov	r0, r3
 80014c2:	f001 fb89 	bl	8002bd8 <SENSOR_IO_Read>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	211a      	movs	r1, #26
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fb5e 	bl	8002ba4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2110      	movs	r1, #16
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 fb72 	bl	8002bd8 <SENSOR_IO_Read>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014fe:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	f023 0302 	bic.w	r3, r3, #2
 800150e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	f043 0302 	orr.w	r3, r3, #2
 8001516:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	7bfa      	ldrb	r2, [r7, #15]
 800151e:	2110      	movs	r1, #16
 8001520:	4618      	mov	r0, r3
 8001522:	f001 fb3f 	bl	8002ba4 <SENSOR_IO_Write>
}  
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800152e:	b580      	push	{r7, lr}
 8001530:	b084      	sub	sp, #16
 8001532:	af00      	add	r7, sp, #0
 8001534:	4603      	mov	r3, r0
 8001536:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001538:	2300      	movs	r3, #0
 800153a:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800153c:	2111      	movs	r1, #17
 800153e:	20d4      	movs	r0, #212	; 0xd4
 8001540:	f001 fb4a 	bl	8002bd8 <SENSOR_IO_Read>
 8001544:	4603      	mov	r3, r0
 8001546:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001548:	88fb      	ldrh	r3, [r7, #6]
 800154a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001554:	7bba      	ldrb	r2, [r7, #14]
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	4313      	orrs	r3, r2
 800155a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800155c:	7bbb      	ldrb	r3, [r7, #14]
 800155e:	461a      	mov	r2, r3
 8001560:	2111      	movs	r1, #17
 8001562:	20d4      	movs	r0, #212	; 0xd4
 8001564:	f001 fb1e 	bl	8002ba4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001568:	2112      	movs	r1, #18
 800156a:	20d4      	movs	r0, #212	; 0xd4
 800156c:	f001 fb34 	bl	8002bd8 <SENSOR_IO_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800157c:	7bbb      	ldrb	r3, [r7, #14]
 800157e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8001582:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001584:	7bba      	ldrb	r2, [r7, #14]
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	4313      	orrs	r3, r2
 800158a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800158c:	7bbb      	ldrb	r3, [r7, #14]
 800158e:	461a      	mov	r2, r3
 8001590:	2112      	movs	r1, #18
 8001592:	20d4      	movs	r0, #212	; 0xd4
 8001594:	f001 fb06 	bl	8002ba4 <SENSOR_IO_Write>
}
 8001598:	bf00      	nop
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80015a6:	2300      	movs	r3, #0
 80015a8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80015aa:	2111      	movs	r1, #17
 80015ac:	20d4      	movs	r0, #212	; 0xd4
 80015ae:	f001 fb13 	bl	8002bd8 <SENSOR_IO_Read>
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 030f 	and.w	r3, r3, #15
 80015bc:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	461a      	mov	r2, r3
 80015c2:	2111      	movs	r1, #17
 80015c4:	20d4      	movs	r0, #212	; 0xd4
 80015c6:	f001 faed 	bl	8002ba4 <SENSOR_IO_Write>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80015d6:	f001 fadb 	bl	8002b90 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80015da:	210f      	movs	r1, #15
 80015dc:	20d4      	movs	r0, #212	; 0xd4
 80015de:	f001 fafb 	bl	8002bd8 <SENSOR_IO_Read>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80015f6:	2116      	movs	r1, #22
 80015f8:	20d4      	movs	r0, #212	; 0xd4
 80015fa:	f001 faed 	bl	8002bd8 <SENSOR_IO_Read>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001608:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001616:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8001618:	7bfb      	ldrb	r3, [r7, #15]
 800161a:	461a      	mov	r2, r3
 800161c:	2116      	movs	r1, #22
 800161e:	20d4      	movs	r0, #212	; 0xd4
 8001620:	f001 fac0 	bl	8002ba4 <SENSOR_IO_Write>
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8001634:	2300      	movs	r3, #0
 8001636:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001642:	2111      	movs	r1, #17
 8001644:	20d4      	movs	r0, #212	; 0xd4
 8001646:	f001 fac7 	bl	8002bd8 <SENSOR_IO_Read>
 800164a:	4603      	mov	r3, r0
 800164c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800164e:	f107 0208 	add.w	r2, r7, #8
 8001652:	2306      	movs	r3, #6
 8001654:	2122      	movs	r1, #34	; 0x22
 8001656:	20d4      	movs	r0, #212	; 0xd4
 8001658:	f001 fadc 	bl	8002c14 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800165c:	2300      	movs	r3, #0
 800165e:	77fb      	strb	r3, [r7, #31]
 8001660:	e01c      	b.n	800169c <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001662:	7ffb      	ldrb	r3, [r7, #31]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	3301      	adds	r3, #1
 8001668:	3320      	adds	r3, #32
 800166a:	443b      	add	r3, r7
 800166c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001670:	b29b      	uxth	r3, r3
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	b29a      	uxth	r2, r3
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	3320      	adds	r3, #32
 800167c:	443b      	add	r3, r7
 800167e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4413      	add	r3, r2
 8001686:	b29a      	uxth	r2, r3
 8001688:	7ffb      	ldrb	r3, [r7, #31]
 800168a:	b212      	sxth	r2, r2
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	3320      	adds	r3, #32
 8001690:	443b      	add	r3, r7
 8001692:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001696:	7ffb      	ldrb	r3, [r7, #31]
 8001698:	3301      	adds	r3, #1
 800169a:	77fb      	strb	r3, [r7, #31]
 800169c:	7ffb      	ldrb	r3, [r7, #31]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d9df      	bls.n	8001662 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	f003 030c 	and.w	r3, r3, #12
 80016a8:	2b0c      	cmp	r3, #12
 80016aa:	d829      	bhi.n	8001700 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 80016ac:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 80016ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b2:	bf00      	nop
 80016b4:	080016e9 	.word	0x080016e9
 80016b8:	08001701 	.word	0x08001701
 80016bc:	08001701 	.word	0x08001701
 80016c0:	08001701 	.word	0x08001701
 80016c4:	080016ef 	.word	0x080016ef
 80016c8:	08001701 	.word	0x08001701
 80016cc:	08001701 	.word	0x08001701
 80016d0:	08001701 	.word	0x08001701
 80016d4:	080016f5 	.word	0x080016f5
 80016d8:	08001701 	.word	0x08001701
 80016dc:	08001701 	.word	0x08001701
 80016e0:	08001701 	.word	0x08001701
 80016e4:	080016fb 	.word	0x080016fb
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80016e8:	4b16      	ldr	r3, [pc, #88]	; (8001744 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80016ea:	61bb      	str	r3, [r7, #24]
    break;
 80016ec:	e008      	b.n	8001700 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80016ee:	4b16      	ldr	r3, [pc, #88]	; (8001748 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80016f0:	61bb      	str	r3, [r7, #24]
    break;
 80016f2:	e005      	b.n	8001700 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80016f6:	61bb      	str	r3, [r7, #24]
    break;
 80016f8:	e002      	b.n	8001700 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80016fc:	61bb      	str	r3, [r7, #24]
    break;    
 80016fe:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	77fb      	strb	r3, [r7, #31]
 8001704:	e016      	b.n	8001734 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	3320      	adds	r3, #32
 800170c:	443b      	add	r3, r7
 800170e:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800171a:	7ffb      	ldrb	r3, [r7, #31]
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	edd7 7a06 	vldr	s15, [r7, #24]
 8001726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800172a:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800172e:	7ffb      	ldrb	r3, [r7, #31]
 8001730:	3301      	adds	r3, #1
 8001732:	77fb      	strb	r3, [r7, #31]
 8001734:	7ffb      	ldrb	r3, [r7, #31]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d9e5      	bls.n	8001706 <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 800173a:	bf00      	nop
 800173c:	bf00      	nop
 800173e:	3720      	adds	r7, #32
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	410c0000 	.word	0x410c0000
 8001748:	418c0000 	.word	0x418c0000
 800174c:	420c0000 	.word	0x420c0000
 8001750:	428c0000 	.word	0x428c0000

08001754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b096      	sub	sp, #88	; 0x58
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800175a:	f002 faf6 	bl	8003d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175e:	f000 f87d 	bl	800185c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001762:	f000 f9af 	bl	8001ac4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001766:	f000 f8cb 	bl	8001900 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800176a:	f000 f95f 	bl	8001a2c <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 800176e:	f000 f907 	bl	8001980 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */

//Init all the sensors

  BSP_GYRO_Init();
 8001772:	f001 fa6d 	bl	8002c50 <BSP_GYRO_Init>
  BSP_MAGNETO_Init();
 8001776:	f001 fac5 	bl	8002d04 <BSP_MAGNETO_Init>
  BSP_PSENSOR_Init();
 800177a:	f001 fb07 	bl	8002d8c <BSP_PSENSOR_Init>
  BSP_TSENSOR_Init();
 800177e:	f001 ff7d 	bl	800367c <BSP_TSENSOR_Init>


  //Init the qspi
  if(BSP_QSPI_Init() != QSPI_OK) {
 8001782:	f001 fb31 	bl	8002de8 <BSP_QSPI_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <main+0x3c>
	  Error_Handler();
 800178c:	f001 f8ec 	bl	8002968 <Error_Handler>
  }

  //Turn red led off
  HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2108      	movs	r1, #8
 8001794:	4827      	ldr	r0, [pc, #156]	; (8001834 <main+0xe0>)
 8001796:	f002 fe8f 	bl	80044b8 <HAL_GPIO_WritePin>


  //Delete the memory blocks
  deleteBlocks();
 800179a:	f000 fe9d 	bl	80024d8 <deleteBlocks>


  //Say we are ready
  memset(buffer, 0, 100);
 800179e:	2264      	movs	r2, #100	; 0x64
 80017a0:	2100      	movs	r1, #0
 80017a2:	4825      	ldr	r0, [pc, #148]	; (8001838 <main+0xe4>)
 80017a4:	f00a fc72 	bl	800c08c <memset>
  sprintf(&buffer, "Ready to go \n");
 80017a8:	4924      	ldr	r1, [pc, #144]	; (800183c <main+0xe8>)
 80017aa:	4823      	ldr	r0, [pc, #140]	; (8001838 <main+0xe4>)
 80017ac:	f009 fce4 	bl	800b178 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 80017b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80017b4:	2264      	movs	r2, #100	; 0x64
 80017b6:	4920      	ldr	r1, [pc, #128]	; (8001838 <main+0xe4>)
 80017b8:	4821      	ldr	r0, [pc, #132]	; (8001840 <main+0xec>)
 80017ba:	f006 fd43 	bl	8008244 <HAL_UART_Transmit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readSensors_Tas */
  osThreadDef(readSensors_Tas, readFromSensors, osPriorityNormal, 0, 128);
 80017be:	4b21      	ldr	r3, [pc, #132]	; (8001844 <main+0xf0>)
 80017c0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80017c4:	461d      	mov	r5, r3
 80017c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensors_TasHandle = osThreadCreate(osThread(readSensors_Tas), NULL);
 80017d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017d6:	2100      	movs	r1, #0
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 fbfa 	bl	8008fd2 <osThreadCreate>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a19      	ldr	r2, [pc, #100]	; (8001848 <main+0xf4>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_Task */
  osThreadDef(UART_Task, transmitViaUART, osPriorityIdle, 0, 128);
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <main+0xf8>)
 80017e6:	f107 0420 	add.w	r4, r7, #32
 80017ea:	461d      	mov	r5, r3
 80017ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TaskHandle = osThreadCreate(osThread(UART_Task), NULL);
 80017f8:	f107 0320 	add.w	r3, r7, #32
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f007 fbe7 	bl	8008fd2 <osThreadCreate>
 8001804:	4603      	mov	r3, r0
 8001806:	4a12      	ldr	r2, [pc, #72]	; (8001850 <main+0xfc>)
 8001808:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonPress_Tas */
  osThreadDef(buttonPress_Tas, hasButtonBeenPressed, osPriorityIdle, 0, 128);
 800180a:	4b12      	ldr	r3, [pc, #72]	; (8001854 <main+0x100>)
 800180c:	1d3c      	adds	r4, r7, #4
 800180e:	461d      	mov	r5, r3
 8001810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001814:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001818:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonPress_TasHandle = osThreadCreate(osThread(buttonPress_Tas), NULL);
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2100      	movs	r1, #0
 8001820:	4618      	mov	r0, r3
 8001822:	f007 fbd6 	bl	8008fd2 <osThreadCreate>
 8001826:	4603      	mov	r3, r0
 8001828:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <main+0x104>)
 800182a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800182c:	f007 fbca 	bl	8008fc4 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0xdc>
 8001832:	bf00      	nop
 8001834:	48001000 	.word	0x48001000
 8001838:	20000660 	.word	0x20000660
 800183c:	0800ecf8 	.word	0x0800ecf8
 8001840:	200005c0 	.word	0x200005c0
 8001844:	0800ed18 	.word	0x0800ed18
 8001848:	20000654 	.word	0x20000654
 800184c:	0800ed40 	.word	0x0800ed40
 8001850:	20000658 	.word	0x20000658
 8001854:	0800ed6c 	.word	0x0800ed6c
 8001858:	2000065c 	.word	0x2000065c

0800185c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b096      	sub	sp, #88	; 0x58
 8001860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	2244      	movs	r2, #68	; 0x44
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f00a fc0e 	bl	800c08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800187e:	2000      	movs	r0, #0
 8001880:	f004 fd16 	bl	80062b0 <HAL_PWREx_ControlVoltageScaling>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800188a:	f001 f86d 	bl	8002968 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800188e:	2310      	movs	r3, #16
 8001890:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001892:	2301      	movs	r3, #1
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800189a:	2360      	movs	r3, #96	; 0x60
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189e:	2302      	movs	r3, #2
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018a2:	2301      	movs	r3, #1
 80018a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018aa:	233c      	movs	r3, #60	; 0x3c
 80018ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b6:	2302      	movs	r3, #2
 80018b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4618      	mov	r0, r3
 80018c0:	f004 fd9a 	bl	80063f8 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80018ca:	f001 f84d 	bl	8002968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2303      	movs	r3, #3
 80018d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	2105      	movs	r1, #5
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 f9a0 	bl	8006c2c <HAL_RCC_ClockConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80018f2:	f001 f839 	bl	8002968 <Error_Handler>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3758      	adds	r7, #88	; 0x58
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <MX_I2C2_Init+0x74>)
 8001906:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <MX_I2C2_Init+0x78>)
 8001908:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_I2C2_Init+0x74>)
 800190c:	4a1b      	ldr	r2, [pc, #108]	; (800197c <MX_I2C2_Init+0x7c>)
 800190e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_I2C2_Init+0x74>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_I2C2_Init+0x74>)
 8001918:	2201      	movs	r2, #1
 800191a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_I2C2_Init+0x74>)
 800191e:	2200      	movs	r2, #0
 8001920:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_I2C2_Init+0x74>)
 8001924:	2200      	movs	r2, #0
 8001926:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_I2C2_Init+0x74>)
 800192a:	2200      	movs	r2, #0
 800192c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_I2C2_Init+0x74>)
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_I2C2_Init+0x74>)
 8001936:	2200      	movs	r2, #0
 8001938:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800193a:	480e      	ldr	r0, [pc, #56]	; (8001974 <MX_I2C2_Init+0x74>)
 800193c:	f002 fdd4 	bl	80044e8 <HAL_I2C_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001946:	f001 f80f 	bl	8002968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800194a:	2100      	movs	r1, #0
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <MX_I2C2_Init+0x74>)
 800194e:	f003 fb7b 	bl	8005048 <HAL_I2CEx_ConfigAnalogFilter>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001958:	f001 f806 	bl	8002968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800195c:	2100      	movs	r1, #0
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <MX_I2C2_Init+0x74>)
 8001960:	f003 fbbd 	bl	80050de <HAL_I2CEx_ConfigDigitalFilter>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800196a:	f000 fffd 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	2000051c 	.word	0x2000051c
 8001978:	40005800 	.word	0x40005800
 800197c:	307075b1 	.word	0x307075b1

08001980 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 8001996:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <MX_OCTOSPI1_Init+0xa8>)
 8001998:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800199a:	4b22      	ldr	r3, [pc, #136]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 800199c:	2201      	movs	r2, #1
 800199e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80019a0:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ac:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019b0:	2220      	movs	r2, #32
 80019b2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019e0:	2208      	movs	r2, #8
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80019e4:	480f      	ldr	r0, [pc, #60]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 80019e6:	f003 fbc7 	bl	8005178 <HAL_OSPI_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80019f0:	f000 ffba 	bl	8002968 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80019f4:	2301      	movs	r3, #1
 80019f6:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80019fc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001a00:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4806      	ldr	r0, [pc, #24]	; (8001a24 <MX_OCTOSPI1_Init+0xa4>)
 8001a0c:	f003 feb2 	bl	8005774 <HAL_OSPIM_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001a16:	f000 ffa7 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000570 	.word	0x20000570
 8001a28:	a0001000 	.word	0xa0001000

08001a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a30:	4b22      	ldr	r3, [pc, #136]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <MX_USART1_UART_Init+0x94>)
 8001a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a36:	4b21      	ldr	r3, [pc, #132]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	4b17      	ldr	r3, [pc, #92]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a74:	4811      	ldr	r0, [pc, #68]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a76:	f006 fb95 	bl	80081a4 <HAL_UART_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a80:	f000 ff72 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a84:	2100      	movs	r1, #0
 8001a86:	480d      	ldr	r0, [pc, #52]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a88:	f007 f9ba 	bl	8008e00 <HAL_UARTEx_SetTxFifoThreshold>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a92:	f000 ff69 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a96:	2100      	movs	r1, #0
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001a9a:	f007 f9ef 	bl	8008e7c <HAL_UARTEx_SetRxFifoThreshold>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001aa4:	f000 ff60 	bl	8002968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001aa8:	4804      	ldr	r0, [pc, #16]	; (8001abc <MX_USART1_UART_Init+0x90>)
 8001aaa:	f007 f970 	bl	8008d8e <HAL_UARTEx_DisableFifoMode>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ab4:	f000 ff58 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200005c0 	.word	0x200005c0
 8001ac0:	40013800 	.word	0x40013800

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	f107 030c 	add.w	r3, r7, #12
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ade:	4a2d      	ldr	r2, [pc, #180]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001ae0:	f043 0310 	orr.w	r3, r3, #16
 8001ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af6:	4a27      	ldr	r2, [pc, #156]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0e:	4a21      	ldr	r2, [pc, #132]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b16:	4b1f      	ldr	r3, [pc, #124]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2108      	movs	r1, #8
 8001b26:	481c      	ldr	r0, [pc, #112]	; (8001b98 <MX_GPIO_Init+0xd4>)
 8001b28:	f002 fcc6 	bl	80044b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b32:	481a      	ldr	r0, [pc, #104]	; (8001b9c <MX_GPIO_Init+0xd8>)
 8001b34:	f002 fcc0 	bl	80044b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Red_Led_Pin */
  GPIO_InitStruct.Pin = Red_Led_Pin;
 8001b38:	2308      	movs	r3, #8
 8001b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Red_Led_GPIO_Port, &GPIO_InitStruct);
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4812      	ldr	r0, [pc, #72]	; (8001b98 <MX_GPIO_Init+0xd4>)
 8001b50:	f002 fa16 	bl	8003f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8001b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	4619      	mov	r1, r3
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <MX_GPIO_Init+0xdc>)
 8001b6a:	f002 fa09 	bl	8003f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : Green_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin;
 8001b6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Green_Led_GPIO_Port, &GPIO_InitStruct);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4619      	mov	r1, r3
 8001b86:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_GPIO_Init+0xd8>)
 8001b88:	f002 f9fa 	bl	8003f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8c:	bf00      	nop
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48001000 	.word	0x48001000
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	48000800 	.word	0x48000800

08001ba4 <getPressureAverage>:

/* USER CODE BEGIN 4 */


void getPressureAverage(){
 8001ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba8:	b08e      	sub	sp, #56	; 0x38
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	466b      	mov	r3, sp
 8001bae:	4698      	mov	r8, r3

		int16_t pressureArray[samplesPressure]; // Create an array to store the values
 8001bb0:	4b5c      	ldr	r3, [pc, #368]	; (8001d24 <getPressureAverage+0x180>)
 8001bb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001bb6:	4633      	mov	r3, r6
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	4632      	mov	r2, r6
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	012b      	lsls	r3, r5, #4
 8001bce:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bd2:	0122      	lsls	r2, r4, #4
 8001bd4:	4632      	mov	r2, r6
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	010b      	lsls	r3, r1, #4
 8001be6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001bea:	0102      	lsls	r2, r0, #4
 8001bec:	4633      	mov	r3, r6
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	3307      	adds	r3, #7
 8001bf2:	08db      	lsrs	r3, r3, #3
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	ebad 0d03 	sub.w	sp, sp, r3
 8001bfa:	466b      	mov	r3, sp
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	085b      	lsrs	r3, r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	61fb      	str	r3, [r7, #28]

		int16_t test[1] = {0};
 8001c04:	2300      	movs	r3, #0
 8001c06:	80bb      	strh	r3, [r7, #4]


		// all the values in pressureArray, can calculate the average
		pressureAverage = 0;
 8001c08:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <getPressureAverage+0x184>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < samplesPressure; i++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
 8001c12:	e022      	b.n	8001c5a <getPressureAverage+0xb6>

			if(BSP_QSPI_Read(test, 0x00070000 + sizeof(pressure) * i, sizeof(pressure)) != QSPI_OK)
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8001c1a:	0059      	lsls	r1, r3, #1
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 f95f 	bl	8002ee4 <BSP_QSPI_Read>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <getPressureAverage+0x8c>
			{
				Error_Handler();
 8001c2c:	f000 fe9c 	bl	8002968 <Error_Handler>
			}

			pressureArray[i] = test[0];
 8001c30:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			pressureAverage += test[0];
 8001c3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <getPressureAverage+0x184>)
 8001c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21a      	sxth	r2, r3
 8001c50:	4b35      	ldr	r3, [pc, #212]	; (8001d28 <getPressureAverage+0x184>)
 8001c52:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < samplesPressure; i++) {
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	3301      	adds	r3, #1
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <getPressureAverage+0x180>)
 8001c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c60:	461a      	mov	r2, r3
 8001c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c64:	4293      	cmp	r3, r2
 8001c66:	dbd5      	blt.n	8001c14 <getPressureAverage+0x70>
		}

		pressureAverage /= samplesPressure;
 8001c68:	4b2f      	ldr	r3, [pc, #188]	; (8001d28 <getPressureAverage+0x184>)
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <getPressureAverage+0x180>)
 8001c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <getPressureAverage+0x184>)
 8001c7e:	801a      	strh	r2, [r3, #0]


		//S² = Σ(xi - x̄)² / (n - 1)
		double sumSquaredDeviations = 0.0;
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		for (int i = 0; i < samplesPressure; i++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c90:	e022      	b.n	8001cd8 <getPressureAverage+0x134>
			  double deviation = pressureArray[i] - pressureAverage;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c96:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <getPressureAverage+0x184>)
 8001c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fc55 	bl	8000554 <__aeabi_i2d>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	e9c7 2302 	strd	r2, r3, [r7, #8]
			  sumSquaredDeviations += deviation * deviation;
 8001cb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cba:	f7fe fcb5 	bl	8000628 <__aeabi_dmul>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cc6:	f7fe faf9 	bl	80002bc <__adddf3>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for (int i = 0; i < samplesPressure; i++) {
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <getPressureAverage+0x180>)
 8001cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	dbd5      	blt.n	8001c92 <getPressureAverage+0xee>
		}

		double sampleVariance = sumSquaredDeviations / (samplesPressure - 1);
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <getPressureAverage+0x180>)
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fc30 	bl	8000554 <__aeabi_i2d>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cfc:	f7fe fdbe 	bl	800087c <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	e9c7 2304 	strd	r2, r3, [r7, #16]

		pressureVariance = (int16_t) sampleVariance;
 8001d08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d0c:	f7fe ff3c 	bl	8000b88 <__aeabi_d2iz>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b21a      	sxth	r2, r3
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <getPressureAverage+0x188>)
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	46c5      	mov	sp, r8


}
 8001d1a:	bf00      	nop
 8001d1c:	3738      	adds	r7, #56	; 0x38
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d24:	200006ee 	.word	0x200006ee
 8001d28:	20000708 	.word	0x20000708
 8001d2c:	2000070c 	.word	0x2000070c

08001d30 <getTemperatureAverage>:

void getTemperatureAverage(){
 8001d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d34:	b08e      	sub	sp, #56	; 0x38
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	466b      	mov	r3, sp
 8001d3a:	4698      	mov	r8, r3

		int16_t temperatureArray[samplesTemp]; // Create an array to store the values
 8001d3c:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <getTemperatureAverage+0x184>)
 8001d3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001d42:	4633      	mov	r3, r6
 8001d44:	3b01      	subs	r3, #1
 8001d46:	623b      	str	r3, [r7, #32]
 8001d48:	4632      	mov	r2, r6
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	461d      	mov	r5, r3
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	012b      	lsls	r3, r5, #4
 8001d5a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001d5e:	0122      	lsls	r2, r4, #4
 8001d60:	4632      	mov	r2, r6
 8001d62:	2300      	movs	r3, #0
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	010b      	lsls	r3, r1, #4
 8001d72:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001d76:	0102      	lsls	r2, r0, #4
 8001d78:	4633      	mov	r3, r6
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	3307      	adds	r3, #7
 8001d7e:	08db      	lsrs	r3, r3, #3
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	ebad 0d03 	sub.w	sp, sp, r3
 8001d86:	466b      	mov	r3, sp
 8001d88:	3301      	adds	r3, #1
 8001d8a:	085b      	lsrs	r3, r3, #1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]

		int16_t test[1] = {0};
 8001d90:	2300      	movs	r3, #0
 8001d92:	80bb      	strh	r3, [r7, #4]


		// all the values in pressureArray, can calculate the average
		temperatureAverage = 0;
 8001d94:	4b48      	ldr	r3, [pc, #288]	; (8001eb8 <getTemperatureAverage+0x188>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < samplesTemp; i++) {
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d9e:	e024      	b.n	8001dea <getTemperatureAverage+0xba>

			if(BSP_QSPI_Read(test, 0x00060000 + sizeof(temp) * i, sizeof(temp)) != QSPI_OK)
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8001da6:	0059      	lsls	r1, r3, #1
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2202      	movs	r2, #2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f001 f899 	bl	8002ee4 <BSP_QSPI_Read>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <getTemperatureAverage+0x8c>
			{
				Error_Handler();
 8001db8:	f000 fdd6 	bl	8002968 <Error_Handler>
			}

			temperatureArray[i] = test[0];
 8001dbc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dc4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			temperatureAverage += temperatureArray[i];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dcc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <getTemperatureAverage+0x188>)
 8001dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	4413      	add	r3, r2
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	b21a      	sxth	r2, r3
 8001de0:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <getTemperatureAverage+0x188>)
 8001de2:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < samplesTemp; i++) {
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	3301      	adds	r3, #1
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dea:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <getTemperatureAverage+0x184>)
 8001dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df0:	461a      	mov	r2, r3
 8001df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df4:	4293      	cmp	r3, r2
 8001df6:	dbd3      	blt.n	8001da0 <getTemperatureAverage+0x70>
		}


		temperatureAverage /= samplesTemp;
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <getTemperatureAverage+0x188>)
 8001dfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <getTemperatureAverage+0x184>)
 8001e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e06:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e0a:	b21a      	sxth	r2, r3
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <getTemperatureAverage+0x188>)
 8001e0e:	801a      	strh	r2, [r3, #0]

		//S² = Σ(xi - x̄)² / (n - 1)
		double sumSquaredDeviations = 0.0;
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		for (int i = 0; i < samplesTemp; i++) {
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	e022      	b.n	8001e68 <getTemperatureAverage+0x138>
		  double deviation = temperatureArray[i] - pressureAverage;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e26:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <getTemperatureAverage+0x18c>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7fe fb8d 	bl	8000554 <__aeabi_i2d>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  sumSquaredDeviations += deviation * deviation;
 8001e42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e4a:	f7fe fbed 	bl	8000628 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e56:	f7fe fa31 	bl	80002bc <__adddf3>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		for (int i = 0; i < samplesTemp; i++) {
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	3301      	adds	r3, #1
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <getTemperatureAverage+0x184>)
 8001e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e72:	4293      	cmp	r3, r2
 8001e74:	dbd5      	blt.n	8001e22 <getTemperatureAverage+0xf2>
		}

		double sampleVariance = sumSquaredDeviations / (samplesTemp - 1);
 8001e76:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <getTemperatureAverage+0x184>)
 8001e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe fb68 	bl	8000554 <__aeabi_i2d>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e8c:	f7fe fcf6 	bl	800087c <__aeabi_ddiv>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	e9c7 2304 	strd	r2, r3, [r7, #16]

		temperatureVariance = (int16_t) sampleVariance;
 8001e98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e9c:	f7fe fe74 	bl	8000b88 <__aeabi_d2iz>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <getTemperatureAverage+0x190>)
 8001ea6:	801a      	strh	r2, [r3, #0]
 8001ea8:	46c5      	mov	sp, r8



}
 8001eaa:	bf00      	nop
 8001eac:	3738      	adds	r7, #56	; 0x38
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eb4:	200006ec 	.word	0x200006ec
 8001eb8:	2000070a 	.word	0x2000070a
 8001ebc:	20000708 	.word	0x20000708
 8001ec0:	2000070e 	.word	0x2000070e

08001ec4 <getGyroAverage>:


void getGyroAverage(){
 8001ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec8:	b09a      	sub	sp, #104	; 0x68
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	466b      	mov	r3, sp
 8001ece:	4698      	mov	r8, r3

    //populate an array with the max number of sample gotten
    int16_t gyroArray[samplesGyro * 3];
 8001ed0:	4b63      	ldr	r3, [pc, #396]	; (8002060 <getGyroAverage+0x19c>)
 8001ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	4613      	mov	r3, r2
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	189e      	adds	r6, r3, r2
 8001ede:	1e73      	subs	r3, r6, #1
 8001ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee2:	4632      	mov	r2, r6
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	4614      	mov	r4, r2
 8001ee8:	461d      	mov	r5, r3
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	012b      	lsls	r3, r5, #4
 8001ef4:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ef8:	0122      	lsls	r2, r4, #4
 8001efa:	4632      	mov	r2, r6
 8001efc:	2300      	movs	r3, #0
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	010b      	lsls	r3, r1, #4
 8001f0c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001f10:	0102      	lsls	r2, r0, #4
 8001f12:	4633      	mov	r3, r6
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	3307      	adds	r3, #7
 8001f18:	08db      	lsrs	r3, r3, #3
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	ebad 0d03 	sub.w	sp, sp, r3
 8001f20:	466b      	mov	r3, sp
 8001f22:	3301      	adds	r3, #1
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c

    int16_t test[3];


    xGyroAverage = 0;
 8001f2a:	4b4e      	ldr	r3, [pc, #312]	; (8002064 <getGyroAverage+0x1a0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	801a      	strh	r2, [r3, #0]
    yGyroAverage = 0;
 8001f30:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <getGyroAverage+0x1a4>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	801a      	strh	r2, [r3, #0]
    zGyroAverage = 0;
 8001f36:	4b4d      	ldr	r3, [pc, #308]	; (800206c <getGyroAverage+0x1a8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	801a      	strh	r2, [r3, #0]

    for(int i = 0; i < samplesGyro; i++){
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	667b      	str	r3, [r7, #100]	; 0x64
 8001f40:	e059      	b.n	8001ff6 <getGyroAverage+0x132>


    	test[0] = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	803b      	strh	r3, [r7, #0]
    	test[1] = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	807b      	strh	r3, [r7, #2]
    	test[2] = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	80bb      	strh	r3, [r7, #4]

        if(BSP_QSPI_Read(test, 0x00000000 + i * sizeof(gyro), sizeof(gyro)) != QSPI_OK)
 8001f4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	4619      	mov	r1, r3
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2206      	movs	r2, #6
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 ffc0 	bl	8002ee4 <BSP_QSPI_Read>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <getGyroAverage+0xaa>
    	{
        	Error_Handler();
 8001f6a:	f000 fcfd 	bl	8002968 <Error_Handler>
    	}


    	gyroArray[3*i] = test[0];
 8001f6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f70:	4613      	mov	r3, r2
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	441a      	add	r2, r3
 8001f76:	f9b7 1000 	ldrsh.w	r1, [r7]
 8001f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f7c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	gyroArray[3*i + 1] = test[1];
 8001f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    	gyroArray[3*i + 2] = test[2];
 8001f94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	1c9a      	adds	r2, r3, #2
 8001f9e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

    	xGyroAverage += test[0]; 	//get x values
 8001fa8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <getGyroAverage+0x1a0>)
 8001fb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	4b29      	ldr	r3, [pc, #164]	; (8002064 <getGyroAverage+0x1a0>)
 8001fbe:	801a      	strh	r2, [r3, #0]

    	yGyroAverage += test[1];	//get y values
 8001fc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	4b28      	ldr	r3, [pc, #160]	; (8002068 <getGyroAverage+0x1a4>)
 8001fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	4b24      	ldr	r3, [pc, #144]	; (8002068 <getGyroAverage+0x1a4>)
 8001fd6:	801a      	strh	r2, [r3, #0]

    	zGyroAverage += test[2];	//get z values
 8001fd8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <getGyroAverage+0x1a8>)
 8001fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <getGyroAverage+0x1a8>)
 8001fee:	801a      	strh	r2, [r3, #0]
    for(int i = 0; i < samplesGyro; i++){
 8001ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8001ff6:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <getGyroAverage+0x19c>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002000:	4293      	cmp	r3, r2
 8002002:	db9e      	blt.n	8001f42 <getGyroAverage+0x7e>

    }

    xGyroAverage /= samplesGyro;
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <getGyroAverage+0x1a0>)
 8002006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200a:	461a      	mov	r2, r3
 800200c:	4b14      	ldr	r3, [pc, #80]	; (8002060 <getGyroAverage+0x19c>)
 800200e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002012:	fb92 f3f3 	sdiv	r3, r2, r3
 8002016:	b21a      	sxth	r2, r3
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <getGyroAverage+0x1a0>)
 800201a:	801a      	strh	r2, [r3, #0]
    yGyroAverage /= samplesGyro;
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <getGyroAverage+0x1a4>)
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	461a      	mov	r2, r3
 8002024:	4b0e      	ldr	r3, [pc, #56]	; (8002060 <getGyroAverage+0x19c>)
 8002026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202a:	fb92 f3f3 	sdiv	r3, r2, r3
 800202e:	b21a      	sxth	r2, r3
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <getGyroAverage+0x1a4>)
 8002032:	801a      	strh	r2, [r3, #0]
    zGyroAverage /= samplesGyro;
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <getGyroAverage+0x1a8>)
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	461a      	mov	r2, r3
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <getGyroAverage+0x19c>)
 800203e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002042:	fb92 f3f3 	sdiv	r3, r2, r3
 8002046:	b21a      	sxth	r2, r3
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <getGyroAverage+0x1a8>)
 800204a:	801a      	strh	r2, [r3, #0]


	//S² = Σ(xi - x̄)² / (n - 1)
	double XsumSquaredDeviations, YsumSquaredDeviations, ZsumSquaredDeviations = 0.0;
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	for (int i = 0; i < samplesGyro; i++) {
 8002058:	2300      	movs	r3, #0
 800205a:	647b      	str	r3, [r7, #68]	; 0x44
 800205c:	e076      	b.n	800214c <getGyroAverage+0x288>
 800205e:	bf00      	nop
 8002060:	200006e8 	.word	0x200006e8
 8002064:	200006f0 	.word	0x200006f0
 8002068:	200006f2 	.word	0x200006f2
 800206c:	200006f4 	.word	0x200006f4
		  double Xdeviation = gyroArray[3*i] - xGyroAverage;
 8002070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	441a      	add	r2, r3
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800207e:	461a      	mov	r2, r3
 8002080:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <getGyroAverage+0x338>)
 8002082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa63 	bl	8000554 <__aeabi_i2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	e9c7 2306 	strd	r2, r3, [r7, #24]
		  XsumSquaredDeviations += Xdeviation * Xdeviation;
 8002096:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800209a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800209e:	f7fe fac3 	bl	8000628 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80020aa:	f7fe f907 	bl	80002bc <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

		  double Ydeviation = gyroArray[3*i + 1] - yGyroAverage;
 80020b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80020c6:	461a      	mov	r2, r3
 80020c8:	4b4d      	ldr	r3, [pc, #308]	; (8002200 <getGyroAverage+0x33c>)
 80020ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe fa3f 	bl	8000554 <__aeabi_i2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	e9c7 2304 	strd	r2, r3, [r7, #16]
		  YsumSquaredDeviations += Ydeviation * Ydeviation;
 80020de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80020e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020e6:	f7fe fa9f 	bl	8000628 <__aeabi_dmul>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80020f2:	f7fe f8e3 	bl	80002bc <__adddf3>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

		  double Zdeviation = gyroArray[3*i + 2] - zGyroAverage;
 80020fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	1c9a      	adds	r2, r3, #2
 8002108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800210e:	461a      	mov	r2, r3
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <getGyroAverage+0x340>)
 8002112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fa1b 	bl	8000554 <__aeabi_i2d>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  ZsumSquaredDeviations += Zdeviation * Zdeviation;
 8002126:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800212a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800212e:	f7fe fa7b 	bl	8000628 <__aeabi_dmul>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800213a:	f7fe f8bf 	bl	80002bc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	for (int i = 0; i < samplesGyro; i++) {
 8002146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002148:	3301      	adds	r3, #1
 800214a:	647b      	str	r3, [r7, #68]	; 0x44
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <getGyroAverage+0x344>)
 800214e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002152:	461a      	mov	r2, r3
 8002154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002156:	4293      	cmp	r3, r2
 8002158:	db8a      	blt.n	8002070 <getGyroAverage+0x1ac>
	}

	double XsampleVariance = XsumSquaredDeviations / (samplesGyro - 1);
 800215a:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <getGyroAverage+0x344>)
 800215c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002160:	3b01      	subs	r3, #1
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f9f6 	bl	8000554 <__aeabi_i2d>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002170:	f7fe fb84 	bl	800087c <__aeabi_ddiv>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double YsampleVariance = YsumSquaredDeviations / (samplesGyro - 1);
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <getGyroAverage+0x344>)
 800217e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002182:	3b01      	subs	r3, #1
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f9e5 	bl	8000554 <__aeabi_i2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002192:	f7fe fb73 	bl	800087c <__aeabi_ddiv>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	double ZsampleVariance = ZsumSquaredDeviations / (samplesGyro - 1);
 800219e:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <getGyroAverage+0x344>)
 80021a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9d4 	bl	8000554 <__aeabi_i2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80021b4:	f7fe fb62 	bl	800087c <__aeabi_ddiv>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	xGyroVariance = (int16_t) XsampleVariance;
 80021c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80021c4:	f7fe fce0 	bl	8000b88 <__aeabi_d2iz>
 80021c8:	4603      	mov	r3, r0
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <getGyroAverage+0x348>)
 80021ce:	801a      	strh	r2, [r3, #0]
	yGyroVariance = (int16_t) YsampleVariance;
 80021d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80021d4:	f7fe fcd8 	bl	8000b88 <__aeabi_d2iz>
 80021d8:	4603      	mov	r3, r0
 80021da:	b21a      	sxth	r2, r3
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <getGyroAverage+0x34c>)
 80021de:	801a      	strh	r2, [r3, #0]
	zGyroVariance = (int16_t) ZsampleVariance;
 80021e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021e4:	f7fe fcd0 	bl	8000b88 <__aeabi_d2iz>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <getGyroAverage+0x350>)
 80021ee:	801a      	strh	r2, [r3, #0]
 80021f0:	46c5      	mov	sp, r8





}
 80021f2:	bf00      	nop
 80021f4:	3768      	adds	r7, #104	; 0x68
 80021f6:	46bd      	mov	sp, r7
 80021f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80021fc:	200006f0 	.word	0x200006f0
 8002200:	200006f2 	.word	0x200006f2
 8002204:	200006f4 	.word	0x200006f4
 8002208:	200006e8 	.word	0x200006e8
 800220c:	200006fc 	.word	0x200006fc
 8002210:	200006fe 	.word	0x200006fe
 8002214:	20000700 	.word	0x20000700

08002218 <getMagnetoAverage>:

void getMagnetoAverage(){
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <printAllAverages>:

void printAllAverages(){
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af02      	add	r7, sp, #8


	//Pressure
	memset(buffer, 0, 100);
 800222e:	2264      	movs	r2, #100	; 0x64
 8002230:	2100      	movs	r1, #0
 8002232:	488a      	ldr	r0, [pc, #552]	; (800245c <printAllAverages+0x234>)
 8002234:	f009 ff2a 	bl	800c08c <memset>
	sprintf(&buffer, "\nPressure: Number of samples is: %d, ", samplesPressure);
 8002238:	4b89      	ldr	r3, [pc, #548]	; (8002460 <printAllAverages+0x238>)
 800223a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223e:	461a      	mov	r2, r3
 8002240:	4988      	ldr	r1, [pc, #544]	; (8002464 <printAllAverages+0x23c>)
 8002242:	4886      	ldr	r0, [pc, #536]	; (800245c <printAllAverages+0x234>)
 8002244:	f008 ff98 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002248:	f241 3388 	movw	r3, #5000	; 0x1388
 800224c:	2264      	movs	r2, #100	; 0x64
 800224e:	4983      	ldr	r1, [pc, #524]	; (800245c <printAllAverages+0x234>)
 8002250:	4885      	ldr	r0, [pc, #532]	; (8002468 <printAllAverages+0x240>)
 8002252:	f005 fff7 	bl	8008244 <HAL_UART_Transmit>

	memset(buffer, 0, 100);
 8002256:	2264      	movs	r2, #100	; 0x64
 8002258:	2100      	movs	r1, #0
 800225a:	4880      	ldr	r0, [pc, #512]	; (800245c <printAllAverages+0x234>)
 800225c:	f009 ff16 	bl	800c08c <memset>
	sprintf(&buffer, "Average: %d, ", pressureAverage);
 8002260:	4b82      	ldr	r3, [pc, #520]	; (800246c <printAllAverages+0x244>)
 8002262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002266:	461a      	mov	r2, r3
 8002268:	4981      	ldr	r1, [pc, #516]	; (8002470 <printAllAverages+0x248>)
 800226a:	487c      	ldr	r0, [pc, #496]	; (800245c <printAllAverages+0x234>)
 800226c:	f008 ff84 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002270:	f241 3388 	movw	r3, #5000	; 0x1388
 8002274:	2264      	movs	r2, #100	; 0x64
 8002276:	4979      	ldr	r1, [pc, #484]	; (800245c <printAllAverages+0x234>)
 8002278:	487b      	ldr	r0, [pc, #492]	; (8002468 <printAllAverages+0x240>)
 800227a:	f005 ffe3 	bl	8008244 <HAL_UART_Transmit>

	memset(buffer, 0, 100);
 800227e:	2264      	movs	r2, #100	; 0x64
 8002280:	2100      	movs	r1, #0
 8002282:	4876      	ldr	r0, [pc, #472]	; (800245c <printAllAverages+0x234>)
 8002284:	f009 ff02 	bl	800c08c <memset>
	sprintf(&buffer, "Variance: %d \n", pressureVariance);
 8002288:	4b7a      	ldr	r3, [pc, #488]	; (8002474 <printAllAverages+0x24c>)
 800228a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800228e:	461a      	mov	r2, r3
 8002290:	4979      	ldr	r1, [pc, #484]	; (8002478 <printAllAverages+0x250>)
 8002292:	4872      	ldr	r0, [pc, #456]	; (800245c <printAllAverages+0x234>)
 8002294:	f008 ff70 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002298:	f241 3388 	movw	r3, #5000	; 0x1388
 800229c:	2264      	movs	r2, #100	; 0x64
 800229e:	496f      	ldr	r1, [pc, #444]	; (800245c <printAllAverages+0x234>)
 80022a0:	4871      	ldr	r0, [pc, #452]	; (8002468 <printAllAverages+0x240>)
 80022a2:	f005 ffcf 	bl	8008244 <HAL_UART_Transmit>

	//Temperature
	memset(buffer, 0, 100);
 80022a6:	2264      	movs	r2, #100	; 0x64
 80022a8:	2100      	movs	r1, #0
 80022aa:	486c      	ldr	r0, [pc, #432]	; (800245c <printAllAverages+0x234>)
 80022ac:	f009 feee 	bl	800c08c <memset>
	sprintf(&buffer, "\nTemperature: Number of samples is: %d, ", samplesTemp);
 80022b0:	4b72      	ldr	r3, [pc, #456]	; (800247c <printAllAverages+0x254>)
 80022b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4971      	ldr	r1, [pc, #452]	; (8002480 <printAllAverages+0x258>)
 80022ba:	4868      	ldr	r0, [pc, #416]	; (800245c <printAllAverages+0x234>)
 80022bc:	f008 ff5c 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 80022c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80022c4:	2264      	movs	r2, #100	; 0x64
 80022c6:	4965      	ldr	r1, [pc, #404]	; (800245c <printAllAverages+0x234>)
 80022c8:	4867      	ldr	r0, [pc, #412]	; (8002468 <printAllAverages+0x240>)
 80022ca:	f005 ffbb 	bl	8008244 <HAL_UART_Transmit>

	memset(buffer, 0, 100);
 80022ce:	2264      	movs	r2, #100	; 0x64
 80022d0:	2100      	movs	r1, #0
 80022d2:	4862      	ldr	r0, [pc, #392]	; (800245c <printAllAverages+0x234>)
 80022d4:	f009 feda 	bl	800c08c <memset>
	sprintf(&buffer, "Average: %d, ", temperatureAverage);
 80022d8:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <printAllAverages+0x25c>)
 80022da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022de:	461a      	mov	r2, r3
 80022e0:	4963      	ldr	r1, [pc, #396]	; (8002470 <printAllAverages+0x248>)
 80022e2:	485e      	ldr	r0, [pc, #376]	; (800245c <printAllAverages+0x234>)
 80022e4:	f008 ff48 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 80022e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80022ec:	2264      	movs	r2, #100	; 0x64
 80022ee:	495b      	ldr	r1, [pc, #364]	; (800245c <printAllAverages+0x234>)
 80022f0:	485d      	ldr	r0, [pc, #372]	; (8002468 <printAllAverages+0x240>)
 80022f2:	f005 ffa7 	bl	8008244 <HAL_UART_Transmit>

	memset(buffer, 0, 100);
 80022f6:	2264      	movs	r2, #100	; 0x64
 80022f8:	2100      	movs	r1, #0
 80022fa:	4858      	ldr	r0, [pc, #352]	; (800245c <printAllAverages+0x234>)
 80022fc:	f009 fec6 	bl	800c08c <memset>
	sprintf(&buffer, "Variance: %d \n", temperatureVariance);
 8002300:	4b61      	ldr	r3, [pc, #388]	; (8002488 <printAllAverages+0x260>)
 8002302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002306:	461a      	mov	r2, r3
 8002308:	495b      	ldr	r1, [pc, #364]	; (8002478 <printAllAverages+0x250>)
 800230a:	4854      	ldr	r0, [pc, #336]	; (800245c <printAllAverages+0x234>)
 800230c:	f008 ff34 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002310:	f241 3388 	movw	r3, #5000	; 0x1388
 8002314:	2264      	movs	r2, #100	; 0x64
 8002316:	4951      	ldr	r1, [pc, #324]	; (800245c <printAllAverages+0x234>)
 8002318:	4853      	ldr	r0, [pc, #332]	; (8002468 <printAllAverages+0x240>)
 800231a:	f005 ff93 	bl	8008244 <HAL_UART_Transmit>

	//Gyro
	memset(buffer, 0, 100);
 800231e:	2264      	movs	r2, #100	; 0x64
 8002320:	2100      	movs	r1, #0
 8002322:	484e      	ldr	r0, [pc, #312]	; (800245c <printAllAverages+0x234>)
 8002324:	f009 feb2 	bl	800c08c <memset>
	sprintf(&buffer, "\nGYRO: Number of samples is: %d, ", samplesGyro);
 8002328:	4b58      	ldr	r3, [pc, #352]	; (800248c <printAllAverages+0x264>)
 800232a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800232e:	461a      	mov	r2, r3
 8002330:	4957      	ldr	r1, [pc, #348]	; (8002490 <printAllAverages+0x268>)
 8002332:	484a      	ldr	r0, [pc, #296]	; (800245c <printAllAverages+0x234>)
 8002334:	f008 ff20 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002338:	f241 3388 	movw	r3, #5000	; 0x1388
 800233c:	2264      	movs	r2, #100	; 0x64
 800233e:	4947      	ldr	r1, [pc, #284]	; (800245c <printAllAverages+0x234>)
 8002340:	4849      	ldr	r0, [pc, #292]	; (8002468 <printAllAverages+0x240>)
 8002342:	f005 ff7f 	bl	8008244 <HAL_UART_Transmit>

	memset(buffer, 0, 100);
 8002346:	2264      	movs	r2, #100	; 0x64
 8002348:	2100      	movs	r1, #0
 800234a:	4844      	ldr	r0, [pc, #272]	; (800245c <printAllAverages+0x234>)
 800234c:	f009 fe9e 	bl	800c08c <memset>
	sprintf(&buffer, "Average: x: %d, y: %d, z: %d, ", xGyroAverage, yGyroAverage, zGyroAverage);
 8002350:	4b50      	ldr	r3, [pc, #320]	; (8002494 <printAllAverages+0x26c>)
 8002352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002356:	461a      	mov	r2, r3
 8002358:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <printAllAverages+0x270>)
 800235a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235e:	4619      	mov	r1, r3
 8002360:	4b4e      	ldr	r3, [pc, #312]	; (800249c <printAllAverages+0x274>)
 8002362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	460b      	mov	r3, r1
 800236a:	494d      	ldr	r1, [pc, #308]	; (80024a0 <printAllAverages+0x278>)
 800236c:	483b      	ldr	r0, [pc, #236]	; (800245c <printAllAverages+0x234>)
 800236e:	f008 ff03 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002372:	f241 3388 	movw	r3, #5000	; 0x1388
 8002376:	2264      	movs	r2, #100	; 0x64
 8002378:	4938      	ldr	r1, [pc, #224]	; (800245c <printAllAverages+0x234>)
 800237a:	483b      	ldr	r0, [pc, #236]	; (8002468 <printAllAverages+0x240>)
 800237c:	f005 ff62 	bl	8008244 <HAL_UART_Transmit>

	memset(buffer, 0, 100);
 8002380:	2264      	movs	r2, #100	; 0x64
 8002382:	2100      	movs	r1, #0
 8002384:	4835      	ldr	r0, [pc, #212]	; (800245c <printAllAverages+0x234>)
 8002386:	f009 fe81 	bl	800c08c <memset>
	sprintf(&buffer, "Variance: x: %d, y: %d, z: %d \n", xGyroVariance, yGyroVariance, zGyroVariance);
 800238a:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <printAllAverages+0x27c>)
 800238c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002390:	461a      	mov	r2, r3
 8002392:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <printAllAverages+0x280>)
 8002394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002398:	4619      	mov	r1, r3
 800239a:	4b44      	ldr	r3, [pc, #272]	; (80024ac <printAllAverages+0x284>)
 800239c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	460b      	mov	r3, r1
 80023a4:	4942      	ldr	r1, [pc, #264]	; (80024b0 <printAllAverages+0x288>)
 80023a6:	482d      	ldr	r0, [pc, #180]	; (800245c <printAllAverages+0x234>)
 80023a8:	f008 fee6 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 80023ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80023b0:	2264      	movs	r2, #100	; 0x64
 80023b2:	492a      	ldr	r1, [pc, #168]	; (800245c <printAllAverages+0x234>)
 80023b4:	482c      	ldr	r0, [pc, #176]	; (8002468 <printAllAverages+0x240>)
 80023b6:	f005 ff45 	bl	8008244 <HAL_UART_Transmit>

	//Magneto
	memset(buffer, 0, 100);
 80023ba:	2264      	movs	r2, #100	; 0x64
 80023bc:	2100      	movs	r1, #0
 80023be:	4827      	ldr	r0, [pc, #156]	; (800245c <printAllAverages+0x234>)
 80023c0:	f009 fe64 	bl	800c08c <memset>
	sprintf(&buffer, "\nMAGNETO: Number of samples is: %d, ", samplesMagneto);
 80023c4:	4b3b      	ldr	r3, [pc, #236]	; (80024b4 <printAllAverages+0x28c>)
 80023c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ca:	461a      	mov	r2, r3
 80023cc:	493a      	ldr	r1, [pc, #232]	; (80024b8 <printAllAverages+0x290>)
 80023ce:	4823      	ldr	r0, [pc, #140]	; (800245c <printAllAverages+0x234>)
 80023d0:	f008 fed2 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 80023d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80023d8:	2264      	movs	r2, #100	; 0x64
 80023da:	4920      	ldr	r1, [pc, #128]	; (800245c <printAllAverages+0x234>)
 80023dc:	4822      	ldr	r0, [pc, #136]	; (8002468 <printAllAverages+0x240>)
 80023de:	f005 ff31 	bl	8008244 <HAL_UART_Transmit>

	memset(buffer, 0, 100);
 80023e2:	2264      	movs	r2, #100	; 0x64
 80023e4:	2100      	movs	r1, #0
 80023e6:	481d      	ldr	r0, [pc, #116]	; (800245c <printAllAverages+0x234>)
 80023e8:	f009 fe50 	bl	800c08c <memset>
	sprintf(&buffer, "Average: x: %d, y: %d, z: %d, ", xMagnetoAverage, yMagnetoAverage, zMagnetoAverage);
 80023ec:	4b33      	ldr	r3, [pc, #204]	; (80024bc <printAllAverages+0x294>)
 80023ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b32      	ldr	r3, [pc, #200]	; (80024c0 <printAllAverages+0x298>)
 80023f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4b31      	ldr	r3, [pc, #196]	; (80024c4 <printAllAverages+0x29c>)
 80023fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	460b      	mov	r3, r1
 8002406:	4926      	ldr	r1, [pc, #152]	; (80024a0 <printAllAverages+0x278>)
 8002408:	4814      	ldr	r0, [pc, #80]	; (800245c <printAllAverages+0x234>)
 800240a:	f008 feb5 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 800240e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002412:	2264      	movs	r2, #100	; 0x64
 8002414:	4911      	ldr	r1, [pc, #68]	; (800245c <printAllAverages+0x234>)
 8002416:	4814      	ldr	r0, [pc, #80]	; (8002468 <printAllAverages+0x240>)
 8002418:	f005 ff14 	bl	8008244 <HAL_UART_Transmit>

	memset(buffer, 0, 100);
 800241c:	2264      	movs	r2, #100	; 0x64
 800241e:	2100      	movs	r1, #0
 8002420:	480e      	ldr	r0, [pc, #56]	; (800245c <printAllAverages+0x234>)
 8002422:	f009 fe33 	bl	800c08c <memset>
	sprintf(&buffer, "Variance: x: %d, y: %d, z: %d \n \n", xMagnetoVariance, yMagnetoVariance, zMagnetoVariance);
 8002426:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <printAllAverages+0x2a0>)
 8002428:	f9b3 3000 	ldrsh.w	r3, [r3]
 800242c:	461a      	mov	r2, r3
 800242e:	4b27      	ldr	r3, [pc, #156]	; (80024cc <printAllAverages+0x2a4>)
 8002430:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002434:	4619      	mov	r1, r3
 8002436:	4b26      	ldr	r3, [pc, #152]	; (80024d0 <printAllAverages+0x2a8>)
 8002438:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	460b      	mov	r3, r1
 8002440:	4924      	ldr	r1, [pc, #144]	; (80024d4 <printAllAverages+0x2ac>)
 8002442:	4806      	ldr	r0, [pc, #24]	; (800245c <printAllAverages+0x234>)
 8002444:	f008 fe98 	bl	800b178 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002448:	f241 3388 	movw	r3, #5000	; 0x1388
 800244c:	2264      	movs	r2, #100	; 0x64
 800244e:	4903      	ldr	r1, [pc, #12]	; (800245c <printAllAverages+0x234>)
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <printAllAverages+0x240>)
 8002452:	f005 fef7 	bl	8008244 <HAL_UART_Transmit>
//	samplesTemp = 0;
//	samplesPressure = 0;



}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	20000660 	.word	0x20000660
 8002460:	200006ee 	.word	0x200006ee
 8002464:	0800ed88 	.word	0x0800ed88
 8002468:	200005c0 	.word	0x200005c0
 800246c:	20000708 	.word	0x20000708
 8002470:	0800edb0 	.word	0x0800edb0
 8002474:	2000070c 	.word	0x2000070c
 8002478:	0800edc0 	.word	0x0800edc0
 800247c:	200006ec 	.word	0x200006ec
 8002480:	0800edd0 	.word	0x0800edd0
 8002484:	2000070a 	.word	0x2000070a
 8002488:	2000070e 	.word	0x2000070e
 800248c:	200006e8 	.word	0x200006e8
 8002490:	0800edfc 	.word	0x0800edfc
 8002494:	200006f0 	.word	0x200006f0
 8002498:	200006f2 	.word	0x200006f2
 800249c:	200006f4 	.word	0x200006f4
 80024a0:	0800ee20 	.word	0x0800ee20
 80024a4:	200006fc 	.word	0x200006fc
 80024a8:	200006fe 	.word	0x200006fe
 80024ac:	20000700 	.word	0x20000700
 80024b0:	0800ee40 	.word	0x0800ee40
 80024b4:	200006ea 	.word	0x200006ea
 80024b8:	0800ee60 	.word	0x0800ee60
 80024bc:	200006f6 	.word	0x200006f6
 80024c0:	200006f8 	.word	0x200006f8
 80024c4:	200006fa 	.word	0x200006fa
 80024c8:	20000702 	.word	0x20000702
 80024cc:	20000704 	.word	0x20000704
 80024d0:	20000706 	.word	0x20000706
 80024d4:	0800ee88 	.word	0x0800ee88

080024d8 <deleteBlocks>:

//Function to delete blocks at 8 different addresses
void deleteBlocks(){
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0

		deleting = 1;
 80024dc:	4b37      	ldr	r3, [pc, #220]	; (80025bc <deleteBlocks+0xe4>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
		memset(buffer, 0, 100);
 80024e2:	2264      	movs	r2, #100	; 0x64
 80024e4:	2100      	movs	r1, #0
 80024e6:	4836      	ldr	r0, [pc, #216]	; (80025c0 <deleteBlocks+0xe8>)
 80024e8:	f009 fdd0 	bl	800c08c <memset>
		sprintf(&buffer, "Deleting blocks...\n");
 80024ec:	4935      	ldr	r1, [pc, #212]	; (80025c4 <deleteBlocks+0xec>)
 80024ee:	4834      	ldr	r0, [pc, #208]	; (80025c0 <deleteBlocks+0xe8>)
 80024f0:	f008 fe42 	bl	800b178 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 80024f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80024f8:	2264      	movs	r2, #100	; 0x64
 80024fa:	4931      	ldr	r1, [pc, #196]	; (80025c0 <deleteBlocks+0xe8>)
 80024fc:	4832      	ldr	r0, [pc, #200]	; (80025c8 <deleteBlocks+0xf0>)
 80024fe:	f005 fea1 	bl	8008244 <HAL_UART_Transmit>


	//Get 8 different addresses for 8 different values to be stored

	  	if(BSP_QSPI_Erase_Block(0x00000000) != QSPI_OK){
 8002502:	2000      	movs	r0, #0
 8002504:	f000 fdc6 	bl	8003094 <BSP_QSPI_Erase_Block>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <deleteBlocks+0x3a>
	  		Error_Handler();
 800250e:	f000 fa2b 	bl	8002968 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00010000) != QSPI_OK){
 8002512:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002516:	f000 fdbd 	bl	8003094 <BSP_QSPI_Erase_Block>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <deleteBlocks+0x4c>
	  		Error_Handler();
 8002520:	f000 fa22 	bl	8002968 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00020000) != QSPI_OK){
 8002524:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002528:	f000 fdb4 	bl	8003094 <BSP_QSPI_Erase_Block>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <deleteBlocks+0x5e>
	  		Error_Handler();
 8002532:	f000 fa19 	bl	8002968 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00030000) != QSPI_OK){
 8002536:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 800253a:	f000 fdab 	bl	8003094 <BSP_QSPI_Erase_Block>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <deleteBlocks+0x70>
	  		Error_Handler();
 8002544:	f000 fa10 	bl	8002968 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00040000) != QSPI_OK){
 8002548:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800254c:	f000 fda2 	bl	8003094 <BSP_QSPI_Erase_Block>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <deleteBlocks+0x82>
	  		Error_Handler();
 8002556:	f000 fa07 	bl	8002968 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00050000) != QSPI_OK){
 800255a:	f44f 20a0 	mov.w	r0, #327680	; 0x50000
 800255e:	f000 fd99 	bl	8003094 <BSP_QSPI_Erase_Block>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <deleteBlocks+0x94>
	  		Error_Handler();
 8002568:	f000 f9fe 	bl	8002968 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00060000) != QSPI_OK){
 800256c:	f44f 20c0 	mov.w	r0, #393216	; 0x60000
 8002570:	f000 fd90 	bl	8003094 <BSP_QSPI_Erase_Block>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <deleteBlocks+0xa6>
	  		Error_Handler();
 800257a:	f000 f9f5 	bl	8002968 <Error_Handler>
	  	}

	  	if(BSP_QSPI_Erase_Block(0x00070000) != QSPI_OK){
 800257e:	f44f 20e0 	mov.w	r0, #458752	; 0x70000
 8002582:	f000 fd87 	bl	8003094 <BSP_QSPI_Erase_Block>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <deleteBlocks+0xb8>
	  		Error_Handler();
 800258c:	f000 f9ec 	bl	8002968 <Error_Handler>
	  	}

	  	memset(buffer, 0, 100);
 8002590:	2264      	movs	r2, #100	; 0x64
 8002592:	2100      	movs	r1, #0
 8002594:	480a      	ldr	r0, [pc, #40]	; (80025c0 <deleteBlocks+0xe8>)
 8002596:	f009 fd79 	bl	800c08c <memset>
		sprintf(&buffer, "Blocks deleted ! \n");
 800259a:	490c      	ldr	r1, [pc, #48]	; (80025cc <deleteBlocks+0xf4>)
 800259c:	4808      	ldr	r0, [pc, #32]	; (80025c0 <deleteBlocks+0xe8>)
 800259e:	f008 fdeb 	bl	800b178 <siprintf>
	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 80025a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80025a6:	2264      	movs	r2, #100	; 0x64
 80025a8:	4905      	ldr	r1, [pc, #20]	; (80025c0 <deleteBlocks+0xe8>)
 80025aa:	4807      	ldr	r0, [pc, #28]	; (80025c8 <deleteBlocks+0xf0>)
 80025ac:	f005 fe4a 	bl	8008244 <HAL_UART_Transmit>

	  	deleting = 0;
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <deleteBlocks+0xe4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]



}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200006dc 	.word	0x200006dc
 80025c0:	20000660 	.word	0x20000660
 80025c4:	0800eeac 	.word	0x0800eeac
 80025c8:	200005c0 	.word	0x200005c0
 80025cc:	0800eec0 	.word	0x0800eec0

080025d0 <readFromSensors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_readFromSensors */
void readFromSensors(void const * argument)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 80025d8:	2064      	movs	r0, #100	; 0x64
 80025da:	f006 fd46 	bl	800906a <osDelay>


	  	if(!deleting && !gettingAverages){
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <readFromSensors+0x134>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f8      	bne.n	80025d8 <readFromSensors+0x8>
 80025e6:	4b48      	ldr	r3, [pc, #288]	; (8002708 <readFromSensors+0x138>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f4      	bne.n	80025d8 <readFromSensors+0x8>


			BSP_GYRO_GetXYZ(gyro); // (x, y, z)
 80025ee:	4847      	ldr	r0, [pc, #284]	; (800270c <readFromSensors+0x13c>)
 80025f0:	f000 fb70 	bl	8002cd4 <BSP_GYRO_GetXYZ>


			//Store gyro x,y,z values
			//Use addresses from 0x00000000 to 0x00030000
			if(BSP_QSPI_Write(gyro, 0x00000000 + sizeof(gyro) * samplesGyro , sizeof(gyro)) != QSPI_OK){
 80025f4:	4b46      	ldr	r3, [pc, #280]	; (8002710 <readFromSensors+0x140>)
 80025f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4613      	mov	r3, r2
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4413      	add	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2206      	movs	r2, #6
 8002606:	4619      	mov	r1, r3
 8002608:	4840      	ldr	r0, [pc, #256]	; (800270c <readFromSensors+0x13c>)
 800260a:	f000 fcbd 	bl	8002f88 <BSP_QSPI_Write>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <readFromSensors+0x4a>
				Error_Handler();
 8002614:	f000 f9a8 	bl	8002968 <Error_Handler>
 8002618:	e008      	b.n	800262c <readFromSensors+0x5c>
			}
			else{
				samplesGyro++;
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <readFromSensors+0x140>)
 800261c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002620:	b29b      	uxth	r3, r3
 8002622:	3301      	adds	r3, #1
 8002624:	b29b      	uxth	r3, r3
 8002626:	b21a      	sxth	r2, r3
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <readFromSensors+0x140>)
 800262a:	801a      	strh	r2, [r3, #0]
			}


			BSP_MAGNETO_GetXYZ(magneto); // (x, y, z)
 800262c:	4839      	ldr	r0, [pc, #228]	; (8002714 <readFromSensors+0x144>)
 800262e:	f000 fb95 	bl	8002d5c <BSP_MAGNETO_GetXYZ>

			//Store magneto x,y,z values
			//Use addresses from 0x00030000 to 0x00060000
			if(BSP_QSPI_Write(magneto, 0x00030000 + sizeof(magneto) * samplesMagneto, sizeof(magneto)) != QSPI_OK){
 8002632:	4b39      	ldr	r3, [pc, #228]	; (8002718 <readFromSensors+0x148>)
 8002634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002638:	461a      	mov	r2, r3
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8002646:	2206      	movs	r2, #6
 8002648:	4619      	mov	r1, r3
 800264a:	4832      	ldr	r0, [pc, #200]	; (8002714 <readFromSensors+0x144>)
 800264c:	f000 fc9c 	bl	8002f88 <BSP_QSPI_Write>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <readFromSensors+0x8c>
				Error_Handler();
 8002656:	f000 f987 	bl	8002968 <Error_Handler>
 800265a:	e008      	b.n	800266e <readFromSensors+0x9e>
			}
			else{
				samplesMagneto++;
 800265c:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <readFromSensors+0x148>)
 800265e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002662:	b29b      	uxth	r3, r3
 8002664:	3301      	adds	r3, #1
 8002666:	b29b      	uxth	r3, r3
 8002668:	b21a      	sxth	r2, r3
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <readFromSensors+0x148>)
 800266c:	801a      	strh	r2, [r3, #0]
			}



			temp[0] = BSP_TSENSOR_ReadTemp();
 800266e:	f001 f821 	bl	80036b4 <BSP_TSENSOR_ReadTemp>
 8002672:	eef0 7a40 	vmov.f32	s15, s0
 8002676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800267a:	ee17 3a90 	vmov	r3, s15
 800267e:	b21a      	sxth	r2, r3
 8002680:	4b26      	ldr	r3, [pc, #152]	; (800271c <readFromSensors+0x14c>)
 8002682:	801a      	strh	r2, [r3, #0]


			//Store temperature values
			if(BSP_QSPI_Write(temp, 0x00060000 + sizeof(temp) * samplesTemp, sizeof(temp)) != QSPI_OK){
 8002684:	4b26      	ldr	r3, [pc, #152]	; (8002720 <readFromSensors+0x150>)
 8002686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800268a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2202      	movs	r2, #2
 8002692:	4619      	mov	r1, r3
 8002694:	4821      	ldr	r0, [pc, #132]	; (800271c <readFromSensors+0x14c>)
 8002696:	f000 fc77 	bl	8002f88 <BSP_QSPI_Write>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <readFromSensors+0xd6>
				Error_Handler();
 80026a0:	f000 f962 	bl	8002968 <Error_Handler>
 80026a4:	e008      	b.n	80026b8 <readFromSensors+0xe8>
			}else{
				samplesTemp++;
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <readFromSensors+0x150>)
 80026a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b21a      	sxth	r2, r3
 80026b4:	4b1a      	ldr	r3, [pc, #104]	; (8002720 <readFromSensors+0x150>)
 80026b6:	801a      	strh	r2, [r3, #0]

			}


		   pressure[0] = BSP_PSENSOR_ReadPressure();
 80026b8:	f000 fb88 	bl	8002dcc <BSP_PSENSOR_ReadPressure>
 80026bc:	eef0 7a40 	vmov.f32	s15, s0
 80026c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c4:	ee17 3a90 	vmov	r3, s15
 80026c8:	b21a      	sxth	r2, r3
 80026ca:	4b16      	ldr	r3, [pc, #88]	; (8002724 <readFromSensors+0x154>)
 80026cc:	801a      	strh	r2, [r3, #0]

			//Store pressure values
			if(BSP_QSPI_Write(pressure, 0x00070000 + sizeof(pressure)*samplesPressure, sizeof(pressure)) != QSPI_OK){
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <readFromSensors+0x158>)
 80026d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d4:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2202      	movs	r2, #2
 80026dc:	4619      	mov	r1, r3
 80026de:	4811      	ldr	r0, [pc, #68]	; (8002724 <readFromSensors+0x154>)
 80026e0:	f000 fc52 	bl	8002f88 <BSP_QSPI_Write>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d002      	beq.n	80026f0 <readFromSensors+0x120>
				Error_Handler();
 80026ea:	f000 f93d 	bl	8002968 <Error_Handler>
 80026ee:	e773      	b.n	80025d8 <readFromSensors+0x8>
			}else{
				samplesPressure++;
 80026f0:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <readFromSensors+0x158>)
 80026f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	3301      	adds	r3, #1
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <readFromSensors+0x158>)
 8002700:	801a      	strh	r2, [r3, #0]
	  osDelay(100);
 8002702:	e769      	b.n	80025d8 <readFromSensors+0x8>
 8002704:	200006dc 	.word	0x200006dc
 8002708:	200006e4 	.word	0x200006e4
 800270c:	200006c4 	.word	0x200006c4
 8002710:	200006e8 	.word	0x200006e8
 8002714:	200006cc 	.word	0x200006cc
 8002718:	200006ea 	.word	0x200006ea
 800271c:	200006d4 	.word	0x200006d4
 8002720:	200006ec 	.word	0x200006ec
 8002724:	200006d8 	.word	0x200006d8
 8002728:	200006ee 	.word	0x200006ee

0800272c <transmitViaUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmitViaUART */
void transmitViaUART(void const * argument)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af02      	add	r7, sp, #8
 8002732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmitViaUART */
  /* Infinite loop */
  for(;;)
  {
      osDelay(100);
 8002734:	2064      	movs	r0, #100	; 0x64
 8002736:	f006 fc98 	bl	800906a <osDelay>

	  memset(buffer, 0, 100);
 800273a:	2264      	movs	r2, #100	; 0x64
 800273c:	2100      	movs	r1, #0
 800273e:	4857      	ldr	r0, [pc, #348]	; (800289c <transmitViaUART+0x170>)
 8002740:	f009 fca4 	bl	800c08c <memset>

	  	if(counter == 0){
 8002744:	4b56      	ldr	r3, [pc, #344]	; (80028a0 <transmitViaUART+0x174>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d11e      	bne.n	800278a <transmitViaUART+0x5e>

	  		hasPassed = 0;
 800274c:	4b55      	ldr	r3, [pc, #340]	; (80028a4 <transmitViaUART+0x178>)
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]

	  		int x = gyro[0];
 8002752:	4b55      	ldr	r3, [pc, #340]	; (80028a8 <transmitViaUART+0x17c>)
 8002754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002758:	613b      	str	r3, [r7, #16]
	  		int y = gyro[1];
 800275a:	4b53      	ldr	r3, [pc, #332]	; (80028a8 <transmitViaUART+0x17c>)
 800275c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002760:	60fb      	str	r3, [r7, #12]
	  		int z = gyro[2];
 8002762:	4b51      	ldr	r3, [pc, #324]	; (80028a8 <transmitViaUART+0x17c>)
 8002764:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002768:	60bb      	str	r3, [r7, #8]

	  		sprintf(&buffer, "GYRO: x: %d, y: %d, z: %d \n", x,y,z);
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	494e      	ldr	r1, [pc, #312]	; (80028ac <transmitViaUART+0x180>)
 8002774:	4849      	ldr	r0, [pc, #292]	; (800289c <transmitViaUART+0x170>)
 8002776:	f008 fcff 	bl	800b178 <siprintf>
	  	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, 100, 5000);
 800277a:	f241 3388 	movw	r3, #5000	; 0x1388
 800277e:	2264      	movs	r2, #100	; 0x64
 8002780:	4946      	ldr	r1, [pc, #280]	; (800289c <transmitViaUART+0x170>)
 8002782:	484b      	ldr	r0, [pc, #300]	; (80028b0 <transmitViaUART+0x184>)
 8002784:	f005 fd5e 	bl	8008244 <HAL_UART_Transmit>
 8002788:	e7d4      	b.n	8002734 <transmitViaUART+0x8>

	  	}

	  	else if(counter == 1){
 800278a:	4b45      	ldr	r3, [pc, #276]	; (80028a0 <transmitViaUART+0x174>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d11e      	bne.n	80027d0 <transmitViaUART+0xa4>

	  		hasPassed = 0;
 8002792:	4b44      	ldr	r3, [pc, #272]	; (80028a4 <transmitViaUART+0x178>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

	  		int x = magneto[0];
 8002798:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <transmitViaUART+0x188>)
 800279a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800279e:	61fb      	str	r3, [r7, #28]
	  		int y = magneto[1];
 80027a0:	4b44      	ldr	r3, [pc, #272]	; (80028b4 <transmitViaUART+0x188>)
 80027a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80027a6:	61bb      	str	r3, [r7, #24]
	  		int z = magneto[2];
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <transmitViaUART+0x188>)
 80027aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80027ae:	617b      	str	r3, [r7, #20]

	  		sprintf(&buffer, "Magneto: x: %d, y: %d, z: %d \n", x,y,z);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	69fa      	ldr	r2, [r7, #28]
 80027b8:	493f      	ldr	r1, [pc, #252]	; (80028b8 <transmitViaUART+0x18c>)
 80027ba:	4838      	ldr	r0, [pc, #224]	; (800289c <transmitViaUART+0x170>)
 80027bc:	f008 fcdc 	bl	800b178 <siprintf>
	  	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, 100, 5000);
 80027c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80027c4:	2264      	movs	r2, #100	; 0x64
 80027c6:	4935      	ldr	r1, [pc, #212]	; (800289c <transmitViaUART+0x170>)
 80027c8:	4839      	ldr	r0, [pc, #228]	; (80028b0 <transmitViaUART+0x184>)
 80027ca:	f005 fd3b 	bl	8008244 <HAL_UART_Transmit>
 80027ce:	e7b1      	b.n	8002734 <transmitViaUART+0x8>

	  	}

	  	else if(counter == 2){
 80027d0:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <transmitViaUART+0x174>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d112      	bne.n	80027fe <transmitViaUART+0xd2>

	  		hasPassed = 0;
 80027d8:	4b32      	ldr	r3, [pc, #200]	; (80028a4 <transmitViaUART+0x178>)
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]

	  		sprintf(&buffer, "Temperature: %d \n", (int) temp[0]);
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <transmitViaUART+0x190>)
 80027e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4936      	ldr	r1, [pc, #216]	; (80028c0 <transmitViaUART+0x194>)
 80027e8:	482c      	ldr	r0, [pc, #176]	; (800289c <transmitViaUART+0x170>)
 80027ea:	f008 fcc5 	bl	800b178 <siprintf>
	  	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, 100, 5000);
 80027ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80027f2:	2264      	movs	r2, #100	; 0x64
 80027f4:	4929      	ldr	r1, [pc, #164]	; (800289c <transmitViaUART+0x170>)
 80027f6:	482e      	ldr	r0, [pc, #184]	; (80028b0 <transmitViaUART+0x184>)
 80027f8:	f005 fd24 	bl	8008244 <HAL_UART_Transmit>
 80027fc:	e79a      	b.n	8002734 <transmitViaUART+0x8>

	  	}

	  	else if(counter == 3){
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <transmitViaUART+0x174>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d112      	bne.n	800282c <transmitViaUART+0x100>

	  		hasPassed = 0;
 8002806:	4b27      	ldr	r3, [pc, #156]	; (80028a4 <transmitViaUART+0x178>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

	  		sprintf(&buffer, "Pressure: %d \n", (int) pressure[0]);
 800280c:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <transmitViaUART+0x198>)
 800280e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002812:	461a      	mov	r2, r3
 8002814:	492c      	ldr	r1, [pc, #176]	; (80028c8 <transmitViaUART+0x19c>)
 8002816:	4821      	ldr	r0, [pc, #132]	; (800289c <transmitViaUART+0x170>)
 8002818:	f008 fcae 	bl	800b178 <siprintf>
	  	  	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, 100, 5000);
 800281c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002820:	2264      	movs	r2, #100	; 0x64
 8002822:	491e      	ldr	r1, [pc, #120]	; (800289c <transmitViaUART+0x170>)
 8002824:	4822      	ldr	r0, [pc, #136]	; (80028b0 <transmitViaUART+0x184>)
 8002826:	f005 fd0d 	bl	8008244 <HAL_UART_Transmit>
 800282a:	e783      	b.n	8002734 <transmitViaUART+0x8>

	  	}

	  	else if(!hasPassed && counter == 4 ){
 800282c:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <transmitViaUART+0x178>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f47f af7f 	bne.w	8002734 <transmitViaUART+0x8>
 8002836:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <transmitViaUART+0x174>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b04      	cmp	r3, #4
 800283c:	f47f af7a 	bne.w	8002734 <transmitViaUART+0x8>

	  		osDelay(100);
 8002840:	2064      	movs	r0, #100	; 0x64
 8002842:	f006 fc12 	bl	800906a <osDelay>

			memset(buffer, 0, 100);
 8002846:	2264      	movs	r2, #100	; 0x64
 8002848:	2100      	movs	r1, #0
 800284a:	4814      	ldr	r0, [pc, #80]	; (800289c <transmitViaUART+0x170>)
 800284c:	f009 fc1e 	bl	800c08c <memset>
			sprintf(&buffer, "Getting averages \n");
 8002850:	491e      	ldr	r1, [pc, #120]	; (80028cc <transmitViaUART+0x1a0>)
 8002852:	4812      	ldr	r0, [pc, #72]	; (800289c <transmitViaUART+0x170>)
 8002854:	f008 fc90 	bl	800b178 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002858:	f241 3388 	movw	r3, #5000	; 0x1388
 800285c:	2264      	movs	r2, #100	; 0x64
 800285e:	490f      	ldr	r1, [pc, #60]	; (800289c <transmitViaUART+0x170>)
 8002860:	4813      	ldr	r0, [pc, #76]	; (80028b0 <transmitViaUART+0x184>)
 8002862:	f005 fcef 	bl	8008244 <HAL_UART_Transmit>

			gettingAverages = 1;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <transmitViaUART+0x1a4>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]

			getGyroAverage();
 800286c:	f7ff fb2a 	bl	8001ec4 <getGyroAverage>
			getTemperatureAverage();
 8002870:	f7ff fa5e 	bl	8001d30 <getTemperatureAverage>
			getPressureAverage();
 8002874:	f7ff f996 	bl	8001ba4 <getPressureAverage>
			getMagnetoAverage();
 8002878:	f7ff fcce 	bl	8002218 <getMagnetoAverage>

			printAllAverages();
 800287c:	f7ff fcd4 	bl	8002228 <printAllAverages>

			gettingAverages = 0;
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <transmitViaUART+0x1a4>)
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]


	  	  	hasPassed = 1;
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <transmitViaUART+0x178>)
 8002888:	2201      	movs	r2, #1
 800288a:	601a      	str	r2, [r3, #0]

	  	  	osDelay(500);
 800288c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002890:	f006 fbeb 	bl	800906a <osDelay>

	  	  	counter = 0;
 8002894:	4b02      	ldr	r3, [pc, #8]	; (80028a0 <transmitViaUART+0x174>)
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
      osDelay(100);
 800289a:	e74b      	b.n	8002734 <transmitViaUART+0x8>
 800289c:	20000660 	.word	0x20000660
 80028a0:	20000084 	.word	0x20000084
 80028a4:	200006e0 	.word	0x200006e0
 80028a8:	200006c4 	.word	0x200006c4
 80028ac:	0800eed4 	.word	0x0800eed4
 80028b0:	200005c0 	.word	0x200005c0
 80028b4:	200006cc 	.word	0x200006cc
 80028b8:	0800eef0 	.word	0x0800eef0
 80028bc:	200006d4 	.word	0x200006d4
 80028c0:	0800ef10 	.word	0x0800ef10
 80028c4:	200006d8 	.word	0x200006d8
 80028c8:	0800ef24 	.word	0x0800ef24
 80028cc:	0800ef34 	.word	0x0800ef34
 80028d0:	200006e4 	.word	0x200006e4

080028d4 <hasButtonBeenPressed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_hasButtonBeenPressed */
void hasButtonBeenPressed(void const * argument)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN hasButtonBeenPressed */
	int passedBy = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]

	  /* Infinite loop */
	  for(;;)
	  {

		  osDelay(10);
 80028e0:	200a      	movs	r0, #10
 80028e2:	f006 fbc2 	bl	800906a <osDelay>

		GPIO_PinState button_state = HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin);
 80028e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028ea:	4813      	ldr	r0, [pc, #76]	; (8002938 <hasButtonBeenPressed+0x64>)
 80028ec:	f001 fdcc 	bl	8004488 <HAL_GPIO_ReadPin>
 80028f0:	4603      	mov	r3, r0
 80028f2:	72fb      	strb	r3, [r7, #11]

		 while(button_state == GPIO_PIN_RESET){ // button pressed (when button pushed, grounded)
 80028f4:	e01a      	b.n	800292c <hasButtonBeenPressed+0x58>

			 // ensure that do not repeat;
		    	if(!passedBy){
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d110      	bne.n	800291e <hasButtonBeenPressed+0x4a>
		    		counter = (counter + 1) % 5;
 80028fc:	4b0f      	ldr	r3, [pc, #60]	; (800293c <hasButtonBeenPressed+0x68>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1c59      	adds	r1, r3, #1
 8002902:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <hasButtonBeenPressed+0x6c>)
 8002904:	fb83 2301 	smull	r2, r3, r3, r1
 8002908:	105a      	asrs	r2, r3, #1
 800290a:	17cb      	asrs	r3, r1, #31
 800290c:	1ad2      	subs	r2, r2, r3
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	1aca      	subs	r2, r1, r3
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <hasButtonBeenPressed+0x68>)
 8002918:	601a      	str	r2, [r3, #0]
		    		passedBy = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	60fb      	str	r3, [r7, #12]
		    	}

		 button_state = HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin);
 800291e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <hasButtonBeenPressed+0x64>)
 8002924:	f001 fdb0 	bl	8004488 <HAL_GPIO_ReadPin>
 8002928:	4603      	mov	r3, r0
 800292a:	72fb      	strb	r3, [r7, #11]
		 while(button_state == GPIO_PIN_RESET){ // button pressed (when button pushed, grounded)
 800292c:	7afb      	ldrb	r3, [r7, #11]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0e1      	beq.n	80028f6 <hasButtonBeenPressed+0x22>


		 }

		passedBy = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
	  {
 8002936:	e7d3      	b.n	80028e0 <hasButtonBeenPressed+0xc>
 8002938:	48000800 	.word	0x48000800
 800293c:	20000084 	.word	0x20000084
 8002940:	66666667 	.word	0x66666667

08002944 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a04      	ldr	r2, [pc, #16]	; (8002964 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002956:	f001 fa11 	bl	8003d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40001000 	.word	0x40001000

08002968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800296c:	b672      	cpsid	i
}
 800296e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  memset(buffer, 0, 100);
 8002970:	2264      	movs	r2, #100	; 0x64
 8002972:	2100      	movs	r1, #0
 8002974:	480a      	ldr	r0, [pc, #40]	; (80029a0 <Error_Handler+0x38>)
 8002976:	f009 fb89 	bl	800c08c <memset>
  sprintf(&buffer, "Error at error handler \n");
 800297a:	490a      	ldr	r1, [pc, #40]	; (80029a4 <Error_Handler+0x3c>)
 800297c:	4808      	ldr	r0, [pc, #32]	; (80029a0 <Error_Handler+0x38>)
 800297e:	f008 fbfb 	bl	800b178 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*) buffer, sizeof(buffer), 5000);
 8002982:	f241 3388 	movw	r3, #5000	; 0x1388
 8002986:	2264      	movs	r2, #100	; 0x64
 8002988:	4905      	ldr	r1, [pc, #20]	; (80029a0 <Error_Handler+0x38>)
 800298a:	4807      	ldr	r0, [pc, #28]	; (80029a8 <Error_Handler+0x40>)
 800298c:	f005 fc5a 	bl	8008244 <HAL_UART_Transmit>

  HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 8002990:	2200      	movs	r2, #0
 8002992:	2108      	movs	r1, #8
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <Error_Handler+0x44>)
 8002996:	f001 fd8f 	bl	80044b8 <HAL_GPIO_WritePin>
  __BKPT();
 800299a:	be00      	bkpt	0x0000

  while (1)
 800299c:	e7fe      	b.n	800299c <Error_Handler+0x34>
 800299e:	bf00      	nop
 80029a0:	20000660 	.word	0x20000660
 80029a4:	0800ef48 	.word	0x0800ef48
 80029a8:	200005c0 	.word	0x200005c0
 80029ac:	48001000 	.word	0x48001000

080029b0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08a      	sub	sp, #40	; 0x28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80029b8:	4b27      	ldr	r3, [pc, #156]	; (8002a58 <I2Cx_MspInit+0xa8>)
 80029ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029bc:	4a26      	ldr	r2, [pc, #152]	; (8002a58 <I2Cx_MspInit+0xa8>)
 80029be:	f043 0302 	orr.w	r3, r3, #2
 80029c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <I2Cx_MspInit+0xa8>)
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80029d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029d4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80029d6:	2312      	movs	r3, #18
 80029d8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029de:	2303      	movs	r3, #3
 80029e0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80029e2:	2304      	movs	r3, #4
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	4619      	mov	r1, r3
 80029ec:	481b      	ldr	r0, [pc, #108]	; (8002a5c <I2Cx_MspInit+0xac>)
 80029ee:	f001 fac7 	bl	8003f80 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80029f2:	f107 0314 	add.w	r3, r7, #20
 80029f6:	4619      	mov	r1, r3
 80029f8:	4818      	ldr	r0, [pc, #96]	; (8002a5c <I2Cx_MspInit+0xac>)
 80029fa:	f001 fac1 	bl	8003f80 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <I2Cx_MspInit+0xa8>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	4a15      	ldr	r2, [pc, #84]	; (8002a58 <I2Cx_MspInit+0xa8>)
 8002a04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a08:	6593      	str	r3, [r2, #88]	; 0x58
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <I2Cx_MspInit+0xa8>)
 8002a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002a16:	4b10      	ldr	r3, [pc, #64]	; (8002a58 <I2Cx_MspInit+0xa8>)
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	4a0f      	ldr	r2, [pc, #60]	; (8002a58 <I2Cx_MspInit+0xa8>)
 8002a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a20:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <I2Cx_MspInit+0xa8>)
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	4a0c      	ldr	r2, [pc, #48]	; (8002a58 <I2Cx_MspInit+0xa8>)
 8002a28:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a2c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	210f      	movs	r1, #15
 8002a32:	2021      	movs	r0, #33	; 0x21
 8002a34:	f001 fa7a 	bl	8003f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002a38:	2021      	movs	r0, #33	; 0x21
 8002a3a:	f001 fa93 	bl	8003f64 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	210f      	movs	r1, #15
 8002a42:	2022      	movs	r0, #34	; 0x22
 8002a44:	f001 fa72 	bl	8003f2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002a48:	2022      	movs	r0, #34	; 0x22
 8002a4a:	f001 fa8b 	bl	8003f64 <HAL_NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3728      	adds	r7, #40	; 0x28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	48000400 	.word	0x48000400

08002a60 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a12      	ldr	r2, [pc, #72]	; (8002ab4 <I2Cx_Init+0x54>)
 8002a6c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <I2Cx_Init+0x58>)
 8002a72:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff89 	bl	80029b0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f001 fd22 	bl	80044e8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f002 face 	bl	8005048 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40005800 	.word	0x40005800
 8002ab8:	00702681 	.word	0x00702681

08002abc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af04      	add	r7, sp, #16
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	72fb      	strb	r3, [r7, #11]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	813b      	strh	r3, [r7, #8]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	b299      	uxth	r1, r3
 8002ade:	88f8      	ldrh	r0, [r7, #6]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ae6:	9302      	str	r3, [sp, #8]
 8002ae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	4603      	mov	r3, r0
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f001 fed6 	bl	80048a4 <HAL_I2C_Mem_Read>
 8002af8:	4603      	mov	r3, r0
 8002afa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d004      	beq.n	8002b0c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002b02:	7afb      	ldrb	r3, [r7, #11]
 8002b04:	4619      	mov	r1, r3
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f832 	bl	8002b70 <I2Cx_Error>
  }
  return status;
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b08a      	sub	sp, #40	; 0x28
 8002b1a:	af04      	add	r7, sp, #16
 8002b1c:	60f8      	str	r0, [r7, #12]
 8002b1e:	4608      	mov	r0, r1
 8002b20:	4611      	mov	r1, r2
 8002b22:	461a      	mov	r2, r3
 8002b24:	4603      	mov	r3, r0
 8002b26:	72fb      	strb	r3, [r7, #11]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	813b      	strh	r3, [r7, #8]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002b34:	7afb      	ldrb	r3, [r7, #11]
 8002b36:	b299      	uxth	r1, r3
 8002b38:	88f8      	ldrh	r0, [r7, #6]
 8002b3a:	893a      	ldrh	r2, [r7, #8]
 8002b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b40:	9302      	str	r3, [sp, #8]
 8002b42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f001 fd95 	bl	800467c <HAL_I2C_Mem_Write>
 8002b52:	4603      	mov	r3, r0
 8002b54:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d004      	beq.n	8002b66 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002b5c:	7afb      	ldrb	r3, [r7, #11]
 8002b5e:	4619      	mov	r1, r3
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f805 	bl	8002b70 <I2Cx_Error>
  }
  return status;
 8002b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f001 fd4e 	bl	800461e <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff6c 	bl	8002a60 <I2Cx_Init>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002b94:	4802      	ldr	r0, [pc, #8]	; (8002ba0 <SENSOR_IO_Init+0x10>)
 8002b96:	f7ff ff63 	bl	8002a60 <I2Cx_Init>
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000710 	.word	0x20000710

08002ba4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af02      	add	r7, sp, #8
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
 8002bae:	460b      	mov	r3, r1
 8002bb0:	71bb      	strb	r3, [r7, #6]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002bb6:	79bb      	ldrb	r3, [r7, #6]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	79f9      	ldrb	r1, [r7, #7]
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	9301      	str	r3, [sp, #4]
 8002bc0:	1d7b      	adds	r3, r7, #5
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	4803      	ldr	r0, [pc, #12]	; (8002bd4 <SENSOR_IO_Write+0x30>)
 8002bc8:	f7ff ffa5 	bl	8002b16 <I2Cx_WriteMultiple>
}
 8002bcc:	bf00      	nop
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000710 	.word	0x20000710

08002bd8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	4603      	mov	r3, r0
 8002be0:	460a      	mov	r2, r1
 8002be2:	71fb      	strb	r3, [r7, #7]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002bec:	79bb      	ldrb	r3, [r7, #6]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	79f9      	ldrb	r1, [r7, #7]
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	f107 030f 	add.w	r3, r7, #15
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	4804      	ldr	r0, [pc, #16]	; (8002c10 <SENSOR_IO_Read+0x38>)
 8002c00:	f7ff ff5c 	bl	8002abc <I2Cx_ReadMultiple>

  return read_value;
 8002c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000710 	.word	0x20000710

08002c14 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	603a      	str	r2, [r7, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
 8002c22:	460b      	mov	r3, r1
 8002c24:	71bb      	strb	r3, [r7, #6]
 8002c26:	4613      	mov	r3, r2
 8002c28:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002c2a:	79bb      	ldrb	r3, [r7, #6]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	79f9      	ldrb	r1, [r7, #7]
 8002c30:	88bb      	ldrh	r3, [r7, #4]
 8002c32:	9301      	str	r3, [sp, #4]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	9300      	str	r3, [sp, #0]
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4804      	ldr	r0, [pc, #16]	; (8002c4c <SENSOR_IO_ReadMultiple+0x38>)
 8002c3c:	f7ff ff3e 	bl	8002abc <I2Cx_ReadMultiple>
 8002c40:	4603      	mov	r3, r0
 8002c42:	b29b      	uxth	r3, r3
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	20000710 	.word	0x20000710

08002c50 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <BSP_GYRO_Init+0x7c>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	4798      	blx	r3
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b6a      	cmp	r3, #106	; 0x6a
 8002c68:	d002      	beq.n	8002c70 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	e028      	b.n	8002cc2 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002c70:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <BSP_GYRO_Init+0x80>)
 8002c72:	4a16      	ldr	r2, [pc, #88]	; (8002ccc <BSP_GYRO_Init+0x7c>)
 8002c74:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002c7a:	2330      	movs	r3, #48	; 0x30
 8002c7c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002c86:	2340      	movs	r3, #64	; 0x40
 8002c88:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002c8e:	230c      	movs	r3, #12
 8002c90:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002c92:	7aba      	ldrb	r2, [r7, #10]
 8002c94:	797b      	ldrb	r3, [r7, #5]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002c9c:	7a3b      	ldrb	r3, [r7, #8]
 8002c9e:	f043 0304 	orr.w	r3, r3, #4
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	b21a      	sxth	r2, r3
 8002ca8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	b21b      	sxth	r3, r3
 8002cb0:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002cb2:	4b07      	ldr	r3, [pc, #28]	; (8002cd0 <BSP_GYRO_Init+0x80>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	89ba      	ldrh	r2, [r7, #12]
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	20000050 	.word	0x20000050
 8002cd0:	20000764 	.word	0x20000764

08002cd4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <BSP_GYRO_GetXYZ+0x2c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <BSP_GYRO_GetXYZ+0x2c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d004      	beq.n	8002cf8 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8002cee:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <BSP_GYRO_GetXYZ+0x2c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000764 	.word	0x20000764

08002d04 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002d0e:	4b11      	ldr	r3, [pc, #68]	; (8002d54 <BSP_MAGNETO_Init+0x50>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4798      	blx	r3
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b3d      	cmp	r3, #61	; 0x3d
 8002d18:	d002      	beq.n	8002d20 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	71fb      	strb	r3, [r7, #7]
 8002d1e:	e013      	b.n	8002d48 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002d20:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <BSP_MAGNETO_Init+0x54>)
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <BSP_MAGNETO_Init+0x50>)
 8002d24:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002d26:	2358      	movs	r3, #88	; 0x58
 8002d28:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002d32:	2308      	movs	r3, #8
 8002d34:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002d36:	2340      	movs	r3, #64	; 0x40
 8002d38:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <BSP_MAGNETO_Init+0x54>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	463a      	mov	r2, r7
 8002d42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d46:	4798      	blx	r3
  } 

  return ret;  
 8002d48:	79fb      	ldrb	r3, [r7, #7]
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000010 	.word	0x20000010
 8002d58:	20000768 	.word	0x20000768

08002d5c <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d004      	beq.n	8002d80 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002d76:	4b04      	ldr	r3, [pc, #16]	; (8002d88 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
    }
  }
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	20000768 	.word	0x20000768

08002d8c <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <BSP_PSENSOR_Init+0x38>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	20ba      	movs	r0, #186	; 0xba
 8002d98:	4798      	blx	r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2bb1      	cmp	r3, #177	; 0xb1
 8002d9e:	d002      	beq.n	8002da6 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	e009      	b.n	8002dba <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002da6:	4b08      	ldr	r3, [pc, #32]	; (8002dc8 <BSP_PSENSOR_Init+0x3c>)
 8002da8:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <BSP_PSENSOR_Init+0x38>)
 8002daa:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002dac:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <BSP_PSENSOR_Init+0x3c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	20ba      	movs	r0, #186	; 0xba
 8002db4:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002dba:	687b      	ldr	r3, [r7, #4]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	20000044 	.word	0x20000044
 8002dc8:	2000076c 	.word	0x2000076c

08002dcc <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <BSP_PSENSOR_ReadPressure+0x18>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	20ba      	movs	r0, #186	; 0xba
 8002dd8:	4798      	blx	r3
 8002dda:	eef0 7a40 	vmov.f32	s15, s0
}
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	2000076c 	.word	0x2000076c

08002de8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002df0:	4a3b      	ldr	r2, [pc, #236]	; (8002ee0 <BSP_QSPI_Init+0xf8>)
 8002df2:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8002df4:	4839      	ldr	r0, [pc, #228]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002df6:	f002 fa69 	bl	80052cc <HAL_OSPI_DeInit>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e067      	b.n	8002ed4 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8002e04:	f000 f990 	bl	8003128 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8002e08:	4b34      	ldr	r3, [pc, #208]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8002e14:	4b31      	ldr	r3, [pc, #196]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e1a:	60da      	str	r2, [r3, #12]
 8002e1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002e20:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	fa93 f3a3 	rbit	r3, r3
 8002e28:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e003      	b.n	8002e40 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	fab3 f383 	clz	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8002e40:	461a      	mov	r2, r3
 8002e42:	4b26      	ldr	r3, [pc, #152]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e44:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8002e46:	4b25      	ldr	r3, [pc, #148]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8002e4c:	4b23      	ldr	r3, [pc, #140]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8002e58:	4b20      	ldr	r3, [pc, #128]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8002e72:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8002e78:	4818      	ldr	r0, [pc, #96]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e7a:	f002 f97d 	bl	8005178 <HAL_OSPI_Init>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e025      	b.n	8002ed4 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8002e88:	4814      	ldr	r0, [pc, #80]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e8a:	f000 f98d 	bl	80031a8 <QSPI_ResetMemory>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8002e94:	2304      	movs	r3, #4
 8002e96:	e01d      	b.n	8002ed4 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4810      	ldr	r0, [pc, #64]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002e9c:	f000 fa72 	bl	8003384 <QSPI_QuadMode>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e014      	b.n	8002ed4 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8002eaa:	2101      	movs	r1, #1
 8002eac:	480b      	ldr	r0, [pc, #44]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002eae:	f000 fb15 	bl	80034dc <QSPI_HighPerfMode>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e00b      	b.n	8002ed4 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8002ebc:	4b07      	ldr	r3, [pc, #28]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8002ec2:	4806      	ldr	r0, [pc, #24]	; (8002edc <BSP_QSPI_Init+0xf4>)
 8002ec4:	f002 f958 	bl	8005178 <HAL_OSPI_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000770 	.word	0x20000770
 8002ee0:	a0001000 	.word	0xa0001000

08002ee4 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b098      	sub	sp, #96	; 0x60
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8002ef8:	23eb      	movs	r3, #235	; 0xeb
 8002efa:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8002f00:	2300      	movs	r3, #0
 8002f02:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8002f0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8002f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f16:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8002f1c:	23aa      	movs	r3, #170	; 0xaa
 8002f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8002f20:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8002f26:	2300      	movs	r3, #0
 8002f28:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8002f2e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002f32:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8002f3c:	2304      	movs	r3, #4
 8002f3e:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8002f40:	2300      	movs	r3, #0
 8002f42:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002f44:	2300      	movs	r3, #0
 8002f46:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f48:	f107 0310 	add.w	r3, r7, #16
 8002f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f50:	4619      	mov	r1, r3
 8002f52:	480c      	ldr	r0, [pc, #48]	; (8002f84 <BSP_QSPI_Read+0xa0>)
 8002f54:	f002 f9e1 	bl	800531a <HAL_OSPI_Command>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e00b      	b.n	8002f7a <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	68f9      	ldr	r1, [r7, #12]
 8002f68:	4806      	ldr	r0, [pc, #24]	; (8002f84 <BSP_QSPI_Read+0xa0>)
 8002f6a:	f002 faca 	bl	8005502 <HAL_OSPI_Receive>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e000      	b.n	8002f7a <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3760      	adds	r7, #96	; 0x60
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000770 	.word	0x20000770

08002f88 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b09c      	sub	sp, #112	; 0x70
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002f9c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8002f9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d901      	bls.n	8002faa <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 8002fbe:	2338      	movs	r3, #56	; 0x38
 8002fc0:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8002fce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8002fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fd8:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8002fe2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8002fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8002ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8002ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffe:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8003000:	4823      	ldr	r0, [pc, #140]	; (8003090 <BSP_QSPI_Write+0x108>)
 8003002:	f000 f918 	bl	8003236 <QSPI_WriteEnable>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e03b      	b.n	8003088 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	f241 3288 	movw	r2, #5000	; 0x1388
 8003018:	4619      	mov	r1, r3
 800301a:	481d      	ldr	r0, [pc, #116]	; (8003090 <BSP_QSPI_Write+0x108>)
 800301c:	f002 f97d 	bl	800531a <HAL_OSPI_Command>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e02e      	b.n	8003088 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	68f9      	ldr	r1, [r7, #12]
 8003030:	4817      	ldr	r0, [pc, #92]	; (8003090 <BSP_QSPI_Write+0x108>)
 8003032:	f002 f9f3 	bl	800541c <HAL_OSPI_Transmit>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e023      	b.n	8003088 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003040:	f241 3188 	movw	r1, #5000	; 0x1388
 8003044:	4812      	ldr	r0, [pc, #72]	; (8003090 <BSP_QSPI_Write+0x108>)
 8003046:	f000 f952 	bl	80032ee <QSPI_AutoPollingMemReady>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e019      	b.n	8003088 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8003054:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003058:	4413      	add	r3, r2
 800305a:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	4413      	add	r3, r2
 8003062:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8003064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003066:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800306a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800306c:	429a      	cmp	r2, r3
 800306e:	d203      	bcs.n	8003078 <BSP_QSPI_Write+0xf0>
 8003070:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003072:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	e001      	b.n	800307c <BSP_QSPI_Write+0xf4>
 8003078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800307c:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800307e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003082:	429a      	cmp	r2, r3
 8003084:	d3b8      	bcc.n	8002ff8 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3770      	adds	r7, #112	; 0x70
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	20000770 	.word	0x20000770

08003094 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b096      	sub	sp, #88	; 0x58
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 80030a4:	23d8      	movs	r3, #216	; 0xd8
 80030a6:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80030a8:	2301      	movs	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80030b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80030be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80030c4:	2300      	movs	r3, #0
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80030cc:	2300      	movs	r3, #0
 80030ce:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80030d8:	2300      	movs	r3, #0
 80030da:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80030dc:	4811      	ldr	r0, [pc, #68]	; (8003124 <BSP_QSPI_Erase_Block+0x90>)
 80030de:	f000 f8aa 	bl	8003236 <QSPI_WriteEnable>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e017      	b.n	800311c <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80030ec:	f107 0308 	add.w	r3, r7, #8
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4619      	mov	r1, r3
 80030f6:	480b      	ldr	r0, [pc, #44]	; (8003124 <BSP_QSPI_Erase_Block+0x90>)
 80030f8:	f002 f90f 	bl	800531a <HAL_OSPI_Command>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e00a      	b.n	800311c <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8003106:	f640 51ac 	movw	r1, #3500	; 0xdac
 800310a:	4806      	ldr	r0, [pc, #24]	; (8003124 <BSP_QSPI_Erase_Block+0x90>)
 800310c:	f000 f8ef 	bl	80032ee <QSPI_AutoPollingMemReady>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e000      	b.n	800311c <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3758      	adds	r7, #88	; 0x58
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000770 	.word	0x20000770

08003128 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800312e:	4b1c      	ldr	r3, [pc, #112]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 8003130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003132:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 8003134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003138:	6513      	str	r3, [r2, #80]	; 0x50
 800313a:	4b19      	ldr	r3, [pc, #100]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 800313c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003142:	60bb      	str	r3, [r7, #8]
 8003144:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 800314c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003150:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8003152:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 8003158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800315c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 8003164:	f043 0310 	orr.w	r3, r3, #16
 8003168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800316a:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <BSP_QSPI_MspInit+0x78>)
 800316c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8003176:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800317a:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8003188:	230a      	movs	r3, #10
 800318a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	4619      	mov	r1, r3
 8003192:	4804      	ldr	r0, [pc, #16]	; (80031a4 <BSP_QSPI_MspInit+0x7c>)
 8003194:	f000 fef4 	bl	8003f80 <HAL_GPIO_Init>
}
 8003198:	bf00      	nop
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40021000 	.word	0x40021000
 80031a4:	48001000 	.word	0x48001000

080031a8 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b096      	sub	sp, #88	; 0x58
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 80031b8:	2366      	movs	r3, #102	; 0x66
 80031ba:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80031bc:	2301      	movs	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80031c0:	2300      	movs	r3, #0
 80031c2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80031d8:	2300      	movs	r3, #0
 80031da:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80031dc:	2300      	movs	r3, #0
 80031de:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031e0:	f107 0308 	add.w	r3, r7, #8
 80031e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f002 f895 	bl	800531a <HAL_OSPI_Command>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e019      	b.n	800322e <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80031fa:	2399      	movs	r3, #153	; 0x99
 80031fc:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80031fe:	f107 0308 	add.w	r3, r7, #8
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4619      	mov	r1, r3
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f002 f886 	bl	800531a <HAL_OSPI_Command>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e00a      	b.n	800322e <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003218:	f241 3188 	movw	r1, #5000	; 0x1388
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f866 	bl	80032ee <QSPI_AutoPollingMemReady>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3758      	adds	r7, #88	; 0x58
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b09c      	sub	sp, #112	; 0x70
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800323e:	2300      	movs	r3, #0
 8003240:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003242:	2300      	movs	r3, #0
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8003246:	2306      	movs	r3, #6
 8003248:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800324a:	2301      	movs	r3, #1
 800324c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800324e:	2300      	movs	r3, #0
 8003250:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003252:	2300      	movs	r3, #0
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003256:	2300      	movs	r3, #0
 8003258:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800325a:	2300      	movs	r3, #0
 800325c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800325e:	2300      	movs	r3, #0
 8003260:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800326a:	2300      	movs	r3, #0
 800326c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800326e:	f107 0320 	add.w	r3, r7, #32
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4619      	mov	r1, r3
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f002 f84e 	bl	800531a <HAL_OSPI_Command>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e02e      	b.n	80032e6 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8003288:	2302      	movs	r3, #2
 800328a:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 800328c:	2302      	movs	r3, #2
 800328e:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8003294:	2310      	movs	r3, #16
 8003296:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003298:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800329c:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800329e:	2305      	movs	r3, #5
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 80032a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a6:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 80032ac:	2300      	movs	r3, #0
 80032ae:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032b0:	f107 0320 	add.w	r3, r7, #32
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f002 f82d 	bl	800531a <HAL_OSPI_Command>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e00d      	b.n	80032e6 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80032ca:	f107 030c 	add.w	r3, r7, #12
 80032ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f002 f9b7 	bl	8005648 <HAL_OSPI_AutoPolling>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3770      	adds	r7, #112	; 0x70
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b09c      	sub	sp, #112	; 0x70
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80032f8:	2300      	movs	r3, #0
 80032fa:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8003300:	2305      	movs	r3, #5
 8003302:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8003304:	2301      	movs	r3, #1
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8003308:	2300      	movs	r3, #0
 800330a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800330c:	2300      	movs	r3, #0
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003310:	2300      	movs	r3, #0
 8003312:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003314:	2300      	movs	r3, #0
 8003316:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8003318:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800331c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800331e:	2301      	movs	r3, #1
 8003320:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8003322:	2300      	movs	r3, #0
 8003324:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800332a:	2300      	movs	r3, #0
 800332c:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800332e:	2300      	movs	r3, #0
 8003330:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8003336:	2301      	movs	r3, #1
 8003338:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800333e:	2310      	movs	r3, #16
 8003340:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003342:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003346:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003348:	f107 0320 	add.w	r3, r7, #32
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f001 ffe1 	bl	800531a <HAL_OSPI_Command>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00c      	b.n	800337c <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f002 f96c 	bl	8005648 <HAL_OSPI_AutoPolling>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3770      	adds	r7, #112	; 0x70
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b098      	sub	sp, #96	; 0x60
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8003390:	2300      	movs	r3, #0
 8003392:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8003398:	2305      	movs	r3, #5
 800339a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800339c:	2301      	movs	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80033a0:	2300      	movs	r3, #0
 80033a2:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80033b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80033c6:	2300      	movs	r3, #0
 80033c8:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033ca:	f107 0310 	add.w	r3, r7, #16
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4619      	mov	r1, r3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f001 ffa0 	bl	800531a <HAL_OSPI_Command>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e077      	b.n	80034d4 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80033e4:	f107 030f 	add.w	r3, r7, #15
 80033e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ec:	4619      	mov	r1, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f002 f887 	bl	8005502 <HAL_OSPI_Receive>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06a      	b.n	80034d4 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ff19 	bl	8003236 <QSPI_WriteEnable>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e062      	b.n	80034d4 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800340e:	78fb      	ldrb	r3, [r7, #3]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341a:	b2db      	uxtb	r3, r3
 800341c:	73fb      	strb	r3, [r7, #15]
 800341e:	e004      	b.n	800342a <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8003420:	7bfb      	ldrb	r3, [r7, #15]
 8003422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003426:	b2db      	uxtb	r3, r3
 8003428:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800342a:	2301      	movs	r3, #1
 800342c:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800342e:	f107 0310 	add.w	r3, r7, #16
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4619      	mov	r1, r3
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f001 ff6e 	bl	800531a <HAL_OSPI_Command>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e045      	b.n	80034d4 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003448:	f107 030f 	add.w	r3, r7, #15
 800344c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f001 ffe2 	bl	800541c <HAL_OSPI_Transmit>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e038      	b.n	80034d4 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8003462:	f241 3188 	movw	r1, #5000	; 0x1388
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff ff41 	bl	80032ee <QSPI_AutoPollingMemReady>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02e      	b.n	80034d4 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8003476:	2305      	movs	r3, #5
 8003478:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800347a:	f107 0310 	add.w	r3, r7, #16
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f001 ff48 	bl	800531a <HAL_OSPI_Command>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e01f      	b.n	80034d4 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003494:	f107 030f 	add.w	r3, r7, #15
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f002 f82f 	bl	8005502 <HAL_OSPI_Receive>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e012      	b.n	80034d4 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <QSPI_QuadMode+0x13a>
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d007      	beq.n	80034ce <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e000      	b.n	80034d4 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3760      	adds	r7, #96	; 0x60
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b098      	sub	sp, #96	; 0x60
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80034f0:	2305      	movs	r3, #5
 80034f2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80034f4:	2301      	movs	r3, #1
 80034f6:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8003500:	2300      	movs	r3, #0
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8003504:	2300      	movs	r3, #0
 8003506:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8003508:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800350c:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800350e:	2300      	movs	r3, #0
 8003510:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8003516:	2301      	movs	r3, #1
 8003518:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800351e:	2300      	movs	r3, #0
 8003520:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003522:	f107 0310 	add.w	r3, r7, #16
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f001 fef4 	bl	800531a <HAL_OSPI_Command>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e09a      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800353c:	f107 030c 	add.w	r3, r7, #12
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f001 ffdb 	bl	8005502 <HAL_OSPI_Receive>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e08d      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003556:	2315      	movs	r3, #21
 8003558:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800355a:	2302      	movs	r3, #2
 800355c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800355e:	f107 0310 	add.w	r3, r7, #16
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4619      	mov	r1, r3
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f001 fed6 	bl	800531a <HAL_OSPI_Command>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e07c      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003578:	f107 030c 	add.w	r3, r7, #12
 800357c:	3301      	adds	r3, #1
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f001 ffbc 	bl	8005502 <HAL_OSPI_Receive>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e06e      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fe4e 	bl	8003236 <QSPI_WriteEnable>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e066      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d105      	bne.n	80035b6 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80035aa:	7bbb      	ldrb	r3, [r7, #14]
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	73bb      	strb	r3, [r7, #14]
 80035b4:	e004      	b.n	80035c0 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 80035b6:	7bbb      	ldrb	r3, [r7, #14]
 80035b8:	f023 0302 	bic.w	r3, r3, #2
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80035c0:	2301      	movs	r3, #1
 80035c2:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 80035c4:	2303      	movs	r3, #3
 80035c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035c8:	f107 0310 	add.w	r3, r7, #16
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4619      	mov	r1, r3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f001 fea1 	bl	800531a <HAL_OSPI_Command>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e047      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4619      	mov	r1, r3
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f001 ff15 	bl	800541c <HAL_OSPI_Transmit>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e03a      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80035fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fe74 	bl	80032ee <QSPI_AutoPollingMemReady>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e030      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8003610:	2315      	movs	r3, #21
 8003612:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8003614:	2302      	movs	r3, #2
 8003616:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003618:	f107 0310 	add.w	r3, r7, #16
 800361c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f001 fe79 	bl	800531a <HAL_OSPI_Command>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e01f      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003632:	f107 030c 	add.w	r3, r7, #12
 8003636:	f241 3288 	movw	r2, #5000	; 0x1388
 800363a:	4619      	mov	r1, r3
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f001 ff60 	bl	8005502 <HAL_OSPI_Receive>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e012      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800364c:	7b7b      	ldrb	r3, [r7, #13]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d102      	bne.n	800365c <QSPI_HighPerfMode+0x180>
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d007      	beq.n	800366c <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800365c:	7b7b      	ldrb	r3, [r7, #13]
 800365e:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8003666:	78fb      	ldrb	r3, [r7, #3]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3760      	adds	r7, #96	; 0x60
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8003686:	4b09      	ldr	r3, [pc, #36]	; (80036ac <BSP_TSENSOR_Init+0x30>)
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <BSP_TSENSOR_Init+0x34>)
 800368a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 800368c:	f7ff fa80 	bl	8002b90 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <BSP_TSENSOR_Init+0x30>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2100      	movs	r1, #0
 8003698:	20be      	movs	r0, #190	; 0xbe
 800369a:	4798      	blx	r3

  ret = TSENSOR_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80036a0:	79fb      	ldrb	r3, [r7, #7]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	200007c0 	.word	0x200007c0
 80036b0:	20000000 	.word	0x20000000

080036b4 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <BSP_TSENSOR_ReadTemp+0x18>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	20be      	movs	r0, #190	; 0xbe
 80036c0:	4798      	blx	r3
 80036c2:	eef0 7a40 	vmov.f32	s15, s0
}
 80036c6:	eeb0 0a67 	vmov.f32	s0, s15
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	200007c0 	.word	0x200007c0

080036d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_MspInit+0x4c>)
 80036d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036da:	4a10      	ldr	r2, [pc, #64]	; (800371c <HAL_MspInit+0x4c>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6613      	str	r3, [r2, #96]	; 0x60
 80036e2:	4b0e      	ldr	r3, [pc, #56]	; (800371c <HAL_MspInit+0x4c>)
 80036e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	607b      	str	r3, [r7, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_MspInit+0x4c>)
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <HAL_MspInit+0x4c>)
 80036f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f8:	6593      	str	r3, [r2, #88]	; 0x58
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_MspInit+0x4c>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003706:	2200      	movs	r2, #0
 8003708:	210f      	movs	r1, #15
 800370a:	f06f 0001 	mvn.w	r0, #1
 800370e:	f000 fc0d 	bl	8003f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40021000 	.word	0x40021000

08003720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b0ae      	sub	sp, #184	; 0xb8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003738:	f107 0310 	add.w	r3, r7, #16
 800373c:	2294      	movs	r2, #148	; 0x94
 800373e:	2100      	movs	r1, #0
 8003740:	4618      	mov	r0, r3
 8003742:	f008 fca3 	bl	800c08c <memset>
  if(hi2c->Instance==I2C2)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a21      	ldr	r2, [pc, #132]	; (80037d0 <HAL_I2C_MspInit+0xb0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d13b      	bne.n	80037c8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8003754:	2300      	movs	r3, #0
 8003756:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003758:	f107 0310 	add.w	r3, r7, #16
 800375c:	4618      	mov	r0, r3
 800375e:	f003 fd55 	bl	800720c <HAL_RCCEx_PeriphCLKConfig>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003768:	f7ff f8fe 	bl	8002968 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_I2C_MspInit+0xb4>)
 800376e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_I2C_MspInit+0xb4>)
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003778:	4b16      	ldr	r3, [pc, #88]	; (80037d4 <HAL_I2C_MspInit+0xb4>)
 800377a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003784:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003788:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800378c:	2312      	movs	r3, #18
 800378e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800379e:	2304      	movs	r3, #4
 80037a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037a8:	4619      	mov	r1, r3
 80037aa:	480b      	ldr	r0, [pc, #44]	; (80037d8 <HAL_I2C_MspInit+0xb8>)
 80037ac:	f000 fbe8 	bl	8003f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <HAL_I2C_MspInit+0xb4>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <HAL_I2C_MspInit+0xb4>)
 80037b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ba:	6593      	str	r3, [r2, #88]	; 0x58
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_I2C_MspInit+0xb4>)
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80037c8:	bf00      	nop
 80037ca:	37b8      	adds	r7, #184	; 0xb8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40005800 	.word	0x40005800
 80037d4:	40021000 	.word	0x40021000
 80037d8:	48000400 	.word	0x48000400

080037dc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <HAL_I2C_MspDeInit+0x3c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10f      	bne.n	800380e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80037ee:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_I2C_MspDeInit+0x40>)
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <HAL_I2C_MspDeInit+0x40>)
 80037f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80037f8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80037fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80037fe:	4808      	ldr	r0, [pc, #32]	; (8003820 <HAL_I2C_MspDeInit+0x44>)
 8003800:	f000 fd50 	bl	80042a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8003804:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003808:	4805      	ldr	r0, [pc, #20]	; (8003820 <HAL_I2C_MspDeInit+0x44>)
 800380a:	f000 fd4b 	bl	80042a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40005800 	.word	0x40005800
 800381c:	40021000 	.word	0x40021000
 8003820:	48000400 	.word	0x48000400

08003824 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b0b0      	sub	sp, #192	; 0xc0
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
 8003836:	609a      	str	r2, [r3, #8]
 8003838:	60da      	str	r2, [r3, #12]
 800383a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800383c:	f107 0318 	add.w	r3, r7, #24
 8003840:	2294      	movs	r2, #148	; 0x94
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f008 fc21 	bl	800c08c <memset>
  if(hospi->Instance==OCTOSPI1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a28      	ldr	r2, [pc, #160]	; (80038f0 <HAL_OSPI_MspInit+0xcc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d149      	bne.n	80038e8 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8003854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003858:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003860:	f107 0318 	add.w	r3, r7, #24
 8003864:	4618      	mov	r0, r3
 8003866:	f003 fcd1 	bl	800720c <HAL_RCCEx_PeriphCLKConfig>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8003870:	f7ff f87a 	bl	8002968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8003874:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <HAL_OSPI_MspInit+0xd0>)
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	4a1e      	ldr	r2, [pc, #120]	; (80038f4 <HAL_OSPI_MspInit+0xd0>)
 800387a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800387e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_OSPI_MspInit+0xd0>)
 8003882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800388c:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_OSPI_MspInit+0xd0>)
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_OSPI_MspInit+0xd0>)
 8003892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003896:	6513      	str	r3, [r2, #80]	; 0x50
 8003898:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_OSPI_MspInit+0xd0>)
 800389a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038a4:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <HAL_OSPI_MspInit+0xd0>)
 80038a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a8:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <HAL_OSPI_MspInit+0xd0>)
 80038aa:	f043 0310 	orr.w	r3, r3, #16
 80038ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b0:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <HAL_OSPI_MspInit+0xd0>)
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80038bc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80038c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c4:	2302      	movs	r3, #2
 80038c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038d0:	2303      	movs	r3, #3
 80038d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80038d6:	230a      	movs	r3, #10
 80038d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80038e0:	4619      	mov	r1, r3
 80038e2:	4805      	ldr	r0, [pc, #20]	; (80038f8 <HAL_OSPI_MspInit+0xd4>)
 80038e4:	f000 fb4c 	bl	8003f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80038e8:	bf00      	nop
 80038ea:	37c0      	adds	r7, #192	; 0xc0
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	a0001000 	.word	0xa0001000
 80038f4:	40021000 	.word	0x40021000
 80038f8:	48001000 	.word	0x48001000

080038fc <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <HAL_OSPI_MspDeInit+0x3c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d110      	bne.n	8003930 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_OSPI_MspDeInit+0x40>)
 8003910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <HAL_OSPI_MspDeInit+0x40>)
 8003914:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003918:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800391a:	4b08      	ldr	r3, [pc, #32]	; (800393c <HAL_OSPI_MspDeInit+0x40>)
 800391c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391e:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_OSPI_MspDeInit+0x40>)
 8003920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003924:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003926:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800392a:	4805      	ldr	r0, [pc, #20]	; (8003940 <HAL_OSPI_MspDeInit+0x44>)
 800392c:	f000 fcba 	bl	80042a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	a0001000 	.word	0xa0001000
 800393c:	40021000 	.word	0x40021000
 8003940:	48001000 	.word	0x48001000

08003944 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b0ae      	sub	sp, #184	; 0xb8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	60da      	str	r2, [r3, #12]
 800395a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800395c:	f107 0310 	add.w	r3, r7, #16
 8003960:	2294      	movs	r2, #148	; 0x94
 8003962:	2100      	movs	r1, #0
 8003964:	4618      	mov	r0, r3
 8003966:	f008 fb91 	bl	800c08c <memset>
  if(huart->Instance==USART1)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a21      	ldr	r2, [pc, #132]	; (80039f4 <HAL_UART_MspInit+0xb0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d13a      	bne.n	80039ea <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003974:	2301      	movs	r3, #1
 8003976:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003978:	2300      	movs	r3, #0
 800397a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fc43 	bl	800720c <HAL_RCCEx_PeriphCLKConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800398c:	f7fe ffec 	bl	8002968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_UART_MspInit+0xb4>)
 8003992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003994:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_UART_MspInit+0xb4>)
 8003996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800399a:	6613      	str	r3, [r2, #96]	; 0x60
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <HAL_UART_MspInit+0xb4>)
 800399e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_UART_MspInit+0xb4>)
 80039aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ac:	4a12      	ldr	r2, [pc, #72]	; (80039f8 <HAL_UART_MspInit+0xb4>)
 80039ae:	f043 0302 	orr.w	r3, r3, #2
 80039b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_UART_MspInit+0xb4>)
 80039b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039c0:	23c0      	movs	r3, #192	; 0xc0
 80039c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c6:	2302      	movs	r3, #2
 80039c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d2:	2303      	movs	r3, #3
 80039d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80039d8:	2307      	movs	r3, #7
 80039da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039e2:	4619      	mov	r1, r3
 80039e4:	4805      	ldr	r0, [pc, #20]	; (80039fc <HAL_UART_MspInit+0xb8>)
 80039e6:	f000 facb 	bl	8003f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80039ea:	bf00      	nop
 80039ec:	37b8      	adds	r7, #184	; 0xb8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40013800 	.word	0x40013800
 80039f8:	40021000 	.word	0x40021000
 80039fc:	48000400 	.word	0x48000400

08003a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08e      	sub	sp, #56	; 0x38
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003a0e:	4b34      	ldr	r3, [pc, #208]	; (8003ae0 <HAL_InitTick+0xe0>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a12:	4a33      	ldr	r2, [pc, #204]	; (8003ae0 <HAL_InitTick+0xe0>)
 8003a14:	f043 0310 	orr.w	r3, r3, #16
 8003a18:	6593      	str	r3, [r2, #88]	; 0x58
 8003a1a:	4b31      	ldr	r3, [pc, #196]	; (8003ae0 <HAL_InitTick+0xe0>)
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003a26:	f107 0210 	add.w	r2, r7, #16
 8003a2a:	f107 0314 	add.w	r3, r7, #20
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 faf9 	bl	8007028 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003a40:	f003 fac6 	bl	8006fd0 <HAL_RCC_GetPCLK1Freq>
 8003a44:	6378      	str	r0, [r7, #52]	; 0x34
 8003a46:	e004      	b.n	8003a52 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003a48:	f003 fac2 	bl	8006fd0 <HAL_RCC_GetPCLK1Freq>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a54:	4a23      	ldr	r2, [pc, #140]	; (8003ae4 <HAL_InitTick+0xe4>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	0c9b      	lsrs	r3, r3, #18
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <HAL_InitTick+0xe8>)
 8003a62:	4a22      	ldr	r2, [pc, #136]	; (8003aec <HAL_InitTick+0xec>)
 8003a64:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_InitTick+0xe8>)
 8003a68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a6c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ae8 <HAL_InitTick+0xe8>)
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003a74:	4b1c      	ldr	r3, [pc, #112]	; (8003ae8 <HAL_InitTick+0xe8>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <HAL_InitTick+0xe8>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <HAL_InitTick+0xe8>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003a86:	4818      	ldr	r0, [pc, #96]	; (8003ae8 <HAL_InitTick+0xe8>)
 8003a88:	f004 f8d8 	bl	8007c3c <HAL_TIM_Base_Init>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003a92:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11b      	bne.n	8003ad2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003a9a:	4813      	ldr	r0, [pc, #76]	; (8003ae8 <HAL_InitTick+0xe8>)
 8003a9c:	f004 f930 	bl	8007d00 <HAL_TIM_Base_Start_IT>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003aa6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d111      	bne.n	8003ad2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003aae:	2036      	movs	r0, #54	; 0x36
 8003ab0:	f000 fa58 	bl	8003f64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b0f      	cmp	r3, #15
 8003ab8:	d808      	bhi.n	8003acc <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003aba:	2200      	movs	r2, #0
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	2036      	movs	r0, #54	; 0x36
 8003ac0:	f000 fa34 	bl	8003f2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ac4:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <HAL_InitTick+0xf0>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e002      	b.n	8003ad2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3738      	adds	r7, #56	; 0x38
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	431bde83 	.word	0x431bde83
 8003ae8:	200007c4 	.word	0x200007c4
 8003aec:	40001000 	.word	0x40001000
 8003af0:	2000008c 	.word	0x2000008c

08003af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003af8:	e7fe      	b.n	8003af8 <NMI_Handler+0x4>
	...

08003afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	  HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 8003b00:	2200      	movs	r2, #0
 8003b02:	2108      	movs	r1, #8
 8003b04:	4802      	ldr	r0, [pc, #8]	; (8003b10 <HardFault_Handler+0x14>)
 8003b06:	f000 fcd7 	bl	80044b8 <HAL_GPIO_WritePin>
	  __BKPT();
 8003b0a:	be00      	bkpt	0x0000

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <HardFault_Handler+0x10>
 8003b0e:	bf00      	nop
 8003b10:	48001000 	.word	0x48001000

08003b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b18:	e7fe      	b.n	8003b18 <MemManage_Handler+0x4>

08003b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b1e:	e7fe      	b.n	8003b1e <BusFault_Handler+0x4>

08003b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <UsageFault_Handler+0x4>

08003b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <TIM6_DAC_IRQHandler+0x10>)
 8003b3a:	f004 f951 	bl	8007de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200007c4 	.word	0x200007c4

08003b48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return 1;
 8003b4c:	2301      	movs	r3, #1
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <_kill>:

int _kill(int pid, int sig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b62:	f008 faf5 	bl	800c150 <__errno>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2216      	movs	r2, #22
 8003b6a:	601a      	str	r2, [r3, #0]
  return -1;
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <_exit>:

void _exit (int status)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ffe7 	bl	8003b58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b8a:	e7fe      	b.n	8003b8a <_exit+0x12>

08003b8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	e00a      	b.n	8003bb4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b9e:	f3af 8000 	nop.w
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	60ba      	str	r2, [r7, #8]
 8003baa:	b2ca      	uxtb	r2, r1
 8003bac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	dbf0      	blt.n	8003b9e <_read+0x12>
  }

  return len;
 8003bbc:	687b      	ldr	r3, [r7, #4]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	60f8      	str	r0, [r7, #12]
 8003bce:	60b9      	str	r1, [r7, #8]
 8003bd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e009      	b.n	8003bec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	60ba      	str	r2, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3301      	adds	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	dbf1      	blt.n	8003bd8 <_write+0x12>
  }
  return len;
 8003bf4:	687b      	ldr	r3, [r7, #4]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_close>:

int _close(int file)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c26:	605a      	str	r2, [r3, #4]
  return 0;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_isatty>:

int _isatty(int file)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c3e:	2301      	movs	r3, #1
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b085      	sub	sp, #20
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <_sbrk+0x5c>)
 8003c72:	4b15      	ldr	r3, [pc, #84]	; (8003cc8 <_sbrk+0x60>)
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <_sbrk+0x64>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <_sbrk+0x64>)
 8003c86:	4a12      	ldr	r2, [pc, #72]	; (8003cd0 <_sbrk+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c8a:	4b10      	ldr	r3, [pc, #64]	; (8003ccc <_sbrk+0x64>)
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d207      	bcs.n	8003ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c98:	f008 fa5a 	bl	800c150 <__errno>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	220c      	movs	r2, #12
 8003ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ca6:	e009      	b.n	8003cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ca8:	4b08      	ldr	r3, [pc, #32]	; (8003ccc <_sbrk+0x64>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cae:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <_sbrk+0x64>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <_sbrk+0x64>)
 8003cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cba:	68fb      	ldr	r3, [r7, #12]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	200a0000 	.word	0x200a0000
 8003cc8:	00000400 	.word	0x00000400
 8003ccc:	20000810 	.word	0x20000810
 8003cd0:	20001670 	.word	0x20001670

08003cd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cd8:	4b06      	ldr	r3, [pc, #24]	; (8003cf4 <SystemInit+0x20>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	4a05      	ldr	r2, [pc, #20]	; (8003cf4 <SystemInit+0x20>)
 8003ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cfc:	f7ff ffea 	bl	8003cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d00:	480c      	ldr	r0, [pc, #48]	; (8003d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8003d02:	490d      	ldr	r1, [pc, #52]	; (8003d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003d04:	4a0d      	ldr	r2, [pc, #52]	; (8003d3c <LoopForever+0xe>)
  movs r3, #0
 8003d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d08:	e002      	b.n	8003d10 <LoopCopyDataInit>

08003d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003d0e:	3304      	adds	r3, #4

08003d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d14:	d3f9      	bcc.n	8003d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003d18:	4c0a      	ldr	r4, [pc, #40]	; (8003d44 <LoopForever+0x16>)
  movs r3, #0
 8003d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d1c:	e001      	b.n	8003d22 <LoopFillZerobss>

08003d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d20:	3204      	adds	r2, #4

08003d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d24:	d3fb      	bcc.n	8003d1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d26:	f008 fa19 	bl	800c15c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d2a:	f7fd fd13 	bl	8001754 <main>

08003d2e <LoopForever>:

LoopForever:
    b LoopForever
 8003d2e:	e7fe      	b.n	8003d2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d30:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d38:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8003d3c:	0800f410 	.word	0x0800f410
  ldr r2, =_sbss
 8003d40:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8003d44:	20001670 	.word	0x20001670

08003d48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d48:	e7fe      	b.n	8003d48 <ADC1_IRQHandler>

08003d4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d54:	2003      	movs	r0, #3
 8003d56:	f000 f8de 	bl	8003f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d5a:	200f      	movs	r0, #15
 8003d5c:	f7ff fe50 	bl	8003a00 <HAL_InitTick>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	71fb      	strb	r3, [r7, #7]
 8003d6a:	e001      	b.n	8003d70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d6c:	f7ff fcb0 	bl	80036d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d70:	79fb      	ldrb	r3, [r7, #7]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
	...

08003d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_IncTick+0x20>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_IncTick+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_IncTick+0x24>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000090 	.word	0x20000090
 8003da0:	20000814 	.word	0x20000814

08003da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_GetTick+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000814 	.word	0x20000814

08003dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <__NVIC_SetPriorityGrouping+0x44>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dee:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <__NVIC_SetPriorityGrouping+0x44>)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	60d3      	str	r3, [r2, #12]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <__NVIC_GetPriorityGrouping+0x18>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	0a1b      	lsrs	r3, r3, #8
 8003e0e:	f003 0307 	and.w	r3, r3, #7
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	db0b      	blt.n	8003e4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	f003 021f 	and.w	r2, r3, #31
 8003e38:	4907      	ldr	r1, [pc, #28]	; (8003e58 <__NVIC_EnableIRQ+0x38>)
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2001      	movs	r0, #1
 8003e42:	fa00 f202 	lsl.w	r2, r0, r2
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	e000e100 	.word	0xe000e100

08003e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4603      	mov	r3, r0
 8003e64:	6039      	str	r1, [r7, #0]
 8003e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	db0a      	blt.n	8003e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	490c      	ldr	r1, [pc, #48]	; (8003ea8 <__NVIC_SetPriority+0x4c>)
 8003e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7a:	0112      	lsls	r2, r2, #4
 8003e7c:	b2d2      	uxtb	r2, r2
 8003e7e:	440b      	add	r3, r1
 8003e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e84:	e00a      	b.n	8003e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	4908      	ldr	r1, [pc, #32]	; (8003eac <__NVIC_SetPriority+0x50>)
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	f003 030f 	and.w	r3, r3, #15
 8003e92:	3b04      	subs	r3, #4
 8003e94:	0112      	lsls	r2, r2, #4
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	440b      	add	r3, r1
 8003e9a:	761a      	strb	r2, [r3, #24]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000e100 	.word	0xe000e100
 8003eac:	e000ed00 	.word	0xe000ed00

08003eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b089      	sub	sp, #36	; 0x24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f1c3 0307 	rsb	r3, r3, #7
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	bf28      	it	cs
 8003ece:	2304      	movcs	r3, #4
 8003ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d902      	bls.n	8003ee0 <NVIC_EncodePriority+0x30>
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3b03      	subs	r3, #3
 8003ede:	e000      	b.n	8003ee2 <NVIC_EncodePriority+0x32>
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43da      	mvns	r2, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43d9      	mvns	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f08:	4313      	orrs	r3, r2
         );
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3724      	adds	r7, #36	; 0x24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr

08003f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b082      	sub	sp, #8
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7ff ff4c 	bl	8003dbc <__NVIC_SetPriorityGrouping>
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f3e:	f7ff ff61 	bl	8003e04 <__NVIC_GetPriorityGrouping>
 8003f42:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68b9      	ldr	r1, [r7, #8]
 8003f48:	6978      	ldr	r0, [r7, #20]
 8003f4a:	f7ff ffb1 	bl	8003eb0 <NVIC_EncodePriority>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff ff80 	bl	8003e5c <__NVIC_SetPriority>
}
 8003f5c:	bf00      	nop
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff54 	bl	8003e20 <__NVIC_EnableIRQ>
}
 8003f78:	bf00      	nop
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f8e:	e166      	b.n	800425e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2101      	movs	r1, #1
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8158 	beq.w	8004258 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 0303 	and.w	r3, r3, #3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d005      	beq.n	8003fc0 <HAL_GPIO_Init+0x40>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d130      	bne.n	8004022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	2203      	movs	r2, #3
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	43db      	mvns	r3, r3
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4013      	ands	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	f003 0201 	and.w	r2, r3, #1
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b03      	cmp	r3, #3
 800402c:	d017      	beq.n	800405e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	2203      	movs	r2, #3
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689a      	ldr	r2, [r3, #8]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d123      	bne.n	80040b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	08da      	lsrs	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3208      	adds	r2, #8
 8004072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	220f      	movs	r2, #15
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43db      	mvns	r3, r3
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4013      	ands	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	fa02 f303 	lsl.w	r3, r2, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	08da      	lsrs	r2, r3, #3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3208      	adds	r2, #8
 80040ac:	6939      	ldr	r1, [r7, #16]
 80040ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2203      	movs	r2, #3
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f003 0203 	and.w	r2, r3, #3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	fa02 f303 	lsl.w	r3, r2, r3
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80b2 	beq.w	8004258 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f4:	4b61      	ldr	r3, [pc, #388]	; (800427c <HAL_GPIO_Init+0x2fc>)
 80040f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f8:	4a60      	ldr	r2, [pc, #384]	; (800427c <HAL_GPIO_Init+0x2fc>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6613      	str	r3, [r2, #96]	; 0x60
 8004100:	4b5e      	ldr	r3, [pc, #376]	; (800427c <HAL_GPIO_Init+0x2fc>)
 8004102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800410c:	4a5c      	ldr	r2, [pc, #368]	; (8004280 <HAL_GPIO_Init+0x300>)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	089b      	lsrs	r3, r3, #2
 8004112:	3302      	adds	r3, #2
 8004114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	220f      	movs	r2, #15
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	4013      	ands	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004136:	d02b      	beq.n	8004190 <HAL_GPIO_Init+0x210>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_GPIO_Init+0x304>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d025      	beq.n	800418c <HAL_GPIO_Init+0x20c>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a51      	ldr	r2, [pc, #324]	; (8004288 <HAL_GPIO_Init+0x308>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d01f      	beq.n	8004188 <HAL_GPIO_Init+0x208>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a50      	ldr	r2, [pc, #320]	; (800428c <HAL_GPIO_Init+0x30c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d019      	beq.n	8004184 <HAL_GPIO_Init+0x204>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a4f      	ldr	r2, [pc, #316]	; (8004290 <HAL_GPIO_Init+0x310>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_GPIO_Init+0x200>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a4e      	ldr	r2, [pc, #312]	; (8004294 <HAL_GPIO_Init+0x314>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00d      	beq.n	800417c <HAL_GPIO_Init+0x1fc>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a4d      	ldr	r2, [pc, #308]	; (8004298 <HAL_GPIO_Init+0x318>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <HAL_GPIO_Init+0x1f8>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a4c      	ldr	r2, [pc, #304]	; (800429c <HAL_GPIO_Init+0x31c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_GPIO_Init+0x1f4>
 8004170:	2307      	movs	r3, #7
 8004172:	e00e      	b.n	8004192 <HAL_GPIO_Init+0x212>
 8004174:	2308      	movs	r3, #8
 8004176:	e00c      	b.n	8004192 <HAL_GPIO_Init+0x212>
 8004178:	2306      	movs	r3, #6
 800417a:	e00a      	b.n	8004192 <HAL_GPIO_Init+0x212>
 800417c:	2305      	movs	r3, #5
 800417e:	e008      	b.n	8004192 <HAL_GPIO_Init+0x212>
 8004180:	2304      	movs	r3, #4
 8004182:	e006      	b.n	8004192 <HAL_GPIO_Init+0x212>
 8004184:	2303      	movs	r3, #3
 8004186:	e004      	b.n	8004192 <HAL_GPIO_Init+0x212>
 8004188:	2302      	movs	r3, #2
 800418a:	e002      	b.n	8004192 <HAL_GPIO_Init+0x212>
 800418c:	2301      	movs	r3, #1
 800418e:	e000      	b.n	8004192 <HAL_GPIO_Init+0x212>
 8004190:	2300      	movs	r3, #0
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	f002 0203 	and.w	r2, r2, #3
 8004198:	0092      	lsls	r2, r2, #2
 800419a:	4093      	lsls	r3, r2
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80041a2:	4937      	ldr	r1, [pc, #220]	; (8004280 <HAL_GPIO_Init+0x300>)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	089b      	lsrs	r3, r3, #2
 80041a8:	3302      	adds	r3, #2
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b0:	4b3b      	ldr	r3, [pc, #236]	; (80042a0 <HAL_GPIO_Init+0x320>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	43db      	mvns	r3, r3
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4013      	ands	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80041d4:	4a32      	ldr	r2, [pc, #200]	; (80042a0 <HAL_GPIO_Init+0x320>)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041da:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <HAL_GPIO_Init+0x320>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4013      	ands	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041fe:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <HAL_GPIO_Init+0x320>)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004204:	4b26      	ldr	r3, [pc, #152]	; (80042a0 <HAL_GPIO_Init+0x320>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	43db      	mvns	r3, r3
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004228:	4a1d      	ldr	r2, [pc, #116]	; (80042a0 <HAL_GPIO_Init+0x320>)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800422e:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <HAL_GPIO_Init+0x320>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	43db      	mvns	r3, r3
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4013      	ands	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004252:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <HAL_GPIO_Init+0x320>)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3301      	adds	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	fa22 f303 	lsr.w	r3, r2, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	f47f ae91 	bne.w	8003f90 <HAL_GPIO_Init+0x10>
  }
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40021000 	.word	0x40021000
 8004280:	40010000 	.word	0x40010000
 8004284:	48000400 	.word	0x48000400
 8004288:	48000800 	.word	0x48000800
 800428c:	48000c00 	.word	0x48000c00
 8004290:	48001000 	.word	0x48001000
 8004294:	48001400 	.word	0x48001400
 8004298:	48001800 	.word	0x48001800
 800429c:	48001c00 	.word	0x48001c00
 80042a0:	40010400 	.word	0x40010400

080042a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80042ae:	2300      	movs	r3, #0
 80042b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80042b2:	e0c9      	b.n	8004448 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80042b4:	2201      	movs	r2, #1
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	4013      	ands	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80bc 	beq.w	8004442 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80042ca:	4a66      	ldr	r2, [pc, #408]	; (8004464 <HAL_GPIO_DeInit+0x1c0>)
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	089b      	lsrs	r3, r3, #2
 80042d0:	3302      	adds	r3, #2
 80042d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f003 0303 	and.w	r3, r3, #3
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	220f      	movs	r2, #15
 80042e2:	fa02 f303 	lsl.w	r3, r2, r3
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4013      	ands	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042f2:	d02b      	beq.n	800434c <HAL_GPIO_DeInit+0xa8>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a5c      	ldr	r2, [pc, #368]	; (8004468 <HAL_GPIO_DeInit+0x1c4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d025      	beq.n	8004348 <HAL_GPIO_DeInit+0xa4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a5b      	ldr	r2, [pc, #364]	; (800446c <HAL_GPIO_DeInit+0x1c8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d01f      	beq.n	8004344 <HAL_GPIO_DeInit+0xa0>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a5a      	ldr	r2, [pc, #360]	; (8004470 <HAL_GPIO_DeInit+0x1cc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d019      	beq.n	8004340 <HAL_GPIO_DeInit+0x9c>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a59      	ldr	r2, [pc, #356]	; (8004474 <HAL_GPIO_DeInit+0x1d0>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d013      	beq.n	800433c <HAL_GPIO_DeInit+0x98>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a58      	ldr	r2, [pc, #352]	; (8004478 <HAL_GPIO_DeInit+0x1d4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00d      	beq.n	8004338 <HAL_GPIO_DeInit+0x94>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a57      	ldr	r2, [pc, #348]	; (800447c <HAL_GPIO_DeInit+0x1d8>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d007      	beq.n	8004334 <HAL_GPIO_DeInit+0x90>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a56      	ldr	r2, [pc, #344]	; (8004480 <HAL_GPIO_DeInit+0x1dc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <HAL_GPIO_DeInit+0x8c>
 800432c:	2307      	movs	r3, #7
 800432e:	e00e      	b.n	800434e <HAL_GPIO_DeInit+0xaa>
 8004330:	2308      	movs	r3, #8
 8004332:	e00c      	b.n	800434e <HAL_GPIO_DeInit+0xaa>
 8004334:	2306      	movs	r3, #6
 8004336:	e00a      	b.n	800434e <HAL_GPIO_DeInit+0xaa>
 8004338:	2305      	movs	r3, #5
 800433a:	e008      	b.n	800434e <HAL_GPIO_DeInit+0xaa>
 800433c:	2304      	movs	r3, #4
 800433e:	e006      	b.n	800434e <HAL_GPIO_DeInit+0xaa>
 8004340:	2303      	movs	r3, #3
 8004342:	e004      	b.n	800434e <HAL_GPIO_DeInit+0xaa>
 8004344:	2302      	movs	r3, #2
 8004346:	e002      	b.n	800434e <HAL_GPIO_DeInit+0xaa>
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_GPIO_DeInit+0xaa>
 800434c:	2300      	movs	r3, #0
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	f002 0203 	and.w	r2, r2, #3
 8004354:	0092      	lsls	r2, r2, #2
 8004356:	4093      	lsls	r3, r2
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	429a      	cmp	r2, r3
 800435c:	d132      	bne.n	80043c4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800435e:	4b49      	ldr	r3, [pc, #292]	; (8004484 <HAL_GPIO_DeInit+0x1e0>)
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	4947      	ldr	r1, [pc, #284]	; (8004484 <HAL_GPIO_DeInit+0x1e0>)
 8004368:	4013      	ands	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800436c:	4b45      	ldr	r3, [pc, #276]	; (8004484 <HAL_GPIO_DeInit+0x1e0>)
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	43db      	mvns	r3, r3
 8004374:	4943      	ldr	r1, [pc, #268]	; (8004484 <HAL_GPIO_DeInit+0x1e0>)
 8004376:	4013      	ands	r3, r2
 8004378:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800437a:	4b42      	ldr	r3, [pc, #264]	; (8004484 <HAL_GPIO_DeInit+0x1e0>)
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	4940      	ldr	r1, [pc, #256]	; (8004484 <HAL_GPIO_DeInit+0x1e0>)
 8004384:	4013      	ands	r3, r2
 8004386:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004388:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_GPIO_DeInit+0x1e0>)
 800438a:	689a      	ldr	r2, [r3, #8]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	43db      	mvns	r3, r3
 8004390:	493c      	ldr	r1, [pc, #240]	; (8004484 <HAL_GPIO_DeInit+0x1e0>)
 8004392:	4013      	ands	r3, r2
 8004394:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	220f      	movs	r2, #15
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80043a6:	4a2f      	ldr	r2, [pc, #188]	; (8004464 <HAL_GPIO_DeInit+0x1c0>)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	089b      	lsrs	r3, r3, #2
 80043ac:	3302      	adds	r3, #2
 80043ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	43da      	mvns	r2, r3
 80043b6:	482b      	ldr	r0, [pc, #172]	; (8004464 <HAL_GPIO_DeInit+0x1c0>)
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	400a      	ands	r2, r1
 80043be:	3302      	adds	r3, #2
 80043c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2103      	movs	r1, #3
 80043ce:	fa01 f303 	lsl.w	r3, r1, r3
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	08da      	lsrs	r2, r3, #3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3208      	adds	r2, #8
 80043e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	220f      	movs	r2, #15
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	43db      	mvns	r3, r3
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	08d2      	lsrs	r2, r2, #3
 80043f8:	4019      	ands	r1, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3208      	adds	r2, #8
 80043fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	2103      	movs	r1, #3
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	43db      	mvns	r3, r3
 8004412:	401a      	ands	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	2101      	movs	r1, #1
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	fa01 f303 	lsl.w	r3, r1, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	401a      	ands	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	2103      	movs	r1, #3
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	43db      	mvns	r3, r3
 800443c:	401a      	ands	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	3301      	adds	r3, #1
 8004446:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	f47f af2f 	bne.w	80042b4 <HAL_GPIO_DeInit+0x10>
  }
}
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40010000 	.word	0x40010000
 8004468:	48000400 	.word	0x48000400
 800446c:	48000800 	.word	0x48000800
 8004470:	48000c00 	.word	0x48000c00
 8004474:	48001000 	.word	0x48001000
 8004478:	48001400 	.word	0x48001400
 800447c:	48001800 	.word	0x48001800
 8004480:	48001c00 	.word	0x48001c00
 8004484:	40010400 	.word	0x40010400

08004488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	887b      	ldrh	r3, [r7, #2]
 800449a:	4013      	ands	r3, r2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044a0:	2301      	movs	r3, #1
 80044a2:	73fb      	strb	r3, [r7, #15]
 80044a4:	e001      	b.n	80044aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3714      	adds	r7, #20
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]
 80044c4:	4613      	mov	r3, r2
 80044c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044c8:	787b      	ldrb	r3, [r7, #1]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80044ce:	887a      	ldrh	r2, [r7, #2]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80044d4:	e002      	b.n	80044dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80044d6:	887a      	ldrh	r2, [r7, #2]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e08d      	b.n	8004616 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff f906 	bl	8003720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d107      	bne.n	8004562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	e006      	b.n	8004570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689a      	ldr	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800456e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d108      	bne.n	800458a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	e007      	b.n	800459a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691a      	ldr	r2, [r3, #16]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	69d9      	ldr	r1, [r3, #28]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1a      	ldr	r2, [r3, #32]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0201 	orr.w	r2, r2, #1
 80045f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e021      	b.n	8004674 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f7ff f8c7 	bl	80037dc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af02      	add	r7, sp, #8
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	4608      	mov	r0, r1
 8004686:	4611      	mov	r1, r2
 8004688:	461a      	mov	r2, r3
 800468a:	4603      	mov	r3, r0
 800468c:	817b      	strh	r3, [r7, #10]
 800468e:	460b      	mov	r3, r1
 8004690:	813b      	strh	r3, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b20      	cmp	r3, #32
 80046a0:	f040 80f9 	bne.w	8004896 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_I2C_Mem_Write+0x34>
 80046aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d105      	bne.n	80046bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e0ed      	b.n	8004898 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_I2C_Mem_Write+0x4e>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0e6      	b.n	8004898 <HAL_I2C_Mem_Write+0x21c>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046d2:	f7ff fb67 	bl	8003da4 <HAL_GetTick>
 80046d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	2319      	movs	r3, #25
 80046de:	2201      	movs	r2, #1
 80046e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 fac3 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d001      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0d1      	b.n	8004898 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2221      	movs	r2, #33	; 0x21
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2240      	movs	r2, #64	; 0x40
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a3a      	ldr	r2, [r7, #32]
 800470e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800471c:	88f8      	ldrh	r0, [r7, #6]
 800471e:	893a      	ldrh	r2, [r7, #8]
 8004720:	8979      	ldrh	r1, [r7, #10]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	9300      	str	r3, [sp, #0]
 800472a:	4603      	mov	r3, r0
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f9d3 	bl	8004ad8 <I2C_RequestMemoryWrite>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0a9      	b.n	8004898 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2bff      	cmp	r3, #255	; 0xff
 800474c:	d90e      	bls.n	800476c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	22ff      	movs	r2, #255	; 0xff
 8004752:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004758:	b2da      	uxtb	r2, r3
 800475a:	8979      	ldrh	r1, [r7, #10]
 800475c:	2300      	movs	r3, #0
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f000 fc3d 	bl	8004fe4 <I2C_TransferConfig>
 800476a:	e00f      	b.n	800478c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	b2da      	uxtb	r2, r3
 800477c:	8979      	ldrh	r1, [r7, #10]
 800477e:	2300      	movs	r3, #0
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 fc2c 	bl	8004fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004790:	68f8      	ldr	r0, [r7, #12]
 8004792:	f000 fabc 	bl	8004d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e07b      	b.n	8004898 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d034      	beq.n	8004844 <HAL_I2C_Mem_Write+0x1c8>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d130      	bne.n	8004844 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	2200      	movs	r2, #0
 80047ea:	2180      	movs	r1, #128	; 0x80
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f000 fa3f 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e04d      	b.n	8004898 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2bff      	cmp	r3, #255	; 0xff
 8004804:	d90e      	bls.n	8004824 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	22ff      	movs	r2, #255	; 0xff
 800480a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004810:	b2da      	uxtb	r2, r3
 8004812:	8979      	ldrh	r1, [r7, #10]
 8004814:	2300      	movs	r3, #0
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 fbe1 	bl	8004fe4 <I2C_TransferConfig>
 8004822:	e00f      	b.n	8004844 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	b2da      	uxtb	r2, r3
 8004834:	8979      	ldrh	r1, [r7, #10]
 8004836:	2300      	movs	r3, #0
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fbd0 	bl	8004fe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d19e      	bne.n	800478c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 faa2 	bl	8004d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e01a      	b.n	8004898 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2220      	movs	r2, #32
 8004868:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6859      	ldr	r1, [r3, #4]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <HAL_I2C_Mem_Write+0x224>)
 8004876:	400b      	ands	r3, r1
 8004878:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	e000      	b.n	8004898 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004896:	2302      	movs	r3, #2
  }
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	fe00e800 	.word	0xfe00e800

080048a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	4608      	mov	r0, r1
 80048ae:	4611      	mov	r1, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	4603      	mov	r3, r0
 80048b4:	817b      	strh	r3, [r7, #10]
 80048b6:	460b      	mov	r3, r1
 80048b8:	813b      	strh	r3, [r7, #8]
 80048ba:	4613      	mov	r3, r2
 80048bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b20      	cmp	r3, #32
 80048c8:	f040 80fd 	bne.w	8004ac6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_I2C_Mem_Read+0x34>
 80048d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e0f1      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_I2C_Mem_Read+0x4e>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e0ea      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x224>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048fa:	f7ff fa53 	bl	8003da4 <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2319      	movs	r3, #25
 8004906:	2201      	movs	r2, #1
 8004908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f9af 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0d5      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2222      	movs	r2, #34	; 0x22
 8004920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2240      	movs	r2, #64	; 0x40
 8004928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a3a      	ldr	r2, [r7, #32]
 8004936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800493c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004944:	88f8      	ldrh	r0, [r7, #6]
 8004946:	893a      	ldrh	r2, [r7, #8]
 8004948:	8979      	ldrh	r1, [r7, #10]
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	4603      	mov	r3, r0
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 f913 	bl	8004b80 <I2C_RequestMemoryRead>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0ad      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	2bff      	cmp	r3, #255	; 0xff
 8004974:	d90e      	bls.n	8004994 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	22ff      	movs	r2, #255	; 0xff
 800497a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	b2da      	uxtb	r2, r3
 8004982:	8979      	ldrh	r1, [r7, #10]
 8004984:	4b52      	ldr	r3, [pc, #328]	; (8004ad0 <HAL_I2C_Mem_Read+0x22c>)
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 fb29 	bl	8004fe4 <I2C_TransferConfig>
 8004992:	e00f      	b.n	80049b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29a      	uxth	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	8979      	ldrh	r1, [r7, #10]
 80049a6:	4b4a      	ldr	r3, [pc, #296]	; (8004ad0 <HAL_I2C_Mem_Read+0x22c>)
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 fb18 	bl	8004fe4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	2200      	movs	r2, #0
 80049bc:	2104      	movs	r1, #4
 80049be:	68f8      	ldr	r0, [r7, #12]
 80049c0:	f000 f956 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e07c      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	b2d2      	uxtb	r2, r2
 80049da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d034      	beq.n	8004a74 <HAL_I2C_Mem_Read+0x1d0>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d130      	bne.n	8004a74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f927 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e04d      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2bff      	cmp	r3, #255	; 0xff
 8004a34:	d90e      	bls.n	8004a54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	22ff      	movs	r2, #255	; 0xff
 8004a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	8979      	ldrh	r1, [r7, #10]
 8004a44:	2300      	movs	r3, #0
 8004a46:	9300      	str	r3, [sp, #0]
 8004a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fac9 	bl	8004fe4 <I2C_TransferConfig>
 8004a52:	e00f      	b.n	8004a74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a58:	b29a      	uxth	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	8979      	ldrh	r1, [r7, #10]
 8004a66:	2300      	movs	r3, #0
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fab8 	bl	8004fe4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d19a      	bne.n	80049b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f98a 	bl	8004d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e01a      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2220      	movs	r2, #32
 8004a98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6859      	ldr	r1, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <HAL_I2C_Mem_Read+0x230>)
 8004aa6:	400b      	ands	r3, r1
 8004aa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	e000      	b.n	8004ac8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ac6:	2302      	movs	r3, #2
  }
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	80002400 	.word	0x80002400
 8004ad4:	fe00e800 	.word	0xfe00e800

08004ad8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	817b      	strh	r3, [r7, #10]
 8004aea:	460b      	mov	r3, r1
 8004aec:	813b      	strh	r3, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	8979      	ldrh	r1, [r7, #10]
 8004af8:	4b20      	ldr	r3, [pc, #128]	; (8004b7c <I2C_RequestMemoryWrite+0xa4>)
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fa6f 	bl	8004fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	69b9      	ldr	r1, [r7, #24]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f8ff 	bl	8004d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e02c      	b.n	8004b74 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b1a:	88fb      	ldrh	r3, [r7, #6]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d105      	bne.n	8004b2c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b20:	893b      	ldrh	r3, [r7, #8]
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	629a      	str	r2, [r3, #40]	; 0x28
 8004b2a:	e015      	b.n	8004b58 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004b2c:	893b      	ldrh	r3, [r7, #8]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 f8e5 	bl	8004d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e012      	b.n	8004b74 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b4e:	893b      	ldrh	r3, [r7, #8]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2180      	movs	r1, #128	; 0x80
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 f884 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	80002000 	.word	0x80002000

08004b80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	4608      	mov	r0, r1
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4603      	mov	r3, r0
 8004b90:	817b      	strh	r3, [r7, #10]
 8004b92:	460b      	mov	r3, r1
 8004b94:	813b      	strh	r3, [r7, #8]
 8004b96:	4613      	mov	r3, r2
 8004b98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	8979      	ldrh	r1, [r7, #10]
 8004ba0:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <I2C_RequestMemoryRead+0xa4>)
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fa1c 	bl	8004fe4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bac:	69fa      	ldr	r2, [r7, #28]
 8004bae:	69b9      	ldr	r1, [r7, #24]
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f000 f8ac 	bl	8004d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e02c      	b.n	8004c1a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d105      	bne.n	8004bd2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bc6:	893b      	ldrh	r3, [r7, #8]
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
 8004bd0:	e015      	b.n	8004bfe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bd2:	893b      	ldrh	r3, [r7, #8]
 8004bd4:	0a1b      	lsrs	r3, r3, #8
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	69b9      	ldr	r1, [r7, #24]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f892 	bl	8004d0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e012      	b.n	8004c1a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bf4:	893b      	ldrh	r3, [r7, #8]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2140      	movs	r1, #64	; 0x40
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f831 	bl	8004c70 <I2C_WaitOnFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	80002000 	.word	0x80002000

08004c28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d103      	bne.n	8004c46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2200      	movs	r2, #0
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d007      	beq.n	8004c64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	619a      	str	r2, [r3, #24]
  }
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c80:	e031      	b.n	8004ce6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c88:	d02d      	beq.n	8004ce6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8a:	f7ff f88b 	bl	8003da4 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d122      	bne.n	8004ce6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d113      	bne.n	8004ce6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc2:	f043 0220 	orr.w	r2, r3, #32
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e00f      	b.n	8004d06 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699a      	ldr	r2, [r3, #24]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	4013      	ands	r3, r2
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	bf0c      	ite	eq
 8004cf6:	2301      	moveq	r3, #1
 8004cf8:	2300      	movne	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	79fb      	ldrb	r3, [r7, #7]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d0be      	beq.n	8004c82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	60f8      	str	r0, [r7, #12]
 8004d16:	60b9      	str	r1, [r7, #8]
 8004d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d1a:	e033      	b.n	8004d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f87f 	bl	8004e24 <I2C_IsErrorOccurred>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e031      	b.n	8004d94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d36:	d025      	beq.n	8004d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d38:	f7ff f834 	bl	8003da4 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d302      	bcc.n	8004d4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d11a      	bne.n	8004d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d013      	beq.n	8004d84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e007      	b.n	8004d94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d1c4      	bne.n	8004d1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004da8:	e02f      	b.n	8004e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f838 	bl	8004e24 <I2C_IsErrorOccurred>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e02d      	b.n	8004e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7fe fff1 	bl	8003da4 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d11a      	bne.n	8004e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b20      	cmp	r3, #32
 8004de0:	d013      	beq.n	8004e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de6:	f043 0220 	orr.w	r2, r3, #32
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e007      	b.n	8004e1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d1c8      	bne.n	8004daa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b08a      	sub	sp, #40	; 0x28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d068      	beq.n	8004f22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2210      	movs	r2, #16
 8004e56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e58:	e049      	b.n	8004eee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e60:	d045      	beq.n	8004eee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e62:	f7fe ff9f 	bl	8003da4 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d302      	bcc.n	8004e78 <I2C_IsErrorOccurred+0x54>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d13a      	bne.n	8004eee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d121      	bne.n	8004ee0 <I2C_IsErrorOccurred+0xbc>
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea2:	d01d      	beq.n	8004ee0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	d01a      	beq.n	8004ee0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004eba:	f7fe ff73 	bl	8003da4 <HAL_GetTick>
 8004ebe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ec0:	e00e      	b.n	8004ee0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ec2:	f7fe ff6f 	bl	8003da4 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b19      	cmp	r3, #25
 8004ece:	d907      	bls.n	8004ee0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	6a3b      	ldr	r3, [r7, #32]
 8004ed2:	f043 0320 	orr.w	r3, r3, #32
 8004ed6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004ede:	e006      	b.n	8004eee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b20      	cmp	r3, #32
 8004eec:	d1e9      	bne.n	8004ec2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d003      	beq.n	8004f04 <I2C_IsErrorOccurred+0xe0>
 8004efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0aa      	beq.n	8004e5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2220      	movs	r2, #32
 8004f12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	f043 0304 	orr.w	r3, r3, #4
 8004f1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f043 0308 	orr.w	r3, r3, #8
 8004f5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00b      	beq.n	8004f90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	f043 0302 	orr.w	r3, r3, #2
 8004f7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01c      	beq.n	8004fd2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7ff fe45 	bl	8004c28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	6859      	ldr	r1, [r3, #4]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <I2C_IsErrorOccurred+0x1bc>)
 8004faa:	400b      	ands	r3, r1
 8004fac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3728      	adds	r7, #40	; 0x28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	fe00e800 	.word	0xfe00e800

08004fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	607b      	str	r3, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	817b      	strh	r3, [r7, #10]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ffc:	7a7b      	ldrb	r3, [r7, #9]
 8004ffe:	041b      	lsls	r3, r3, #16
 8005000:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005004:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	4313      	orrs	r3, r2
 800500e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005012:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	0d5b      	lsrs	r3, r3, #21
 800501e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005022:	4b08      	ldr	r3, [pc, #32]	; (8005044 <I2C_TransferConfig+0x60>)
 8005024:	430b      	orrs	r3, r1
 8005026:	43db      	mvns	r3, r3
 8005028:	ea02 0103 	and.w	r1, r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	03ff63ff 	.word	0x03ff63ff

08005048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b20      	cmp	r3, #32
 800505c:	d138      	bne.n	80050d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005068:	2302      	movs	r3, #2
 800506a:	e032      	b.n	80050d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2224      	movs	r2, #36	; 0x24
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0201 	bic.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800509a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6819      	ldr	r1, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0201 	orr.w	r2, r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050cc:	2300      	movs	r3, #0
 80050ce:	e000      	b.n	80050d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050d0:	2302      	movs	r3, #2
  }
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d139      	bne.n	8005168 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d101      	bne.n	8005102 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050fe:	2302      	movs	r3, #2
 8005100:	e033      	b.n	800516a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2224      	movs	r2, #36	; 0x24
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005130:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	021b      	lsls	r3, r3, #8
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3714      	adds	r7, #20
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005184:	f7fe fe0e 	bl	8003da4 <HAL_GetTick>
 8005188:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d102      	bne.n	8005196 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	73fb      	strb	r3, [r7, #15]
 8005194:	e092      	b.n	80052bc <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 808b 	bne.w	80052bc <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fe fb3c 	bl	8003824 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80051ac:	f241 3188 	movw	r1, #5000	; 0x1388
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fad0 	bl	8005756 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_OSPI_Init+0x150>)
 80051be:	4013      	ands	r3, r2
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	68d1      	ldr	r1, [r2, #12]
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6912      	ldr	r2, [r2, #16]
 80051c8:	3a01      	subs	r2, #1
 80051ca:	0412      	lsls	r2, r2, #16
 80051cc:	4311      	orrs	r1, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6952      	ldr	r2, [r2, #20]
 80051d2:	3a01      	subs	r2, #1
 80051d4:	0212      	lsls	r2, r2, #8
 80051d6:	4311      	orrs	r1, r2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051dc:	4311      	orrs	r1, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	69d2      	ldr	r2, [r2, #28]
 80051e2:	4311      	orrs	r1, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	0412      	lsls	r2, r2, #16
 80051f6:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	3b01      	subs	r3, #1
 8005208:	021a      	lsls	r2, r3, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2200      	movs	r2, #0
 800521c:	2120      	movs	r1, #32
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fddc 	bl	8005ddc <OSPI_WaitFlagStateUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d146      	bne.n	80052bc <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a1b      	ldr	r3, [r3, #32]
 800523c:	1e5a      	subs	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005264:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d107      	bne.n	80052a4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0202 	orr.w	r2, r2, #2
 80052a2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ac:	d103      	bne.n	80052b6 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	645a      	str	r2, [r3, #68]	; 0x44
 80052b4:	e002      	b.n	80052bc <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80052bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	f8e0f8f4 	.word	0xf8e0f8f4

080052cc <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d102      	bne.n	80052e4 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	73fb      	strb	r3, [r7, #15]
 80052e2:	e015      	b.n	8005310 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
    /* Disable OctoSPI */
    __HAL_OSPI_DISABLE(hospi);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

    /* Disable free running clock if needed : must be done after OSPI disable */
    CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0202 	bic.w	r2, r2, #2
 8005302:	609a      	str	r2, [r3, #8]

    /* DeInit the low level hardware */
    hospi->MspDeInitCallback(hospi);
#else
    /* De-initialize the low-level hardware */
    HAL_OSPI_MspDeInit(hospi);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fe faf9 	bl	80038fc <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

    /* Reset the driver state */
    hospi->State = HAL_OSPI_STATE_RESET;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b08a      	sub	sp, #40	; 0x28
 800531e:	af02      	add	r7, sp, #8
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8005326:	f7fe fd3d 	bl	8003da4 <HAL_GetTick>
 800532a:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE(cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE(cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d104      	bne.n	8005348 <HAL_OSPI_Command+0x2e>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005346:	d10d      	bne.n	8005364 <HAL_OSPI_Command+0x4a>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	2b14      	cmp	r3, #20
 800534c:	d103      	bne.n	8005356 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d006      	beq.n	8005364 <HAL_OSPI_Command+0x4a>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b24      	cmp	r3, #36	; 0x24
 800535a:	d153      	bne.n	8005404 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d14f      	bne.n	8005404 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	2200      	movs	r2, #0
 800536c:	2120      	movs	r1, #32
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fd34 	bl	8005ddc <OSPI_WaitFlagStateUntilTimeout>
 8005374:	4603      	mov	r3, r0
 8005376:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005378:	7ffb      	ldrb	r3, [r7, #31]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d148      	bne.n	8005410 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 fd60 	bl	8005e4c <OSPI_ConfigCmd>
 800538c:	4603      	mov	r3, r0
 800538e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8005390:	7ffb      	ldrb	r3, [r7, #31]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d13c      	bne.n	8005410 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10e      	bne.n	80053bc <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2201      	movs	r2, #1
 80053a6:	2102      	movs	r1, #2
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fd17 	bl	8005ddc <OSPI_WaitFlagStateUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2202      	movs	r2, #2
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80053ba:	e029      	b.n	8005410 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d103      	bne.n	80053cc <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2204      	movs	r2, #4
 80053c8:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80053ca:	e021      	b.n	8005410 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d10b      	bne.n	80053ec <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053d8:	2b24      	cmp	r3, #36	; 0x24
 80053da:	d103      	bne.n	80053e4 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2204      	movs	r2, #4
 80053e0:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80053e2:	e015      	b.n	8005410 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2214      	movs	r2, #20
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80053ea:	e011      	b.n	8005410 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	2b14      	cmp	r3, #20
 80053f2:	d103      	bne.n	80053fc <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2204      	movs	r2, #4
 80053f8:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80053fa:	e009      	b.n	8005410 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2224      	movs	r2, #36	; 0x24
 8005400:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8005402:	e005      	b.n	8005410 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2210      	movs	r2, #16
 800540c:	649a      	str	r2, [r3, #72]	; 0x48
 800540e:	e000      	b.n	8005412 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8005410:	bf00      	nop
  }

  /* Return function status */
  return status;
 8005412:	7ffb      	ldrb	r3, [r7, #31]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b08a      	sub	sp, #40	; 0x28
 8005420:	af02      	add	r7, sp, #8
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005428:	f7fe fcbc 	bl	8003da4 <HAL_GetTick>
 800542c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3350      	adds	r3, #80	; 0x50
 8005434:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2208      	movs	r2, #8
 8005444:	649a      	str	r2, [r3, #72]	; 0x48
 8005446:	e057      	b.n	80054f8 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	2b04      	cmp	r3, #4
 800544e:	d14e      	bne.n	80054ee <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005478:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2201      	movs	r2, #1
 8005482:	2104      	movs	r1, #4
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 fca9 	bl	8005ddc <OSPI_WaitFlagStateUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800548e:	7ffb      	ldrb	r3, [r7, #31]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d113      	bne.n	80054bc <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	1e5a      	subs	r2, r3, #1
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1df      	bne.n	800547a <HAL_OSPI_Transmit+0x5e>
 80054ba:	e000      	b.n	80054be <HAL_OSPI_Transmit+0xa2>
          break;
 80054bc:	bf00      	nop

      if (status == HAL_OK)
 80054be:	7ffb      	ldrb	r3, [r7, #31]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d119      	bne.n	80054f8 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	2201      	movs	r2, #1
 80054cc:	2102      	movs	r1, #2
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fc84 	bl	8005ddc <OSPI_WaitFlagStateUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80054d8:	7ffb      	ldrb	r3, [r7, #31]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10c      	bne.n	80054f8 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2202      	movs	r2, #2
 80054e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2202      	movs	r2, #2
 80054ea:	645a      	str	r2, [r3, #68]	; 0x44
 80054ec:	e004      	b.n	80054f8 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2210      	movs	r2, #16
 80054f6:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80054f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3720      	adds	r7, #32
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	b08c      	sub	sp, #48	; 0x30
 8005506:	af02      	add	r7, sp, #8
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800550e:	f7fe fc49 	bl	8003da4 <HAL_GetTick>
 8005512:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	3350      	adds	r3, #80	; 0x50
 800551a:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005522:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800552c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2208      	movs	r2, #8
 800553e:	649a      	str	r2, [r3, #72]	; 0x48
 8005540:	e07c      	b.n	800563c <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	2b04      	cmp	r3, #4
 8005548:	d172      	bne.n	8005630 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005576:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005580:	d104      	bne.n	800558c <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	649a      	str	r2, [r3, #72]	; 0x48
 800558a:	e011      	b.n	80055b0 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005594:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005598:	2b00      	cmp	r3, #0
 800559a:	d004      	beq.n	80055a6 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	649a      	str	r2, [r3, #72]	; 0x48
 80055a4:	e004      	b.n	80055b0 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2201      	movs	r2, #1
 80055b8:	2106      	movs	r1, #6
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fc0e 	bl	8005ddc <OSPI_WaitFlagStateUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80055c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d114      	bne.n	80055f8 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	7812      	ldrb	r2, [r2, #0]
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e8:	1e5a      	subs	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1dc      	bne.n	80055b0 <HAL_OSPI_Receive+0xae>
 80055f6:	e000      	b.n	80055fa <HAL_OSPI_Receive+0xf8>
          break;
 80055f8:	bf00      	nop

      if (status == HAL_OK)
 80055fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d11c      	bne.n	800563c <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	2201      	movs	r2, #1
 800560a:	2102      	movs	r1, #2
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 fbe5 	bl	8005ddc <OSPI_WaitFlagStateUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8005618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10d      	bne.n	800563c <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2202      	movs	r2, #2
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2202      	movs	r2, #2
 800562c:	645a      	str	r2, [r3, #68]	; 0x44
 800562e:	e005      	b.n	800563c <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2210      	movs	r2, #16
 800563a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 800563c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005640:	4618      	mov	r0, r3
 8005642:	3728      	adds	r7, #40	; 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08a      	sub	sp, #40	; 0x28
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005654:	f7fe fba6 	bl	8003da4 <HAL_GetTick>
 8005658:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005660:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800566a:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP(cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL(cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg + 1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005670:	2b04      	cmp	r3, #4
 8005672:	d164      	bne.n	800573e <HAL_OSPI_AutoPolling+0xf6>
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800567c:	d15f      	bne.n	800573e <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2200      	movs	r2, #0
 8005686:	2120      	movs	r1, #32
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 fba7 	bl	8005ddc <OSPI_WaitFlagStateUntilTimeout>
 800568e:	4603      	mov	r3, r0
 8005690:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8005692:	7ffb      	ldrb	r3, [r7, #31]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d158      	bne.n	800574a <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG(hospi->Instance->PSMAR, cfg->Match);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG(hospi->Instance->PSMKR, cfg->Mask);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	6852      	ldr	r2, [r2, #4]
 80056ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG(hospi->Instance->PIR,   cfg->Interval);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	6912      	ldr	r2, [r2, #16]
 80056b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	6899      	ldr	r1, [r3, #8]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	430b      	orrs	r3, r1
 80056d0:	431a      	orrs	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80056da:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056e4:	d104      	bne.n	80056f0 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	649a      	str	r2, [r3, #72]	; 0x48
 80056ee:	e011      	b.n	8005714 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80056f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d004      	beq.n	800570a <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	649a      	str	r2, [r3, #72]	; 0x48
 8005708:	e004      	b.n	8005714 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	2201      	movs	r2, #1
 800571c:	2108      	movs	r1, #8
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fb5c 	bl	8005ddc <OSPI_WaitFlagStateUntilTimeout>
 8005724:	4603      	mov	r3, r0
 8005726:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8005728:	7ffb      	ldrb	r3, [r7, #31]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10d      	bne.n	800574a <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2208      	movs	r2, #8
 8005734:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2202      	movs	r2, #2
 800573a:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800573c:	e005      	b.n	800574a <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2210      	movs	r2, #16
 8005746:	649a      	str	r2, [r3, #72]	; 0x48
 8005748:	e000      	b.n	800574c <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800574a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800574c:	7ffb      	ldrb	r3, [r7, #31]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b092      	sub	sp, #72	; 0x48
 8005778:	af00      	add	r7, sp, #0
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8005786:	2300      	movs	r3, #0
 8005788:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <HAL_OSPIM_Config+0x40>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d105      	bne.n	80057a2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800579a:	2301      	movs	r3, #1
 800579c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80057a0:	e004      	b.n	80057ac <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80057a2:	2301      	movs	r3, #1
 80057a4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80057ac:	2300      	movs	r3, #0
 80057ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80057b2:	e01f      	b.n	80057f4 <HAL_OSPIM_Config+0x80>
 80057b4:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80057b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057bc:	3301      	adds	r3, #1
 80057be:	b2d8      	uxtb	r0, r3
 80057c0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80057c4:	f107 0114 	add.w	r1, r7, #20
 80057c8:	4613      	mov	r3, r2
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	4619      	mov	r1, r3
 80057d4:	f000 fc9c 	bl	8006110 <OSPIM_GetConfig>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d005      	beq.n	80057ea <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2208      	movs	r2, #8
 80057e8:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80057ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057ee:	3301      	adds	r3, #1
 80057f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80057f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d9dd      	bls.n	80057b8 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80057fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 82de 	bne.w	8005dc2 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8005806:	4bc6      	ldr	r3, [pc, #792]	; (8005b20 <HAL_OSPIM_Config+0x3ac>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00b      	beq.n	800582a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005812:	4bc3      	ldr	r3, [pc, #780]	; (8005b20 <HAL_OSPIM_Config+0x3ac>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4ac2      	ldr	r2, [pc, #776]	; (8005b20 <HAL_OSPIM_Config+0x3ac>)
 8005818:	f023 0301 	bic.w	r3, r3, #1
 800581c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800581e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005822:	f043 0301 	orr.w	r3, r3, #1
 8005826:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800582a:	4bbe      	ldr	r3, [pc, #760]	; (8005b24 <HAL_OSPIM_Config+0x3b0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005836:	4bbb      	ldr	r3, [pc, #748]	; (8005b24 <HAL_OSPIM_Config+0x3b0>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4aba      	ldr	r2, [pc, #744]	; (8005b24 <HAL_OSPIM_Config+0x3b0>)
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8005842:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005846:	f043 0302 	orr.w	r3, r3, #2
 800584a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800584e:	49b6      	ldr	r1, [pc, #728]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 8005850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	3348      	adds	r3, #72	; 0x48
 800585c:	443b      	add	r3, r7
 800585e:	3b2c      	subs	r3, #44	; 0x2c
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3b01      	subs	r3, #1
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	440b      	add	r3, r1
 8005868:	6859      	ldr	r1, [r3, #4]
 800586a:	48af      	ldr	r0, [pc, #700]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 800586c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	3348      	adds	r3, #72	; 0x48
 8005878:	443b      	add	r3, r7
 800587a:	3b2c      	subs	r3, #44	; 0x2c
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3b01      	subs	r3, #1
 8005880:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	4403      	add	r3, r0
 8005888:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800588a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	3348      	adds	r3, #72	; 0x48
 8005896:	443b      	add	r3, r7
 8005898:	3b34      	subs	r3, #52	; 0x34
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80a1 	beq.w	80059e4 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80058a2:	49a1      	ldr	r1, [pc, #644]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 80058a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	3348      	adds	r3, #72	; 0x48
 80058b0:	443b      	add	r3, r7
 80058b2:	3b34      	subs	r3, #52	; 0x34
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	440b      	add	r3, r1
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	489a      	ldr	r0, [pc, #616]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 80058c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	3348      	adds	r3, #72	; 0x48
 80058cc:	443b      	add	r3, r7
 80058ce:	3b34      	subs	r3, #52	; 0x34
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	f021 0201 	bic.w	r2, r1, #1
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4403      	add	r3, r0
 80058dc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80058de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	3348      	adds	r3, #72	; 0x48
 80058ea:	443b      	add	r3, r7
 80058ec:	3b30      	subs	r3, #48	; 0x30
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01d      	beq.n	8005930 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80058f4:	498c      	ldr	r1, [pc, #560]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 80058f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	3348      	adds	r3, #72	; 0x48
 8005902:	443b      	add	r3, r7
 8005904:	3b30      	subs	r3, #48	; 0x30
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3b01      	subs	r3, #1
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	6859      	ldr	r1, [r3, #4]
 8005910:	4885      	ldr	r0, [pc, #532]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 8005912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	3348      	adds	r3, #72	; 0x48
 800591e:	443b      	add	r3, r7
 8005920:	3b30      	subs	r3, #48	; 0x30
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3b01      	subs	r3, #1
 8005926:	f021 0210 	bic.w	r2, r1, #16
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4403      	add	r3, r0
 800592e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	3348      	adds	r3, #72	; 0x48
 800593c:	443b      	add	r3, r7
 800593e:	3b28      	subs	r3, #40	; 0x28
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d021      	beq.n	800598a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8005946:	4978      	ldr	r1, [pc, #480]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 8005948:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	3348      	adds	r3, #72	; 0x48
 8005954:	443b      	add	r3, r7
 8005956:	3b28      	subs	r3, #40	; 0x28
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3b01      	subs	r3, #1
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	6859      	ldr	r1, [r3, #4]
 8005966:	4870      	ldr	r0, [pc, #448]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 8005968:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800596a:	4613      	mov	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	3348      	adds	r3, #72	; 0x48
 8005974:	443b      	add	r3, r7
 8005976:	3b28      	subs	r3, #40	; 0x28
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3b01      	subs	r3, #1
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4403      	add	r3, r0
 8005988:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800598a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800598c:	4613      	mov	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	3348      	adds	r3, #72	; 0x48
 8005996:	443b      	add	r3, r7
 8005998:	3b24      	subs	r3, #36	; 0x24
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d021      	beq.n	80059e4 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80059a0:	4961      	ldr	r1, [pc, #388]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 80059a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	3348      	adds	r3, #72	; 0x48
 80059ae:	443b      	add	r3, r7
 80059b0:	3b24      	subs	r3, #36	; 0x24
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	6859      	ldr	r1, [r3, #4]
 80059c0:	4859      	ldr	r0, [pc, #356]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 80059c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	3348      	adds	r3, #72	; 0x48
 80059ce:	443b      	add	r3, r7
 80059d0:	3b24      	subs	r3, #36	; 0x24
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4403      	add	r3, r0
 80059e2:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6819      	ldr	r1, [r3, #0]
 80059e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	3348      	adds	r3, #72	; 0x48
 80059f6:	443b      	add	r3, r7
 80059f8:	3b34      	subs	r3, #52	; 0x34
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4299      	cmp	r1, r3
 80059fe:	d038      	beq.n	8005a72 <HAL_OSPIM_Config+0x2fe>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	6859      	ldr	r1, [r3, #4]
 8005a04:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005a08:	4613      	mov	r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4413      	add	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	3348      	adds	r3, #72	; 0x48
 8005a12:	443b      	add	r3, r7
 8005a14:	3b30      	subs	r3, #48	; 0x30
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4299      	cmp	r1, r3
 8005a1a:	d02a      	beq.n	8005a72 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005a24:	4613      	mov	r3, r2
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	3348      	adds	r3, #72	; 0x48
 8005a2e:	443b      	add	r3, r7
 8005a30:	3b2c      	subs	r3, #44	; 0x2c
 8005a32:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8005a34:	4299      	cmp	r1, r3
 8005a36:	d01c      	beq.n	8005a72 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	68d9      	ldr	r1, [r3, #12]
 8005a3c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	3348      	adds	r3, #72	; 0x48
 8005a4a:	443b      	add	r3, r7
 8005a4c:	3b28      	subs	r3, #40	; 0x28
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4299      	cmp	r1, r3
 8005a52:	d00e      	beq.n	8005a72 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6919      	ldr	r1, [r3, #16]
 8005a58:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	3348      	adds	r3, #72	; 0x48
 8005a66:	443b      	add	r3, r7
 8005a68:	3b24      	subs	r3, #36	; 0x24
 8005a6a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	f040 80d3 	bne.w	8005c18 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8005a72:	492d      	ldr	r1, [pc, #180]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 8005a74:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	3348      	adds	r3, #72	; 0x48
 8005a82:	443b      	add	r3, r7
 8005a84:	3b34      	subs	r3, #52	; 0x34
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	440b      	add	r3, r1
 8005a8e:	6859      	ldr	r1, [r3, #4]
 8005a90:	4825      	ldr	r0, [pc, #148]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 8005a92:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	3348      	adds	r3, #72	; 0x48
 8005aa0:	443b      	add	r3, r7
 8005aa2:	3b34      	subs	r3, #52	; 0x34
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	f021 0201 	bic.w	r2, r1, #1
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4403      	add	r3, r0
 8005ab0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8005ab2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	3348      	adds	r3, #72	; 0x48
 8005ac0:	443b      	add	r3, r7
 8005ac2:	3b30      	subs	r3, #48	; 0x30
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01f      	beq.n	8005b0a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8005aca:	4917      	ldr	r1, [pc, #92]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 8005acc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	3348      	adds	r3, #72	; 0x48
 8005ada:	443b      	add	r3, r7
 8005adc:	3b30      	subs	r3, #48	; 0x30
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	6859      	ldr	r1, [r3, #4]
 8005ae8:	480f      	ldr	r0, [pc, #60]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 8005aea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	3348      	adds	r3, #72	; 0x48
 8005af8:	443b      	add	r3, r7
 8005afa:	3b30      	subs	r3, #48	; 0x30
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	f021 0210 	bic.w	r2, r1, #16
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4403      	add	r3, r0
 8005b08:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8005b0a:	4907      	ldr	r1, [pc, #28]	; (8005b28 <HAL_OSPIM_Config+0x3b4>)
 8005b0c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	3348      	adds	r3, #72	; 0x48
 8005b1a:	443b      	add	r3, r7
 8005b1c:	3b2c      	subs	r3, #44	; 0x2c
 8005b1e:	e005      	b.n	8005b2c <HAL_OSPIM_Config+0x3b8>
 8005b20:	a0001000 	.word	0xa0001000
 8005b24:	a0001400 	.word	0xa0001400
 8005b28:	50061c00 	.word	0x50061c00
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	440b      	add	r3, r1
 8005b34:	6859      	ldr	r1, [r3, #4]
 8005b36:	48a6      	ldr	r0, [pc, #664]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005b38:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	3348      	adds	r3, #72	; 0x48
 8005b46:	443b      	add	r3, r7
 8005b48:	3b2c      	subs	r3, #44	; 0x2c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4403      	add	r3, r0
 8005b56:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005b58:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	3348      	adds	r3, #72	; 0x48
 8005b66:	443b      	add	r3, r7
 8005b68:	3b28      	subs	r3, #40	; 0x28
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d023      	beq.n	8005bb8 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005b70:	4997      	ldr	r1, [pc, #604]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005b72:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	3348      	adds	r3, #72	; 0x48
 8005b80:	443b      	add	r3, r7
 8005b82:	3b28      	subs	r3, #40	; 0x28
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	6859      	ldr	r1, [r3, #4]
 8005b92:	488f      	ldr	r0, [pc, #572]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005b94:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005b98:	4613      	mov	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	3348      	adds	r3, #72	; 0x48
 8005ba2:	443b      	add	r3, r7
 8005ba4:	3b28      	subs	r3, #40	; 0x28
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4403      	add	r3, r0
 8005bb6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005bb8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	3348      	adds	r3, #72	; 0x48
 8005bc6:	443b      	add	r3, r7
 8005bc8:	3b24      	subs	r3, #36	; 0x24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d023      	beq.n	8005c18 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005bd0:	497f      	ldr	r1, [pc, #508]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005bd2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	3348      	adds	r3, #72	; 0x48
 8005be0:	443b      	add	r3, r7
 8005be2:	3b24      	subs	r3, #36	; 0x24
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	440b      	add	r3, r1
 8005bf0:	6859      	ldr	r1, [r3, #4]
 8005bf2:	4877      	ldr	r0, [pc, #476]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005bf4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	3348      	adds	r3, #72	; 0x48
 8005c02:	443b      	add	r3, r7
 8005c04:	3b24      	subs	r3, #36	; 0x24
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4403      	add	r3, r0
 8005c16:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8005c18:	4a6d      	ldr	r2, [pc, #436]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2c:	025b      	lsls	r3, r3, #9
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	4967      	ldr	r1, [pc, #412]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	440b      	add	r3, r1
 8005c40:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8005c42:	4a63      	ldr	r2, [pc, #396]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	f023 0203 	bic.w	r2, r3, #3
 8005c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c56:	005b      	lsls	r3, r3, #1
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	495d      	ldr	r1, [pc, #372]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	440b      	add	r3, r1
 8005c6a:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d014      	beq.n	8005c9e <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8005c74:	4a56      	ldr	r2, [pc, #344]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c88:	015b      	lsls	r3, r3, #5
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	4950      	ldr	r1, [pc, #320]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	f042 0210 	orr.w	r2, r2, #16
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d019      	beq.n	8005cde <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005caa:	4a49      	ldr	r2, [pc, #292]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	3b01      	subs	r3, #1
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cc2:	049b      	lsls	r3, r3, #18
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	4942      	ldr	r1, [pc, #264]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	440b      	add	r3, r1
 8005cda:	605a      	str	r2, [r3, #4]
 8005cdc:	e01c      	b.n	8005d18 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d018      	beq.n	8005d18 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005ce6:	4a3a      	ldr	r2, [pc, #232]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cfe:	069b      	lsls	r3, r3, #26
 8005d00:	431a      	orrs	r2, r3
 8005d02:	4933      	ldr	r1, [pc, #204]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	440b      	add	r3, r1
 8005d16:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d019      	beq.n	8005d58 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d24:	4a2a      	ldr	r2, [pc, #168]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d3c:	049b      	lsls	r3, r3, #18
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	4923      	ldr	r1, [pc, #140]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	605a      	str	r2, [r3, #4]
 8005d56:	e01c      	b.n	8005d92 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d018      	beq.n	8005d92 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8005d60:	4a1b      	ldr	r2, [pc, #108]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d78:	069b      	lsls	r3, r3, #26
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	4914      	ldr	r1, [pc, #80]	; (8005dd0 <HAL_OSPIM_Config+0x65c>)
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	3b01      	subs	r3, #1
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8005d92:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <HAL_OSPIM_Config+0x660>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a0c      	ldr	r2, [pc, #48]	; (8005dd4 <HAL_OSPIM_Config+0x660>)
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8005daa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8005db6:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <HAL_OSPIM_Config+0x664>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a07      	ldr	r2, [pc, #28]	; (8005dd8 <HAL_OSPIM_Config+0x664>)
 8005dbc:	f043 0301 	orr.w	r3, r3, #1
 8005dc0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8005dc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3748      	adds	r7, #72	; 0x48
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	50061c00 	.word	0x50061c00
 8005dd4:	a0001000 	.word	0xa0001000
 8005dd8:	a0001400 	.word	0xa0001400

08005ddc <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	603b      	str	r3, [r7, #0]
 8005de8:	4613      	mov	r3, r2
 8005dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005dec:	e01a      	b.n	8005e24 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005df4:	d016      	beq.n	8005e24 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df6:	f7fd ffd5 	bl	8003da4 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d302      	bcc.n	8005e0c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d10b      	bne.n	8005e24 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e12:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e18:	f043 0201 	orr.w	r2, r3, #1
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e00e      	b.n	8005e42 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bf14      	ite	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	2300      	moveq	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	79fb      	ldrb	r3, [r7, #7]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d1d6      	bne.n	8005dee <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b089      	sub	sp, #36	; 0x24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e56:	2300      	movs	r3, #0
 8005e58:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e68:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d114      	bne.n	8005eba <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005e98:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005ea2:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005eac:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e013      	b.n	8005ee2 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005ec2:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8005ecc:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005ed6:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eea:	431a      	orrs	r2, r3
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d012      	beq.n	8005f1e <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	4319      	orrs	r1, r3
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	430b      	orrs	r3, r1
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	601a      	str	r2, [r3, #0]
               (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f023 021f 	bic.w	r2, r3, #31
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d009      	beq.n	8005f4c <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3a01      	subs	r2, #1
 8005f4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 8099 	beq.w	8006088 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d055      	beq.n	800600a <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01e      	beq.n	8005fa4 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	4b68      	ldr	r3, [pc, #416]	; (800610c <OSPI_ConfigCmd+0x2c0>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	68d1      	ldr	r1, [r2, #12]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	6952      	ldr	r2, [r2, #20]
 8005f76:	4311      	orrs	r1, r2
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	6912      	ldr	r2, [r2, #16]
 8005f7c:	4311      	orrs	r1, r2
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	69d2      	ldr	r2, [r2, #28]
 8005f82:	4311      	orrs	r1, r2
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f88:	4311      	orrs	r1, r2
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	6a12      	ldr	r2, [r2, #32]
 8005f8e:	4311      	orrs	r1, r2
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f94:	4311      	orrs	r1, r2
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	e028      	b.n	8005ff6 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	68d1      	ldr	r1, [r2, #12]
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	6952      	ldr	r2, [r2, #20]
 8005fb8:	4311      	orrs	r1, r2
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	6912      	ldr	r2, [r2, #16]
 8005fbe:	4311      	orrs	r1, r2
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	69d2      	ldr	r2, [r2, #28]
 8005fc4:	4311      	orrs	r1, r2
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005fca:	4311      	orrs	r1, r2
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	6a12      	ldr	r2, [r2, #32]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                    cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fe0:	d109      	bne.n	8005ff6 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d105      	bne.n	8005ff6 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	6992      	ldr	r2, [r2, #24]
 8006006:	649a      	str	r2, [r3, #72]	; 0x48
 8006008:	e078      	b.n	80060fc <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	2b00      	cmp	r3, #0
 8006010:	d017      	beq.n	8006042 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800601a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	68d1      	ldr	r1, [r2, #12]
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	6952      	ldr	r2, [r2, #20]
 8006026:	4311      	orrs	r1, r2
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	6912      	ldr	r2, [r2, #16]
 800602c:	4311      	orrs	r1, r2
 800602e:	683a      	ldr	r2, [r7, #0]
 8006030:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006032:	4311      	orrs	r1, r2
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006038:	430a      	orrs	r2, r1
 800603a:	431a      	orrs	r2, r3
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	e01d      	b.n	800607e <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68d9      	ldr	r1, [r3, #12]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	4319      	orrs	r1, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	430b      	orrs	r3, r1
 800605a:	431a      	orrs	r2, r3
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	601a      	str	r2, [r3, #0]
                   (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006068:	d109      	bne.n	800607e <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800606e:	2b08      	cmp	r3, #8
 8006070:	d105      	bne.n	800607e <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e039      	b.n	80060fc <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	69db      	ldr	r3, [r3, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d030      	beq.n	80060f2 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	d017      	beq.n	80060c8 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80060a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	69d1      	ldr	r1, [r2, #28]
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060ac:	4311      	orrs	r1, r2
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	6a12      	ldr	r2, [r2, #32]
 80060b2:	4311      	orrs	r1, r2
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060b8:	4311      	orrs	r1, r2
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80060be:	430a      	orrs	r2, r1
 80060c0:	431a      	orrs	r2, r3
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e00e      	b.n	80060e6 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	69d9      	ldr	r1, [r3, #28]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	4319      	orrs	r1, r3
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	430b      	orrs	r3, r1
 80060e0:	431a      	orrs	r2, r3
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	601a      	str	r2, [r3, #0]
                   (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	6992      	ldr	r2, [r2, #24]
 80060ee:	649a      	str	r2, [r3, #72]	; 0x48
 80060f0:	e004      	b.n	80060fc <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2208      	movs	r2, #8
 80060fa:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80060fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3724      	adds	r7, #36	; 0x24
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	f0ffc0c0 	.word	0xf0ffc0c0

08006110 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800611c:	2300      	movs	r3, #0
 800611e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8006124:	79fb      	ldrb	r3, [r7, #7]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <OSPIM_GetConfig+0x26>
 800612a:	79fb      	ldrb	r3, [r7, #7]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d802      	bhi.n	8006136 <OSPIM_GetConfig+0x26>
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d102      	bne.n	800613c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	75fb      	strb	r3, [r7, #23]
 800613a:	e08e      	b.n	800625a <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2200      	movs	r2, #0
 8006146:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2200      	movs	r2, #0
 8006152:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2200      	movs	r2, #0
 8006158:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d101      	bne.n	8006164 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8006160:	4b41      	ldr	r3, [pc, #260]	; (8006268 <OSPIM_GetConfig+0x158>)
 8006162:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006164:	2300      	movs	r3, #0
 8006166:	60fb      	str	r3, [r7, #12]
 8006168:	e074      	b.n	8006254 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800616a:	4a40      	ldr	r2, [pc, #256]	; (800626c <OSPIM_GetConfig+0x15c>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00a      	beq.n	8006196 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006180:	68ba      	ldr	r2, [r7, #8]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4053      	eors	r3, r2
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d103      	bne.n	8006196 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f003 0310 	and.w	r3, r3, #16
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00a      	beq.n	80061b6 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	4053      	eors	r3, r2
 80061a6:	f003 0320 	and.w	r3, r3, #32
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	1c5a      	adds	r2, r3, #1
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4053      	eors	r3, r2
 80061c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d103      	bne.n	80061d6 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d018      	beq.n	8006212 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4053      	eors	r3, r2
 80061e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d111      	bne.n	8006212 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	3301      	adds	r3, #1
 80061fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	60da      	str	r2, [r3, #12]
 8006204:	e005      	b.n	8006212 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	3301      	adds	r3, #1
 800620a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d018      	beq.n	800624e <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4053      	eors	r3, r2
 8006222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d111      	bne.n	800624e <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d106      	bne.n	8006242 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	611a      	str	r2, [r3, #16]
 8006240:	e005      	b.n	800624e <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3301      	adds	r3, #1
 8006246:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	3301      	adds	r3, #1
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d987      	bls.n	800616a <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	04040222 	.word	0x04040222
 800626c:	50061c00 	.word	0x50061c00

08006270 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006270:	b480      	push	{r7}
 8006272:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006274:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <HAL_PWREx_GetVoltageRange+0x3c>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800627c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006280:	d102      	bne.n	8006288 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8006282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006286:	e00b      	b.n	80062a0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8006288:	4b08      	ldr	r3, [pc, #32]	; (80062ac <HAL_PWREx_GetVoltageRange+0x3c>)
 800628a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006296:	d102      	bne.n	800629e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8006298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800629c:	e000      	b.n	80062a0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800629e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	40007000 	.word	0x40007000

080062b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d141      	bne.n	8006342 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062be:	4b4b      	ldr	r3, [pc, #300]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062ca:	d131      	bne.n	8006330 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062cc:	4b47      	ldr	r3, [pc, #284]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d2:	4a46      	ldr	r2, [pc, #280]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062dc:	4b43      	ldr	r3, [pc, #268]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062e4:	4a41      	ldr	r2, [pc, #260]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80062ec:	4b40      	ldr	r3, [pc, #256]	; (80063f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2232      	movs	r2, #50	; 0x32
 80062f2:	fb02 f303 	mul.w	r3, r2, r3
 80062f6:	4a3f      	ldr	r2, [pc, #252]	; (80063f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80062f8:	fba2 2303 	umull	r2, r3, r2, r3
 80062fc:	0c9b      	lsrs	r3, r3, #18
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006302:	e002      	b.n	800630a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3b01      	subs	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800630a:	4b38      	ldr	r3, [pc, #224]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006316:	d102      	bne.n	800631e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f2      	bne.n	8006304 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800631e:	4b33      	ldr	r3, [pc, #204]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632a:	d158      	bne.n	80063de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e057      	b.n	80063e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006330:	4b2e      	ldr	r3, [pc, #184]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006336:	4a2d      	ldr	r2, [pc, #180]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800633c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006340:	e04d      	b.n	80063de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006348:	d141      	bne.n	80063ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800634a:	4b28      	ldr	r3, [pc, #160]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006356:	d131      	bne.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006358:	4b24      	ldr	r3, [pc, #144]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800635a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800635e:	4a23      	ldr	r2, [pc, #140]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006364:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006368:	4b20      	ldr	r3, [pc, #128]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006370:	4a1e      	ldr	r2, [pc, #120]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006376:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2232      	movs	r2, #50	; 0x32
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006384:	fba2 2303 	umull	r2, r3, r2, r3
 8006388:	0c9b      	lsrs	r3, r3, #18
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800638e:	e002      	b.n	8006396 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3b01      	subs	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006396:	4b15      	ldr	r3, [pc, #84]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800639e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063a2:	d102      	bne.n	80063aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f2      	bne.n	8006390 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063b6:	d112      	bne.n	80063de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e011      	b.n	80063e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c2:	4a0a      	ldr	r2, [pc, #40]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80063cc:	e007      	b.n	80063de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063ce:	4b07      	ldr	r3, [pc, #28]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063d6:	4a05      	ldr	r2, [pc, #20]	; (80063ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063dc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80063de:	2300      	movs	r3, #0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3714      	adds	r7, #20
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	40007000 	.word	0x40007000
 80063f0:	20000088 	.word	0x20000088
 80063f4:	431bde83 	.word	0x431bde83

080063f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f000 bc08 	b.w	8006c1c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800640c:	4b96      	ldr	r3, [pc, #600]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	f003 030c 	and.w	r3, r3, #12
 8006414:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006416:	4b94      	ldr	r3, [pc, #592]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0310 	and.w	r3, r3, #16
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80e4 	beq.w	80065f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <HAL_RCC_OscConfig+0x4c>
 8006434:	69bb      	ldr	r3, [r7, #24]
 8006436:	2b0c      	cmp	r3, #12
 8006438:	f040 808b 	bne.w	8006552 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2b01      	cmp	r3, #1
 8006440:	f040 8087 	bne.w	8006552 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006444:	4b88      	ldr	r3, [pc, #544]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 0302 	and.w	r3, r3, #2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <HAL_RCC_OscConfig+0x64>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e3df      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1a      	ldr	r2, [r3, #32]
 8006460:	4b81      	ldr	r3, [pc, #516]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <HAL_RCC_OscConfig+0x7e>
 800646c:	4b7e      	ldr	r3, [pc, #504]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006474:	e005      	b.n	8006482 <HAL_RCC_OscConfig+0x8a>
 8006476:	4b7c      	ldr	r3, [pc, #496]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006482:	4293      	cmp	r3, r2
 8006484:	d223      	bcs.n	80064ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 fdfe 	bl	800708c <RCC_SetFlashLatencyFromMSIRange>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e3c0      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800649a:	4b73      	ldr	r3, [pc, #460]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a72      	ldr	r2, [pc, #456]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064a0:	f043 0308 	orr.w	r3, r3, #8
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	4b70      	ldr	r3, [pc, #448]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	496d      	ldr	r1, [pc, #436]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064b8:	4b6b      	ldr	r3, [pc, #428]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	4968      	ldr	r1, [pc, #416]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064c8:	4313      	orrs	r3, r2
 80064ca:	604b      	str	r3, [r1, #4]
 80064cc:	e025      	b.n	800651a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064ce:	4b66      	ldr	r3, [pc, #408]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a65      	ldr	r2, [pc, #404]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064d4:	f043 0308 	orr.w	r3, r3, #8
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4b63      	ldr	r3, [pc, #396]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	4960      	ldr	r1, [pc, #384]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064ec:	4b5e      	ldr	r3, [pc, #376]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	021b      	lsls	r3, r3, #8
 80064fa:	495b      	ldr	r1, [pc, #364]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	4618      	mov	r0, r3
 800650c:	f000 fdbe 	bl	800708c <RCC_SetFlashLatencyFromMSIRange>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e380      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800651a:	f000 fcc1 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 800651e:	4602      	mov	r2, r0
 8006520:	4b51      	ldr	r3, [pc, #324]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	f003 030f 	and.w	r3, r3, #15
 800652a:	4950      	ldr	r1, [pc, #320]	; (800666c <HAL_RCC_OscConfig+0x274>)
 800652c:	5ccb      	ldrb	r3, [r1, r3]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	fa22 f303 	lsr.w	r3, r2, r3
 8006536:	4a4e      	ldr	r2, [pc, #312]	; (8006670 <HAL_RCC_OscConfig+0x278>)
 8006538:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800653a:	4b4e      	ldr	r3, [pc, #312]	; (8006674 <HAL_RCC_OscConfig+0x27c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fd fa5e 	bl	8003a00 <HAL_InitTick>
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006548:	7bfb      	ldrb	r3, [r7, #15]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d052      	beq.n	80065f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	e364      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d032      	beq.n	80065c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800655a:	4b43      	ldr	r3, [pc, #268]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a42      	ldr	r2, [pc, #264]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006560:	f043 0301 	orr.w	r3, r3, #1
 8006564:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006566:	f7fd fc1d 	bl	8003da4 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800656e:	f7fd fc19 	bl	8003da4 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e34d      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006580:	4b39      	ldr	r3, [pc, #228]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800658c:	4b36      	ldr	r3, [pc, #216]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a35      	ldr	r2, [pc, #212]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006592:	f043 0308 	orr.w	r3, r3, #8
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	4b33      	ldr	r3, [pc, #204]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	4930      	ldr	r1, [pc, #192]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065aa:	4b2f      	ldr	r3, [pc, #188]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	021b      	lsls	r3, r3, #8
 80065b8:	492b      	ldr	r1, [pc, #172]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	604b      	str	r3, [r1, #4]
 80065be:	e01a      	b.n	80065f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80065c0:	4b29      	ldr	r3, [pc, #164]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a28      	ldr	r2, [pc, #160]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80065c6:	f023 0301 	bic.w	r3, r3, #1
 80065ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065cc:	f7fd fbea 	bl	8003da4 <HAL_GetTick>
 80065d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065d2:	e008      	b.n	80065e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065d4:	f7fd fbe6 	bl	8003da4 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d901      	bls.n	80065e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e31a      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065e6:	4b20      	ldr	r3, [pc, #128]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f0      	bne.n	80065d4 <HAL_RCC_OscConfig+0x1dc>
 80065f2:	e000      	b.n	80065f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d073      	beq.n	80066ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b08      	cmp	r3, #8
 8006606:	d005      	beq.n	8006614 <HAL_RCC_OscConfig+0x21c>
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b0c      	cmp	r3, #12
 800660c:	d10e      	bne.n	800662c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b03      	cmp	r3, #3
 8006612:	d10b      	bne.n	800662c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006614:	4b14      	ldr	r3, [pc, #80]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d063      	beq.n	80066e8 <HAL_RCC_OscConfig+0x2f0>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d15f      	bne.n	80066e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e2f7      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006634:	d106      	bne.n	8006644 <HAL_RCC_OscConfig+0x24c>
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a0b      	ldr	r2, [pc, #44]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 800663c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	e025      	b.n	8006690 <HAL_RCC_OscConfig+0x298>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800664c:	d114      	bne.n	8006678 <HAL_RCC_OscConfig+0x280>
 800664e:	4b06      	ldr	r3, [pc, #24]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a05      	ldr	r2, [pc, #20]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	4b03      	ldr	r3, [pc, #12]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a02      	ldr	r2, [pc, #8]	; (8006668 <HAL_RCC_OscConfig+0x270>)
 8006660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	e013      	b.n	8006690 <HAL_RCC_OscConfig+0x298>
 8006668:	40021000 	.word	0x40021000
 800666c:	0800ef6c 	.word	0x0800ef6c
 8006670:	20000088 	.word	0x20000088
 8006674:	2000008c 	.word	0x2000008c
 8006678:	4ba0      	ldr	r3, [pc, #640]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a9f      	ldr	r2, [pc, #636]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 800667e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	4b9d      	ldr	r3, [pc, #628]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a9c      	ldr	r2, [pc, #624]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 800668a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800668e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d013      	beq.n	80066c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006698:	f7fd fb84 	bl	8003da4 <HAL_GetTick>
 800669c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066a0:	f7fd fb80 	bl	8003da4 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b64      	cmp	r3, #100	; 0x64
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e2b4      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066b2:	4b92      	ldr	r3, [pc, #584]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCC_OscConfig+0x2a8>
 80066be:	e014      	b.n	80066ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c0:	f7fd fb70 	bl	8003da4 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c8:	f7fd fb6c 	bl	8003da4 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b64      	cmp	r3, #100	; 0x64
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e2a0      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066da:	4b88      	ldr	r3, [pc, #544]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1f0      	bne.n	80066c8 <HAL_RCC_OscConfig+0x2d0>
 80066e6:	e000      	b.n	80066ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d060      	beq.n	80067b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b04      	cmp	r3, #4
 80066fa:	d005      	beq.n	8006708 <HAL_RCC_OscConfig+0x310>
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	2b0c      	cmp	r3, #12
 8006700:	d119      	bne.n	8006736 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2b02      	cmp	r3, #2
 8006706:	d116      	bne.n	8006736 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006708:	4b7c      	ldr	r3, [pc, #496]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <HAL_RCC_OscConfig+0x328>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e27d      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006720:	4b76      	ldr	r3, [pc, #472]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	061b      	lsls	r3, r3, #24
 800672e:	4973      	ldr	r1, [pc, #460]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006730:	4313      	orrs	r3, r2
 8006732:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006734:	e040      	b.n	80067b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d023      	beq.n	8006786 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800673e:	4b6f      	ldr	r3, [pc, #444]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a6e      	ldr	r2, [pc, #440]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006748:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674a:	f7fd fb2b 	bl	8003da4 <HAL_GetTick>
 800674e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006750:	e008      	b.n	8006764 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006752:	f7fd fb27 	bl	8003da4 <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	2b02      	cmp	r3, #2
 800675e:	d901      	bls.n	8006764 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e25b      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006764:	4b65      	ldr	r3, [pc, #404]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0f0      	beq.n	8006752 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006770:	4b62      	ldr	r3, [pc, #392]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	691b      	ldr	r3, [r3, #16]
 800677c:	061b      	lsls	r3, r3, #24
 800677e:	495f      	ldr	r1, [pc, #380]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006780:	4313      	orrs	r3, r2
 8006782:	604b      	str	r3, [r1, #4]
 8006784:	e018      	b.n	80067b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006786:	4b5d      	ldr	r3, [pc, #372]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a5c      	ldr	r2, [pc, #368]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 800678c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006792:	f7fd fb07 	bl	8003da4 <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006798:	e008      	b.n	80067ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800679a:	f7fd fb03 	bl	8003da4 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d901      	bls.n	80067ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e237      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067ac:	4b53      	ldr	r3, [pc, #332]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1f0      	bne.n	800679a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d03c      	beq.n	800683e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01c      	beq.n	8006806 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067cc:	4b4b      	ldr	r3, [pc, #300]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80067ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d2:	4a4a      	ldr	r2, [pc, #296]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80067d4:	f043 0301 	orr.w	r3, r3, #1
 80067d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fd fae2 	bl	8003da4 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e4:	f7fd fade 	bl	8003da4 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e212      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067f6:	4b41      	ldr	r3, [pc, #260]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80067f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d0ef      	beq.n	80067e4 <HAL_RCC_OscConfig+0x3ec>
 8006804:	e01b      	b.n	800683e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006806:	4b3d      	ldr	r3, [pc, #244]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006808:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800680c:	4a3b      	ldr	r2, [pc, #236]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 800680e:	f023 0301 	bic.w	r3, r3, #1
 8006812:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006816:	f7fd fac5 	bl	8003da4 <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800681c:	e008      	b.n	8006830 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800681e:	f7fd fac1 	bl	8003da4 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d901      	bls.n	8006830 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e1f5      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006830:	4b32      	ldr	r3, [pc, #200]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1ef      	bne.n	800681e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	f000 80a6 	beq.w	8006998 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800684c:	2300      	movs	r3, #0
 800684e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006850:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10d      	bne.n	8006878 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800685c:	4b27      	ldr	r3, [pc, #156]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 800685e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006860:	4a26      	ldr	r2, [pc, #152]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 8006862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006866:	6593      	str	r3, [r2, #88]	; 0x58
 8006868:	4b24      	ldr	r3, [pc, #144]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 800686a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006870:	60bb      	str	r3, [r7, #8]
 8006872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006874:	2301      	movs	r3, #1
 8006876:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006878:	4b21      	ldr	r3, [pc, #132]	; (8006900 <HAL_RCC_OscConfig+0x508>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d118      	bne.n	80068b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006884:	4b1e      	ldr	r3, [pc, #120]	; (8006900 <HAL_RCC_OscConfig+0x508>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a1d      	ldr	r2, [pc, #116]	; (8006900 <HAL_RCC_OscConfig+0x508>)
 800688a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800688e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006890:	f7fd fa88 	bl	8003da4 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006898:	f7fd fa84 	bl	8003da4 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e1b8      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068aa:	4b15      	ldr	r3, [pc, #84]	; (8006900 <HAL_RCC_OscConfig+0x508>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d108      	bne.n	80068d0 <HAL_RCC_OscConfig+0x4d8>
 80068be:	4b0f      	ldr	r3, [pc, #60]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	4a0d      	ldr	r2, [pc, #52]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068ce:	e029      	b.n	8006924 <HAL_RCC_OscConfig+0x52c>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b05      	cmp	r3, #5
 80068d6:	d115      	bne.n	8006904 <HAL_RCC_OscConfig+0x50c>
 80068d8:	4b08      	ldr	r3, [pc, #32]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80068da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068de:	4a07      	ldr	r2, [pc, #28]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80068e0:	f043 0304 	orr.w	r3, r3, #4
 80068e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068e8:	4b04      	ldr	r3, [pc, #16]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80068ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ee:	4a03      	ldr	r2, [pc, #12]	; (80068fc <HAL_RCC_OscConfig+0x504>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068f8:	e014      	b.n	8006924 <HAL_RCC_OscConfig+0x52c>
 80068fa:	bf00      	nop
 80068fc:	40021000 	.word	0x40021000
 8006900:	40007000 	.word	0x40007000
 8006904:	4b9d      	ldr	r3, [pc, #628]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690a:	4a9c      	ldr	r2, [pc, #624]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 800690c:	f023 0301 	bic.w	r3, r3, #1
 8006910:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006914:	4b99      	ldr	r3, [pc, #612]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691a:	4a98      	ldr	r2, [pc, #608]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 800691c:	f023 0304 	bic.w	r3, r3, #4
 8006920:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d016      	beq.n	800695a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800692c:	f7fd fa3a 	bl	8003da4 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006932:	e00a      	b.n	800694a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006934:	f7fd fa36 	bl	8003da4 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006942:	4293      	cmp	r3, r2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e168      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800694a:	4b8c      	ldr	r3, [pc, #560]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 800694c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d0ed      	beq.n	8006934 <HAL_RCC_OscConfig+0x53c>
 8006958:	e015      	b.n	8006986 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800695a:	f7fd fa23 	bl	8003da4 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006960:	e00a      	b.n	8006978 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006962:	f7fd fa1f 	bl	8003da4 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006970:	4293      	cmp	r3, r2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e151      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006978:	4b80      	ldr	r3, [pc, #512]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 800697a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1ed      	bne.n	8006962 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006986:	7ffb      	ldrb	r3, [r7, #31]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d105      	bne.n	8006998 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800698c:	4b7b      	ldr	r3, [pc, #492]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 800698e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006990:	4a7a      	ldr	r2, [pc, #488]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006996:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d03c      	beq.n	8006a1e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d01c      	beq.n	80069e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069ac:	4b73      	ldr	r3, [pc, #460]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 80069ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069b2:	4a72      	ldr	r2, [pc, #456]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 80069b4:	f043 0301 	orr.w	r3, r3, #1
 80069b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069bc:	f7fd f9f2 	bl	8003da4 <HAL_GetTick>
 80069c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069c4:	f7fd f9ee 	bl	8003da4 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e122      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80069d6:	4b69      	ldr	r3, [pc, #420]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 80069d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0ef      	beq.n	80069c4 <HAL_RCC_OscConfig+0x5cc>
 80069e4:	e01b      	b.n	8006a1e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069e6:	4b65      	ldr	r3, [pc, #404]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 80069e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069ec:	4a63      	ldr	r2, [pc, #396]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 80069ee:	f023 0301 	bic.w	r3, r3, #1
 80069f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069f6:	f7fd f9d5 	bl	8003da4 <HAL_GetTick>
 80069fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069fc:	e008      	b.n	8006a10 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069fe:	f7fd f9d1 	bl	8003da4 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d901      	bls.n	8006a10 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e105      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a10:	4b5a      	ldr	r3, [pc, #360]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1ef      	bne.n	80069fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 80f9 	beq.w	8006c1a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	f040 80cf 	bne.w	8006bd0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a32:	4b52      	ldr	r3, [pc, #328]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f003 0203 	and.w	r2, r3, #3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d12c      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	3b01      	subs	r3, #1
 8006a52:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d123      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a62:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d11b      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a72:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d113      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a82:	085b      	lsrs	r3, r3, #1
 8006a84:	3b01      	subs	r3, #1
 8006a86:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d109      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	085b      	lsrs	r3, r3, #1
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d071      	beq.n	8006b84 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b0c      	cmp	r3, #12
 8006aa4:	d068      	beq.n	8006b78 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006aa6:	4b35      	ldr	r3, [pc, #212]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d105      	bne.n	8006abe <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006ab2:	4b32      	ldr	r3, [pc, #200]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d001      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e0ac      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ac2:	4b2e      	ldr	r3, [pc, #184]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a2d      	ldr	r2, [pc, #180]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006acc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ace:	f7fd f969 	bl	8003da4 <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ad6:	f7fd f965 	bl	8003da4 <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e099      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ae8:	4b24      	ldr	r3, [pc, #144]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1f0      	bne.n	8006ad6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006af4:	4b21      	ldr	r3, [pc, #132]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	4b21      	ldr	r3, [pc, #132]	; (8006b80 <HAL_RCC_OscConfig+0x788>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b04:	3a01      	subs	r2, #1
 8006b06:	0112      	lsls	r2, r2, #4
 8006b08:	4311      	orrs	r1, r2
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b0e:	0212      	lsls	r2, r2, #8
 8006b10:	4311      	orrs	r1, r2
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b16:	0852      	lsrs	r2, r2, #1
 8006b18:	3a01      	subs	r2, #1
 8006b1a:	0552      	lsls	r2, r2, #21
 8006b1c:	4311      	orrs	r1, r2
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b22:	0852      	lsrs	r2, r2, #1
 8006b24:	3a01      	subs	r2, #1
 8006b26:	0652      	lsls	r2, r2, #25
 8006b28:	4311      	orrs	r1, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b2e:	06d2      	lsls	r2, r2, #27
 8006b30:	430a      	orrs	r2, r1
 8006b32:	4912      	ldr	r1, [pc, #72]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b38:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a0f      	ldr	r2, [pc, #60]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b44:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	4a0c      	ldr	r2, [pc, #48]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b50:	f7fd f928 	bl	8003da4 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b58:	f7fd f924 	bl	8003da4 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e058      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b6a:	4b04      	ldr	r3, [pc, #16]	; (8006b7c <HAL_RCC_OscConfig+0x784>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b76:	e050      	b.n	8006c1a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e04f      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b84:	4b27      	ldr	r3, [pc, #156]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d144      	bne.n	8006c1a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b90:	4b24      	ldr	r3, [pc, #144]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a23      	ldr	r2, [pc, #140]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b9c:	4b21      	ldr	r3, [pc, #132]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	4a20      	ldr	r2, [pc, #128]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ba6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006ba8:	f7fd f8fc 	bl	8003da4 <HAL_GetTick>
 8006bac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bae:	e008      	b.n	8006bc2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb0:	f7fd f8f8 	bl	8003da4 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d901      	bls.n	8006bc2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8006bbe:	2303      	movs	r3, #3
 8006bc0:	e02c      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc2:	4b18      	ldr	r3, [pc, #96]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0f0      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x7b8>
 8006bce:	e024      	b.n	8006c1a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b0c      	cmp	r3, #12
 8006bd4:	d01f      	beq.n	8006c16 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be2:	f7fd f8df 	bl	8003da4 <HAL_GetTick>
 8006be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006be8:	e008      	b.n	8006bfc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bea:	f7fd f8db 	bl	8003da4 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e00f      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bfc:	4b09      	ldr	r3, [pc, #36]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1f0      	bne.n	8006bea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006c08:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006c0a:	68da      	ldr	r2, [r3, #12]
 8006c0c:	4905      	ldr	r1, [pc, #20]	; (8006c24 <HAL_RCC_OscConfig+0x82c>)
 8006c0e:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <HAL_RCC_OscConfig+0x830>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	60cb      	str	r3, [r1, #12]
 8006c14:	e001      	b.n	8006c1a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e000      	b.n	8006c1c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40021000 	.word	0x40021000
 8006c28:	feeefffc 	.word	0xfeeefffc

08006c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e11d      	b.n	8006e80 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c44:	4b90      	ldr	r3, [pc, #576]	; (8006e88 <HAL_RCC_ClockConfig+0x25c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 030f 	and.w	r3, r3, #15
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d910      	bls.n	8006c74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c52:	4b8d      	ldr	r3, [pc, #564]	; (8006e88 <HAL_RCC_ClockConfig+0x25c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f023 020f 	bic.w	r2, r3, #15
 8006c5a:	498b      	ldr	r1, [pc, #556]	; (8006e88 <HAL_RCC_ClockConfig+0x25c>)
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c62:	4b89      	ldr	r3, [pc, #548]	; (8006e88 <HAL_RCC_ClockConfig+0x25c>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d001      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e105      	b.n	8006e80 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d010      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	4b81      	ldr	r3, [pc, #516]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d908      	bls.n	8006ca2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c90:	4b7e      	ldr	r3, [pc, #504]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	497b      	ldr	r1, [pc, #492]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d079      	beq.n	8006da2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d11e      	bne.n	8006cf4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cb6:	4b75      	ldr	r3, [pc, #468]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e0dc      	b.n	8006e80 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006cc6:	f000 fa3b 	bl	8007140 <RCC_GetSysClockFreqFromPLLSource>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	4a70      	ldr	r2, [pc, #448]	; (8006e90 <HAL_RCC_ClockConfig+0x264>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d946      	bls.n	8006d60 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006cd2:	4b6e      	ldr	r3, [pc, #440]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d140      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006cde:	4b6b      	ldr	r3, [pc, #428]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ce6:	4a69      	ldr	r2, [pc, #420]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006cee:	2380      	movs	r3, #128	; 0x80
 8006cf0:	617b      	str	r3, [r7, #20]
 8006cf2:	e035      	b.n	8006d60 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d107      	bne.n	8006d0c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cfc:	4b63      	ldr	r3, [pc, #396]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d115      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e0b9      	b.n	8006e80 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d107      	bne.n	8006d24 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d14:	4b5d      	ldr	r3, [pc, #372]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d109      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e0ad      	b.n	8006e80 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d24:	4b59      	ldr	r3, [pc, #356]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0a5      	b.n	8006e80 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8006d34:	f000 f8b4 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	4a55      	ldr	r2, [pc, #340]	; (8006e90 <HAL_RCC_ClockConfig+0x264>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d90f      	bls.n	8006d60 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8006d40:	4b52      	ldr	r3, [pc, #328]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d109      	bne.n	8006d60 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d4c:	4b4f      	ldr	r3, [pc, #316]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d54:	4a4d      	ldr	r2, [pc, #308]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d5c:	2380      	movs	r3, #128	; 0x80
 8006d5e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d60:	4b4a      	ldr	r3, [pc, #296]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f023 0203 	bic.w	r2, r3, #3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	4947      	ldr	r1, [pc, #284]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d72:	f7fd f817 	bl	8003da4 <HAL_GetTick>
 8006d76:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d78:	e00a      	b.n	8006d90 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d7a:	f7fd f813 	bl	8003da4 <HAL_GetTick>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	1ad3      	subs	r3, r2, r3
 8006d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e077      	b.n	8006e80 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d90:	4b3e      	ldr	r3, [pc, #248]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 020c 	and.w	r2, r3, #12
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d1eb      	bne.n	8006d7a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	2b80      	cmp	r3, #128	; 0x80
 8006da6:	d105      	bne.n	8006db4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006da8:	4b38      	ldr	r3, [pc, #224]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	4a37      	ldr	r2, [pc, #220]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006db2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d010      	beq.n	8006de2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	4b31      	ldr	r3, [pc, #196]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d208      	bcs.n	8006de2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dd0:	4b2e      	ldr	r3, [pc, #184]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	492b      	ldr	r1, [pc, #172]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006de2:	4b29      	ldr	r3, [pc, #164]	; (8006e88 <HAL_RCC_ClockConfig+0x25c>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d210      	bcs.n	8006e12 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df0:	4b25      	ldr	r3, [pc, #148]	; (8006e88 <HAL_RCC_ClockConfig+0x25c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f023 020f 	bic.w	r2, r3, #15
 8006df8:	4923      	ldr	r1, [pc, #140]	; (8006e88 <HAL_RCC_ClockConfig+0x25c>)
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e00:	4b21      	ldr	r3, [pc, #132]	; (8006e88 <HAL_RCC_ClockConfig+0x25c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 030f 	and.w	r3, r3, #15
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d001      	beq.n	8006e12 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e036      	b.n	8006e80 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d008      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e1e:	4b1b      	ldr	r3, [pc, #108]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	4918      	ldr	r1, [pc, #96]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0308 	and.w	r3, r3, #8
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d009      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e3c:	4b13      	ldr	r3, [pc, #76]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	4910      	ldr	r1, [pc, #64]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e50:	f000 f826 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 8006e54:	4602      	mov	r2, r0
 8006e56:	4b0d      	ldr	r3, [pc, #52]	; (8006e8c <HAL_RCC_ClockConfig+0x260>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	091b      	lsrs	r3, r3, #4
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	490c      	ldr	r1, [pc, #48]	; (8006e94 <HAL_RCC_ClockConfig+0x268>)
 8006e62:	5ccb      	ldrb	r3, [r1, r3]
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6c:	4a0a      	ldr	r2, [pc, #40]	; (8006e98 <HAL_RCC_ClockConfig+0x26c>)
 8006e6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e70:	4b0a      	ldr	r3, [pc, #40]	; (8006e9c <HAL_RCC_ClockConfig+0x270>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fc fdc3 	bl	8003a00 <HAL_InitTick>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73fb      	strb	r3, [r7, #15]

  return status;
 8006e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40022000 	.word	0x40022000
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	04c4b400 	.word	0x04c4b400
 8006e94:	0800ef6c 	.word	0x0800ef6c
 8006e98:	20000088 	.word	0x20000088
 8006e9c:	2000008c 	.word	0x2000008c

08006ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b089      	sub	sp, #36	; 0x24
 8006ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	61fb      	str	r3, [r7, #28]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eae:	4b3e      	ldr	r3, [pc, #248]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f003 030c 	and.w	r3, r3, #12
 8006eb6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006eb8:	4b3b      	ldr	r3, [pc, #236]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b0c      	cmp	r3, #12
 8006ecc:	d121      	bne.n	8006f12 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d11e      	bne.n	8006f12 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ed4:	4b34      	ldr	r3, [pc, #208]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d107      	bne.n	8006ef0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ee0:	4b31      	ldr	r3, [pc, #196]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ee6:	0a1b      	lsrs	r3, r3, #8
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	61fb      	str	r3, [r7, #28]
 8006eee:	e005      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ef0:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	091b      	lsrs	r3, r3, #4
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006efc:	4a2b      	ldr	r2, [pc, #172]	; (8006fac <HAL_RCC_GetSysClockFreq+0x10c>)
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f04:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10d      	bne.n	8006f28 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f10:	e00a      	b.n	8006f28 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b04      	cmp	r3, #4
 8006f16:	d102      	bne.n	8006f1e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f18:	4b25      	ldr	r3, [pc, #148]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e004      	b.n	8006f28 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d101      	bne.n	8006f28 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f24:	4b23      	ldr	r3, [pc, #140]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f26:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	2b0c      	cmp	r3, #12
 8006f2c:	d134      	bne.n	8006f98 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f2e:	4b1e      	ldr	r3, [pc, #120]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d003      	beq.n	8006f46 <HAL_RCC_GetSysClockFreq+0xa6>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d003      	beq.n	8006f4c <HAL_RCC_GetSysClockFreq+0xac>
 8006f44:	e005      	b.n	8006f52 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f46:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f48:	617b      	str	r3, [r7, #20]
      break;
 8006f4a:	e005      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f4c:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f4e:	617b      	str	r3, [r7, #20]
      break;
 8006f50:	e002      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	617b      	str	r3, [r7, #20]
      break;
 8006f56:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f58:	4b13      	ldr	r3, [pc, #76]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	091b      	lsrs	r3, r3, #4
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	3301      	adds	r3, #1
 8006f64:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f66:	4b10      	ldr	r3, [pc, #64]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	fb03 f202 	mul.w	r2, r3, r2
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f7e:	4b0a      	ldr	r3, [pc, #40]	; (8006fa8 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	0e5b      	lsrs	r3, r3, #25
 8006f84:	f003 0303 	and.w	r3, r3, #3
 8006f88:	3301      	adds	r3, #1
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f96:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f98:	69bb      	ldr	r3, [r7, #24]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3724      	adds	r7, #36	; 0x24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	0800ef84 	.word	0x0800ef84
 8006fb0:	00f42400 	.word	0x00f42400
 8006fb4:	007a1200 	.word	0x007a1200

08006fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fbc:	4b03      	ldr	r3, [pc, #12]	; (8006fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20000088 	.word	0x20000088

08006fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006fd4:	f7ff fff0 	bl	8006fb8 <HAL_RCC_GetHCLKFreq>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	0a1b      	lsrs	r3, r3, #8
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	4904      	ldr	r1, [pc, #16]	; (8006ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fe6:	5ccb      	ldrb	r3, [r1, r3]
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	0800ef7c 	.word	0x0800ef7c

08006ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007000:	f7ff ffda 	bl	8006fb8 <HAL_RCC_GetHCLKFreq>
 8007004:	4602      	mov	r2, r0
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	0adb      	lsrs	r3, r3, #11
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	4904      	ldr	r1, [pc, #16]	; (8007024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007012:	5ccb      	ldrb	r3, [r1, r3]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40021000 	.word	0x40021000
 8007024:	0800ef7c 	.word	0x0800ef7c

08007028 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	220f      	movs	r2, #15
 8007036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007038:	4b12      	ldr	r3, [pc, #72]	; (8007084 <HAL_RCC_GetClockConfig+0x5c>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0203 	and.w	r2, r3, #3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <HAL_RCC_GetClockConfig+0x5c>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <HAL_RCC_GetClockConfig+0x5c>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800705c:	4b09      	ldr	r3, [pc, #36]	; (8007084 <HAL_RCC_GetClockConfig+0x5c>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	08db      	lsrs	r3, r3, #3
 8007062:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800706a:	4b07      	ldr	r3, [pc, #28]	; (8007088 <HAL_RCC_GetClockConfig+0x60>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 020f 	and.w	r2, r3, #15
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	601a      	str	r2, [r3, #0]
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40021000 	.word	0x40021000
 8007088:	40022000 	.word	0x40022000

0800708c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007094:	2300      	movs	r3, #0
 8007096:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007098:	4b27      	ldr	r3, [pc, #156]	; (8007138 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800709a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80070a4:	f7ff f8e4 	bl	8006270 <HAL_PWREx_GetVoltageRange>
 80070a8:	6178      	str	r0, [r7, #20]
 80070aa:	e014      	b.n	80070d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80070ac:	4b22      	ldr	r3, [pc, #136]	; (8007138 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80070ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b0:	4a21      	ldr	r2, [pc, #132]	; (8007138 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80070b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b6:	6593      	str	r3, [r2, #88]	; 0x58
 80070b8:	4b1f      	ldr	r3, [pc, #124]	; (8007138 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80070ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070c0:	60fb      	str	r3, [r7, #12]
 80070c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80070c4:	f7ff f8d4 	bl	8006270 <HAL_PWREx_GetVoltageRange>
 80070c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80070ca:	4b1b      	ldr	r3, [pc, #108]	; (8007138 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80070cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ce:	4a1a      	ldr	r2, [pc, #104]	; (8007138 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80070d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070dc:	d10b      	bne.n	80070f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2b80      	cmp	r3, #128	; 0x80
 80070e2:	d913      	bls.n	800710c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2ba0      	cmp	r3, #160	; 0xa0
 80070e8:	d902      	bls.n	80070f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80070ea:	2302      	movs	r3, #2
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	e00d      	b.n	800710c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80070f0:	2301      	movs	r3, #1
 80070f2:	613b      	str	r3, [r7, #16]
 80070f4:	e00a      	b.n	800710c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b7f      	cmp	r3, #127	; 0x7f
 80070fa:	d902      	bls.n	8007102 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80070fc:	2302      	movs	r3, #2
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	e004      	b.n	800710c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b70      	cmp	r3, #112	; 0x70
 8007106:	d101      	bne.n	800710c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007108:	2301      	movs	r3, #1
 800710a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800710c:	4b0b      	ldr	r3, [pc, #44]	; (800713c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f023 020f 	bic.w	r2, r3, #15
 8007114:	4909      	ldr	r1, [pc, #36]	; (800713c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800711c:	4b07      	ldr	r3, [pc, #28]	; (800713c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	429a      	cmp	r2, r3
 8007128:	d001      	beq.n	800712e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40021000 	.word	0x40021000
 800713c:	40022000 	.word	0x40022000

08007140 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007146:	4b2d      	ldr	r3, [pc, #180]	; (80071fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f003 0303 	and.w	r3, r3, #3
 800714e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b03      	cmp	r3, #3
 8007154:	d00b      	beq.n	800716e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d825      	bhi.n	80071a8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d008      	beq.n	8007174 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d11f      	bne.n	80071a8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8007168:	4b25      	ldr	r3, [pc, #148]	; (8007200 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800716a:	613b      	str	r3, [r7, #16]
    break;
 800716c:	e01f      	b.n	80071ae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800716e:	4b25      	ldr	r3, [pc, #148]	; (8007204 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8007170:	613b      	str	r3, [r7, #16]
    break;
 8007172:	e01c      	b.n	80071ae <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007174:	4b21      	ldr	r3, [pc, #132]	; (80071fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d107      	bne.n	8007190 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007180:	4b1e      	ldr	r3, [pc, #120]	; (80071fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007182:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007186:	0a1b      	lsrs	r3, r3, #8
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	e005      	b.n	800719c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007190:	4b1a      	ldr	r3, [pc, #104]	; (80071fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	091b      	lsrs	r3, r3, #4
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800719c:	4a1a      	ldr	r2, [pc, #104]	; (8007208 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a4:	613b      	str	r3, [r7, #16]
    break;
 80071a6:	e002      	b.n	80071ae <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	613b      	str	r3, [r7, #16]
    break;
 80071ac:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	091b      	lsrs	r3, r3, #4
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	3301      	adds	r3, #1
 80071ba:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80071bc:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	0a1b      	lsrs	r3, r3, #8
 80071c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	fb03 f202 	mul.w	r2, r3, r2
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071d4:	4b09      	ldr	r3, [pc, #36]	; (80071fc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	0e5b      	lsrs	r3, r3, #25
 80071da:	f003 0303 	and.w	r3, r3, #3
 80071de:	3301      	adds	r3, #1
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80071ee:	683b      	ldr	r3, [r7, #0]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	40021000 	.word	0x40021000
 8007200:	00f42400 	.word	0x00f42400
 8007204:	007a1200 	.word	0x007a1200
 8007208:	0800ef84 	.word	0x0800ef84

0800720c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007214:	2300      	movs	r3, #0
 8007216:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007218:	2300      	movs	r3, #0
 800721a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007224:	2b00      	cmp	r3, #0
 8007226:	d040      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722c:	2b80      	cmp	r3, #128	; 0x80
 800722e:	d02a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007230:	2b80      	cmp	r3, #128	; 0x80
 8007232:	d825      	bhi.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007234:	2b60      	cmp	r3, #96	; 0x60
 8007236:	d026      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007238:	2b60      	cmp	r3, #96	; 0x60
 800723a:	d821      	bhi.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d006      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d81d      	bhi.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8007244:	2b00      	cmp	r3, #0
 8007246:	d009      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007248:	2b20      	cmp	r3, #32
 800724a:	d010      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800724c:	e018      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800724e:	4b89      	ldr	r3, [pc, #548]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	4a88      	ldr	r2, [pc, #544]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007258:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800725a:	e015      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3304      	adds	r3, #4
 8007260:	2100      	movs	r1, #0
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fb02 	bl	800786c <RCCEx_PLLSAI1_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800726c:	e00c      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3320      	adds	r3, #32
 8007272:	2100      	movs	r1, #0
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fbed 	bl	8007a54 <RCCEx_PLLSAI2_Config>
 800727a:	4603      	mov	r3, r0
 800727c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800727e:	e003      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	74fb      	strb	r3, [r7, #19]
      break;
 8007284:	e000      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8007286:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007288:	7cfb      	ldrb	r3, [r7, #19]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800728e:	4b79      	ldr	r3, [pc, #484]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007290:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007294:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800729c:	4975      	ldr	r1, [pc, #468]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80072a4:	e001      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a6:	7cfb      	ldrb	r3, [r7, #19]
 80072a8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d047      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072be:	d030      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80072c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c4:	d82a      	bhi.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80072c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ca:	d02a      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80072cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072d0:	d824      	bhi.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80072d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072d6:	d008      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xde>
 80072d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072dc:	d81e      	bhi.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x110>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80072e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e6:	d010      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80072e8:	e018      	b.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80072ea:	4b62      	ldr	r3, [pc, #392]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	4a61      	ldr	r2, [pc, #388]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80072f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80072f6:	e015      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	3304      	adds	r3, #4
 80072fc:	2100      	movs	r1, #0
 80072fe:	4618      	mov	r0, r3
 8007300:	f000 fab4 	bl	800786c <RCCEx_PLLSAI1_Config>
 8007304:	4603      	mov	r3, r0
 8007306:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007308:	e00c      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3320      	adds	r3, #32
 800730e:	2100      	movs	r1, #0
 8007310:	4618      	mov	r0, r3
 8007312:	f000 fb9f 	bl	8007a54 <RCCEx_PLLSAI2_Config>
 8007316:	4603      	mov	r3, r0
 8007318:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800731a:	e003      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	74fb      	strb	r3, [r7, #19]
      break;
 8007320:	e000      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8007322:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007324:	7cfb      	ldrb	r3, [r7, #19]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10b      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800732a:	4b52      	ldr	r3, [pc, #328]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800732c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007330:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007338:	494e      	ldr	r1, [pc, #312]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800733a:	4313      	orrs	r3, r2
 800733c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8007340:	e001      	b.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007342:	7cfb      	ldrb	r3, [r7, #19]
 8007344:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734e:	2b00      	cmp	r3, #0
 8007350:	f000 809f 	beq.w	8007492 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007354:	2300      	movs	r3, #0
 8007356:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007358:	4b46      	ldr	r3, [pc, #280]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800735a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8007368:	2300      	movs	r3, #0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00d      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800736e:	4b41      	ldr	r3, [pc, #260]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007372:	4a40      	ldr	r2, [pc, #256]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007378:	6593      	str	r3, [r2, #88]	; 0x58
 800737a:	4b3e      	ldr	r3, [pc, #248]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007382:	60bb      	str	r3, [r7, #8]
 8007384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007386:	2301      	movs	r3, #1
 8007388:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800738a:	4b3b      	ldr	r3, [pc, #236]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a3a      	ldr	r2, [pc, #232]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8007390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007394:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007396:	f7fc fd05 	bl	8003da4 <HAL_GetTick>
 800739a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800739c:	e009      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800739e:	f7fc fd01 	bl	8003da4 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d902      	bls.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	74fb      	strb	r3, [r7, #19]
        break;
 80073b0:	e005      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80073b2:	4b31      	ldr	r3, [pc, #196]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0ef      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80073be:	7cfb      	ldrb	r3, [r7, #19]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d15b      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073c4:	4b2b      	ldr	r3, [pc, #172]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ce:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01f      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	429a      	cmp	r2, r3
 80073e0:	d019      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073e2:	4b24      	ldr	r3, [pc, #144]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ec:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073ee:	4b21      	ldr	r3, [pc, #132]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f4:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80073f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073fe:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007404:	4a1b      	ldr	r2, [pc, #108]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800740a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800740e:	4a19      	ldr	r2, [pc, #100]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d016      	beq.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007420:	f7fc fcc0 	bl	8003da4 <HAL_GetTick>
 8007424:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007426:	e00b      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007428:	f7fc fcbc 	bl	8003da4 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	f241 3288 	movw	r2, #5000	; 0x1388
 8007436:	4293      	cmp	r3, r2
 8007438:	d902      	bls.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	74fb      	strb	r3, [r7, #19]
            break;
 800743e:	e006      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007440:	4b0c      	ldr	r3, [pc, #48]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0ec      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800744e:	7cfb      	ldrb	r3, [r7, #19]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10c      	bne.n	800746e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007454:	4b07      	ldr	r3, [pc, #28]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	4903      	ldr	r1, [pc, #12]	; (8007474 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800746c:	e008      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800746e:	7cfb      	ldrb	r3, [r7, #19]
 8007470:	74bb      	strb	r3, [r7, #18]
 8007472:	e005      	b.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8007474:	40021000 	.word	0x40021000
 8007478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800747c:	7cfb      	ldrb	r3, [r7, #19]
 800747e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007480:	7c7b      	ldrb	r3, [r7, #17]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d105      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007486:	4ba0      	ldr	r3, [pc, #640]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	4a9f      	ldr	r2, [pc, #636]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800748c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007490:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800749e:	4b9a      	ldr	r3, [pc, #616]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a4:	f023 0203 	bic.w	r2, r3, #3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ac:	4996      	ldr	r1, [pc, #600]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0302 	and.w	r3, r3, #2
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00a      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074c0:	4b91      	ldr	r3, [pc, #580]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c6:	f023 020c 	bic.w	r2, r3, #12
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	498e      	ldr	r1, [pc, #568]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074e2:	4b89      	ldr	r3, [pc, #548]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074f0:	4985      	ldr	r1, [pc, #532]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0308 	and.w	r3, r3, #8
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00a      	beq.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007504:	4b80      	ldr	r3, [pc, #512]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007512:	497d      	ldr	r1, [pc, #500]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0310 	and.w	r3, r3, #16
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00a      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007526:	4b78      	ldr	r3, [pc, #480]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007534:	4974      	ldr	r1, [pc, #464]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007536:	4313      	orrs	r3, r2
 8007538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00a      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007548:	4b6f      	ldr	r3, [pc, #444]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800754a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007556:	496c      	ldr	r1, [pc, #432]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007558:	4313      	orrs	r3, r2
 800755a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00a      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800756a:	4b67      	ldr	r3, [pc, #412]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800756c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007570:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007578:	4963      	ldr	r1, [pc, #396]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800758c:	4b5e      	ldr	r3, [pc, #376]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800758e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007592:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800759a:	495b      	ldr	r1, [pc, #364]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800759c:	4313      	orrs	r3, r2
 800759e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ae:	4b56      	ldr	r3, [pc, #344]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	4952      	ldr	r1, [pc, #328]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075d0:	4b4d      	ldr	r3, [pc, #308]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075de:	494a      	ldr	r1, [pc, #296]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075f2:	4b45      	ldr	r3, [pc, #276]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80075f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007600:	4941      	ldr	r1, [pc, #260]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007602:	4313      	orrs	r3, r2
 8007604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007614:	4b3c      	ldr	r3, [pc, #240]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800761a:	f023 0203 	bic.w	r2, r3, #3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007622:	4939      	ldr	r1, [pc, #228]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007624:	4313      	orrs	r3, r2
 8007626:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d028      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007636:	4b34      	ldr	r3, [pc, #208]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007644:	4930      	ldr	r1, [pc, #192]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007646:	4313      	orrs	r3, r2
 8007648:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007654:	d106      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007656:	4b2c      	ldr	r3, [pc, #176]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	4a2b      	ldr	r2, [pc, #172]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800765c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007660:	60d3      	str	r3, [r2, #12]
 8007662:	e011      	b.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007668:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800766c:	d10c      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3304      	adds	r3, #4
 8007672:	2101      	movs	r1, #1
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f8f9 	bl	800786c <RCCEx_PLLSAI1_Config>
 800767a:	4603      	mov	r3, r0
 800767c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800767e:	7cfb      	ldrb	r3, [r7, #19]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d001      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8007684:	7cfb      	ldrb	r3, [r7, #19]
 8007686:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d04d      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800769c:	d108      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800769e:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076a4:	4a18      	ldr	r2, [pc, #96]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80076ae:	e012      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80076b0:	4b15      	ldr	r3, [pc, #84]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076b6:	4a14      	ldr	r2, [pc, #80]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076bc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80076c0:	4b11      	ldr	r3, [pc, #68]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076ce:	490e      	ldr	r1, [pc, #56]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076de:	d106      	bne.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4a08      	ldr	r2, [pc, #32]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076ea:	60d3      	str	r3, [r2, #12]
 80076ec:	e020      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076f6:	d109      	bne.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80076f8:	4b03      	ldr	r3, [pc, #12]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	4a02      	ldr	r2, [pc, #8]	; (8007708 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80076fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007702:	60d3      	str	r3, [r2, #12]
 8007704:	e014      	b.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007706:	bf00      	nop
 8007708:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007710:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007714:	d10c      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3304      	adds	r3, #4
 800771a:	2101      	movs	r1, #1
 800771c:	4618      	mov	r0, r3
 800771e:	f000 f8a5 	bl	800786c <RCCEx_PLLSAI1_Config>
 8007722:	4603      	mov	r3, r0
 8007724:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007726:	7cfb      	ldrb	r3, [r7, #19]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d001      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800772c:	7cfb      	ldrb	r3, [r7, #19]
 800772e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d028      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800773c:	4b4a      	ldr	r3, [pc, #296]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007742:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800774a:	4947      	ldr	r1, [pc, #284]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800774c:	4313      	orrs	r3, r2
 800774e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800775a:	d106      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800775c:	4b42      	ldr	r3, [pc, #264]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	4a41      	ldr	r2, [pc, #260]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007762:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007766:	60d3      	str	r3, [r2, #12]
 8007768:	e011      	b.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800776e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007772:	d10c      	bne.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3304      	adds	r3, #4
 8007778:	2101      	movs	r1, #1
 800777a:	4618      	mov	r0, r3
 800777c:	f000 f876 	bl	800786c <RCCEx_PLLSAI1_Config>
 8007780:	4603      	mov	r3, r0
 8007782:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007784:	7cfb      	ldrb	r3, [r7, #19]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d001      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800778a:	7cfb      	ldrb	r3, [r7, #19]
 800778c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007796:	2b00      	cmp	r3, #0
 8007798:	d01e      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800779a:	4b33      	ldr	r3, [pc, #204]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800779c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077aa:	492f      	ldr	r1, [pc, #188]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077ac:	4313      	orrs	r3, r2
 80077ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077bc:	d10c      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3304      	adds	r3, #4
 80077c2:	2102      	movs	r1, #2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 f851 	bl	800786c <RCCEx_PLLSAI1_Config>
 80077ca:	4603      	mov	r3, r0
 80077cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80077ce:	7cfb      	ldrb	r3, [r7, #19]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80077d4:	7cfb      	ldrb	r3, [r7, #19]
 80077d6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077e4:	4b20      	ldr	r3, [pc, #128]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077ea:	f023 0204 	bic.w	r2, r3, #4
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f4:	491c      	ldr	r1, [pc, #112]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007808:	4b17      	ldr	r3, [pc, #92]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800780a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800780e:	f023 0218 	bic.w	r2, r3, #24
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007818:	4913      	ldr	r1, [pc, #76]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d017      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800782c:	4b0e      	ldr	r3, [pc, #56]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800782e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007832:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800783c:	490a      	ldr	r1, [pc, #40]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800784a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800784e:	d105      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007850:	4b05      	ldr	r3, [pc, #20]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	4a04      	ldr	r2, [pc, #16]	; (8007868 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800785a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800785c:	7cbb      	ldrb	r3, [r7, #18]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40021000 	.word	0x40021000

0800786c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800787a:	4b72      	ldr	r3, [pc, #456]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00e      	beq.n	80078a4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007886:	4b6f      	ldr	r3, [pc, #444]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f003 0203 	and.w	r2, r3, #3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	429a      	cmp	r2, r3
 8007894:	d103      	bne.n	800789e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
       ||
 800789a:	2b00      	cmp	r3, #0
 800789c:	d142      	bne.n	8007924 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	73fb      	strb	r3, [r7, #15]
 80078a2:	e03f      	b.n	8007924 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d018      	beq.n	80078de <RCCEx_PLLSAI1_Config+0x72>
 80078ac:	2b03      	cmp	r3, #3
 80078ae:	d825      	bhi.n	80078fc <RCCEx_PLLSAI1_Config+0x90>
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d002      	beq.n	80078ba <RCCEx_PLLSAI1_Config+0x4e>
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d009      	beq.n	80078cc <RCCEx_PLLSAI1_Config+0x60>
 80078b8:	e020      	b.n	80078fc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80078ba:	4b62      	ldr	r3, [pc, #392]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d11d      	bne.n	8007902 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078ca:	e01a      	b.n	8007902 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80078cc:	4b5d      	ldr	r3, [pc, #372]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d116      	bne.n	8007906 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078dc:	e013      	b.n	8007906 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078de:	4b59      	ldr	r3, [pc, #356]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10f      	bne.n	800790a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80078ea:	4b56      	ldr	r3, [pc, #344]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078fa:	e006      	b.n	800790a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007900:	e004      	b.n	800790c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007902:	bf00      	nop
 8007904:	e002      	b.n	800790c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8007906:	bf00      	nop
 8007908:	e000      	b.n	800790c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800790a:	bf00      	nop
    }

    if(status == HAL_OK)
 800790c:	7bfb      	ldrb	r3, [r7, #15]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d108      	bne.n	8007924 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8007912:	4b4c      	ldr	r3, [pc, #304]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f023 0203 	bic.w	r2, r3, #3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4949      	ldr	r1, [pc, #292]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007920:	4313      	orrs	r3, r2
 8007922:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f040 8086 	bne.w	8007a38 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800792c:	4b45      	ldr	r3, [pc, #276]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a44      	ldr	r2, [pc, #272]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007932:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007936:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007938:	f7fc fa34 	bl	8003da4 <HAL_GetTick>
 800793c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800793e:	e009      	b.n	8007954 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007940:	f7fc fa30 	bl	8003da4 <HAL_GetTick>
 8007944:	4602      	mov	r2, r0
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	1ad3      	subs	r3, r2, r3
 800794a:	2b02      	cmp	r3, #2
 800794c:	d902      	bls.n	8007954 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	73fb      	strb	r3, [r7, #15]
        break;
 8007952:	e005      	b.n	8007960 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007954:	4b3b      	ldr	r3, [pc, #236]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1ef      	bne.n	8007940 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007960:	7bfb      	ldrb	r3, [r7, #15]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d168      	bne.n	8007a38 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d113      	bne.n	8007994 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800796c:	4b35      	ldr	r3, [pc, #212]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	4b35      	ldr	r3, [pc, #212]	; (8007a48 <RCCEx_PLLSAI1_Config+0x1dc>)
 8007972:	4013      	ands	r3, r2
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	6892      	ldr	r2, [r2, #8]
 8007978:	0211      	lsls	r1, r2, #8
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	68d2      	ldr	r2, [r2, #12]
 800797e:	06d2      	lsls	r2, r2, #27
 8007980:	4311      	orrs	r1, r2
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	6852      	ldr	r2, [r2, #4]
 8007986:	3a01      	subs	r2, #1
 8007988:	0112      	lsls	r2, r2, #4
 800798a:	430a      	orrs	r2, r1
 800798c:	492d      	ldr	r1, [pc, #180]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800798e:	4313      	orrs	r3, r2
 8007990:	610b      	str	r3, [r1, #16]
 8007992:	e02d      	b.n	80079f0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d115      	bne.n	80079c6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800799a:	4b2a      	ldr	r3, [pc, #168]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 800799c:	691a      	ldr	r2, [r3, #16]
 800799e:	4b2b      	ldr	r3, [pc, #172]	; (8007a4c <RCCEx_PLLSAI1_Config+0x1e0>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6892      	ldr	r2, [r2, #8]
 80079a6:	0211      	lsls	r1, r2, #8
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	6912      	ldr	r2, [r2, #16]
 80079ac:	0852      	lsrs	r2, r2, #1
 80079ae:	3a01      	subs	r2, #1
 80079b0:	0552      	lsls	r2, r2, #21
 80079b2:	4311      	orrs	r1, r2
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6852      	ldr	r2, [r2, #4]
 80079b8:	3a01      	subs	r2, #1
 80079ba:	0112      	lsls	r2, r2, #4
 80079bc:	430a      	orrs	r2, r1
 80079be:	4921      	ldr	r1, [pc, #132]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079c0:	4313      	orrs	r3, r2
 80079c2:	610b      	str	r3, [r1, #16]
 80079c4:	e014      	b.n	80079f0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80079c6:	4b1f      	ldr	r3, [pc, #124]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079c8:	691a      	ldr	r2, [r3, #16]
 80079ca:	4b21      	ldr	r3, [pc, #132]	; (8007a50 <RCCEx_PLLSAI1_Config+0x1e4>)
 80079cc:	4013      	ands	r3, r2
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	6892      	ldr	r2, [r2, #8]
 80079d2:	0211      	lsls	r1, r2, #8
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	6952      	ldr	r2, [r2, #20]
 80079d8:	0852      	lsrs	r2, r2, #1
 80079da:	3a01      	subs	r2, #1
 80079dc:	0652      	lsls	r2, r2, #25
 80079de:	4311      	orrs	r1, r2
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6852      	ldr	r2, [r2, #4]
 80079e4:	3a01      	subs	r2, #1
 80079e6:	0112      	lsls	r2, r2, #4
 80079e8:	430a      	orrs	r2, r1
 80079ea:	4916      	ldr	r1, [pc, #88]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80079f0:	4b14      	ldr	r3, [pc, #80]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a13      	ldr	r2, [pc, #76]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 80079f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079fc:	f7fc f9d2 	bl	8003da4 <HAL_GetTick>
 8007a00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a02:	e009      	b.n	8007a18 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007a04:	f7fc f9ce 	bl	8003da4 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d902      	bls.n	8007a18 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	73fb      	strb	r3, [r7, #15]
          break;
 8007a16:	e005      	b.n	8007a24 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007a18:	4b0a      	ldr	r3, [pc, #40]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0ef      	beq.n	8007a04 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007a2a:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a2c:	691a      	ldr	r2, [r3, #16]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	4904      	ldr	r1, [pc, #16]	; (8007a44 <RCCEx_PLLSAI1_Config+0x1d8>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	40021000 	.word	0x40021000
 8007a48:	07ff800f 	.word	0x07ff800f
 8007a4c:	ff9f800f 	.word	0xff9f800f
 8007a50:	f9ff800f 	.word	0xf9ff800f

08007a54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a62:	4b72      	ldr	r3, [pc, #456]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00e      	beq.n	8007a8c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007a6e:	4b6f      	ldr	r3, [pc, #444]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f003 0203 	and.w	r2, r3, #3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d103      	bne.n	8007a86 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
       ||
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d142      	bne.n	8007b0c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	73fb      	strb	r3, [r7, #15]
 8007a8a:	e03f      	b.n	8007b0c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d018      	beq.n	8007ac6 <RCCEx_PLLSAI2_Config+0x72>
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d825      	bhi.n	8007ae4 <RCCEx_PLLSAI2_Config+0x90>
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d002      	beq.n	8007aa2 <RCCEx_PLLSAI2_Config+0x4e>
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d009      	beq.n	8007ab4 <RCCEx_PLLSAI2_Config+0x60>
 8007aa0:	e020      	b.n	8007ae4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007aa2:	4b62      	ldr	r3, [pc, #392]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d11d      	bne.n	8007aea <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ab2:	e01a      	b.n	8007aea <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ab4:	4b5d      	ldr	r3, [pc, #372]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d116      	bne.n	8007aee <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ac4:	e013      	b.n	8007aee <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ac6:	4b59      	ldr	r3, [pc, #356]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10f      	bne.n	8007af2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ad2:	4b56      	ldr	r3, [pc, #344]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d109      	bne.n	8007af2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ae2:	e006      	b.n	8007af2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae8:	e004      	b.n	8007af4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007aea:	bf00      	nop
 8007aec:	e002      	b.n	8007af4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007aee:	bf00      	nop
 8007af0:	e000      	b.n	8007af4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8007af2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d108      	bne.n	8007b0c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8007afa:	4b4c      	ldr	r3, [pc, #304]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007afc:	68db      	ldr	r3, [r3, #12]
 8007afe:	f023 0203 	bic.w	r2, r3, #3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4949      	ldr	r1, [pc, #292]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f040 8086 	bne.w	8007c20 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007b14:	4b45      	ldr	r3, [pc, #276]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a44      	ldr	r2, [pc, #272]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b20:	f7fc f940 	bl	8003da4 <HAL_GetTick>
 8007b24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007b26:	e009      	b.n	8007b3c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007b28:	f7fc f93c 	bl	8003da4 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d902      	bls.n	8007b3c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	73fb      	strb	r3, [r7, #15]
        break;
 8007b3a:	e005      	b.n	8007b48 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007b3c:	4b3b      	ldr	r3, [pc, #236]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1ef      	bne.n	8007b28 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8007b48:	7bfb      	ldrb	r3, [r7, #15]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d168      	bne.n	8007c20 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d113      	bne.n	8007b7c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b54:	4b35      	ldr	r3, [pc, #212]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b56:	695a      	ldr	r2, [r3, #20]
 8007b58:	4b35      	ldr	r3, [pc, #212]	; (8007c30 <RCCEx_PLLSAI2_Config+0x1dc>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6892      	ldr	r2, [r2, #8]
 8007b60:	0211      	lsls	r1, r2, #8
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	68d2      	ldr	r2, [r2, #12]
 8007b66:	06d2      	lsls	r2, r2, #27
 8007b68:	4311      	orrs	r1, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	6852      	ldr	r2, [r2, #4]
 8007b6e:	3a01      	subs	r2, #1
 8007b70:	0112      	lsls	r2, r2, #4
 8007b72:	430a      	orrs	r2, r1
 8007b74:	492d      	ldr	r1, [pc, #180]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b76:	4313      	orrs	r3, r2
 8007b78:	614b      	str	r3, [r1, #20]
 8007b7a:	e02d      	b.n	8007bd8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d115      	bne.n	8007bae <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007b82:	4b2a      	ldr	r3, [pc, #168]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007b84:	695a      	ldr	r2, [r3, #20]
 8007b86:	4b2b      	ldr	r3, [pc, #172]	; (8007c34 <RCCEx_PLLSAI2_Config+0x1e0>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6892      	ldr	r2, [r2, #8]
 8007b8e:	0211      	lsls	r1, r2, #8
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6912      	ldr	r2, [r2, #16]
 8007b94:	0852      	lsrs	r2, r2, #1
 8007b96:	3a01      	subs	r2, #1
 8007b98:	0552      	lsls	r2, r2, #21
 8007b9a:	4311      	orrs	r1, r2
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6852      	ldr	r2, [r2, #4]
 8007ba0:	3a01      	subs	r2, #1
 8007ba2:	0112      	lsls	r2, r2, #4
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	4921      	ldr	r1, [pc, #132]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	614b      	str	r3, [r1, #20]
 8007bac:	e014      	b.n	8007bd8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007bae:	4b1f      	ldr	r3, [pc, #124]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bb0:	695a      	ldr	r2, [r3, #20]
 8007bb2:	4b21      	ldr	r3, [pc, #132]	; (8007c38 <RCCEx_PLLSAI2_Config+0x1e4>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	6892      	ldr	r2, [r2, #8]
 8007bba:	0211      	lsls	r1, r2, #8
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	6952      	ldr	r2, [r2, #20]
 8007bc0:	0852      	lsrs	r2, r2, #1
 8007bc2:	3a01      	subs	r2, #1
 8007bc4:	0652      	lsls	r2, r2, #25
 8007bc6:	4311      	orrs	r1, r2
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6852      	ldr	r2, [r2, #4]
 8007bcc:	3a01      	subs	r2, #1
 8007bce:	0112      	lsls	r2, r2, #4
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	4916      	ldr	r1, [pc, #88]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007bd8:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a13      	ldr	r2, [pc, #76]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be4:	f7fc f8de 	bl	8003da4 <HAL_GetTick>
 8007be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007bea:	e009      	b.n	8007c00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007bec:	f7fc f8da 	bl	8003da4 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d902      	bls.n	8007c00 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8007bfe:	e005      	b.n	8007c0c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007c00:	4b0a      	ldr	r3, [pc, #40]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0ef      	beq.n	8007bec <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007c12:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c14:	695a      	ldr	r2, [r3, #20]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	4904      	ldr	r1, [pc, #16]	; (8007c2c <RCCEx_PLLSAI2_Config+0x1d8>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	07ff800f 	.word	0x07ff800f
 8007c34:	ff9f800f 	.word	0xff9f800f
 8007c38:	f9ff800f 	.word	0xf9ff800f

08007c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e049      	b.n	8007ce2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d106      	bne.n	8007c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f841 	bl	8007cea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f000 f9da 	bl	8008034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007cf2:	bf00      	nop
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr
	...

08007d00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d001      	beq.n	8007d18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e04f      	b.n	8007db8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	68da      	ldr	r2, [r3, #12]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f042 0201 	orr.w	r2, r2, #1
 8007d2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a23      	ldr	r2, [pc, #140]	; (8007dc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d01d      	beq.n	8007d76 <HAL_TIM_Base_Start_IT+0x76>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d42:	d018      	beq.n	8007d76 <HAL_TIM_Base_Start_IT+0x76>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1f      	ldr	r2, [pc, #124]	; (8007dc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d013      	beq.n	8007d76 <HAL_TIM_Base_Start_IT+0x76>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a1e      	ldr	r2, [pc, #120]	; (8007dcc <HAL_TIM_Base_Start_IT+0xcc>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d00e      	beq.n	8007d76 <HAL_TIM_Base_Start_IT+0x76>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a1c      	ldr	r2, [pc, #112]	; (8007dd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d009      	beq.n	8007d76 <HAL_TIM_Base_Start_IT+0x76>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a1b      	ldr	r2, [pc, #108]	; (8007dd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d004      	beq.n	8007d76 <HAL_TIM_Base_Start_IT+0x76>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a19      	ldr	r2, [pc, #100]	; (8007dd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d115      	bne.n	8007da2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	4b17      	ldr	r3, [pc, #92]	; (8007ddc <HAL_TIM_Base_Start_IT+0xdc>)
 8007d7e:	4013      	ands	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b06      	cmp	r3, #6
 8007d86:	d015      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0xb4>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d8e:	d011      	beq.n	8007db4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0201 	orr.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da0:	e008      	b.n	8007db4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e000      	b.n	8007db6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	40012c00 	.word	0x40012c00
 8007dc8:	40000400 	.word	0x40000400
 8007dcc:	40000800 	.word	0x40000800
 8007dd0:	40000c00 	.word	0x40000c00
 8007dd4:	40013400 	.word	0x40013400
 8007dd8:	40014000 	.word	0x40014000
 8007ddc:	00010007 	.word	0x00010007

08007de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	f003 0302 	and.w	r3, r3, #2
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d020      	beq.n	8007e44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01b      	beq.n	8007e44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f06f 0202 	mvn.w	r2, #2
 8007e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f8e4 	bl	8007ff8 <HAL_TIM_IC_CaptureCallback>
 8007e30:	e005      	b.n	8007e3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f8d6 	bl	8007fe4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f8e7 	bl	800800c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f003 0304 	and.w	r3, r3, #4
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d020      	beq.n	8007e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d01b      	beq.n	8007e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0204 	mvn.w	r2, #4
 8007e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2202      	movs	r2, #2
 8007e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d003      	beq.n	8007e7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f8be 	bl	8007ff8 <HAL_TIM_IC_CaptureCallback>
 8007e7c:	e005      	b.n	8007e8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f8b0 	bl	8007fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f8c1 	bl	800800c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d020      	beq.n	8007edc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01b      	beq.n	8007edc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f06f 0208 	mvn.w	r2, #8
 8007eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69db      	ldr	r3, [r3, #28]
 8007eba:	f003 0303 	and.w	r3, r3, #3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f898 	bl	8007ff8 <HAL_TIM_IC_CaptureCallback>
 8007ec8:	e005      	b.n	8007ed6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f88a 	bl	8007fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f89b 	bl	800800c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	f003 0310 	and.w	r3, r3, #16
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d020      	beq.n	8007f28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d01b      	beq.n	8007f28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f06f 0210 	mvn.w	r2, #16
 8007ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2208      	movs	r2, #8
 8007efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d003      	beq.n	8007f16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f872 	bl	8007ff8 <HAL_TIM_IC_CaptureCallback>
 8007f14:	e005      	b.n	8007f22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f864 	bl	8007fe4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f875 	bl	800800c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00c      	beq.n	8007f4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d007      	beq.n	8007f4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f06f 0201 	mvn.w	r2, #1
 8007f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7fa fcfc 	bl	8002944 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00c      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d007      	beq.n	8007f70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f906 	bl	800817c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00c      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f8fe 	bl	8008190 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00c      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d007      	beq.n	8007fb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f834 	bl	8008020 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f003 0320 	and.w	r3, r3, #32
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00c      	beq.n	8007fdc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f003 0320 	and.w	r3, r3, #32
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f06f 0220 	mvn.w	r2, #32
 8007fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8c6 	bl	8008168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a40      	ldr	r2, [pc, #256]	; (8008148 <TIM_Base_SetConfig+0x114>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d013      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008052:	d00f      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a3d      	ldr	r2, [pc, #244]	; (800814c <TIM_Base_SetConfig+0x118>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00b      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a3c      	ldr	r2, [pc, #240]	; (8008150 <TIM_Base_SetConfig+0x11c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d007      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a3b      	ldr	r2, [pc, #236]	; (8008154 <TIM_Base_SetConfig+0x120>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_Base_SetConfig+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a3a      	ldr	r2, [pc, #232]	; (8008158 <TIM_Base_SetConfig+0x124>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d108      	bne.n	8008086 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800807a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a2f      	ldr	r2, [pc, #188]	; (8008148 <TIM_Base_SetConfig+0x114>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d01f      	beq.n	80080ce <TIM_Base_SetConfig+0x9a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008094:	d01b      	beq.n	80080ce <TIM_Base_SetConfig+0x9a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a2c      	ldr	r2, [pc, #176]	; (800814c <TIM_Base_SetConfig+0x118>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d017      	beq.n	80080ce <TIM_Base_SetConfig+0x9a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a2b      	ldr	r2, [pc, #172]	; (8008150 <TIM_Base_SetConfig+0x11c>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d013      	beq.n	80080ce <TIM_Base_SetConfig+0x9a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a2a      	ldr	r2, [pc, #168]	; (8008154 <TIM_Base_SetConfig+0x120>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d00f      	beq.n	80080ce <TIM_Base_SetConfig+0x9a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a29      	ldr	r2, [pc, #164]	; (8008158 <TIM_Base_SetConfig+0x124>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d00b      	beq.n	80080ce <TIM_Base_SetConfig+0x9a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a28      	ldr	r2, [pc, #160]	; (800815c <TIM_Base_SetConfig+0x128>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d007      	beq.n	80080ce <TIM_Base_SetConfig+0x9a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a27      	ldr	r2, [pc, #156]	; (8008160 <TIM_Base_SetConfig+0x12c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d003      	beq.n	80080ce <TIM_Base_SetConfig+0x9a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a26      	ldr	r2, [pc, #152]	; (8008164 <TIM_Base_SetConfig+0x130>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d108      	bne.n	80080e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	4313      	orrs	r3, r2
 80080de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a10      	ldr	r2, [pc, #64]	; (8008148 <TIM_Base_SetConfig+0x114>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d00f      	beq.n	800812c <TIM_Base_SetConfig+0xf8>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a12      	ldr	r2, [pc, #72]	; (8008158 <TIM_Base_SetConfig+0x124>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00b      	beq.n	800812c <TIM_Base_SetConfig+0xf8>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a11      	ldr	r2, [pc, #68]	; (800815c <TIM_Base_SetConfig+0x128>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d007      	beq.n	800812c <TIM_Base_SetConfig+0xf8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a10      	ldr	r2, [pc, #64]	; (8008160 <TIM_Base_SetConfig+0x12c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d003      	beq.n	800812c <TIM_Base_SetConfig+0xf8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a0f      	ldr	r2, [pc, #60]	; (8008164 <TIM_Base_SetConfig+0x130>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d103      	bne.n	8008134 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	691a      	ldr	r2, [r3, #16]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	615a      	str	r2, [r3, #20]
}
 800813a:	bf00      	nop
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40012c00 	.word	0x40012c00
 800814c:	40000400 	.word	0x40000400
 8008150:	40000800 	.word	0x40000800
 8008154:	40000c00 	.word	0x40000c00
 8008158:	40013400 	.word	0x40013400
 800815c:	40014000 	.word	0x40014000
 8008160:	40014400 	.word	0x40014400
 8008164:	40014800 	.word	0x40014800

08008168 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	e042      	b.n	800823c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d106      	bne.n	80081ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7fb fbbb 	bl	8003944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2224      	movs	r2, #36	; 0x24
 80081d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0201 	bic.w	r2, r2, #1
 80081e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fbb4 	bl	800895c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f8b5 	bl	8008364 <UART_SetConfig>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e01b      	b.n	800823c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	689a      	ldr	r2, [r3, #8]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f042 0201 	orr.w	r2, r2, #1
 8008232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fc33 	bl	8008aa0 <UART_CheckIdleState>
 800823a:	4603      	mov	r3, r0
}
 800823c:	4618      	mov	r0, r3
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08a      	sub	sp, #40	; 0x28
 8008248:	af02      	add	r7, sp, #8
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	603b      	str	r3, [r7, #0]
 8008250:	4613      	mov	r3, r2
 8008252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825a:	2b20      	cmp	r3, #32
 800825c:	d17c      	bne.n	8008358 <HAL_UART_Transmit+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <HAL_UART_Transmit+0x26>
 8008264:	88fb      	ldrh	r3, [r7, #6]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e075      	b.n	800835a <HAL_UART_Transmit+0x116>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2221      	movs	r2, #33	; 0x21
 800827a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800827e:	f7fb fd91 	bl	8003da4 <HAL_GetTick>
 8008282:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	88fa      	ldrh	r2, [r7, #6]
 8008288:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800829c:	d108      	bne.n	80082b0 <HAL_UART_Transmit+0x6c>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082a6:	2300      	movs	r3, #0
 80082a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	61bb      	str	r3, [r7, #24]
 80082ae:	e003      	b.n	80082b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082b8:	e031      	b.n	800831e <HAL_UART_Transmit+0xda>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	9300      	str	r3, [sp, #0]
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2200      	movs	r2, #0
 80082c2:	2180      	movs	r1, #128	; 0x80
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fc95 	bl	8008bf4 <UART_WaitOnFlagUntilTimeout>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e03e      	b.n	800835a <HAL_UART_Transmit+0x116>
      }
      if (pdata8bits == NULL)
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10b      	bne.n	80082fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	881a      	ldrh	r2, [r3, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082ee:	b292      	uxth	r2, r2
 80082f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	3302      	adds	r3, #2
 80082f6:	61bb      	str	r3, [r7, #24]
 80082f8:	e008      	b.n	800830c <HAL_UART_Transmit+0xc8>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	781a      	ldrb	r2, [r3, #0]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	b292      	uxth	r2, r2
 8008304:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	3301      	adds	r3, #1
 800830a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008312:	b29b      	uxth	r3, r3
 8008314:	3b01      	subs	r3, #1
 8008316:	b29a      	uxth	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1c7      	bne.n	80082ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2200      	movs	r2, #0
 8008332:	2140      	movs	r1, #64	; 0x40
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 fc5d 	bl	8008bf4 <UART_WaitOnFlagUntilTimeout>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_UART_Transmit+0x108>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2220      	movs	r2, #32
 8008344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e006      	b.n	800835a <HAL_UART_Transmit+0x116>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2220      	movs	r2, #32
 8008350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	e000      	b.n	800835a <HAL_UART_Transmit+0x116>
  }
  else
  {
    return HAL_BUSY;
 8008358:	2302      	movs	r3, #2
  }
}
 800835a:	4618      	mov	r0, r3
 800835c:	3720      	adds	r7, #32
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008368:	b08c      	sub	sp, #48	; 0x30
 800836a:	af00      	add	r7, sp, #0
 800836c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	431a      	orrs	r2, r3
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	431a      	orrs	r2, r3
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	4313      	orrs	r3, r2
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	4baa      	ldr	r3, [pc, #680]	; (800863c <UART_SetConfig+0x2d8>)
 8008394:	4013      	ands	r3, r2
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	6812      	ldr	r2, [r2, #0]
 800839a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800839c:	430b      	orrs	r3, r1
 800839e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a9f      	ldr	r2, [pc, #636]	; (8008640 <UART_SetConfig+0x2dc>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d004      	beq.n	80083d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083cc:	4313      	orrs	r3, r2
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80083da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	6812      	ldr	r2, [r2, #0]
 80083e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083e4:	430b      	orrs	r3, r1
 80083e6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ee:	f023 010f 	bic.w	r1, r3, #15
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a90      	ldr	r2, [pc, #576]	; (8008644 <UART_SetConfig+0x2e0>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d125      	bne.n	8008454 <UART_SetConfig+0xf0>
 8008408:	4b8f      	ldr	r3, [pc, #572]	; (8008648 <UART_SetConfig+0x2e4>)
 800840a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840e:	f003 0303 	and.w	r3, r3, #3
 8008412:	2b03      	cmp	r3, #3
 8008414:	d81a      	bhi.n	800844c <UART_SetConfig+0xe8>
 8008416:	a201      	add	r2, pc, #4	; (adr r2, 800841c <UART_SetConfig+0xb8>)
 8008418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841c:	0800842d 	.word	0x0800842d
 8008420:	0800843d 	.word	0x0800843d
 8008424:	08008435 	.word	0x08008435
 8008428:	08008445 	.word	0x08008445
 800842c:	2301      	movs	r3, #1
 800842e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008432:	e116      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008434:	2302      	movs	r3, #2
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800843a:	e112      	b.n	8008662 <UART_SetConfig+0x2fe>
 800843c:	2304      	movs	r3, #4
 800843e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008442:	e10e      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008444:	2308      	movs	r3, #8
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800844a:	e10a      	b.n	8008662 <UART_SetConfig+0x2fe>
 800844c:	2310      	movs	r3, #16
 800844e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008452:	e106      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a7c      	ldr	r2, [pc, #496]	; (800864c <UART_SetConfig+0x2e8>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d138      	bne.n	80084d0 <UART_SetConfig+0x16c>
 800845e:	4b7a      	ldr	r3, [pc, #488]	; (8008648 <UART_SetConfig+0x2e4>)
 8008460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008464:	f003 030c 	and.w	r3, r3, #12
 8008468:	2b0c      	cmp	r3, #12
 800846a:	d82d      	bhi.n	80084c8 <UART_SetConfig+0x164>
 800846c:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <UART_SetConfig+0x110>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	080084a9 	.word	0x080084a9
 8008478:	080084c9 	.word	0x080084c9
 800847c:	080084c9 	.word	0x080084c9
 8008480:	080084c9 	.word	0x080084c9
 8008484:	080084b9 	.word	0x080084b9
 8008488:	080084c9 	.word	0x080084c9
 800848c:	080084c9 	.word	0x080084c9
 8008490:	080084c9 	.word	0x080084c9
 8008494:	080084b1 	.word	0x080084b1
 8008498:	080084c9 	.word	0x080084c9
 800849c:	080084c9 	.word	0x080084c9
 80084a0:	080084c9 	.word	0x080084c9
 80084a4:	080084c1 	.word	0x080084c1
 80084a8:	2300      	movs	r3, #0
 80084aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ae:	e0d8      	b.n	8008662 <UART_SetConfig+0x2fe>
 80084b0:	2302      	movs	r3, #2
 80084b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084b6:	e0d4      	b.n	8008662 <UART_SetConfig+0x2fe>
 80084b8:	2304      	movs	r3, #4
 80084ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084be:	e0d0      	b.n	8008662 <UART_SetConfig+0x2fe>
 80084c0:	2308      	movs	r3, #8
 80084c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084c6:	e0cc      	b.n	8008662 <UART_SetConfig+0x2fe>
 80084c8:	2310      	movs	r3, #16
 80084ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ce:	e0c8      	b.n	8008662 <UART_SetConfig+0x2fe>
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a5e      	ldr	r2, [pc, #376]	; (8008650 <UART_SetConfig+0x2ec>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d125      	bne.n	8008526 <UART_SetConfig+0x1c2>
 80084da:	4b5b      	ldr	r3, [pc, #364]	; (8008648 <UART_SetConfig+0x2e4>)
 80084dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80084e4:	2b30      	cmp	r3, #48	; 0x30
 80084e6:	d016      	beq.n	8008516 <UART_SetConfig+0x1b2>
 80084e8:	2b30      	cmp	r3, #48	; 0x30
 80084ea:	d818      	bhi.n	800851e <UART_SetConfig+0x1ba>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d00a      	beq.n	8008506 <UART_SetConfig+0x1a2>
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d814      	bhi.n	800851e <UART_SetConfig+0x1ba>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <UART_SetConfig+0x19a>
 80084f8:	2b10      	cmp	r3, #16
 80084fa:	d008      	beq.n	800850e <UART_SetConfig+0x1aa>
 80084fc:	e00f      	b.n	800851e <UART_SetConfig+0x1ba>
 80084fe:	2300      	movs	r3, #0
 8008500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008504:	e0ad      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008506:	2302      	movs	r3, #2
 8008508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800850c:	e0a9      	b.n	8008662 <UART_SetConfig+0x2fe>
 800850e:	2304      	movs	r3, #4
 8008510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008514:	e0a5      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008516:	2308      	movs	r3, #8
 8008518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800851c:	e0a1      	b.n	8008662 <UART_SetConfig+0x2fe>
 800851e:	2310      	movs	r3, #16
 8008520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008524:	e09d      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a4a      	ldr	r2, [pc, #296]	; (8008654 <UART_SetConfig+0x2f0>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d125      	bne.n	800857c <UART_SetConfig+0x218>
 8008530:	4b45      	ldr	r3, [pc, #276]	; (8008648 <UART_SetConfig+0x2e4>)
 8008532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008536:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800853a:	2bc0      	cmp	r3, #192	; 0xc0
 800853c:	d016      	beq.n	800856c <UART_SetConfig+0x208>
 800853e:	2bc0      	cmp	r3, #192	; 0xc0
 8008540:	d818      	bhi.n	8008574 <UART_SetConfig+0x210>
 8008542:	2b80      	cmp	r3, #128	; 0x80
 8008544:	d00a      	beq.n	800855c <UART_SetConfig+0x1f8>
 8008546:	2b80      	cmp	r3, #128	; 0x80
 8008548:	d814      	bhi.n	8008574 <UART_SetConfig+0x210>
 800854a:	2b00      	cmp	r3, #0
 800854c:	d002      	beq.n	8008554 <UART_SetConfig+0x1f0>
 800854e:	2b40      	cmp	r3, #64	; 0x40
 8008550:	d008      	beq.n	8008564 <UART_SetConfig+0x200>
 8008552:	e00f      	b.n	8008574 <UART_SetConfig+0x210>
 8008554:	2300      	movs	r3, #0
 8008556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800855a:	e082      	b.n	8008662 <UART_SetConfig+0x2fe>
 800855c:	2302      	movs	r3, #2
 800855e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008562:	e07e      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008564:	2304      	movs	r3, #4
 8008566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800856a:	e07a      	b.n	8008662 <UART_SetConfig+0x2fe>
 800856c:	2308      	movs	r3, #8
 800856e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008572:	e076      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008574:	2310      	movs	r3, #16
 8008576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800857a:	e072      	b.n	8008662 <UART_SetConfig+0x2fe>
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a35      	ldr	r2, [pc, #212]	; (8008658 <UART_SetConfig+0x2f4>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d12a      	bne.n	80085dc <UART_SetConfig+0x278>
 8008586:	4b30      	ldr	r3, [pc, #192]	; (8008648 <UART_SetConfig+0x2e4>)
 8008588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800858c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008594:	d01a      	beq.n	80085cc <UART_SetConfig+0x268>
 8008596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800859a:	d81b      	bhi.n	80085d4 <UART_SetConfig+0x270>
 800859c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a0:	d00c      	beq.n	80085bc <UART_SetConfig+0x258>
 80085a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a6:	d815      	bhi.n	80085d4 <UART_SetConfig+0x270>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d003      	beq.n	80085b4 <UART_SetConfig+0x250>
 80085ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b0:	d008      	beq.n	80085c4 <UART_SetConfig+0x260>
 80085b2:	e00f      	b.n	80085d4 <UART_SetConfig+0x270>
 80085b4:	2300      	movs	r3, #0
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ba:	e052      	b.n	8008662 <UART_SetConfig+0x2fe>
 80085bc:	2302      	movs	r3, #2
 80085be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085c2:	e04e      	b.n	8008662 <UART_SetConfig+0x2fe>
 80085c4:	2304      	movs	r3, #4
 80085c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ca:	e04a      	b.n	8008662 <UART_SetConfig+0x2fe>
 80085cc:	2308      	movs	r3, #8
 80085ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d2:	e046      	b.n	8008662 <UART_SetConfig+0x2fe>
 80085d4:	2310      	movs	r3, #16
 80085d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085da:	e042      	b.n	8008662 <UART_SetConfig+0x2fe>
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a17      	ldr	r2, [pc, #92]	; (8008640 <UART_SetConfig+0x2dc>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d13a      	bne.n	800865c <UART_SetConfig+0x2f8>
 80085e6:	4b18      	ldr	r3, [pc, #96]	; (8008648 <UART_SetConfig+0x2e4>)
 80085e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80085f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085f4:	d01a      	beq.n	800862c <UART_SetConfig+0x2c8>
 80085f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80085fa:	d81b      	bhi.n	8008634 <UART_SetConfig+0x2d0>
 80085fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008600:	d00c      	beq.n	800861c <UART_SetConfig+0x2b8>
 8008602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008606:	d815      	bhi.n	8008634 <UART_SetConfig+0x2d0>
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <UART_SetConfig+0x2b0>
 800860c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008610:	d008      	beq.n	8008624 <UART_SetConfig+0x2c0>
 8008612:	e00f      	b.n	8008634 <UART_SetConfig+0x2d0>
 8008614:	2300      	movs	r3, #0
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861a:	e022      	b.n	8008662 <UART_SetConfig+0x2fe>
 800861c:	2302      	movs	r3, #2
 800861e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008622:	e01e      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008624:	2304      	movs	r3, #4
 8008626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800862a:	e01a      	b.n	8008662 <UART_SetConfig+0x2fe>
 800862c:	2308      	movs	r3, #8
 800862e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008632:	e016      	b.n	8008662 <UART_SetConfig+0x2fe>
 8008634:	2310      	movs	r3, #16
 8008636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800863a:	e012      	b.n	8008662 <UART_SetConfig+0x2fe>
 800863c:	cfff69f3 	.word	0xcfff69f3
 8008640:	40008000 	.word	0x40008000
 8008644:	40013800 	.word	0x40013800
 8008648:	40021000 	.word	0x40021000
 800864c:	40004400 	.word	0x40004400
 8008650:	40004800 	.word	0x40004800
 8008654:	40004c00 	.word	0x40004c00
 8008658:	40005000 	.word	0x40005000
 800865c:	2310      	movs	r3, #16
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4aae      	ldr	r2, [pc, #696]	; (8008920 <UART_SetConfig+0x5bc>)
 8008668:	4293      	cmp	r3, r2
 800866a:	f040 8097 	bne.w	800879c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800866e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008672:	2b08      	cmp	r3, #8
 8008674:	d823      	bhi.n	80086be <UART_SetConfig+0x35a>
 8008676:	a201      	add	r2, pc, #4	; (adr r2, 800867c <UART_SetConfig+0x318>)
 8008678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800867c:	080086a1 	.word	0x080086a1
 8008680:	080086bf 	.word	0x080086bf
 8008684:	080086a9 	.word	0x080086a9
 8008688:	080086bf 	.word	0x080086bf
 800868c:	080086af 	.word	0x080086af
 8008690:	080086bf 	.word	0x080086bf
 8008694:	080086bf 	.word	0x080086bf
 8008698:	080086bf 	.word	0x080086bf
 800869c:	080086b7 	.word	0x080086b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086a0:	f7fe fc96 	bl	8006fd0 <HAL_RCC_GetPCLK1Freq>
 80086a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086a6:	e010      	b.n	80086ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086a8:	4b9e      	ldr	r3, [pc, #632]	; (8008924 <UART_SetConfig+0x5c0>)
 80086aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086ac:	e00d      	b.n	80086ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ae:	f7fe fbf7 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 80086b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086b4:	e009      	b.n	80086ca <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086bc:	e005      	b.n	80086ca <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8130 	beq.w	8008932 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d6:	4a94      	ldr	r2, [pc, #592]	; (8008928 <UART_SetConfig+0x5c4>)
 80086d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086dc:	461a      	mov	r2, r3
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	685a      	ldr	r2, [r3, #4]
 80086ea:	4613      	mov	r3, r2
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	4413      	add	r3, r2
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d305      	bcc.n	8008702 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d903      	bls.n	800870a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008708:	e113      	b.n	8008932 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800870a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870c:	2200      	movs	r2, #0
 800870e:	60bb      	str	r3, [r7, #8]
 8008710:	60fa      	str	r2, [r7, #12]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008716:	4a84      	ldr	r2, [pc, #528]	; (8008928 <UART_SetConfig+0x5c4>)
 8008718:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800871c:	b29b      	uxth	r3, r3
 800871e:	2200      	movs	r2, #0
 8008720:	603b      	str	r3, [r7, #0]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008728:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800872c:	f7f8 fac4 	bl	8000cb8 <__aeabi_uldivmod>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4610      	mov	r0, r2
 8008736:	4619      	mov	r1, r3
 8008738:	f04f 0200 	mov.w	r2, #0
 800873c:	f04f 0300 	mov.w	r3, #0
 8008740:	020b      	lsls	r3, r1, #8
 8008742:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008746:	0202      	lsls	r2, r0, #8
 8008748:	6979      	ldr	r1, [r7, #20]
 800874a:	6849      	ldr	r1, [r1, #4]
 800874c:	0849      	lsrs	r1, r1, #1
 800874e:	2000      	movs	r0, #0
 8008750:	460c      	mov	r4, r1
 8008752:	4605      	mov	r5, r0
 8008754:	eb12 0804 	adds.w	r8, r2, r4
 8008758:	eb43 0905 	adc.w	r9, r3, r5
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	469a      	mov	sl, r3
 8008764:	4693      	mov	fp, r2
 8008766:	4652      	mov	r2, sl
 8008768:	465b      	mov	r3, fp
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f8 faa3 	bl	8000cb8 <__aeabi_uldivmod>
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	4613      	mov	r3, r2
 8008778:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008780:	d308      	bcc.n	8008794 <UART_SetConfig+0x430>
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008788:	d204      	bcs.n	8008794 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6a3a      	ldr	r2, [r7, #32]
 8008790:	60da      	str	r2, [r3, #12]
 8008792:	e0ce      	b.n	8008932 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800879a:	e0ca      	b.n	8008932 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	69db      	ldr	r3, [r3, #28]
 80087a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a4:	d166      	bne.n	8008874 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80087a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087aa:	2b08      	cmp	r3, #8
 80087ac:	d827      	bhi.n	80087fe <UART_SetConfig+0x49a>
 80087ae:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <UART_SetConfig+0x450>)
 80087b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b4:	080087d9 	.word	0x080087d9
 80087b8:	080087e1 	.word	0x080087e1
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	080087ff 	.word	0x080087ff
 80087c4:	080087ef 	.word	0x080087ef
 80087c8:	080087ff 	.word	0x080087ff
 80087cc:	080087ff 	.word	0x080087ff
 80087d0:	080087ff 	.word	0x080087ff
 80087d4:	080087f7 	.word	0x080087f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087d8:	f7fe fbfa 	bl	8006fd0 <HAL_RCC_GetPCLK1Freq>
 80087dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087de:	e014      	b.n	800880a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087e0:	f7fe fc0c 	bl	8006ffc <HAL_RCC_GetPCLK2Freq>
 80087e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087e6:	e010      	b.n	800880a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087e8:	4b4e      	ldr	r3, [pc, #312]	; (8008924 <UART_SetConfig+0x5c0>)
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087ec:	e00d      	b.n	800880a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ee:	f7fe fb57 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 80087f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087f4:	e009      	b.n	800880a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087fc:	e005      	b.n	800880a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008808:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 8090 	beq.w	8008932 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008816:	4a44      	ldr	r2, [pc, #272]	; (8008928 <UART_SetConfig+0x5c4>)
 8008818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800881c:	461a      	mov	r2, r3
 800881e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008820:	fbb3 f3f2 	udiv	r3, r3, r2
 8008824:	005a      	lsls	r2, r3, #1
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	085b      	lsrs	r3, r3, #1
 800882c:	441a      	add	r2, r3
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	fbb2 f3f3 	udiv	r3, r2, r3
 8008836:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	2b0f      	cmp	r3, #15
 800883c:	d916      	bls.n	800886c <UART_SetConfig+0x508>
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008844:	d212      	bcs.n	800886c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	b29b      	uxth	r3, r3
 800884a:	f023 030f 	bic.w	r3, r3, #15
 800884e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008850:	6a3b      	ldr	r3, [r7, #32]
 8008852:	085b      	lsrs	r3, r3, #1
 8008854:	b29b      	uxth	r3, r3
 8008856:	f003 0307 	and.w	r3, r3, #7
 800885a:	b29a      	uxth	r2, r3
 800885c:	8bfb      	ldrh	r3, [r7, #30]
 800885e:	4313      	orrs	r3, r2
 8008860:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	8bfa      	ldrh	r2, [r7, #30]
 8008868:	60da      	str	r2, [r3, #12]
 800886a:	e062      	b.n	8008932 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008872:	e05e      	b.n	8008932 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008878:	2b08      	cmp	r3, #8
 800887a:	d828      	bhi.n	80088ce <UART_SetConfig+0x56a>
 800887c:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <UART_SetConfig+0x520>)
 800887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008882:	bf00      	nop
 8008884:	080088a9 	.word	0x080088a9
 8008888:	080088b1 	.word	0x080088b1
 800888c:	080088b9 	.word	0x080088b9
 8008890:	080088cf 	.word	0x080088cf
 8008894:	080088bf 	.word	0x080088bf
 8008898:	080088cf 	.word	0x080088cf
 800889c:	080088cf 	.word	0x080088cf
 80088a0:	080088cf 	.word	0x080088cf
 80088a4:	080088c7 	.word	0x080088c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088a8:	f7fe fb92 	bl	8006fd0 <HAL_RCC_GetPCLK1Freq>
 80088ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ae:	e014      	b.n	80088da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088b0:	f7fe fba4 	bl	8006ffc <HAL_RCC_GetPCLK2Freq>
 80088b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088b6:	e010      	b.n	80088da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088b8:	4b1a      	ldr	r3, [pc, #104]	; (8008924 <UART_SetConfig+0x5c0>)
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088bc:	e00d      	b.n	80088da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088be:	f7fe faef 	bl	8006ea0 <HAL_RCC_GetSysClockFreq>
 80088c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088c4:	e009      	b.n	80088da <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088cc:	e005      	b.n	80088da <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088d8:	bf00      	nop
    }

    if (pclk != 0U)
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d028      	beq.n	8008932 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	4a10      	ldr	r2, [pc, #64]	; (8008928 <UART_SetConfig+0x5c4>)
 80088e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ea:	461a      	mov	r2, r3
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	fbb3 f2f2 	udiv	r2, r3, r2
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	085b      	lsrs	r3, r3, #1
 80088f8:	441a      	add	r2, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008902:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008904:	6a3b      	ldr	r3, [r7, #32]
 8008906:	2b0f      	cmp	r3, #15
 8008908:	d910      	bls.n	800892c <UART_SetConfig+0x5c8>
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008910:	d20c      	bcs.n	800892c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	b29a      	uxth	r2, r3
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	60da      	str	r2, [r3, #12]
 800891c:	e009      	b.n	8008932 <UART_SetConfig+0x5ce>
 800891e:	bf00      	nop
 8008920:	40008000 	.word	0x40008000
 8008924:	00f42400 	.word	0x00f42400
 8008928:	0800efb4 	.word	0x0800efb4
      }
      else
      {
        ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2201      	movs	r2, #1
 8008936:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2201      	movs	r2, #1
 800893e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2200      	movs	r2, #0
 8008946:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2200      	movs	r2, #0
 800894c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800894e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008952:	4618      	mov	r0, r3
 8008954:	3730      	adds	r7, #48	; 0x30
 8008956:	46bd      	mov	sp, r7
 8008958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800895c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008968:	f003 0308 	and.w	r3, r3, #8
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00a      	beq.n	8008986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800898a:	f003 0301 	and.w	r3, r3, #1
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ac:	f003 0302 	and.w	r3, r3, #2
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00a      	beq.n	80089ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00a      	beq.n	80089ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	f003 0310 	and.w	r3, r3, #16
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00a      	beq.n	8008a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00a      	beq.n	8008a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d01a      	beq.n	8008a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a5a:	d10a      	bne.n	8008a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	430a      	orrs	r2, r1
 8008a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00a      	beq.n	8008a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	605a      	str	r2, [r3, #4]
  }
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b098      	sub	sp, #96	; 0x60
 8008aa4:	af02      	add	r7, sp, #8
 8008aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ab0:	f7fb f978 	bl	8003da4 <HAL_GetTick>
 8008ab4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0308 	and.w	r3, r3, #8
 8008ac0:	2b08      	cmp	r3, #8
 8008ac2:	d12f      	bne.n	8008b24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ac8:	9300      	str	r3, [sp, #0]
 8008aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008acc:	2200      	movs	r2, #0
 8008ace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f88e 	bl	8008bf4 <UART_WaitOnFlagUntilTimeout>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d022      	beq.n	8008b24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008af2:	653b      	str	r3, [r7, #80]	; 0x50
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008afc:	647b      	str	r3, [r7, #68]	; 0x44
 8008afe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e6      	bne.n	8008ade <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b20:	2303      	movs	r3, #3
 8008b22:	e063      	b.n	8008bec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0304 	and.w	r3, r3, #4
 8008b2e:	2b04      	cmp	r3, #4
 8008b30:	d149      	bne.n	8008bc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 f857 	bl	8008bf4 <UART_WaitOnFlagUntilTimeout>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d03c      	beq.n	8008bc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	623b      	str	r3, [r7, #32]
   return(result);
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e6      	bne.n	8008b4c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3308      	adds	r3, #8
 8008b84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f023 0301 	bic.w	r3, r3, #1
 8008b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b9e:	61fa      	str	r2, [r7, #28]
 8008ba0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	69b9      	ldr	r1, [r7, #24]
 8008ba4:	69fa      	ldr	r2, [r7, #28]
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	617b      	str	r3, [r7, #20]
   return(result);
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e5      	bne.n	8008b7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e012      	b.n	8008bec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3758      	adds	r7, #88	; 0x58
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	603b      	str	r3, [r7, #0]
 8008c00:	4613      	mov	r3, r2
 8008c02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c04:	e049      	b.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c0c:	d045      	beq.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c0e:	f7fb f8c9 	bl	8003da4 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	69ba      	ldr	r2, [r7, #24]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d302      	bcc.n	8008c24 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d101      	bne.n	8008c28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e048      	b.n	8008cba <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f003 0304 	and.w	r3, r3, #4
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d031      	beq.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	f003 0308 	and.w	r3, r3, #8
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d110      	bne.n	8008c66 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2208      	movs	r2, #8
 8008c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 f838 	bl	8008cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2208      	movs	r2, #8
 8008c56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e029      	b.n	8008cba <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c74:	d111      	bne.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 f81e 	bl	8008cc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e00f      	b.n	8008cba <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69da      	ldr	r2, [r3, #28]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	bf0c      	ite	eq
 8008caa:	2301      	moveq	r3, #1
 8008cac:	2300      	movne	r3, #0
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d0a6      	beq.n	8008c06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b095      	sub	sp, #84	; 0x54
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd2:	e853 3f00 	ldrex	r3, [r3]
 8008cd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8008cea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cf0:	e841 2300 	strex	r3, r2, [r1]
 8008cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1e6      	bne.n	8008cca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	3308      	adds	r3, #8
 8008d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d12:	f023 0301 	bic.w	r3, r3, #1
 8008d16:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e3      	bne.n	8008cfc <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d118      	bne.n	8008d6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	e853 3f00 	ldrex	r3, [r3]
 8008d48:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f023 0310 	bic.w	r3, r3, #16
 8008d50:	647b      	str	r3, [r7, #68]	; 0x44
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	461a      	mov	r2, r3
 8008d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d5a:	61bb      	str	r3, [r7, #24]
 8008d5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5e:	6979      	ldr	r1, [r7, #20]
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	e841 2300 	strex	r3, r2, [r1]
 8008d66:	613b      	str	r3, [r7, #16]
   return(result);
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1e6      	bne.n	8008d3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2220      	movs	r2, #32
 8008d72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008d82:	bf00      	nop
 8008d84:	3754      	adds	r7, #84	; 0x54
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr

08008d8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d8e:	b480      	push	{r7}
 8008d90:	b085      	sub	sp, #20
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_UARTEx_DisableFifoMode+0x16>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e027      	b.n	8008df4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2224      	movs	r2, #36	; 0x24
 8008db0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f022 0201 	bic.w	r2, r2, #1
 8008dca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3714      	adds	r7, #20
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e02d      	b.n	8008e74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2224      	movs	r2, #36	; 0x24
 8008e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0201 	bic.w	r2, r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	683a      	ldr	r2, [r7, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f84f 	bl	8008ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d101      	bne.n	8008e94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e90:	2302      	movs	r3, #2
 8008e92:	e02d      	b.n	8008ef0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2224      	movs	r2, #36	; 0x24
 8008ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 0201 	bic.w	r2, r2, #1
 8008eba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 f811 	bl	8008ef8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d108      	bne.n	8008f1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2201      	movs	r2, #1
 8008f14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f18:	e031      	b.n	8008f7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f1a:	2308      	movs	r3, #8
 8008f1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f1e:	2308      	movs	r3, #8
 8008f20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	0e5b      	lsrs	r3, r3, #25
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	f003 0307 	and.w	r3, r3, #7
 8008f30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	0f5b      	lsrs	r3, r3, #29
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 0307 	and.w	r3, r3, #7
 8008f40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	7b3a      	ldrb	r2, [r7, #12]
 8008f46:	4911      	ldr	r1, [pc, #68]	; (8008f8c <UARTEx_SetNbDataToProcess+0x94>)
 8008f48:	5c8a      	ldrb	r2, [r1, r2]
 8008f4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f4e:	7b3a      	ldrb	r2, [r7, #12]
 8008f50:	490f      	ldr	r1, [pc, #60]	; (8008f90 <UARTEx_SetNbDataToProcess+0x98>)
 8008f52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f54:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	7b7a      	ldrb	r2, [r7, #13]
 8008f64:	4909      	ldr	r1, [pc, #36]	; (8008f8c <UARTEx_SetNbDataToProcess+0x94>)
 8008f66:	5c8a      	ldrb	r2, [r1, r2]
 8008f68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f6c:	7b7a      	ldrb	r2, [r7, #13]
 8008f6e:	4908      	ldr	r1, [pc, #32]	; (8008f90 <UARTEx_SetNbDataToProcess+0x98>)
 8008f70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f72:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f7e:	bf00      	nop
 8008f80:	3714      	adds	r7, #20
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	0800efcc 	.word	0x0800efcc
 8008f90:	0800efd4 	.word	0x0800efd4

08008f94 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008fa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fa6:	2b84      	cmp	r3, #132	; 0x84
 8008fa8:	d005      	beq.n	8008fb6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008faa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	3303      	adds	r3, #3
 8008fb4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008fc8:	f000 faf6 	bl	80095b8 <vTaskStartScheduler>
  
  return osOK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd4:	b089      	sub	sp, #36	; 0x24
 8008fd6:	af04      	add	r7, sp, #16
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d020      	beq.n	8009026 <osThreadCreate+0x54>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01c      	beq.n	8009026 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685c      	ldr	r4, [r3, #4]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	691e      	ldr	r6, [r3, #16]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff ffc8 	bl	8008f94 <makeFreeRtosPriority>
 8009004:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	695b      	ldr	r3, [r3, #20]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800900e:	9202      	str	r2, [sp, #8]
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	9100      	str	r1, [sp, #0]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	4632      	mov	r2, r6
 8009018:	4629      	mov	r1, r5
 800901a:	4620      	mov	r0, r4
 800901c:	f000 f8ed 	bl	80091fa <xTaskCreateStatic>
 8009020:	4603      	mov	r3, r0
 8009022:	60fb      	str	r3, [r7, #12]
 8009024:	e01c      	b.n	8009060 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	685c      	ldr	r4, [r3, #4]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009032:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800903a:	4618      	mov	r0, r3
 800903c:	f7ff ffaa 	bl	8008f94 <makeFreeRtosPriority>
 8009040:	4602      	mov	r2, r0
 8009042:	f107 030c 	add.w	r3, r7, #12
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	9200      	str	r2, [sp, #0]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	4632      	mov	r2, r6
 800904e:	4629      	mov	r1, r5
 8009050:	4620      	mov	r0, r4
 8009052:	f000 f92f 	bl	80092b4 <xTaskCreate>
 8009056:	4603      	mov	r3, r0
 8009058:	2b01      	cmp	r3, #1
 800905a:	d001      	beq.n	8009060 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800905c:	2300      	movs	r3, #0
 800905e:	e000      	b.n	8009062 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009060:	68fb      	ldr	r3, [r7, #12]
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800906a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800906a:	b580      	push	{r7, lr}
 800906c:	b084      	sub	sp, #16
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <osDelay+0x16>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	e000      	b.n	8009082 <osDelay+0x18>
 8009080:	2301      	movs	r3, #1
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fa64 	bl	8009550 <vTaskDelay>
  
  return osOK;
 8009088:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800908a:	4618      	mov	r0, r3
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}

08009092 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f103 0208 	add.w	r2, r3, #8
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f103 0208 	add.w	r2, r3, #8
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f103 0208 	add.w	r2, r3, #8
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090ec:	b480      	push	{r7}
 80090ee:	b085      	sub	sp, #20
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
 80090f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	1c5a      	adds	r2, r3, #1
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	601a      	str	r2, [r3, #0]
}
 8009128:	bf00      	nop
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009134:	b480      	push	{r7}
 8009136:	b085      	sub	sp, #20
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800914a:	d103      	bne.n	8009154 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	e00c      	b.n	800916e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3308      	adds	r3, #8
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	e002      	b.n	8009162 <vListInsert+0x2e>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	429a      	cmp	r2, r3
 800916c:	d2f6      	bcs.n	800915c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	601a      	str	r2, [r3, #0]
}
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6892      	ldr	r2, [r2, #8]
 80091bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	6852      	ldr	r2, [r2, #4]
 80091c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d103      	bne.n	80091da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	689a      	ldr	r2, [r3, #8]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	1e5a      	subs	r2, r3, #1
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3714      	adds	r7, #20
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b08e      	sub	sp, #56	; 0x38
 80091fe:	af04      	add	r7, sp, #16
 8009200:	60f8      	str	r0, [r7, #12]
 8009202:	60b9      	str	r1, [r7, #8]
 8009204:	607a      	str	r2, [r7, #4]
 8009206:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10a      	bne.n	8009224 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <xTaskCreateStatic+0x46>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	61fb      	str	r3, [r7, #28]
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009240:	23a0      	movs	r3, #160	; 0xa0
 8009242:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	2ba0      	cmp	r3, #160	; 0xa0
 8009248:	d00a      	beq.n	8009260 <xTaskCreateStatic+0x66>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	61bb      	str	r3, [r7, #24]
}
 800925c:	bf00      	nop
 800925e:	e7fe      	b.n	800925e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009260:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01e      	beq.n	80092a6 <xTaskCreateStatic+0xac>
 8009268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926a:	2b00      	cmp	r3, #0
 800926c:	d01b      	beq.n	80092a6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800926e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009270:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009276:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	2202      	movs	r2, #2
 800927c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009280:	2300      	movs	r3, #0
 8009282:	9303      	str	r3, [sp, #12]
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	9302      	str	r3, [sp, #8]
 8009288:	f107 0314 	add.w	r3, r7, #20
 800928c:	9301      	str	r3, [sp, #4]
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	68b9      	ldr	r1, [r7, #8]
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f851 	bl	8009340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800929e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092a0:	f000 f8ec 	bl	800947c <prvAddNewTaskToReadyList>
 80092a4:	e001      	b.n	80092aa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092aa:	697b      	ldr	r3, [r7, #20]
	}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3728      	adds	r7, #40	; 0x28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08c      	sub	sp, #48	; 0x30
 80092b8:	af04      	add	r7, sp, #16
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	4613      	mov	r3, r2
 80092c2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80092c4:	88fb      	ldrh	r3, [r7, #6]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fef5 	bl	800a0b8 <pvPortMalloc>
 80092ce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00e      	beq.n	80092f4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80092d6:	20a0      	movs	r0, #160	; 0xa0
 80092d8:	f000 feee 	bl	800a0b8 <pvPortMalloc>
 80092dc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	631a      	str	r2, [r3, #48]	; 0x30
 80092ea:	e005      	b.n	80092f8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80092ec:	6978      	ldr	r0, [r7, #20]
 80092ee:	f000 ffaf 	bl	800a250 <vPortFree>
 80092f2:	e001      	b.n	80092f8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d017      	beq.n	800932e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	2200      	movs	r2, #0
 8009302:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	2300      	movs	r3, #0
 800930a:	9303      	str	r3, [sp, #12]
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	9302      	str	r3, [sp, #8]
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	9301      	str	r3, [sp, #4]
 8009314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	68b9      	ldr	r1, [r7, #8]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 f80f 	bl	8009340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009322:	69f8      	ldr	r0, [r7, #28]
 8009324:	f000 f8aa 	bl	800947c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009328:	2301      	movs	r3, #1
 800932a:	61bb      	str	r3, [r7, #24]
 800932c:	e002      	b.n	8009334 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800932e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009332:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009334:	69bb      	ldr	r3, [r7, #24]
	}
 8009336:	4618      	mov	r0, r3
 8009338:	3720      	adds	r7, #32
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
	...

08009340 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b088      	sub	sp, #32
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
 800934c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009358:	3b01      	subs	r3, #1
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	4413      	add	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f023 0307 	bic.w	r3, r3, #7
 8009366:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	f003 0307 	and.w	r3, r3, #7
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00a      	beq.n	8009388 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	617b      	str	r3, [r7, #20]
}
 8009384:	bf00      	nop
 8009386:	e7fe      	b.n	8009386 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d01f      	beq.n	80093ce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800938e:	2300      	movs	r3, #0
 8009390:	61fb      	str	r3, [r7, #28]
 8009392:	e012      	b.n	80093ba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	4413      	add	r3, r2
 800939a:	7819      	ldrb	r1, [r3, #0]
 800939c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4413      	add	r3, r2
 80093a2:	3334      	adds	r3, #52	; 0x34
 80093a4:	460a      	mov	r2, r1
 80093a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80093a8:	68ba      	ldr	r2, [r7, #8]
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	4413      	add	r3, r2
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d006      	beq.n	80093c2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	3301      	adds	r3, #1
 80093b8:	61fb      	str	r3, [r7, #28]
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	2b0f      	cmp	r3, #15
 80093be:	d9e9      	bls.n	8009394 <prvInitialiseNewTask+0x54>
 80093c0:	e000      	b.n	80093c4 <prvInitialiseNewTask+0x84>
			{
				break;
 80093c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093cc:	e003      	b.n	80093d6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80093ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d8:	2b06      	cmp	r3, #6
 80093da:	d901      	bls.n	80093e0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093dc:	2306      	movs	r3, #6
 80093de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80093e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80093e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093ea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80093ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ee:	2200      	movs	r2, #0
 80093f0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	3304      	adds	r3, #4
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7ff fe6b 	bl	80090d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80093fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093fe:	3318      	adds	r3, #24
 8009400:	4618      	mov	r0, r3
 8009402:	f7ff fe66 	bl	80090d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800940a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800940c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940e:	f1c3 0207 	rsb	r2, r3, #7
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	2200      	movs	r2, #0
 8009420:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009426:	2200      	movs	r2, #0
 8009428:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942e:	334c      	adds	r3, #76	; 0x4c
 8009430:	224c      	movs	r2, #76	; 0x4c
 8009432:	2100      	movs	r1, #0
 8009434:	4618      	mov	r0, r3
 8009436:	f002 fe29 	bl	800c08c <memset>
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943c:	4a0c      	ldr	r2, [pc, #48]	; (8009470 <prvInitialiseNewTask+0x130>)
 800943e:	651a      	str	r2, [r3, #80]	; 0x50
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	4a0c      	ldr	r2, [pc, #48]	; (8009474 <prvInitialiseNewTask+0x134>)
 8009444:	655a      	str	r2, [r3, #84]	; 0x54
 8009446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009448:	4a0b      	ldr	r2, [pc, #44]	; (8009478 <prvInitialiseNewTask+0x138>)
 800944a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	69b8      	ldr	r0, [r7, #24]
 8009452:	f000 fc1f 	bl	8009c94 <pxPortInitialiseStack>
 8009456:	4602      	mov	r2, r0
 8009458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d002      	beq.n	8009468 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009466:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009468:	bf00      	nop
 800946a:	3720      	adds	r7, #32
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	20001524 	.word	0x20001524
 8009474:	2000158c 	.word	0x2000158c
 8009478:	200015f4 	.word	0x200015f4

0800947c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009484:	f000 fd36 	bl	8009ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009488:	4b2a      	ldr	r3, [pc, #168]	; (8009534 <prvAddNewTaskToReadyList+0xb8>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3301      	adds	r3, #1
 800948e:	4a29      	ldr	r2, [pc, #164]	; (8009534 <prvAddNewTaskToReadyList+0xb8>)
 8009490:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009492:	4b29      	ldr	r3, [pc, #164]	; (8009538 <prvAddNewTaskToReadyList+0xbc>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d109      	bne.n	80094ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800949a:	4a27      	ldr	r2, [pc, #156]	; (8009538 <prvAddNewTaskToReadyList+0xbc>)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094a0:	4b24      	ldr	r3, [pc, #144]	; (8009534 <prvAddNewTaskToReadyList+0xb8>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d110      	bne.n	80094ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094a8:	f000 facc 	bl	8009a44 <prvInitialiseTaskLists>
 80094ac:	e00d      	b.n	80094ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094ae:	4b23      	ldr	r3, [pc, #140]	; (800953c <prvAddNewTaskToReadyList+0xc0>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d109      	bne.n	80094ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094b6:	4b20      	ldr	r3, [pc, #128]	; (8009538 <prvAddNewTaskToReadyList+0xbc>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d802      	bhi.n	80094ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094c4:	4a1c      	ldr	r2, [pc, #112]	; (8009538 <prvAddNewTaskToReadyList+0xbc>)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094ca:	4b1d      	ldr	r3, [pc, #116]	; (8009540 <prvAddNewTaskToReadyList+0xc4>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3301      	adds	r3, #1
 80094d0:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <prvAddNewTaskToReadyList+0xc4>)
 80094d2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	2201      	movs	r2, #1
 80094da:	409a      	lsls	r2, r3
 80094dc:	4b19      	ldr	r3, [pc, #100]	; (8009544 <prvAddNewTaskToReadyList+0xc8>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4313      	orrs	r3, r2
 80094e2:	4a18      	ldr	r2, [pc, #96]	; (8009544 <prvAddNewTaskToReadyList+0xc8>)
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ea:	4613      	mov	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4a15      	ldr	r2, [pc, #84]	; (8009548 <prvAddNewTaskToReadyList+0xcc>)
 80094f4:	441a      	add	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	3304      	adds	r3, #4
 80094fa:	4619      	mov	r1, r3
 80094fc:	4610      	mov	r0, r2
 80094fe:	f7ff fdf5 	bl	80090ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009502:	f000 fd27 	bl	8009f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009506:	4b0d      	ldr	r3, [pc, #52]	; (800953c <prvAddNewTaskToReadyList+0xc0>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00e      	beq.n	800952c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800950e:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <prvAddNewTaskToReadyList+0xbc>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009518:	429a      	cmp	r2, r3
 800951a:	d207      	bcs.n	800952c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800951c:	4b0b      	ldr	r3, [pc, #44]	; (800954c <prvAddNewTaskToReadyList+0xd0>)
 800951e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800952c:	bf00      	nop
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20000918 	.word	0x20000918
 8009538:	20000818 	.word	0x20000818
 800953c:	20000924 	.word	0x20000924
 8009540:	20000934 	.word	0x20000934
 8009544:	20000920 	.word	0x20000920
 8009548:	2000081c 	.word	0x2000081c
 800954c:	e000ed04 	.word	0xe000ed04

08009550 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009558:	2300      	movs	r3, #0
 800955a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d017      	beq.n	8009592 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <vTaskDelay+0x60>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <vTaskDelay+0x30>
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	60bb      	str	r3, [r7, #8]
}
 800957c:	bf00      	nop
 800957e:	e7fe      	b.n	800957e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009580:	f000 f884 	bl	800968c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009584:	2100      	movs	r1, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f000 fb1e 	bl	8009bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800958c:	f000 f88c 	bl	80096a8 <xTaskResumeAll>
 8009590:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d107      	bne.n	80095a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009598:	4b06      	ldr	r3, [pc, #24]	; (80095b4 <vTaskDelay+0x64>)
 800959a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095a8:	bf00      	nop
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	20000940 	.word	0x20000940
 80095b4:	e000ed04 	.word	0xe000ed04

080095b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b08a      	sub	sp, #40	; 0x28
 80095bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80095be:	2300      	movs	r3, #0
 80095c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80095c2:	2300      	movs	r3, #0
 80095c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80095c6:	463a      	mov	r2, r7
 80095c8:	1d39      	adds	r1, r7, #4
 80095ca:	f107 0308 	add.w	r3, r7, #8
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7f7 fd26 	bl	8001020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	9202      	str	r2, [sp, #8]
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	2300      	movs	r3, #0
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	2300      	movs	r3, #0
 80095e4:	460a      	mov	r2, r1
 80095e6:	4921      	ldr	r1, [pc, #132]	; (800966c <vTaskStartScheduler+0xb4>)
 80095e8:	4821      	ldr	r0, [pc, #132]	; (8009670 <vTaskStartScheduler+0xb8>)
 80095ea:	f7ff fe06 	bl	80091fa <xTaskCreateStatic>
 80095ee:	4603      	mov	r3, r0
 80095f0:	4a20      	ldr	r2, [pc, #128]	; (8009674 <vTaskStartScheduler+0xbc>)
 80095f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80095f4:	4b1f      	ldr	r3, [pc, #124]	; (8009674 <vTaskStartScheduler+0xbc>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80095fc:	2301      	movs	r3, #1
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	e001      	b.n	8009606 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009602:	2300      	movs	r3, #0
 8009604:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2b01      	cmp	r3, #1
 800960a:	d11b      	bne.n	8009644 <vTaskStartScheduler+0x8c>
	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	613b      	str	r3, [r7, #16]
}
 800961e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009620:	4b15      	ldr	r3, [pc, #84]	; (8009678 <vTaskStartScheduler+0xc0>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	334c      	adds	r3, #76	; 0x4c
 8009626:	4a15      	ldr	r2, [pc, #84]	; (800967c <vTaskStartScheduler+0xc4>)
 8009628:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800962a:	4b15      	ldr	r3, [pc, #84]	; (8009680 <vTaskStartScheduler+0xc8>)
 800962c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009630:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009632:	4b14      	ldr	r3, [pc, #80]	; (8009684 <vTaskStartScheduler+0xcc>)
 8009634:	2201      	movs	r2, #1
 8009636:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009638:	4b13      	ldr	r3, [pc, #76]	; (8009688 <vTaskStartScheduler+0xd0>)
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800963e:	f000 fbb7 	bl	8009db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009642:	e00e      	b.n	8009662 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800964a:	d10a      	bne.n	8009662 <vTaskStartScheduler+0xaa>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	60fb      	str	r3, [r7, #12]
}
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <vTaskStartScheduler+0xa8>
}
 8009662:	bf00      	nop
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	0800ef64 	.word	0x0800ef64
 8009670:	08009a15 	.word	0x08009a15
 8009674:	2000093c 	.word	0x2000093c
 8009678:	20000818 	.word	0x20000818
 800967c:	2000025c 	.word	0x2000025c
 8009680:	20000938 	.word	0x20000938
 8009684:	20000924 	.word	0x20000924
 8009688:	2000091c 	.word	0x2000091c

0800968c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009690:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <vTaskSuspendAll+0x18>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3301      	adds	r3, #1
 8009696:	4a03      	ldr	r2, [pc, #12]	; (80096a4 <vTaskSuspendAll+0x18>)
 8009698:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800969a:	bf00      	nop
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	20000940 	.word	0x20000940

080096a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80096b6:	4b41      	ldr	r3, [pc, #260]	; (80097bc <xTaskResumeAll+0x114>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10a      	bne.n	80096d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	603b      	str	r3, [r7, #0]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80096d4:	f000 fc0e 	bl	8009ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80096d8:	4b38      	ldr	r3, [pc, #224]	; (80097bc <xTaskResumeAll+0x114>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	3b01      	subs	r3, #1
 80096de:	4a37      	ldr	r2, [pc, #220]	; (80097bc <xTaskResumeAll+0x114>)
 80096e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e2:	4b36      	ldr	r3, [pc, #216]	; (80097bc <xTaskResumeAll+0x114>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d161      	bne.n	80097ae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80096ea:	4b35      	ldr	r3, [pc, #212]	; (80097c0 <xTaskResumeAll+0x118>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d05d      	beq.n	80097ae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80096f2:	e02e      	b.n	8009752 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f4:	4b33      	ldr	r3, [pc, #204]	; (80097c4 <xTaskResumeAll+0x11c>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	3318      	adds	r3, #24
 8009700:	4618      	mov	r0, r3
 8009702:	f7ff fd50 	bl	80091a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3304      	adds	r3, #4
 800970a:	4618      	mov	r0, r3
 800970c:	f7ff fd4b 	bl	80091a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009714:	2201      	movs	r2, #1
 8009716:	409a      	lsls	r2, r3
 8009718:	4b2b      	ldr	r3, [pc, #172]	; (80097c8 <xTaskResumeAll+0x120>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4313      	orrs	r3, r2
 800971e:	4a2a      	ldr	r2, [pc, #168]	; (80097c8 <xTaskResumeAll+0x120>)
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009726:	4613      	mov	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4a27      	ldr	r2, [pc, #156]	; (80097cc <xTaskResumeAll+0x124>)
 8009730:	441a      	add	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	3304      	adds	r3, #4
 8009736:	4619      	mov	r1, r3
 8009738:	4610      	mov	r0, r2
 800973a:	f7ff fcd7 	bl	80090ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009742:	4b23      	ldr	r3, [pc, #140]	; (80097d0 <xTaskResumeAll+0x128>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009748:	429a      	cmp	r2, r3
 800974a:	d302      	bcc.n	8009752 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800974c:	4b21      	ldr	r3, [pc, #132]	; (80097d4 <xTaskResumeAll+0x12c>)
 800974e:	2201      	movs	r2, #1
 8009750:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009752:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <xTaskResumeAll+0x11c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1cc      	bne.n	80096f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009760:	f000 fa12 	bl	8009b88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009764:	4b1c      	ldr	r3, [pc, #112]	; (80097d8 <xTaskResumeAll+0x130>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d010      	beq.n	8009792 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009770:	f000 f836 	bl	80097e0 <xTaskIncrementTick>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	d002      	beq.n	8009780 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800977a:	4b16      	ldr	r3, [pc, #88]	; (80097d4 <xTaskResumeAll+0x12c>)
 800977c:	2201      	movs	r2, #1
 800977e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3b01      	subs	r3, #1
 8009784:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d1f1      	bne.n	8009770 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800978c:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <xTaskResumeAll+0x130>)
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009792:	4b10      	ldr	r3, [pc, #64]	; (80097d4 <xTaskResumeAll+0x12c>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d009      	beq.n	80097ae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800979a:	2301      	movs	r3, #1
 800979c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800979e:	4b0f      	ldr	r3, [pc, #60]	; (80097dc <xTaskResumeAll+0x134>)
 80097a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a4:	601a      	str	r2, [r3, #0]
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097ae:	f000 fbd1 	bl	8009f54 <vPortExitCritical>

	return xAlreadyYielded;
 80097b2:	68bb      	ldr	r3, [r7, #8]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3710      	adds	r7, #16
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	20000940 	.word	0x20000940
 80097c0:	20000918 	.word	0x20000918
 80097c4:	200008d8 	.word	0x200008d8
 80097c8:	20000920 	.word	0x20000920
 80097cc:	2000081c 	.word	0x2000081c
 80097d0:	20000818 	.word	0x20000818
 80097d4:	2000092c 	.word	0x2000092c
 80097d8:	20000928 	.word	0x20000928
 80097dc:	e000ed04 	.word	0xe000ed04

080097e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80097e6:	2300      	movs	r3, #0
 80097e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097ea:	4b4e      	ldr	r3, [pc, #312]	; (8009924 <xTaskIncrementTick+0x144>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f040 808e 	bne.w	8009910 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80097f4:	4b4c      	ldr	r3, [pc, #304]	; (8009928 <xTaskIncrementTick+0x148>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3301      	adds	r3, #1
 80097fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80097fc:	4a4a      	ldr	r2, [pc, #296]	; (8009928 <xTaskIncrementTick+0x148>)
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d120      	bne.n	800984a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009808:	4b48      	ldr	r3, [pc, #288]	; (800992c <xTaskIncrementTick+0x14c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <xTaskIncrementTick+0x48>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	603b      	str	r3, [r7, #0]
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xTaskIncrementTick+0x46>
 8009828:	4b40      	ldr	r3, [pc, #256]	; (800992c <xTaskIncrementTick+0x14c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	60fb      	str	r3, [r7, #12]
 800982e:	4b40      	ldr	r3, [pc, #256]	; (8009930 <xTaskIncrementTick+0x150>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a3e      	ldr	r2, [pc, #248]	; (800992c <xTaskIncrementTick+0x14c>)
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	4a3e      	ldr	r2, [pc, #248]	; (8009930 <xTaskIncrementTick+0x150>)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6013      	str	r3, [r2, #0]
 800983c:	4b3d      	ldr	r3, [pc, #244]	; (8009934 <xTaskIncrementTick+0x154>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	3301      	adds	r3, #1
 8009842:	4a3c      	ldr	r2, [pc, #240]	; (8009934 <xTaskIncrementTick+0x154>)
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	f000 f99f 	bl	8009b88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800984a:	4b3b      	ldr	r3, [pc, #236]	; (8009938 <xTaskIncrementTick+0x158>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	429a      	cmp	r2, r3
 8009852:	d348      	bcc.n	80098e6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009854:	4b35      	ldr	r3, [pc, #212]	; (800992c <xTaskIncrementTick+0x14c>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d104      	bne.n	8009868 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800985e:	4b36      	ldr	r3, [pc, #216]	; (8009938 <xTaskIncrementTick+0x158>)
 8009860:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009864:	601a      	str	r2, [r3, #0]
					break;
 8009866:	e03e      	b.n	80098e6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009868:	4b30      	ldr	r3, [pc, #192]	; (800992c <xTaskIncrementTick+0x14c>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	429a      	cmp	r2, r3
 800987e:	d203      	bcs.n	8009888 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009880:	4a2d      	ldr	r2, [pc, #180]	; (8009938 <xTaskIncrementTick+0x158>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009886:	e02e      	b.n	80098e6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	3304      	adds	r3, #4
 800988c:	4618      	mov	r0, r3
 800988e:	f7ff fc8a 	bl	80091a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009896:	2b00      	cmp	r3, #0
 8009898:	d004      	beq.n	80098a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	3318      	adds	r3, #24
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff fc81 	bl	80091a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	2201      	movs	r2, #1
 80098aa:	409a      	lsls	r2, r3
 80098ac:	4b23      	ldr	r3, [pc, #140]	; (800993c <xTaskIncrementTick+0x15c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	4a22      	ldr	r2, [pc, #136]	; (800993c <xTaskIncrementTick+0x15c>)
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	4a1f      	ldr	r2, [pc, #124]	; (8009940 <xTaskIncrementTick+0x160>)
 80098c4:	441a      	add	r2, r3
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	3304      	adds	r3, #4
 80098ca:	4619      	mov	r1, r3
 80098cc:	4610      	mov	r0, r2
 80098ce:	f7ff fc0d 	bl	80090ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098d6:	4b1b      	ldr	r3, [pc, #108]	; (8009944 <xTaskIncrementTick+0x164>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	429a      	cmp	r2, r3
 80098de:	d3b9      	bcc.n	8009854 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80098e0:	2301      	movs	r3, #1
 80098e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098e4:	e7b6      	b.n	8009854 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80098e6:	4b17      	ldr	r3, [pc, #92]	; (8009944 <xTaskIncrementTick+0x164>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ec:	4914      	ldr	r1, [pc, #80]	; (8009940 <xTaskIncrementTick+0x160>)
 80098ee:	4613      	mov	r3, r2
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	440b      	add	r3, r1
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d901      	bls.n	8009902 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80098fe:	2301      	movs	r3, #1
 8009900:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009902:	4b11      	ldr	r3, [pc, #68]	; (8009948 <xTaskIncrementTick+0x168>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d007      	beq.n	800991a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800990a:	2301      	movs	r3, #1
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	e004      	b.n	800991a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009910:	4b0e      	ldr	r3, [pc, #56]	; (800994c <xTaskIncrementTick+0x16c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	3301      	adds	r3, #1
 8009916:	4a0d      	ldr	r2, [pc, #52]	; (800994c <xTaskIncrementTick+0x16c>)
 8009918:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800991a:	697b      	ldr	r3, [r7, #20]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	20000940 	.word	0x20000940
 8009928:	2000091c 	.word	0x2000091c
 800992c:	200008d0 	.word	0x200008d0
 8009930:	200008d4 	.word	0x200008d4
 8009934:	20000930 	.word	0x20000930
 8009938:	20000938 	.word	0x20000938
 800993c:	20000920 	.word	0x20000920
 8009940:	2000081c 	.word	0x2000081c
 8009944:	20000818 	.word	0x20000818
 8009948:	2000092c 	.word	0x2000092c
 800994c:	20000928 	.word	0x20000928

08009950 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009956:	4b29      	ldr	r3, [pc, #164]	; (80099fc <vTaskSwitchContext+0xac>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800995e:	4b28      	ldr	r3, [pc, #160]	; (8009a00 <vTaskSwitchContext+0xb0>)
 8009960:	2201      	movs	r2, #1
 8009962:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009964:	e044      	b.n	80099f0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009966:	4b26      	ldr	r3, [pc, #152]	; (8009a00 <vTaskSwitchContext+0xb0>)
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800996c:	4b25      	ldr	r3, [pc, #148]	; (8009a04 <vTaskSwitchContext+0xb4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	fab3 f383 	clz	r3, r3
 8009978:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800997a:	7afb      	ldrb	r3, [r7, #11]
 800997c:	f1c3 031f 	rsb	r3, r3, #31
 8009980:	617b      	str	r3, [r7, #20]
 8009982:	4921      	ldr	r1, [pc, #132]	; (8009a08 <vTaskSwitchContext+0xb8>)
 8009984:	697a      	ldr	r2, [r7, #20]
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	440b      	add	r3, r1
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10a      	bne.n	80099ac <vTaskSwitchContext+0x5c>
	__asm volatile
 8009996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999a:	f383 8811 	msr	BASEPRI, r3
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f3bf 8f4f 	dsb	sy
 80099a6:	607b      	str	r3, [r7, #4]
}
 80099a8:	bf00      	nop
 80099aa:	e7fe      	b.n	80099aa <vTaskSwitchContext+0x5a>
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	4613      	mov	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4a14      	ldr	r2, [pc, #80]	; (8009a08 <vTaskSwitchContext+0xb8>)
 80099b8:	4413      	add	r3, r2
 80099ba:	613b      	str	r3, [r7, #16]
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	605a      	str	r2, [r3, #4]
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	3308      	adds	r3, #8
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d104      	bne.n	80099dc <vTaskSwitchContext+0x8c>
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	605a      	str	r2, [r3, #4]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	4a0a      	ldr	r2, [pc, #40]	; (8009a0c <vTaskSwitchContext+0xbc>)
 80099e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80099e6:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <vTaskSwitchContext+0xbc>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	334c      	adds	r3, #76	; 0x4c
 80099ec:	4a08      	ldr	r2, [pc, #32]	; (8009a10 <vTaskSwitchContext+0xc0>)
 80099ee:	6013      	str	r3, [r2, #0]
}
 80099f0:	bf00      	nop
 80099f2:	371c      	adds	r7, #28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr
 80099fc:	20000940 	.word	0x20000940
 8009a00:	2000092c 	.word	0x2000092c
 8009a04:	20000920 	.word	0x20000920
 8009a08:	2000081c 	.word	0x2000081c
 8009a0c:	20000818 	.word	0x20000818
 8009a10:	2000025c 	.word	0x2000025c

08009a14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a1c:	f000 f852 	bl	8009ac4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a20:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <prvIdleTask+0x28>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d9f9      	bls.n	8009a1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a28:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <prvIdleTask+0x2c>)
 8009a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a2e:	601a      	str	r2, [r3, #0]
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a38:	e7f0      	b.n	8009a1c <prvIdleTask+0x8>
 8009a3a:	bf00      	nop
 8009a3c:	2000081c 	.word	0x2000081c
 8009a40:	e000ed04 	.word	0xe000ed04

08009a44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	e00c      	b.n	8009a6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	4a12      	ldr	r2, [pc, #72]	; (8009aa4 <prvInitialiseTaskLists+0x60>)
 8009a5c:	4413      	add	r3, r2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff fb17 	bl	8009092 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	3301      	adds	r3, #1
 8009a68:	607b      	str	r3, [r7, #4]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2b06      	cmp	r3, #6
 8009a6e:	d9ef      	bls.n	8009a50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a70:	480d      	ldr	r0, [pc, #52]	; (8009aa8 <prvInitialiseTaskLists+0x64>)
 8009a72:	f7ff fb0e 	bl	8009092 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a76:	480d      	ldr	r0, [pc, #52]	; (8009aac <prvInitialiseTaskLists+0x68>)
 8009a78:	f7ff fb0b 	bl	8009092 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a7c:	480c      	ldr	r0, [pc, #48]	; (8009ab0 <prvInitialiseTaskLists+0x6c>)
 8009a7e:	f7ff fb08 	bl	8009092 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a82:	480c      	ldr	r0, [pc, #48]	; (8009ab4 <prvInitialiseTaskLists+0x70>)
 8009a84:	f7ff fb05 	bl	8009092 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a88:	480b      	ldr	r0, [pc, #44]	; (8009ab8 <prvInitialiseTaskLists+0x74>)
 8009a8a:	f7ff fb02 	bl	8009092 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a8e:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <prvInitialiseTaskLists+0x78>)
 8009a90:	4a05      	ldr	r2, [pc, #20]	; (8009aa8 <prvInitialiseTaskLists+0x64>)
 8009a92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a94:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <prvInitialiseTaskLists+0x7c>)
 8009a96:	4a05      	ldr	r2, [pc, #20]	; (8009aac <prvInitialiseTaskLists+0x68>)
 8009a98:	601a      	str	r2, [r3, #0]
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	2000081c 	.word	0x2000081c
 8009aa8:	200008a8 	.word	0x200008a8
 8009aac:	200008bc 	.word	0x200008bc
 8009ab0:	200008d8 	.word	0x200008d8
 8009ab4:	200008ec 	.word	0x200008ec
 8009ab8:	20000904 	.word	0x20000904
 8009abc:	200008d0 	.word	0x200008d0
 8009ac0:	200008d4 	.word	0x200008d4

08009ac4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009aca:	e019      	b.n	8009b00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009acc:	f000 fa12 	bl	8009ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ad0:	4b10      	ldr	r3, [pc, #64]	; (8009b14 <prvCheckTasksWaitingTermination+0x50>)
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7ff fb62 	bl	80091a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ae2:	4b0d      	ldr	r3, [pc, #52]	; (8009b18 <prvCheckTasksWaitingTermination+0x54>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	4a0b      	ldr	r2, [pc, #44]	; (8009b18 <prvCheckTasksWaitingTermination+0x54>)
 8009aea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009aec:	4b0b      	ldr	r3, [pc, #44]	; (8009b1c <prvCheckTasksWaitingTermination+0x58>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	3b01      	subs	r3, #1
 8009af2:	4a0a      	ldr	r2, [pc, #40]	; (8009b1c <prvCheckTasksWaitingTermination+0x58>)
 8009af4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009af6:	f000 fa2d 	bl	8009f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f810 	bl	8009b20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b00:	4b06      	ldr	r3, [pc, #24]	; (8009b1c <prvCheckTasksWaitingTermination+0x58>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e1      	bne.n	8009acc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b08:	bf00      	nop
 8009b0a:	bf00      	nop
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	200008ec 	.word	0x200008ec
 8009b18:	20000918 	.word	0x20000918
 8009b1c:	20000900 	.word	0x20000900

08009b20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	334c      	adds	r3, #76	; 0x4c
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f002 fab9 	bl	800c0a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d108      	bne.n	8009b4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fb85 	bl	800a250 <vPortFree>
				vPortFree( pxTCB );
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fb82 	bl	800a250 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b4c:	e018      	b.n	8009b80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d103      	bne.n	8009b60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fb79 	bl	800a250 <vPortFree>
	}
 8009b5e:	e00f      	b.n	8009b80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d00a      	beq.n	8009b80 <prvDeleteTCB+0x60>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	60fb      	str	r3, [r7, #12]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <prvDeleteTCB+0x5e>
	}
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <prvResetNextTaskUnblockTime+0x38>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b98:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8009b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ba0:	e008      	b.n	8009bb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba2:	4b07      	ldr	r3, [pc, #28]	; (8009bc0 <prvResetNextTaskUnblockTime+0x38>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	4a04      	ldr	r2, [pc, #16]	; (8009bc4 <prvResetNextTaskUnblockTime+0x3c>)
 8009bb2:	6013      	str	r3, [r2, #0]
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	200008d0 	.word	0x200008d0
 8009bc4:	20000938 	.word	0x20000938

08009bc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bd2:	4b29      	ldr	r3, [pc, #164]	; (8009c78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bd8:	4b28      	ldr	r3, [pc, #160]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3304      	adds	r3, #4
 8009bde:	4618      	mov	r0, r3
 8009be0:	f7ff fae1 	bl	80091a6 <uxListRemove>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d10b      	bne.n	8009c02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bea:	4b24      	ldr	r3, [pc, #144]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf6:	43da      	mvns	r2, r3
 8009bf8:	4b21      	ldr	r3, [pc, #132]	; (8009c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	4a20      	ldr	r2, [pc, #128]	; (8009c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c08:	d10a      	bne.n	8009c20 <prvAddCurrentTaskToDelayedList+0x58>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d007      	beq.n	8009c20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c10:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3304      	adds	r3, #4
 8009c16:	4619      	mov	r1, r3
 8009c18:	481a      	ldr	r0, [pc, #104]	; (8009c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009c1a:	f7ff fa67 	bl	80090ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c1e:	e026      	b.n	8009c6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	4413      	add	r3, r2
 8009c26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c28:	4b14      	ldr	r3, [pc, #80]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d209      	bcs.n	8009c4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c38:	4b13      	ldr	r3, [pc, #76]	; (8009c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3304      	adds	r3, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4610      	mov	r0, r2
 8009c46:	f7ff fa75 	bl	8009134 <vListInsert>
}
 8009c4a:	e010      	b.n	8009c6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c4c:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	4b0a      	ldr	r3, [pc, #40]	; (8009c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4619      	mov	r1, r3
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f7ff fa6b 	bl	8009134 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c5e:	4b0c      	ldr	r3, [pc, #48]	; (8009c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d202      	bcs.n	8009c6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c68:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	6013      	str	r3, [r2, #0]
}
 8009c6e:	bf00      	nop
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	2000091c 	.word	0x2000091c
 8009c7c:	20000818 	.word	0x20000818
 8009c80:	20000920 	.word	0x20000920
 8009c84:	20000904 	.word	0x20000904
 8009c88:	200008d4 	.word	0x200008d4
 8009c8c:	200008d0 	.word	0x200008d0
 8009c90:	20000938 	.word	0x20000938

08009c94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	3b04      	subs	r3, #4
 8009ca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3b04      	subs	r3, #4
 8009cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	f023 0201 	bic.w	r2, r3, #1
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3b04      	subs	r3, #4
 8009cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cc4:	4a0c      	ldr	r2, [pc, #48]	; (8009cf8 <pxPortInitialiseStack+0x64>)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3b14      	subs	r3, #20
 8009cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3b04      	subs	r3, #4
 8009cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f06f 0202 	mvn.w	r2, #2
 8009ce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	3b20      	subs	r3, #32
 8009ce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cea:	68fb      	ldr	r3, [r7, #12]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3714      	adds	r7, #20
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	08009cfd 	.word	0x08009cfd

08009cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b085      	sub	sp, #20
 8009d00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d02:	2300      	movs	r3, #0
 8009d04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d06:	4b12      	ldr	r3, [pc, #72]	; (8009d50 <prvTaskExitError+0x54>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d0e:	d00a      	beq.n	8009d26 <prvTaskExitError+0x2a>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	60fb      	str	r3, [r7, #12]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <prvTaskExitError+0x28>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2a:	f383 8811 	msr	BASEPRI, r3
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f3bf 8f4f 	dsb	sy
 8009d36:	60bb      	str	r3, [r7, #8]
}
 8009d38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d3a:	bf00      	nop
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0fc      	beq.n	8009d3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d42:	bf00      	nop
 8009d44:	bf00      	nop
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr
 8009d50:	20000094 	.word	0x20000094
	...

08009d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d60:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <pxCurrentTCBConst2>)
 8009d62:	6819      	ldr	r1, [r3, #0]
 8009d64:	6808      	ldr	r0, [r1, #0]
 8009d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6a:	f380 8809 	msr	PSP, r0
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8811 	msr	BASEPRI, r0
 8009d7a:	4770      	bx	lr
 8009d7c:	f3af 8000 	nop.w

08009d80 <pxCurrentTCBConst2>:
 8009d80:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop

08009d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d88:	4808      	ldr	r0, [pc, #32]	; (8009dac <prvPortStartFirstTask+0x24>)
 8009d8a:	6800      	ldr	r0, [r0, #0]
 8009d8c:	6800      	ldr	r0, [r0, #0]
 8009d8e:	f380 8808 	msr	MSP, r0
 8009d92:	f04f 0000 	mov.w	r0, #0
 8009d96:	f380 8814 	msr	CONTROL, r0
 8009d9a:	b662      	cpsie	i
 8009d9c:	b661      	cpsie	f
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	df00      	svc	0
 8009da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009daa:	bf00      	nop
 8009dac:	e000ed08 	.word	0xe000ed08

08009db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009db6:	4b46      	ldr	r3, [pc, #280]	; (8009ed0 <xPortStartScheduler+0x120>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a46      	ldr	r2, [pc, #280]	; (8009ed4 <xPortStartScheduler+0x124>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10a      	bne.n	8009dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	613b      	str	r3, [r7, #16]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009dd6:	4b3e      	ldr	r3, [pc, #248]	; (8009ed0 <xPortStartScheduler+0x120>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a3f      	ldr	r2, [pc, #252]	; (8009ed8 <xPortStartScheduler+0x128>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d10a      	bne.n	8009df6 <xPortStartScheduler+0x46>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	60fb      	str	r3, [r7, #12]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009df6:	4b39      	ldr	r3, [pc, #228]	; (8009edc <xPortStartScheduler+0x12c>)
 8009df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	22ff      	movs	r2, #255	; 0xff
 8009e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	4b31      	ldr	r3, [pc, #196]	; (8009ee0 <xPortStartScheduler+0x130>)
 8009e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e1e:	4b31      	ldr	r3, [pc, #196]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e20:	2207      	movs	r2, #7
 8009e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e24:	e009      	b.n	8009e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e26:	4b2f      	ldr	r3, [pc, #188]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e3a:	78fb      	ldrb	r3, [r7, #3]
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e42:	2b80      	cmp	r3, #128	; 0x80
 8009e44:	d0ef      	beq.n	8009e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e46:	4b27      	ldr	r3, [pc, #156]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f1c3 0307 	rsb	r3, r3, #7
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d00a      	beq.n	8009e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	60bb      	str	r3, [r7, #8]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e68:	4b1e      	ldr	r3, [pc, #120]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	021b      	lsls	r3, r3, #8
 8009e6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e72:	4b1c      	ldr	r3, [pc, #112]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e86:	4b18      	ldr	r3, [pc, #96]	; (8009ee8 <xPortStartScheduler+0x138>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a17      	ldr	r2, [pc, #92]	; (8009ee8 <xPortStartScheduler+0x138>)
 8009e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e92:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <xPortStartScheduler+0x138>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a14      	ldr	r2, [pc, #80]	; (8009ee8 <xPortStartScheduler+0x138>)
 8009e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e9e:	f000 f8dd 	bl	800a05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ea2:	4b12      	ldr	r3, [pc, #72]	; (8009eec <xPortStartScheduler+0x13c>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ea8:	f000 f8fc 	bl	800a0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009eac:	4b10      	ldr	r3, [pc, #64]	; (8009ef0 <xPortStartScheduler+0x140>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a0f      	ldr	r2, [pc, #60]	; (8009ef0 <xPortStartScheduler+0x140>)
 8009eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009eb8:	f7ff ff66 	bl	8009d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ebc:	f7ff fd48 	bl	8009950 <vTaskSwitchContext>
	prvTaskExitError();
 8009ec0:	f7ff ff1c 	bl	8009cfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	e000ed00 	.word	0xe000ed00
 8009ed4:	410fc271 	.word	0x410fc271
 8009ed8:	410fc270 	.word	0x410fc270
 8009edc:	e000e400 	.word	0xe000e400
 8009ee0:	20000944 	.word	0x20000944
 8009ee4:	20000948 	.word	0x20000948
 8009ee8:	e000ed20 	.word	0xe000ed20
 8009eec:	20000094 	.word	0x20000094
 8009ef0:	e000ef34 	.word	0xe000ef34

08009ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	607b      	str	r3, [r7, #4]
}
 8009f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f0e:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <vPortEnterCritical+0x58>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3301      	adds	r3, #1
 8009f14:	4a0d      	ldr	r2, [pc, #52]	; (8009f4c <vPortEnterCritical+0x58>)
 8009f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f18:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <vPortEnterCritical+0x58>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d10f      	bne.n	8009f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f20:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <vPortEnterCritical+0x5c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00a      	beq.n	8009f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	603b      	str	r3, [r7, #0]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <vPortEnterCritical+0x4a>
	}
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	20000094 	.word	0x20000094
 8009f50:	e000ed04 	.word	0xe000ed04

08009f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f5a:	4b12      	ldr	r3, [pc, #72]	; (8009fa4 <vPortExitCritical+0x50>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10a      	bne.n	8009f78 <vPortExitCritical+0x24>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	607b      	str	r3, [r7, #4]
}
 8009f74:	bf00      	nop
 8009f76:	e7fe      	b.n	8009f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f78:	4b0a      	ldr	r3, [pc, #40]	; (8009fa4 <vPortExitCritical+0x50>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	4a09      	ldr	r2, [pc, #36]	; (8009fa4 <vPortExitCritical+0x50>)
 8009f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f82:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <vPortExitCritical+0x50>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d105      	bne.n	8009f96 <vPortExitCritical+0x42>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	20000094 	.word	0x20000094
	...

08009fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fb0:	f3ef 8009 	mrs	r0, PSP
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	4b15      	ldr	r3, [pc, #84]	; (800a010 <pxCurrentTCBConst>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	f01e 0f10 	tst.w	lr, #16
 8009fc0:	bf08      	it	eq
 8009fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	6010      	str	r0, [r2, #0]
 8009fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fd4:	f380 8811 	msr	BASEPRI, r0
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f7ff fcb6 	bl	8009950 <vTaskSwitchContext>
 8009fe4:	f04f 0000 	mov.w	r0, #0
 8009fe8:	f380 8811 	msr	BASEPRI, r0
 8009fec:	bc09      	pop	{r0, r3}
 8009fee:	6819      	ldr	r1, [r3, #0]
 8009ff0:	6808      	ldr	r0, [r1, #0]
 8009ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff6:	f01e 0f10 	tst.w	lr, #16
 8009ffa:	bf08      	it	eq
 8009ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a000:	f380 8809 	msr	PSP, r0
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	f3af 8000 	nop.w

0800a010 <pxCurrentTCBConst>:
 800a010:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop

0800a018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	607b      	str	r3, [r7, #4]
}
 800a030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a032:	f7ff fbd5 	bl	80097e0 <xTaskIncrementTick>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a03c:	4b06      	ldr	r3, [pc, #24]	; (800a058 <SysTick_Handler+0x40>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	2300      	movs	r3, #0
 800a046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f383 8811 	msr	BASEPRI, r3
}
 800a04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a060:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <vPortSetupTimerInterrupt+0x34>)
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a066:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <vPortSetupTimerInterrupt+0x38>)
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a06c:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <vPortSetupTimerInterrupt+0x3c>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a0a      	ldr	r2, [pc, #40]	; (800a09c <vPortSetupTimerInterrupt+0x40>)
 800a072:	fba2 2303 	umull	r2, r3, r2, r3
 800a076:	099b      	lsrs	r3, r3, #6
 800a078:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <vPortSetupTimerInterrupt+0x44>)
 800a07a:	3b01      	subs	r3, #1
 800a07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a07e:	4b04      	ldr	r3, [pc, #16]	; (800a090 <vPortSetupTimerInterrupt+0x34>)
 800a080:	2207      	movs	r2, #7
 800a082:	601a      	str	r2, [r3, #0]
}
 800a084:	bf00      	nop
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	e000e010 	.word	0xe000e010
 800a094:	e000e018 	.word	0xe000e018
 800a098:	20000088 	.word	0x20000088
 800a09c:	10624dd3 	.word	0x10624dd3
 800a0a0:	e000e014 	.word	0xe000e014

0800a0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0b4 <vPortEnableVFP+0x10>
 800a0a8:	6801      	ldr	r1, [r0, #0]
 800a0aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0ae:	6001      	str	r1, [r0, #0]
 800a0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0b2:	bf00      	nop
 800a0b4:	e000ed88 	.word	0xe000ed88

0800a0b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08a      	sub	sp, #40	; 0x28
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0c4:	f7ff fae2 	bl	800968c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0c8:	4b5b      	ldr	r3, [pc, #364]	; (800a238 <pvPortMalloc+0x180>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0d0:	f000 f920 	bl	800a314 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0d4:	4b59      	ldr	r3, [pc, #356]	; (800a23c <pvPortMalloc+0x184>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4013      	ands	r3, r2
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f040 8093 	bne.w	800a208 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01d      	beq.n	800a124 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f003 0307 	and.w	r3, r3, #7
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d014      	beq.n	800a124 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f023 0307 	bic.w	r3, r3, #7
 800a100:	3308      	adds	r3, #8
 800a102:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f003 0307 	and.w	r3, r3, #7
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d00a      	beq.n	800a124 <pvPortMalloc+0x6c>
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	617b      	str	r3, [r7, #20]
}
 800a120:	bf00      	nop
 800a122:	e7fe      	b.n	800a122 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d06e      	beq.n	800a208 <pvPortMalloc+0x150>
 800a12a:	4b45      	ldr	r3, [pc, #276]	; (800a240 <pvPortMalloc+0x188>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d869      	bhi.n	800a208 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a134:	4b43      	ldr	r3, [pc, #268]	; (800a244 <pvPortMalloc+0x18c>)
 800a136:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a138:	4b42      	ldr	r3, [pc, #264]	; (800a244 <pvPortMalloc+0x18c>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a13e:	e004      	b.n	800a14a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a142:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	429a      	cmp	r2, r3
 800a152:	d903      	bls.n	800a15c <pvPortMalloc+0xa4>
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d1f1      	bne.n	800a140 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a15c:	4b36      	ldr	r3, [pc, #216]	; (800a238 <pvPortMalloc+0x180>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a162:	429a      	cmp	r2, r3
 800a164:	d050      	beq.n	800a208 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2208      	movs	r2, #8
 800a16c:	4413      	add	r3, r2
 800a16e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	1ad2      	subs	r2, r2, r3
 800a180:	2308      	movs	r3, #8
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	429a      	cmp	r2, r3
 800a186:	d91f      	bls.n	800a1c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4413      	add	r3, r2
 800a18e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	f003 0307 	and.w	r3, r3, #7
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00a      	beq.n	800a1b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19e:	f383 8811 	msr	BASEPRI, r3
 800a1a2:	f3bf 8f6f 	isb	sy
 800a1a6:	f3bf 8f4f 	dsb	sy
 800a1aa:	613b      	str	r3, [r7, #16]
}
 800a1ac:	bf00      	nop
 800a1ae:	e7fe      	b.n	800a1ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	1ad2      	subs	r2, r2, r3
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1c2:	69b8      	ldr	r0, [r7, #24]
 800a1c4:	f000 f908 	bl	800a3d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1c8:	4b1d      	ldr	r3, [pc, #116]	; (800a240 <pvPortMalloc+0x188>)
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	1ad3      	subs	r3, r2, r3
 800a1d2:	4a1b      	ldr	r2, [pc, #108]	; (800a240 <pvPortMalloc+0x188>)
 800a1d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1d6:	4b1a      	ldr	r3, [pc, #104]	; (800a240 <pvPortMalloc+0x188>)
 800a1d8:	681a      	ldr	r2, [r3, #0]
 800a1da:	4b1b      	ldr	r3, [pc, #108]	; (800a248 <pvPortMalloc+0x190>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d203      	bcs.n	800a1ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1e2:	4b17      	ldr	r3, [pc, #92]	; (800a240 <pvPortMalloc+0x188>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a18      	ldr	r2, [pc, #96]	; (800a248 <pvPortMalloc+0x190>)
 800a1e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ec:	685a      	ldr	r2, [r3, #4]
 800a1ee:	4b13      	ldr	r3, [pc, #76]	; (800a23c <pvPortMalloc+0x184>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1fe:	4b13      	ldr	r3, [pc, #76]	; (800a24c <pvPortMalloc+0x194>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	3301      	adds	r3, #1
 800a204:	4a11      	ldr	r2, [pc, #68]	; (800a24c <pvPortMalloc+0x194>)
 800a206:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a208:	f7ff fa4e 	bl	80096a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	f003 0307 	and.w	r3, r3, #7
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00a      	beq.n	800a22c <pvPortMalloc+0x174>
	__asm volatile
 800a216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21a:	f383 8811 	msr	BASEPRI, r3
 800a21e:	f3bf 8f6f 	isb	sy
 800a222:	f3bf 8f4f 	dsb	sy
 800a226:	60fb      	str	r3, [r7, #12]
}
 800a228:	bf00      	nop
 800a22a:	e7fe      	b.n	800a22a <pvPortMalloc+0x172>
	return pvReturn;
 800a22c:	69fb      	ldr	r3, [r7, #28]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3728      	adds	r7, #40	; 0x28
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	2000150c 	.word	0x2000150c
 800a23c:	20001520 	.word	0x20001520
 800a240:	20001510 	.word	0x20001510
 800a244:	20001504 	.word	0x20001504
 800a248:	20001514 	.word	0x20001514
 800a24c:	20001518 	.word	0x20001518

0800a250 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d04d      	beq.n	800a2fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a262:	2308      	movs	r3, #8
 800a264:	425b      	negs	r3, r3
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	4413      	add	r3, r2
 800a26a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	4b24      	ldr	r3, [pc, #144]	; (800a308 <vPortFree+0xb8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4013      	ands	r3, r2
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10a      	bne.n	800a294 <vPortFree+0x44>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	60fb      	str	r3, [r7, #12]
}
 800a290:	bf00      	nop
 800a292:	e7fe      	b.n	800a292 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00a      	beq.n	800a2b2 <vPortFree+0x62>
	__asm volatile
 800a29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a0:	f383 8811 	msr	BASEPRI, r3
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	f3bf 8f4f 	dsb	sy
 800a2ac:	60bb      	str	r3, [r7, #8]
}
 800a2ae:	bf00      	nop
 800a2b0:	e7fe      	b.n	800a2b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	685a      	ldr	r2, [r3, #4]
 800a2b6:	4b14      	ldr	r3, [pc, #80]	; (800a308 <vPortFree+0xb8>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01e      	beq.n	800a2fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d11a      	bne.n	800a2fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	4b0e      	ldr	r3, [pc, #56]	; (800a308 <vPortFree+0xb8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	401a      	ands	r2, r3
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2d8:	f7ff f9d8 	bl	800968c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	4b0a      	ldr	r3, [pc, #40]	; (800a30c <vPortFree+0xbc>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	4a09      	ldr	r2, [pc, #36]	; (800a30c <vPortFree+0xbc>)
 800a2e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2ea:	6938      	ldr	r0, [r7, #16]
 800a2ec:	f000 f874 	bl	800a3d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2f0:	4b07      	ldr	r3, [pc, #28]	; (800a310 <vPortFree+0xc0>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	4a06      	ldr	r2, [pc, #24]	; (800a310 <vPortFree+0xc0>)
 800a2f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2fa:	f7ff f9d5 	bl	80096a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2fe:	bf00      	nop
 800a300:	3718      	adds	r7, #24
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	20001520 	.word	0x20001520
 800a30c:	20001510 	.word	0x20001510
 800a310:	2000151c 	.word	0x2000151c

0800a314 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a314:	b480      	push	{r7}
 800a316:	b085      	sub	sp, #20
 800a318:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a31a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a31e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a320:	4b27      	ldr	r3, [pc, #156]	; (800a3c0 <prvHeapInit+0xac>)
 800a322:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d00c      	beq.n	800a348 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3307      	adds	r3, #7
 800a332:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0307 	bic.w	r3, r3, #7
 800a33a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	4a1f      	ldr	r2, [pc, #124]	; (800a3c0 <prvHeapInit+0xac>)
 800a344:	4413      	add	r3, r2
 800a346:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a34c:	4a1d      	ldr	r2, [pc, #116]	; (800a3c4 <prvHeapInit+0xb0>)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a352:	4b1c      	ldr	r3, [pc, #112]	; (800a3c4 <prvHeapInit+0xb0>)
 800a354:	2200      	movs	r2, #0
 800a356:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68ba      	ldr	r2, [r7, #8]
 800a35c:	4413      	add	r3, r2
 800a35e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a360:	2208      	movs	r2, #8
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	1a9b      	subs	r3, r3, r2
 800a366:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f023 0307 	bic.w	r3, r3, #7
 800a36e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	4a15      	ldr	r2, [pc, #84]	; (800a3c8 <prvHeapInit+0xb4>)
 800a374:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a376:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <prvHeapInit+0xb4>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2200      	movs	r2, #0
 800a37c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a37e:	4b12      	ldr	r3, [pc, #72]	; (800a3c8 <prvHeapInit+0xb4>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	2200      	movs	r2, #0
 800a384:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	1ad2      	subs	r2, r2, r3
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a394:	4b0c      	ldr	r3, [pc, #48]	; (800a3c8 <prvHeapInit+0xb4>)
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	4a0a      	ldr	r2, [pc, #40]	; (800a3cc <prvHeapInit+0xb8>)
 800a3a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	4a09      	ldr	r2, [pc, #36]	; (800a3d0 <prvHeapInit+0xbc>)
 800a3aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a3ac:	4b09      	ldr	r3, [pc, #36]	; (800a3d4 <prvHeapInit+0xc0>)
 800a3ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3b2:	601a      	str	r2, [r3, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	3714      	adds	r7, #20
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3be:	4770      	bx	lr
 800a3c0:	2000094c 	.word	0x2000094c
 800a3c4:	20001504 	.word	0x20001504
 800a3c8:	2000150c 	.word	0x2000150c
 800a3cc:	20001514 	.word	0x20001514
 800a3d0:	20001510 	.word	0x20001510
 800a3d4:	20001520 	.word	0x20001520

0800a3d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3e0:	4b28      	ldr	r3, [pc, #160]	; (800a484 <prvInsertBlockIntoFreeList+0xac>)
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	e002      	b.n	800a3ec <prvInsertBlockIntoFreeList+0x14>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d8f7      	bhi.n	800a3e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	4413      	add	r3, r2
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	429a      	cmp	r2, r3
 800a406:	d108      	bne.n	800a41a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	441a      	add	r2, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	441a      	add	r2, r3
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d118      	bne.n	800a460 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681a      	ldr	r2, [r3, #0]
 800a432:	4b15      	ldr	r3, [pc, #84]	; (800a488 <prvInsertBlockIntoFreeList+0xb0>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	429a      	cmp	r2, r3
 800a438:	d00d      	beq.n	800a456 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	685b      	ldr	r3, [r3, #4]
 800a444:	441a      	add	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	601a      	str	r2, [r3, #0]
 800a454:	e008      	b.n	800a468 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a456:	4b0c      	ldr	r3, [pc, #48]	; (800a488 <prvInsertBlockIntoFreeList+0xb0>)
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	601a      	str	r2, [r3, #0]
 800a45e:	e003      	b.n	800a468 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681a      	ldr	r2, [r3, #0]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d002      	beq.n	800a476 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a476:	bf00      	nop
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20001504 	.word	0x20001504
 800a488:	2000150c 	.word	0x2000150c

0800a48c <__cvt>:
 800a48c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a490:	ec55 4b10 	vmov	r4, r5, d0
 800a494:	2d00      	cmp	r5, #0
 800a496:	460e      	mov	r6, r1
 800a498:	4619      	mov	r1, r3
 800a49a:	462b      	mov	r3, r5
 800a49c:	bfbb      	ittet	lt
 800a49e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a4a2:	461d      	movlt	r5, r3
 800a4a4:	2300      	movge	r3, #0
 800a4a6:	232d      	movlt	r3, #45	; 0x2d
 800a4a8:	700b      	strb	r3, [r1, #0]
 800a4aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a4b0:	4691      	mov	r9, r2
 800a4b2:	f023 0820 	bic.w	r8, r3, #32
 800a4b6:	bfbc      	itt	lt
 800a4b8:	4622      	movlt	r2, r4
 800a4ba:	4614      	movlt	r4, r2
 800a4bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4c0:	d005      	beq.n	800a4ce <__cvt+0x42>
 800a4c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a4c6:	d100      	bne.n	800a4ca <__cvt+0x3e>
 800a4c8:	3601      	adds	r6, #1
 800a4ca:	2102      	movs	r1, #2
 800a4cc:	e000      	b.n	800a4d0 <__cvt+0x44>
 800a4ce:	2103      	movs	r1, #3
 800a4d0:	ab03      	add	r3, sp, #12
 800a4d2:	9301      	str	r3, [sp, #4]
 800a4d4:	ab02      	add	r3, sp, #8
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	ec45 4b10 	vmov	d0, r4, r5
 800a4dc:	4653      	mov	r3, sl
 800a4de:	4632      	mov	r2, r6
 800a4e0:	f001 ff0a 	bl	800c2f8 <_dtoa_r>
 800a4e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	d102      	bne.n	800a4f2 <__cvt+0x66>
 800a4ec:	f019 0f01 	tst.w	r9, #1
 800a4f0:	d022      	beq.n	800a538 <__cvt+0xac>
 800a4f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4f6:	eb07 0906 	add.w	r9, r7, r6
 800a4fa:	d110      	bne.n	800a51e <__cvt+0x92>
 800a4fc:	783b      	ldrb	r3, [r7, #0]
 800a4fe:	2b30      	cmp	r3, #48	; 0x30
 800a500:	d10a      	bne.n	800a518 <__cvt+0x8c>
 800a502:	2200      	movs	r2, #0
 800a504:	2300      	movs	r3, #0
 800a506:	4620      	mov	r0, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	f7f6 faf5 	bl	8000af8 <__aeabi_dcmpeq>
 800a50e:	b918      	cbnz	r0, 800a518 <__cvt+0x8c>
 800a510:	f1c6 0601 	rsb	r6, r6, #1
 800a514:	f8ca 6000 	str.w	r6, [sl]
 800a518:	f8da 3000 	ldr.w	r3, [sl]
 800a51c:	4499      	add	r9, r3
 800a51e:	2200      	movs	r2, #0
 800a520:	2300      	movs	r3, #0
 800a522:	4620      	mov	r0, r4
 800a524:	4629      	mov	r1, r5
 800a526:	f7f6 fae7 	bl	8000af8 <__aeabi_dcmpeq>
 800a52a:	b108      	cbz	r0, 800a530 <__cvt+0xa4>
 800a52c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a530:	2230      	movs	r2, #48	; 0x30
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	454b      	cmp	r3, r9
 800a536:	d307      	bcc.n	800a548 <__cvt+0xbc>
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a53c:	1bdb      	subs	r3, r3, r7
 800a53e:	4638      	mov	r0, r7
 800a540:	6013      	str	r3, [r2, #0]
 800a542:	b004      	add	sp, #16
 800a544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a548:	1c59      	adds	r1, r3, #1
 800a54a:	9103      	str	r1, [sp, #12]
 800a54c:	701a      	strb	r2, [r3, #0]
 800a54e:	e7f0      	b.n	800a532 <__cvt+0xa6>

0800a550 <__exponent>:
 800a550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a552:	4603      	mov	r3, r0
 800a554:	2900      	cmp	r1, #0
 800a556:	bfb8      	it	lt
 800a558:	4249      	neglt	r1, r1
 800a55a:	f803 2b02 	strb.w	r2, [r3], #2
 800a55e:	bfb4      	ite	lt
 800a560:	222d      	movlt	r2, #45	; 0x2d
 800a562:	222b      	movge	r2, #43	; 0x2b
 800a564:	2909      	cmp	r1, #9
 800a566:	7042      	strb	r2, [r0, #1]
 800a568:	dd2a      	ble.n	800a5c0 <__exponent+0x70>
 800a56a:	f10d 0207 	add.w	r2, sp, #7
 800a56e:	4617      	mov	r7, r2
 800a570:	260a      	movs	r6, #10
 800a572:	4694      	mov	ip, r2
 800a574:	fb91 f5f6 	sdiv	r5, r1, r6
 800a578:	fb06 1415 	mls	r4, r6, r5, r1
 800a57c:	3430      	adds	r4, #48	; 0x30
 800a57e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a582:	460c      	mov	r4, r1
 800a584:	2c63      	cmp	r4, #99	; 0x63
 800a586:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800a58a:	4629      	mov	r1, r5
 800a58c:	dcf1      	bgt.n	800a572 <__exponent+0x22>
 800a58e:	3130      	adds	r1, #48	; 0x30
 800a590:	f1ac 0402 	sub.w	r4, ip, #2
 800a594:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a598:	1c41      	adds	r1, r0, #1
 800a59a:	4622      	mov	r2, r4
 800a59c:	42ba      	cmp	r2, r7
 800a59e:	d30a      	bcc.n	800a5b6 <__exponent+0x66>
 800a5a0:	f10d 0209 	add.w	r2, sp, #9
 800a5a4:	eba2 020c 	sub.w	r2, r2, ip
 800a5a8:	42bc      	cmp	r4, r7
 800a5aa:	bf88      	it	hi
 800a5ac:	2200      	movhi	r2, #0
 800a5ae:	4413      	add	r3, r2
 800a5b0:	1a18      	subs	r0, r3, r0
 800a5b2:	b003      	add	sp, #12
 800a5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5b6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a5ba:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a5be:	e7ed      	b.n	800a59c <__exponent+0x4c>
 800a5c0:	2330      	movs	r3, #48	; 0x30
 800a5c2:	3130      	adds	r1, #48	; 0x30
 800a5c4:	7083      	strb	r3, [r0, #2]
 800a5c6:	70c1      	strb	r1, [r0, #3]
 800a5c8:	1d03      	adds	r3, r0, #4
 800a5ca:	e7f1      	b.n	800a5b0 <__exponent+0x60>

0800a5cc <_printf_float>:
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	ed2d 8b02 	vpush	{d8}
 800a5d4:	b08d      	sub	sp, #52	; 0x34
 800a5d6:	460c      	mov	r4, r1
 800a5d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a5dc:	4616      	mov	r6, r2
 800a5de:	461f      	mov	r7, r3
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	f001 fd5b 	bl	800c09c <_localeconv_r>
 800a5e6:	f8d0 a000 	ldr.w	sl, [r0]
 800a5ea:	4650      	mov	r0, sl
 800a5ec:	f7f5 fe58 	bl	80002a0 <strlen>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	9305      	str	r3, [sp, #20]
 800a5f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a600:	3307      	adds	r3, #7
 800a602:	f023 0307 	bic.w	r3, r3, #7
 800a606:	f103 0208 	add.w	r2, r3, #8
 800a60a:	f8c8 2000 	str.w	r2, [r8]
 800a60e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a612:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a616:	9307      	str	r3, [sp, #28]
 800a618:	f8cd 8018 	str.w	r8, [sp, #24]
 800a61c:	ee08 0a10 	vmov	s16, r0
 800a620:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a624:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a628:	4b9e      	ldr	r3, [pc, #632]	; (800a8a4 <_printf_float+0x2d8>)
 800a62a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a62e:	f7f6 fa95 	bl	8000b5c <__aeabi_dcmpun>
 800a632:	bb88      	cbnz	r0, 800a698 <_printf_float+0xcc>
 800a634:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a638:	4b9a      	ldr	r3, [pc, #616]	; (800a8a4 <_printf_float+0x2d8>)
 800a63a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a63e:	f7f6 fa6f 	bl	8000b20 <__aeabi_dcmple>
 800a642:	bb48      	cbnz	r0, 800a698 <_printf_float+0xcc>
 800a644:	2200      	movs	r2, #0
 800a646:	2300      	movs	r3, #0
 800a648:	4640      	mov	r0, r8
 800a64a:	4649      	mov	r1, r9
 800a64c:	f7f6 fa5e 	bl	8000b0c <__aeabi_dcmplt>
 800a650:	b110      	cbz	r0, 800a658 <_printf_float+0x8c>
 800a652:	232d      	movs	r3, #45	; 0x2d
 800a654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a658:	4a93      	ldr	r2, [pc, #588]	; (800a8a8 <_printf_float+0x2dc>)
 800a65a:	4b94      	ldr	r3, [pc, #592]	; (800a8ac <_printf_float+0x2e0>)
 800a65c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a660:	bf94      	ite	ls
 800a662:	4690      	movls	r8, r2
 800a664:	4698      	movhi	r8, r3
 800a666:	2303      	movs	r3, #3
 800a668:	6123      	str	r3, [r4, #16]
 800a66a:	9b05      	ldr	r3, [sp, #20]
 800a66c:	f023 0304 	bic.w	r3, r3, #4
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	f04f 0900 	mov.w	r9, #0
 800a676:	9700      	str	r7, [sp, #0]
 800a678:	4633      	mov	r3, r6
 800a67a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a67c:	4621      	mov	r1, r4
 800a67e:	4628      	mov	r0, r5
 800a680:	f000 f9da 	bl	800aa38 <_printf_common>
 800a684:	3001      	adds	r0, #1
 800a686:	f040 8090 	bne.w	800a7aa <_printf_float+0x1de>
 800a68a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a68e:	b00d      	add	sp, #52	; 0x34
 800a690:	ecbd 8b02 	vpop	{d8}
 800a694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a698:	4642      	mov	r2, r8
 800a69a:	464b      	mov	r3, r9
 800a69c:	4640      	mov	r0, r8
 800a69e:	4649      	mov	r1, r9
 800a6a0:	f7f6 fa5c 	bl	8000b5c <__aeabi_dcmpun>
 800a6a4:	b140      	cbz	r0, 800a6b8 <_printf_float+0xec>
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bfbc      	itt	lt
 800a6ac:	232d      	movlt	r3, #45	; 0x2d
 800a6ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a6b2:	4a7f      	ldr	r2, [pc, #508]	; (800a8b0 <_printf_float+0x2e4>)
 800a6b4:	4b7f      	ldr	r3, [pc, #508]	; (800a8b4 <_printf_float+0x2e8>)
 800a6b6:	e7d1      	b.n	800a65c <_printf_float+0x90>
 800a6b8:	6863      	ldr	r3, [r4, #4]
 800a6ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a6be:	9206      	str	r2, [sp, #24]
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	d13f      	bne.n	800a744 <_printf_float+0x178>
 800a6c4:	2306      	movs	r3, #6
 800a6c6:	6063      	str	r3, [r4, #4]
 800a6c8:	9b05      	ldr	r3, [sp, #20]
 800a6ca:	6861      	ldr	r1, [r4, #4]
 800a6cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	9303      	str	r3, [sp, #12]
 800a6d4:	ab0a      	add	r3, sp, #40	; 0x28
 800a6d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a6da:	ab09      	add	r3, sp, #36	; 0x24
 800a6dc:	ec49 8b10 	vmov	d0, r8, r9
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	6022      	str	r2, [r4, #0]
 800a6e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	f7ff fecf 	bl	800a48c <__cvt>
 800a6ee:	9b06      	ldr	r3, [sp, #24]
 800a6f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6f2:	2b47      	cmp	r3, #71	; 0x47
 800a6f4:	4680      	mov	r8, r0
 800a6f6:	d108      	bne.n	800a70a <_printf_float+0x13e>
 800a6f8:	1cc8      	adds	r0, r1, #3
 800a6fa:	db02      	blt.n	800a702 <_printf_float+0x136>
 800a6fc:	6863      	ldr	r3, [r4, #4]
 800a6fe:	4299      	cmp	r1, r3
 800a700:	dd41      	ble.n	800a786 <_printf_float+0x1ba>
 800a702:	f1ab 0302 	sub.w	r3, fp, #2
 800a706:	fa5f fb83 	uxtb.w	fp, r3
 800a70a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a70e:	d820      	bhi.n	800a752 <_printf_float+0x186>
 800a710:	3901      	subs	r1, #1
 800a712:	465a      	mov	r2, fp
 800a714:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a718:	9109      	str	r1, [sp, #36]	; 0x24
 800a71a:	f7ff ff19 	bl	800a550 <__exponent>
 800a71e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a720:	1813      	adds	r3, r2, r0
 800a722:	2a01      	cmp	r2, #1
 800a724:	4681      	mov	r9, r0
 800a726:	6123      	str	r3, [r4, #16]
 800a728:	dc02      	bgt.n	800a730 <_printf_float+0x164>
 800a72a:	6822      	ldr	r2, [r4, #0]
 800a72c:	07d2      	lsls	r2, r2, #31
 800a72e:	d501      	bpl.n	800a734 <_printf_float+0x168>
 800a730:	3301      	adds	r3, #1
 800a732:	6123      	str	r3, [r4, #16]
 800a734:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d09c      	beq.n	800a676 <_printf_float+0xaa>
 800a73c:	232d      	movs	r3, #45	; 0x2d
 800a73e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a742:	e798      	b.n	800a676 <_printf_float+0xaa>
 800a744:	9a06      	ldr	r2, [sp, #24]
 800a746:	2a47      	cmp	r2, #71	; 0x47
 800a748:	d1be      	bne.n	800a6c8 <_printf_float+0xfc>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1bc      	bne.n	800a6c8 <_printf_float+0xfc>
 800a74e:	2301      	movs	r3, #1
 800a750:	e7b9      	b.n	800a6c6 <_printf_float+0xfa>
 800a752:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a756:	d118      	bne.n	800a78a <_printf_float+0x1be>
 800a758:	2900      	cmp	r1, #0
 800a75a:	6863      	ldr	r3, [r4, #4]
 800a75c:	dd0b      	ble.n	800a776 <_printf_float+0x1aa>
 800a75e:	6121      	str	r1, [r4, #16]
 800a760:	b913      	cbnz	r3, 800a768 <_printf_float+0x19c>
 800a762:	6822      	ldr	r2, [r4, #0]
 800a764:	07d0      	lsls	r0, r2, #31
 800a766:	d502      	bpl.n	800a76e <_printf_float+0x1a2>
 800a768:	3301      	adds	r3, #1
 800a76a:	440b      	add	r3, r1
 800a76c:	6123      	str	r3, [r4, #16]
 800a76e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a770:	f04f 0900 	mov.w	r9, #0
 800a774:	e7de      	b.n	800a734 <_printf_float+0x168>
 800a776:	b913      	cbnz	r3, 800a77e <_printf_float+0x1b2>
 800a778:	6822      	ldr	r2, [r4, #0]
 800a77a:	07d2      	lsls	r2, r2, #31
 800a77c:	d501      	bpl.n	800a782 <_printf_float+0x1b6>
 800a77e:	3302      	adds	r3, #2
 800a780:	e7f4      	b.n	800a76c <_printf_float+0x1a0>
 800a782:	2301      	movs	r3, #1
 800a784:	e7f2      	b.n	800a76c <_printf_float+0x1a0>
 800a786:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78c:	4299      	cmp	r1, r3
 800a78e:	db05      	blt.n	800a79c <_printf_float+0x1d0>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	6121      	str	r1, [r4, #16]
 800a794:	07d8      	lsls	r0, r3, #31
 800a796:	d5ea      	bpl.n	800a76e <_printf_float+0x1a2>
 800a798:	1c4b      	adds	r3, r1, #1
 800a79a:	e7e7      	b.n	800a76c <_printf_float+0x1a0>
 800a79c:	2900      	cmp	r1, #0
 800a79e:	bfd4      	ite	le
 800a7a0:	f1c1 0202 	rsble	r2, r1, #2
 800a7a4:	2201      	movgt	r2, #1
 800a7a6:	4413      	add	r3, r2
 800a7a8:	e7e0      	b.n	800a76c <_printf_float+0x1a0>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	055a      	lsls	r2, r3, #21
 800a7ae:	d407      	bmi.n	800a7c0 <_printf_float+0x1f4>
 800a7b0:	6923      	ldr	r3, [r4, #16]
 800a7b2:	4642      	mov	r2, r8
 800a7b4:	4631      	mov	r1, r6
 800a7b6:	4628      	mov	r0, r5
 800a7b8:	47b8      	blx	r7
 800a7ba:	3001      	adds	r0, #1
 800a7bc:	d12c      	bne.n	800a818 <_printf_float+0x24c>
 800a7be:	e764      	b.n	800a68a <_printf_float+0xbe>
 800a7c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a7c4:	f240 80e0 	bls.w	800a988 <_printf_float+0x3bc>
 800a7c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	f7f6 f992 	bl	8000af8 <__aeabi_dcmpeq>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d034      	beq.n	800a842 <_printf_float+0x276>
 800a7d8:	4a37      	ldr	r2, [pc, #220]	; (800a8b8 <_printf_float+0x2ec>)
 800a7da:	2301      	movs	r3, #1
 800a7dc:	4631      	mov	r1, r6
 800a7de:	4628      	mov	r0, r5
 800a7e0:	47b8      	blx	r7
 800a7e2:	3001      	adds	r0, #1
 800a7e4:	f43f af51 	beq.w	800a68a <_printf_float+0xbe>
 800a7e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	db02      	blt.n	800a7f6 <_printf_float+0x22a>
 800a7f0:	6823      	ldr	r3, [r4, #0]
 800a7f2:	07d8      	lsls	r0, r3, #31
 800a7f4:	d510      	bpl.n	800a818 <_printf_float+0x24c>
 800a7f6:	ee18 3a10 	vmov	r3, s16
 800a7fa:	4652      	mov	r2, sl
 800a7fc:	4631      	mov	r1, r6
 800a7fe:	4628      	mov	r0, r5
 800a800:	47b8      	blx	r7
 800a802:	3001      	adds	r0, #1
 800a804:	f43f af41 	beq.w	800a68a <_printf_float+0xbe>
 800a808:	f04f 0800 	mov.w	r8, #0
 800a80c:	f104 091a 	add.w	r9, r4, #26
 800a810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a812:	3b01      	subs	r3, #1
 800a814:	4543      	cmp	r3, r8
 800a816:	dc09      	bgt.n	800a82c <_printf_float+0x260>
 800a818:	6823      	ldr	r3, [r4, #0]
 800a81a:	079b      	lsls	r3, r3, #30
 800a81c:	f100 8107 	bmi.w	800aa2e <_printf_float+0x462>
 800a820:	68e0      	ldr	r0, [r4, #12]
 800a822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a824:	4298      	cmp	r0, r3
 800a826:	bfb8      	it	lt
 800a828:	4618      	movlt	r0, r3
 800a82a:	e730      	b.n	800a68e <_printf_float+0xc2>
 800a82c:	2301      	movs	r3, #1
 800a82e:	464a      	mov	r2, r9
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	f43f af27 	beq.w	800a68a <_printf_float+0xbe>
 800a83c:	f108 0801 	add.w	r8, r8, #1
 800a840:	e7e6      	b.n	800a810 <_printf_float+0x244>
 800a842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a844:	2b00      	cmp	r3, #0
 800a846:	dc39      	bgt.n	800a8bc <_printf_float+0x2f0>
 800a848:	4a1b      	ldr	r2, [pc, #108]	; (800a8b8 <_printf_float+0x2ec>)
 800a84a:	2301      	movs	r3, #1
 800a84c:	4631      	mov	r1, r6
 800a84e:	4628      	mov	r0, r5
 800a850:	47b8      	blx	r7
 800a852:	3001      	adds	r0, #1
 800a854:	f43f af19 	beq.w	800a68a <_printf_float+0xbe>
 800a858:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a85c:	4313      	orrs	r3, r2
 800a85e:	d102      	bne.n	800a866 <_printf_float+0x29a>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	07d9      	lsls	r1, r3, #31
 800a864:	d5d8      	bpl.n	800a818 <_printf_float+0x24c>
 800a866:	ee18 3a10 	vmov	r3, s16
 800a86a:	4652      	mov	r2, sl
 800a86c:	4631      	mov	r1, r6
 800a86e:	4628      	mov	r0, r5
 800a870:	47b8      	blx	r7
 800a872:	3001      	adds	r0, #1
 800a874:	f43f af09 	beq.w	800a68a <_printf_float+0xbe>
 800a878:	f04f 0900 	mov.w	r9, #0
 800a87c:	f104 0a1a 	add.w	sl, r4, #26
 800a880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a882:	425b      	negs	r3, r3
 800a884:	454b      	cmp	r3, r9
 800a886:	dc01      	bgt.n	800a88c <_printf_float+0x2c0>
 800a888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a88a:	e792      	b.n	800a7b2 <_printf_float+0x1e6>
 800a88c:	2301      	movs	r3, #1
 800a88e:	4652      	mov	r2, sl
 800a890:	4631      	mov	r1, r6
 800a892:	4628      	mov	r0, r5
 800a894:	47b8      	blx	r7
 800a896:	3001      	adds	r0, #1
 800a898:	f43f aef7 	beq.w	800a68a <_printf_float+0xbe>
 800a89c:	f109 0901 	add.w	r9, r9, #1
 800a8a0:	e7ee      	b.n	800a880 <_printf_float+0x2b4>
 800a8a2:	bf00      	nop
 800a8a4:	7fefffff 	.word	0x7fefffff
 800a8a8:	0800efdc 	.word	0x0800efdc
 800a8ac:	0800efe0 	.word	0x0800efe0
 800a8b0:	0800efe4 	.word	0x0800efe4
 800a8b4:	0800efe8 	.word	0x0800efe8
 800a8b8:	0800efec 	.word	0x0800efec
 800a8bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	bfa8      	it	ge
 800a8c4:	461a      	movge	r2, r3
 800a8c6:	2a00      	cmp	r2, #0
 800a8c8:	4691      	mov	r9, r2
 800a8ca:	dc37      	bgt.n	800a93c <_printf_float+0x370>
 800a8cc:	f04f 0b00 	mov.w	fp, #0
 800a8d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8d4:	f104 021a 	add.w	r2, r4, #26
 800a8d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a8da:	9305      	str	r3, [sp, #20]
 800a8dc:	eba3 0309 	sub.w	r3, r3, r9
 800a8e0:	455b      	cmp	r3, fp
 800a8e2:	dc33      	bgt.n	800a94c <_printf_float+0x380>
 800a8e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	db3b      	blt.n	800a964 <_printf_float+0x398>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	07da      	lsls	r2, r3, #31
 800a8f0:	d438      	bmi.n	800a964 <_printf_float+0x398>
 800a8f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a8f6:	eba2 0903 	sub.w	r9, r2, r3
 800a8fa:	9b05      	ldr	r3, [sp, #20]
 800a8fc:	1ad2      	subs	r2, r2, r3
 800a8fe:	4591      	cmp	r9, r2
 800a900:	bfa8      	it	ge
 800a902:	4691      	movge	r9, r2
 800a904:	f1b9 0f00 	cmp.w	r9, #0
 800a908:	dc35      	bgt.n	800a976 <_printf_float+0x3aa>
 800a90a:	f04f 0800 	mov.w	r8, #0
 800a90e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a912:	f104 0a1a 	add.w	sl, r4, #26
 800a916:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a91a:	1a9b      	subs	r3, r3, r2
 800a91c:	eba3 0309 	sub.w	r3, r3, r9
 800a920:	4543      	cmp	r3, r8
 800a922:	f77f af79 	ble.w	800a818 <_printf_float+0x24c>
 800a926:	2301      	movs	r3, #1
 800a928:	4652      	mov	r2, sl
 800a92a:	4631      	mov	r1, r6
 800a92c:	4628      	mov	r0, r5
 800a92e:	47b8      	blx	r7
 800a930:	3001      	adds	r0, #1
 800a932:	f43f aeaa 	beq.w	800a68a <_printf_float+0xbe>
 800a936:	f108 0801 	add.w	r8, r8, #1
 800a93a:	e7ec      	b.n	800a916 <_printf_float+0x34a>
 800a93c:	4613      	mov	r3, r2
 800a93e:	4631      	mov	r1, r6
 800a940:	4642      	mov	r2, r8
 800a942:	4628      	mov	r0, r5
 800a944:	47b8      	blx	r7
 800a946:	3001      	adds	r0, #1
 800a948:	d1c0      	bne.n	800a8cc <_printf_float+0x300>
 800a94a:	e69e      	b.n	800a68a <_printf_float+0xbe>
 800a94c:	2301      	movs	r3, #1
 800a94e:	4631      	mov	r1, r6
 800a950:	4628      	mov	r0, r5
 800a952:	9205      	str	r2, [sp, #20]
 800a954:	47b8      	blx	r7
 800a956:	3001      	adds	r0, #1
 800a958:	f43f ae97 	beq.w	800a68a <_printf_float+0xbe>
 800a95c:	9a05      	ldr	r2, [sp, #20]
 800a95e:	f10b 0b01 	add.w	fp, fp, #1
 800a962:	e7b9      	b.n	800a8d8 <_printf_float+0x30c>
 800a964:	ee18 3a10 	vmov	r3, s16
 800a968:	4652      	mov	r2, sl
 800a96a:	4631      	mov	r1, r6
 800a96c:	4628      	mov	r0, r5
 800a96e:	47b8      	blx	r7
 800a970:	3001      	adds	r0, #1
 800a972:	d1be      	bne.n	800a8f2 <_printf_float+0x326>
 800a974:	e689      	b.n	800a68a <_printf_float+0xbe>
 800a976:	9a05      	ldr	r2, [sp, #20]
 800a978:	464b      	mov	r3, r9
 800a97a:	4442      	add	r2, r8
 800a97c:	4631      	mov	r1, r6
 800a97e:	4628      	mov	r0, r5
 800a980:	47b8      	blx	r7
 800a982:	3001      	adds	r0, #1
 800a984:	d1c1      	bne.n	800a90a <_printf_float+0x33e>
 800a986:	e680      	b.n	800a68a <_printf_float+0xbe>
 800a988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a98a:	2a01      	cmp	r2, #1
 800a98c:	dc01      	bgt.n	800a992 <_printf_float+0x3c6>
 800a98e:	07db      	lsls	r3, r3, #31
 800a990:	d53a      	bpl.n	800aa08 <_printf_float+0x43c>
 800a992:	2301      	movs	r3, #1
 800a994:	4642      	mov	r2, r8
 800a996:	4631      	mov	r1, r6
 800a998:	4628      	mov	r0, r5
 800a99a:	47b8      	blx	r7
 800a99c:	3001      	adds	r0, #1
 800a99e:	f43f ae74 	beq.w	800a68a <_printf_float+0xbe>
 800a9a2:	ee18 3a10 	vmov	r3, s16
 800a9a6:	4652      	mov	r2, sl
 800a9a8:	4631      	mov	r1, r6
 800a9aa:	4628      	mov	r0, r5
 800a9ac:	47b8      	blx	r7
 800a9ae:	3001      	adds	r0, #1
 800a9b0:	f43f ae6b 	beq.w	800a68a <_printf_float+0xbe>
 800a9b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a9c0:	f7f6 f89a 	bl	8000af8 <__aeabi_dcmpeq>
 800a9c4:	b9d8      	cbnz	r0, 800a9fe <_printf_float+0x432>
 800a9c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a9ca:	f108 0201 	add.w	r2, r8, #1
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	4628      	mov	r0, r5
 800a9d2:	47b8      	blx	r7
 800a9d4:	3001      	adds	r0, #1
 800a9d6:	d10e      	bne.n	800a9f6 <_printf_float+0x42a>
 800a9d8:	e657      	b.n	800a68a <_printf_float+0xbe>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4652      	mov	r2, sl
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	47b8      	blx	r7
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	f43f ae50 	beq.w	800a68a <_printf_float+0xbe>
 800a9ea:	f108 0801 	add.w	r8, r8, #1
 800a9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	4543      	cmp	r3, r8
 800a9f4:	dcf1      	bgt.n	800a9da <_printf_float+0x40e>
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9fc:	e6da      	b.n	800a7b4 <_printf_float+0x1e8>
 800a9fe:	f04f 0800 	mov.w	r8, #0
 800aa02:	f104 0a1a 	add.w	sl, r4, #26
 800aa06:	e7f2      	b.n	800a9ee <_printf_float+0x422>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4642      	mov	r2, r8
 800aa0c:	e7df      	b.n	800a9ce <_printf_float+0x402>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	464a      	mov	r2, r9
 800aa12:	4631      	mov	r1, r6
 800aa14:	4628      	mov	r0, r5
 800aa16:	47b8      	blx	r7
 800aa18:	3001      	adds	r0, #1
 800aa1a:	f43f ae36 	beq.w	800a68a <_printf_float+0xbe>
 800aa1e:	f108 0801 	add.w	r8, r8, #1
 800aa22:	68e3      	ldr	r3, [r4, #12]
 800aa24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa26:	1a5b      	subs	r3, r3, r1
 800aa28:	4543      	cmp	r3, r8
 800aa2a:	dcf0      	bgt.n	800aa0e <_printf_float+0x442>
 800aa2c:	e6f8      	b.n	800a820 <_printf_float+0x254>
 800aa2e:	f04f 0800 	mov.w	r8, #0
 800aa32:	f104 0919 	add.w	r9, r4, #25
 800aa36:	e7f4      	b.n	800aa22 <_printf_float+0x456>

0800aa38 <_printf_common>:
 800aa38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa3c:	4616      	mov	r6, r2
 800aa3e:	4699      	mov	r9, r3
 800aa40:	688a      	ldr	r2, [r1, #8]
 800aa42:	690b      	ldr	r3, [r1, #16]
 800aa44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	bfb8      	it	lt
 800aa4c:	4613      	movlt	r3, r2
 800aa4e:	6033      	str	r3, [r6, #0]
 800aa50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa54:	4607      	mov	r7, r0
 800aa56:	460c      	mov	r4, r1
 800aa58:	b10a      	cbz	r2, 800aa5e <_printf_common+0x26>
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	6033      	str	r3, [r6, #0]
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	0699      	lsls	r1, r3, #26
 800aa62:	bf42      	ittt	mi
 800aa64:	6833      	ldrmi	r3, [r6, #0]
 800aa66:	3302      	addmi	r3, #2
 800aa68:	6033      	strmi	r3, [r6, #0]
 800aa6a:	6825      	ldr	r5, [r4, #0]
 800aa6c:	f015 0506 	ands.w	r5, r5, #6
 800aa70:	d106      	bne.n	800aa80 <_printf_common+0x48>
 800aa72:	f104 0a19 	add.w	sl, r4, #25
 800aa76:	68e3      	ldr	r3, [r4, #12]
 800aa78:	6832      	ldr	r2, [r6, #0]
 800aa7a:	1a9b      	subs	r3, r3, r2
 800aa7c:	42ab      	cmp	r3, r5
 800aa7e:	dc26      	bgt.n	800aace <_printf_common+0x96>
 800aa80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa84:	1e13      	subs	r3, r2, #0
 800aa86:	6822      	ldr	r2, [r4, #0]
 800aa88:	bf18      	it	ne
 800aa8a:	2301      	movne	r3, #1
 800aa8c:	0692      	lsls	r2, r2, #26
 800aa8e:	d42b      	bmi.n	800aae8 <_printf_common+0xb0>
 800aa90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa94:	4649      	mov	r1, r9
 800aa96:	4638      	mov	r0, r7
 800aa98:	47c0      	blx	r8
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	d01e      	beq.n	800aadc <_printf_common+0xa4>
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	6922      	ldr	r2, [r4, #16]
 800aaa2:	f003 0306 	and.w	r3, r3, #6
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	bf02      	ittt	eq
 800aaaa:	68e5      	ldreq	r5, [r4, #12]
 800aaac:	6833      	ldreq	r3, [r6, #0]
 800aaae:	1aed      	subeq	r5, r5, r3
 800aab0:	68a3      	ldr	r3, [r4, #8]
 800aab2:	bf0c      	ite	eq
 800aab4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aab8:	2500      	movne	r5, #0
 800aaba:	4293      	cmp	r3, r2
 800aabc:	bfc4      	itt	gt
 800aabe:	1a9b      	subgt	r3, r3, r2
 800aac0:	18ed      	addgt	r5, r5, r3
 800aac2:	2600      	movs	r6, #0
 800aac4:	341a      	adds	r4, #26
 800aac6:	42b5      	cmp	r5, r6
 800aac8:	d11a      	bne.n	800ab00 <_printf_common+0xc8>
 800aaca:	2000      	movs	r0, #0
 800aacc:	e008      	b.n	800aae0 <_printf_common+0xa8>
 800aace:	2301      	movs	r3, #1
 800aad0:	4652      	mov	r2, sl
 800aad2:	4649      	mov	r1, r9
 800aad4:	4638      	mov	r0, r7
 800aad6:	47c0      	blx	r8
 800aad8:	3001      	adds	r0, #1
 800aada:	d103      	bne.n	800aae4 <_printf_common+0xac>
 800aadc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aae0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aae4:	3501      	adds	r5, #1
 800aae6:	e7c6      	b.n	800aa76 <_printf_common+0x3e>
 800aae8:	18e1      	adds	r1, r4, r3
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	2030      	movs	r0, #48	; 0x30
 800aaee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aaf2:	4422      	add	r2, r4
 800aaf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aafc:	3302      	adds	r3, #2
 800aafe:	e7c7      	b.n	800aa90 <_printf_common+0x58>
 800ab00:	2301      	movs	r3, #1
 800ab02:	4622      	mov	r2, r4
 800ab04:	4649      	mov	r1, r9
 800ab06:	4638      	mov	r0, r7
 800ab08:	47c0      	blx	r8
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	d0e6      	beq.n	800aadc <_printf_common+0xa4>
 800ab0e:	3601      	adds	r6, #1
 800ab10:	e7d9      	b.n	800aac6 <_printf_common+0x8e>
	...

0800ab14 <_printf_i>:
 800ab14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab18:	7e0f      	ldrb	r7, [r1, #24]
 800ab1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab1c:	2f78      	cmp	r7, #120	; 0x78
 800ab1e:	4691      	mov	r9, r2
 800ab20:	4680      	mov	r8, r0
 800ab22:	460c      	mov	r4, r1
 800ab24:	469a      	mov	sl, r3
 800ab26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab2a:	d807      	bhi.n	800ab3c <_printf_i+0x28>
 800ab2c:	2f62      	cmp	r7, #98	; 0x62
 800ab2e:	d80a      	bhi.n	800ab46 <_printf_i+0x32>
 800ab30:	2f00      	cmp	r7, #0
 800ab32:	f000 80d4 	beq.w	800acde <_printf_i+0x1ca>
 800ab36:	2f58      	cmp	r7, #88	; 0x58
 800ab38:	f000 80c0 	beq.w	800acbc <_printf_i+0x1a8>
 800ab3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab44:	e03a      	b.n	800abbc <_printf_i+0xa8>
 800ab46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab4a:	2b15      	cmp	r3, #21
 800ab4c:	d8f6      	bhi.n	800ab3c <_printf_i+0x28>
 800ab4e:	a101      	add	r1, pc, #4	; (adr r1, 800ab54 <_printf_i+0x40>)
 800ab50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab54:	0800abad 	.word	0x0800abad
 800ab58:	0800abc1 	.word	0x0800abc1
 800ab5c:	0800ab3d 	.word	0x0800ab3d
 800ab60:	0800ab3d 	.word	0x0800ab3d
 800ab64:	0800ab3d 	.word	0x0800ab3d
 800ab68:	0800ab3d 	.word	0x0800ab3d
 800ab6c:	0800abc1 	.word	0x0800abc1
 800ab70:	0800ab3d 	.word	0x0800ab3d
 800ab74:	0800ab3d 	.word	0x0800ab3d
 800ab78:	0800ab3d 	.word	0x0800ab3d
 800ab7c:	0800ab3d 	.word	0x0800ab3d
 800ab80:	0800acc5 	.word	0x0800acc5
 800ab84:	0800abed 	.word	0x0800abed
 800ab88:	0800ac7f 	.word	0x0800ac7f
 800ab8c:	0800ab3d 	.word	0x0800ab3d
 800ab90:	0800ab3d 	.word	0x0800ab3d
 800ab94:	0800ace7 	.word	0x0800ace7
 800ab98:	0800ab3d 	.word	0x0800ab3d
 800ab9c:	0800abed 	.word	0x0800abed
 800aba0:	0800ab3d 	.word	0x0800ab3d
 800aba4:	0800ab3d 	.word	0x0800ab3d
 800aba8:	0800ac87 	.word	0x0800ac87
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	1d1a      	adds	r2, r3, #4
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	602a      	str	r2, [r5, #0]
 800abb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800abbc:	2301      	movs	r3, #1
 800abbe:	e09f      	b.n	800ad00 <_printf_i+0x1ec>
 800abc0:	6820      	ldr	r0, [r4, #0]
 800abc2:	682b      	ldr	r3, [r5, #0]
 800abc4:	0607      	lsls	r7, r0, #24
 800abc6:	f103 0104 	add.w	r1, r3, #4
 800abca:	6029      	str	r1, [r5, #0]
 800abcc:	d501      	bpl.n	800abd2 <_printf_i+0xbe>
 800abce:	681e      	ldr	r6, [r3, #0]
 800abd0:	e003      	b.n	800abda <_printf_i+0xc6>
 800abd2:	0646      	lsls	r6, r0, #25
 800abd4:	d5fb      	bpl.n	800abce <_printf_i+0xba>
 800abd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800abda:	2e00      	cmp	r6, #0
 800abdc:	da03      	bge.n	800abe6 <_printf_i+0xd2>
 800abde:	232d      	movs	r3, #45	; 0x2d
 800abe0:	4276      	negs	r6, r6
 800abe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abe6:	485a      	ldr	r0, [pc, #360]	; (800ad50 <_printf_i+0x23c>)
 800abe8:	230a      	movs	r3, #10
 800abea:	e012      	b.n	800ac12 <_printf_i+0xfe>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	6820      	ldr	r0, [r4, #0]
 800abf0:	1d19      	adds	r1, r3, #4
 800abf2:	6029      	str	r1, [r5, #0]
 800abf4:	0605      	lsls	r5, r0, #24
 800abf6:	d501      	bpl.n	800abfc <_printf_i+0xe8>
 800abf8:	681e      	ldr	r6, [r3, #0]
 800abfa:	e002      	b.n	800ac02 <_printf_i+0xee>
 800abfc:	0641      	lsls	r1, r0, #25
 800abfe:	d5fb      	bpl.n	800abf8 <_printf_i+0xe4>
 800ac00:	881e      	ldrh	r6, [r3, #0]
 800ac02:	4853      	ldr	r0, [pc, #332]	; (800ad50 <_printf_i+0x23c>)
 800ac04:	2f6f      	cmp	r7, #111	; 0x6f
 800ac06:	bf0c      	ite	eq
 800ac08:	2308      	moveq	r3, #8
 800ac0a:	230a      	movne	r3, #10
 800ac0c:	2100      	movs	r1, #0
 800ac0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac12:	6865      	ldr	r5, [r4, #4]
 800ac14:	60a5      	str	r5, [r4, #8]
 800ac16:	2d00      	cmp	r5, #0
 800ac18:	bfa2      	ittt	ge
 800ac1a:	6821      	ldrge	r1, [r4, #0]
 800ac1c:	f021 0104 	bicge.w	r1, r1, #4
 800ac20:	6021      	strge	r1, [r4, #0]
 800ac22:	b90e      	cbnz	r6, 800ac28 <_printf_i+0x114>
 800ac24:	2d00      	cmp	r5, #0
 800ac26:	d04b      	beq.n	800acc0 <_printf_i+0x1ac>
 800ac28:	4615      	mov	r5, r2
 800ac2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac2e:	fb03 6711 	mls	r7, r3, r1, r6
 800ac32:	5dc7      	ldrb	r7, [r0, r7]
 800ac34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac38:	4637      	mov	r7, r6
 800ac3a:	42bb      	cmp	r3, r7
 800ac3c:	460e      	mov	r6, r1
 800ac3e:	d9f4      	bls.n	800ac2a <_printf_i+0x116>
 800ac40:	2b08      	cmp	r3, #8
 800ac42:	d10b      	bne.n	800ac5c <_printf_i+0x148>
 800ac44:	6823      	ldr	r3, [r4, #0]
 800ac46:	07de      	lsls	r6, r3, #31
 800ac48:	d508      	bpl.n	800ac5c <_printf_i+0x148>
 800ac4a:	6923      	ldr	r3, [r4, #16]
 800ac4c:	6861      	ldr	r1, [r4, #4]
 800ac4e:	4299      	cmp	r1, r3
 800ac50:	bfde      	ittt	le
 800ac52:	2330      	movle	r3, #48	; 0x30
 800ac54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ac5c:	1b52      	subs	r2, r2, r5
 800ac5e:	6122      	str	r2, [r4, #16]
 800ac60:	f8cd a000 	str.w	sl, [sp]
 800ac64:	464b      	mov	r3, r9
 800ac66:	aa03      	add	r2, sp, #12
 800ac68:	4621      	mov	r1, r4
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	f7ff fee4 	bl	800aa38 <_printf_common>
 800ac70:	3001      	adds	r0, #1
 800ac72:	d14a      	bne.n	800ad0a <_printf_i+0x1f6>
 800ac74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac78:	b004      	add	sp, #16
 800ac7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7e:	6823      	ldr	r3, [r4, #0]
 800ac80:	f043 0320 	orr.w	r3, r3, #32
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	4833      	ldr	r0, [pc, #204]	; (800ad54 <_printf_i+0x240>)
 800ac88:	2778      	movs	r7, #120	; 0x78
 800ac8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac8e:	6823      	ldr	r3, [r4, #0]
 800ac90:	6829      	ldr	r1, [r5, #0]
 800ac92:	061f      	lsls	r7, r3, #24
 800ac94:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac98:	d402      	bmi.n	800aca0 <_printf_i+0x18c>
 800ac9a:	065f      	lsls	r7, r3, #25
 800ac9c:	bf48      	it	mi
 800ac9e:	b2b6      	uxthmi	r6, r6
 800aca0:	07df      	lsls	r7, r3, #31
 800aca2:	bf48      	it	mi
 800aca4:	f043 0320 	orrmi.w	r3, r3, #32
 800aca8:	6029      	str	r1, [r5, #0]
 800acaa:	bf48      	it	mi
 800acac:	6023      	strmi	r3, [r4, #0]
 800acae:	b91e      	cbnz	r6, 800acb8 <_printf_i+0x1a4>
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	f023 0320 	bic.w	r3, r3, #32
 800acb6:	6023      	str	r3, [r4, #0]
 800acb8:	2310      	movs	r3, #16
 800acba:	e7a7      	b.n	800ac0c <_printf_i+0xf8>
 800acbc:	4824      	ldr	r0, [pc, #144]	; (800ad50 <_printf_i+0x23c>)
 800acbe:	e7e4      	b.n	800ac8a <_printf_i+0x176>
 800acc0:	4615      	mov	r5, r2
 800acc2:	e7bd      	b.n	800ac40 <_printf_i+0x12c>
 800acc4:	682b      	ldr	r3, [r5, #0]
 800acc6:	6826      	ldr	r6, [r4, #0]
 800acc8:	6961      	ldr	r1, [r4, #20]
 800acca:	1d18      	adds	r0, r3, #4
 800accc:	6028      	str	r0, [r5, #0]
 800acce:	0635      	lsls	r5, r6, #24
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	d501      	bpl.n	800acd8 <_printf_i+0x1c4>
 800acd4:	6019      	str	r1, [r3, #0]
 800acd6:	e002      	b.n	800acde <_printf_i+0x1ca>
 800acd8:	0670      	lsls	r0, r6, #25
 800acda:	d5fb      	bpl.n	800acd4 <_printf_i+0x1c0>
 800acdc:	8019      	strh	r1, [r3, #0]
 800acde:	2300      	movs	r3, #0
 800ace0:	6123      	str	r3, [r4, #16]
 800ace2:	4615      	mov	r5, r2
 800ace4:	e7bc      	b.n	800ac60 <_printf_i+0x14c>
 800ace6:	682b      	ldr	r3, [r5, #0]
 800ace8:	1d1a      	adds	r2, r3, #4
 800acea:	602a      	str	r2, [r5, #0]
 800acec:	681d      	ldr	r5, [r3, #0]
 800acee:	6862      	ldr	r2, [r4, #4]
 800acf0:	2100      	movs	r1, #0
 800acf2:	4628      	mov	r0, r5
 800acf4:	f7f5 fa84 	bl	8000200 <memchr>
 800acf8:	b108      	cbz	r0, 800acfe <_printf_i+0x1ea>
 800acfa:	1b40      	subs	r0, r0, r5
 800acfc:	6060      	str	r0, [r4, #4]
 800acfe:	6863      	ldr	r3, [r4, #4]
 800ad00:	6123      	str	r3, [r4, #16]
 800ad02:	2300      	movs	r3, #0
 800ad04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad08:	e7aa      	b.n	800ac60 <_printf_i+0x14c>
 800ad0a:	6923      	ldr	r3, [r4, #16]
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	4649      	mov	r1, r9
 800ad10:	4640      	mov	r0, r8
 800ad12:	47d0      	blx	sl
 800ad14:	3001      	adds	r0, #1
 800ad16:	d0ad      	beq.n	800ac74 <_printf_i+0x160>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	079b      	lsls	r3, r3, #30
 800ad1c:	d413      	bmi.n	800ad46 <_printf_i+0x232>
 800ad1e:	68e0      	ldr	r0, [r4, #12]
 800ad20:	9b03      	ldr	r3, [sp, #12]
 800ad22:	4298      	cmp	r0, r3
 800ad24:	bfb8      	it	lt
 800ad26:	4618      	movlt	r0, r3
 800ad28:	e7a6      	b.n	800ac78 <_printf_i+0x164>
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	4632      	mov	r2, r6
 800ad2e:	4649      	mov	r1, r9
 800ad30:	4640      	mov	r0, r8
 800ad32:	47d0      	blx	sl
 800ad34:	3001      	adds	r0, #1
 800ad36:	d09d      	beq.n	800ac74 <_printf_i+0x160>
 800ad38:	3501      	adds	r5, #1
 800ad3a:	68e3      	ldr	r3, [r4, #12]
 800ad3c:	9903      	ldr	r1, [sp, #12]
 800ad3e:	1a5b      	subs	r3, r3, r1
 800ad40:	42ab      	cmp	r3, r5
 800ad42:	dcf2      	bgt.n	800ad2a <_printf_i+0x216>
 800ad44:	e7eb      	b.n	800ad1e <_printf_i+0x20a>
 800ad46:	2500      	movs	r5, #0
 800ad48:	f104 0619 	add.w	r6, r4, #25
 800ad4c:	e7f5      	b.n	800ad3a <_printf_i+0x226>
 800ad4e:	bf00      	nop
 800ad50:	0800efee 	.word	0x0800efee
 800ad54:	0800efff 	.word	0x0800efff

0800ad58 <_scanf_float>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	b087      	sub	sp, #28
 800ad5e:	4617      	mov	r7, r2
 800ad60:	9303      	str	r3, [sp, #12]
 800ad62:	688b      	ldr	r3, [r1, #8]
 800ad64:	1e5a      	subs	r2, r3, #1
 800ad66:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ad6a:	bf83      	ittte	hi
 800ad6c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ad70:	195b      	addhi	r3, r3, r5
 800ad72:	9302      	strhi	r3, [sp, #8]
 800ad74:	2300      	movls	r3, #0
 800ad76:	bf86      	itte	hi
 800ad78:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ad7c:	608b      	strhi	r3, [r1, #8]
 800ad7e:	9302      	strls	r3, [sp, #8]
 800ad80:	680b      	ldr	r3, [r1, #0]
 800ad82:	468b      	mov	fp, r1
 800ad84:	2500      	movs	r5, #0
 800ad86:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ad8a:	f84b 3b1c 	str.w	r3, [fp], #28
 800ad8e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ad92:	4680      	mov	r8, r0
 800ad94:	460c      	mov	r4, r1
 800ad96:	465e      	mov	r6, fp
 800ad98:	46aa      	mov	sl, r5
 800ad9a:	46a9      	mov	r9, r5
 800ad9c:	9501      	str	r5, [sp, #4]
 800ad9e:	68a2      	ldr	r2, [r4, #8]
 800ada0:	b152      	cbz	r2, 800adb8 <_scanf_float+0x60>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b4e      	cmp	r3, #78	; 0x4e
 800ada8:	d864      	bhi.n	800ae74 <_scanf_float+0x11c>
 800adaa:	2b40      	cmp	r3, #64	; 0x40
 800adac:	d83c      	bhi.n	800ae28 <_scanf_float+0xd0>
 800adae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800adb2:	b2c8      	uxtb	r0, r1
 800adb4:	280e      	cmp	r0, #14
 800adb6:	d93a      	bls.n	800ae2e <_scanf_float+0xd6>
 800adb8:	f1b9 0f00 	cmp.w	r9, #0
 800adbc:	d003      	beq.n	800adc6 <_scanf_float+0x6e>
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800adca:	f1ba 0f01 	cmp.w	sl, #1
 800adce:	f200 8113 	bhi.w	800aff8 <_scanf_float+0x2a0>
 800add2:	455e      	cmp	r6, fp
 800add4:	f200 8105 	bhi.w	800afe2 <_scanf_float+0x28a>
 800add8:	2501      	movs	r5, #1
 800adda:	4628      	mov	r0, r5
 800addc:	b007      	add	sp, #28
 800adde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ade6:	2a0d      	cmp	r2, #13
 800ade8:	d8e6      	bhi.n	800adb8 <_scanf_float+0x60>
 800adea:	a101      	add	r1, pc, #4	; (adr r1, 800adf0 <_scanf_float+0x98>)
 800adec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800adf0:	0800af2f 	.word	0x0800af2f
 800adf4:	0800adb9 	.word	0x0800adb9
 800adf8:	0800adb9 	.word	0x0800adb9
 800adfc:	0800adb9 	.word	0x0800adb9
 800ae00:	0800af8f 	.word	0x0800af8f
 800ae04:	0800af67 	.word	0x0800af67
 800ae08:	0800adb9 	.word	0x0800adb9
 800ae0c:	0800adb9 	.word	0x0800adb9
 800ae10:	0800af3d 	.word	0x0800af3d
 800ae14:	0800adb9 	.word	0x0800adb9
 800ae18:	0800adb9 	.word	0x0800adb9
 800ae1c:	0800adb9 	.word	0x0800adb9
 800ae20:	0800adb9 	.word	0x0800adb9
 800ae24:	0800aef5 	.word	0x0800aef5
 800ae28:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ae2c:	e7db      	b.n	800ade6 <_scanf_float+0x8e>
 800ae2e:	290e      	cmp	r1, #14
 800ae30:	d8c2      	bhi.n	800adb8 <_scanf_float+0x60>
 800ae32:	a001      	add	r0, pc, #4	; (adr r0, 800ae38 <_scanf_float+0xe0>)
 800ae34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ae38:	0800aee7 	.word	0x0800aee7
 800ae3c:	0800adb9 	.word	0x0800adb9
 800ae40:	0800aee7 	.word	0x0800aee7
 800ae44:	0800af7b 	.word	0x0800af7b
 800ae48:	0800adb9 	.word	0x0800adb9
 800ae4c:	0800ae95 	.word	0x0800ae95
 800ae50:	0800aed1 	.word	0x0800aed1
 800ae54:	0800aed1 	.word	0x0800aed1
 800ae58:	0800aed1 	.word	0x0800aed1
 800ae5c:	0800aed1 	.word	0x0800aed1
 800ae60:	0800aed1 	.word	0x0800aed1
 800ae64:	0800aed1 	.word	0x0800aed1
 800ae68:	0800aed1 	.word	0x0800aed1
 800ae6c:	0800aed1 	.word	0x0800aed1
 800ae70:	0800aed1 	.word	0x0800aed1
 800ae74:	2b6e      	cmp	r3, #110	; 0x6e
 800ae76:	d809      	bhi.n	800ae8c <_scanf_float+0x134>
 800ae78:	2b60      	cmp	r3, #96	; 0x60
 800ae7a:	d8b2      	bhi.n	800ade2 <_scanf_float+0x8a>
 800ae7c:	2b54      	cmp	r3, #84	; 0x54
 800ae7e:	d077      	beq.n	800af70 <_scanf_float+0x218>
 800ae80:	2b59      	cmp	r3, #89	; 0x59
 800ae82:	d199      	bne.n	800adb8 <_scanf_float+0x60>
 800ae84:	2d07      	cmp	r5, #7
 800ae86:	d197      	bne.n	800adb8 <_scanf_float+0x60>
 800ae88:	2508      	movs	r5, #8
 800ae8a:	e029      	b.n	800aee0 <_scanf_float+0x188>
 800ae8c:	2b74      	cmp	r3, #116	; 0x74
 800ae8e:	d06f      	beq.n	800af70 <_scanf_float+0x218>
 800ae90:	2b79      	cmp	r3, #121	; 0x79
 800ae92:	e7f6      	b.n	800ae82 <_scanf_float+0x12a>
 800ae94:	6821      	ldr	r1, [r4, #0]
 800ae96:	05c8      	lsls	r0, r1, #23
 800ae98:	d51a      	bpl.n	800aed0 <_scanf_float+0x178>
 800ae9a:	9b02      	ldr	r3, [sp, #8]
 800ae9c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800aea0:	6021      	str	r1, [r4, #0]
 800aea2:	f109 0901 	add.w	r9, r9, #1
 800aea6:	b11b      	cbz	r3, 800aeb0 <_scanf_float+0x158>
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	3201      	adds	r2, #1
 800aeac:	9302      	str	r3, [sp, #8]
 800aeae:	60a2      	str	r2, [r4, #8]
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	60a3      	str	r3, [r4, #8]
 800aeb6:	6923      	ldr	r3, [r4, #16]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	6123      	str	r3, [r4, #16]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3b01      	subs	r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	607b      	str	r3, [r7, #4]
 800aec4:	f340 8084 	ble.w	800afd0 <_scanf_float+0x278>
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	3301      	adds	r3, #1
 800aecc:	603b      	str	r3, [r7, #0]
 800aece:	e766      	b.n	800ad9e <_scanf_float+0x46>
 800aed0:	eb1a 0f05 	cmn.w	sl, r5
 800aed4:	f47f af70 	bne.w	800adb8 <_scanf_float+0x60>
 800aed8:	6822      	ldr	r2, [r4, #0]
 800aeda:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800aede:	6022      	str	r2, [r4, #0]
 800aee0:	f806 3b01 	strb.w	r3, [r6], #1
 800aee4:	e7e4      	b.n	800aeb0 <_scanf_float+0x158>
 800aee6:	6822      	ldr	r2, [r4, #0]
 800aee8:	0610      	lsls	r0, r2, #24
 800aeea:	f57f af65 	bpl.w	800adb8 <_scanf_float+0x60>
 800aeee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aef2:	e7f4      	b.n	800aede <_scanf_float+0x186>
 800aef4:	f1ba 0f00 	cmp.w	sl, #0
 800aef8:	d10e      	bne.n	800af18 <_scanf_float+0x1c0>
 800aefa:	f1b9 0f00 	cmp.w	r9, #0
 800aefe:	d10e      	bne.n	800af1e <_scanf_float+0x1c6>
 800af00:	6822      	ldr	r2, [r4, #0]
 800af02:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af06:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af0a:	d108      	bne.n	800af1e <_scanf_float+0x1c6>
 800af0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af10:	6022      	str	r2, [r4, #0]
 800af12:	f04f 0a01 	mov.w	sl, #1
 800af16:	e7e3      	b.n	800aee0 <_scanf_float+0x188>
 800af18:	f1ba 0f02 	cmp.w	sl, #2
 800af1c:	d055      	beq.n	800afca <_scanf_float+0x272>
 800af1e:	2d01      	cmp	r5, #1
 800af20:	d002      	beq.n	800af28 <_scanf_float+0x1d0>
 800af22:	2d04      	cmp	r5, #4
 800af24:	f47f af48 	bne.w	800adb8 <_scanf_float+0x60>
 800af28:	3501      	adds	r5, #1
 800af2a:	b2ed      	uxtb	r5, r5
 800af2c:	e7d8      	b.n	800aee0 <_scanf_float+0x188>
 800af2e:	f1ba 0f01 	cmp.w	sl, #1
 800af32:	f47f af41 	bne.w	800adb8 <_scanf_float+0x60>
 800af36:	f04f 0a02 	mov.w	sl, #2
 800af3a:	e7d1      	b.n	800aee0 <_scanf_float+0x188>
 800af3c:	b97d      	cbnz	r5, 800af5e <_scanf_float+0x206>
 800af3e:	f1b9 0f00 	cmp.w	r9, #0
 800af42:	f47f af3c 	bne.w	800adbe <_scanf_float+0x66>
 800af46:	6822      	ldr	r2, [r4, #0]
 800af48:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800af4c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800af50:	f47f af39 	bne.w	800adc6 <_scanf_float+0x6e>
 800af54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800af58:	6022      	str	r2, [r4, #0]
 800af5a:	2501      	movs	r5, #1
 800af5c:	e7c0      	b.n	800aee0 <_scanf_float+0x188>
 800af5e:	2d03      	cmp	r5, #3
 800af60:	d0e2      	beq.n	800af28 <_scanf_float+0x1d0>
 800af62:	2d05      	cmp	r5, #5
 800af64:	e7de      	b.n	800af24 <_scanf_float+0x1cc>
 800af66:	2d02      	cmp	r5, #2
 800af68:	f47f af26 	bne.w	800adb8 <_scanf_float+0x60>
 800af6c:	2503      	movs	r5, #3
 800af6e:	e7b7      	b.n	800aee0 <_scanf_float+0x188>
 800af70:	2d06      	cmp	r5, #6
 800af72:	f47f af21 	bne.w	800adb8 <_scanf_float+0x60>
 800af76:	2507      	movs	r5, #7
 800af78:	e7b2      	b.n	800aee0 <_scanf_float+0x188>
 800af7a:	6822      	ldr	r2, [r4, #0]
 800af7c:	0591      	lsls	r1, r2, #22
 800af7e:	f57f af1b 	bpl.w	800adb8 <_scanf_float+0x60>
 800af82:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800af86:	6022      	str	r2, [r4, #0]
 800af88:	f8cd 9004 	str.w	r9, [sp, #4]
 800af8c:	e7a8      	b.n	800aee0 <_scanf_float+0x188>
 800af8e:	6822      	ldr	r2, [r4, #0]
 800af90:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800af94:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800af98:	d006      	beq.n	800afa8 <_scanf_float+0x250>
 800af9a:	0550      	lsls	r0, r2, #21
 800af9c:	f57f af0c 	bpl.w	800adb8 <_scanf_float+0x60>
 800afa0:	f1b9 0f00 	cmp.w	r9, #0
 800afa4:	f43f af0f 	beq.w	800adc6 <_scanf_float+0x6e>
 800afa8:	0591      	lsls	r1, r2, #22
 800afaa:	bf58      	it	pl
 800afac:	9901      	ldrpl	r1, [sp, #4]
 800afae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800afb2:	bf58      	it	pl
 800afb4:	eba9 0101 	subpl.w	r1, r9, r1
 800afb8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800afbc:	bf58      	it	pl
 800afbe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800afc2:	6022      	str	r2, [r4, #0]
 800afc4:	f04f 0900 	mov.w	r9, #0
 800afc8:	e78a      	b.n	800aee0 <_scanf_float+0x188>
 800afca:	f04f 0a03 	mov.w	sl, #3
 800afce:	e787      	b.n	800aee0 <_scanf_float+0x188>
 800afd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800afd4:	4639      	mov	r1, r7
 800afd6:	4640      	mov	r0, r8
 800afd8:	4798      	blx	r3
 800afda:	2800      	cmp	r0, #0
 800afdc:	f43f aedf 	beq.w	800ad9e <_scanf_float+0x46>
 800afe0:	e6ea      	b.n	800adb8 <_scanf_float+0x60>
 800afe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afe6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800afea:	463a      	mov	r2, r7
 800afec:	4640      	mov	r0, r8
 800afee:	4798      	blx	r3
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	3b01      	subs	r3, #1
 800aff4:	6123      	str	r3, [r4, #16]
 800aff6:	e6ec      	b.n	800add2 <_scanf_float+0x7a>
 800aff8:	1e6b      	subs	r3, r5, #1
 800affa:	2b06      	cmp	r3, #6
 800affc:	d825      	bhi.n	800b04a <_scanf_float+0x2f2>
 800affe:	2d02      	cmp	r5, #2
 800b000:	d836      	bhi.n	800b070 <_scanf_float+0x318>
 800b002:	455e      	cmp	r6, fp
 800b004:	f67f aee8 	bls.w	800add8 <_scanf_float+0x80>
 800b008:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b00c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b010:	463a      	mov	r2, r7
 800b012:	4640      	mov	r0, r8
 800b014:	4798      	blx	r3
 800b016:	6923      	ldr	r3, [r4, #16]
 800b018:	3b01      	subs	r3, #1
 800b01a:	6123      	str	r3, [r4, #16]
 800b01c:	e7f1      	b.n	800b002 <_scanf_float+0x2aa>
 800b01e:	9802      	ldr	r0, [sp, #8]
 800b020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b024:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b028:	9002      	str	r0, [sp, #8]
 800b02a:	463a      	mov	r2, r7
 800b02c:	4640      	mov	r0, r8
 800b02e:	4798      	blx	r3
 800b030:	6923      	ldr	r3, [r4, #16]
 800b032:	3b01      	subs	r3, #1
 800b034:	6123      	str	r3, [r4, #16]
 800b036:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b03a:	fa5f fa8a 	uxtb.w	sl, sl
 800b03e:	f1ba 0f02 	cmp.w	sl, #2
 800b042:	d1ec      	bne.n	800b01e <_scanf_float+0x2c6>
 800b044:	3d03      	subs	r5, #3
 800b046:	b2ed      	uxtb	r5, r5
 800b048:	1b76      	subs	r6, r6, r5
 800b04a:	6823      	ldr	r3, [r4, #0]
 800b04c:	05da      	lsls	r2, r3, #23
 800b04e:	d52f      	bpl.n	800b0b0 <_scanf_float+0x358>
 800b050:	055b      	lsls	r3, r3, #21
 800b052:	d510      	bpl.n	800b076 <_scanf_float+0x31e>
 800b054:	455e      	cmp	r6, fp
 800b056:	f67f aebf 	bls.w	800add8 <_scanf_float+0x80>
 800b05a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b05e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b062:	463a      	mov	r2, r7
 800b064:	4640      	mov	r0, r8
 800b066:	4798      	blx	r3
 800b068:	6923      	ldr	r3, [r4, #16]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	6123      	str	r3, [r4, #16]
 800b06e:	e7f1      	b.n	800b054 <_scanf_float+0x2fc>
 800b070:	46aa      	mov	sl, r5
 800b072:	9602      	str	r6, [sp, #8]
 800b074:	e7df      	b.n	800b036 <_scanf_float+0x2de>
 800b076:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b07a:	6923      	ldr	r3, [r4, #16]
 800b07c:	2965      	cmp	r1, #101	; 0x65
 800b07e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b082:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800b086:	6123      	str	r3, [r4, #16]
 800b088:	d00c      	beq.n	800b0a4 <_scanf_float+0x34c>
 800b08a:	2945      	cmp	r1, #69	; 0x45
 800b08c:	d00a      	beq.n	800b0a4 <_scanf_float+0x34c>
 800b08e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b092:	463a      	mov	r2, r7
 800b094:	4640      	mov	r0, r8
 800b096:	4798      	blx	r3
 800b098:	6923      	ldr	r3, [r4, #16]
 800b09a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	1eb5      	subs	r5, r6, #2
 800b0a2:	6123      	str	r3, [r4, #16]
 800b0a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b0a8:	463a      	mov	r2, r7
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	4798      	blx	r3
 800b0ae:	462e      	mov	r6, r5
 800b0b0:	6825      	ldr	r5, [r4, #0]
 800b0b2:	f015 0510 	ands.w	r5, r5, #16
 800b0b6:	d158      	bne.n	800b16a <_scanf_float+0x412>
 800b0b8:	7035      	strb	r5, [r6, #0]
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b0c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0c4:	d11c      	bne.n	800b100 <_scanf_float+0x3a8>
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	454b      	cmp	r3, r9
 800b0ca:	eba3 0209 	sub.w	r2, r3, r9
 800b0ce:	d124      	bne.n	800b11a <_scanf_float+0x3c2>
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4659      	mov	r1, fp
 800b0d4:	4640      	mov	r0, r8
 800b0d6:	f000 ff1f 	bl	800bf18 <_strtod_r>
 800b0da:	9b03      	ldr	r3, [sp, #12]
 800b0dc:	6821      	ldr	r1, [r4, #0]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f011 0f02 	tst.w	r1, #2
 800b0e4:	ec57 6b10 	vmov	r6, r7, d0
 800b0e8:	f103 0204 	add.w	r2, r3, #4
 800b0ec:	d020      	beq.n	800b130 <_scanf_float+0x3d8>
 800b0ee:	9903      	ldr	r1, [sp, #12]
 800b0f0:	600a      	str	r2, [r1, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	e9c3 6700 	strd	r6, r7, [r3]
 800b0f8:	68e3      	ldr	r3, [r4, #12]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	60e3      	str	r3, [r4, #12]
 800b0fe:	e66c      	b.n	800adda <_scanf_float+0x82>
 800b100:	9b04      	ldr	r3, [sp, #16]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d0e4      	beq.n	800b0d0 <_scanf_float+0x378>
 800b106:	9905      	ldr	r1, [sp, #20]
 800b108:	230a      	movs	r3, #10
 800b10a:	462a      	mov	r2, r5
 800b10c:	3101      	adds	r1, #1
 800b10e:	4640      	mov	r0, r8
 800b110:	f000 ff8a 	bl	800c028 <_strtol_r>
 800b114:	9b04      	ldr	r3, [sp, #16]
 800b116:	9e05      	ldr	r6, [sp, #20]
 800b118:	1ac2      	subs	r2, r0, r3
 800b11a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b11e:	429e      	cmp	r6, r3
 800b120:	bf28      	it	cs
 800b122:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b126:	4912      	ldr	r1, [pc, #72]	; (800b170 <_scanf_float+0x418>)
 800b128:	4630      	mov	r0, r6
 800b12a:	f000 f825 	bl	800b178 <siprintf>
 800b12e:	e7cf      	b.n	800b0d0 <_scanf_float+0x378>
 800b130:	f011 0f04 	tst.w	r1, #4
 800b134:	9903      	ldr	r1, [sp, #12]
 800b136:	600a      	str	r2, [r1, #0]
 800b138:	d1db      	bne.n	800b0f2 <_scanf_float+0x39a>
 800b13a:	f8d3 8000 	ldr.w	r8, [r3]
 800b13e:	ee10 2a10 	vmov	r2, s0
 800b142:	ee10 0a10 	vmov	r0, s0
 800b146:	463b      	mov	r3, r7
 800b148:	4639      	mov	r1, r7
 800b14a:	f7f5 fd07 	bl	8000b5c <__aeabi_dcmpun>
 800b14e:	b128      	cbz	r0, 800b15c <_scanf_float+0x404>
 800b150:	4808      	ldr	r0, [pc, #32]	; (800b174 <_scanf_float+0x41c>)
 800b152:	f001 f841 	bl	800c1d8 <nanf>
 800b156:	ed88 0a00 	vstr	s0, [r8]
 800b15a:	e7cd      	b.n	800b0f8 <_scanf_float+0x3a0>
 800b15c:	4630      	mov	r0, r6
 800b15e:	4639      	mov	r1, r7
 800b160:	f7f5 fd5a 	bl	8000c18 <__aeabi_d2f>
 800b164:	f8c8 0000 	str.w	r0, [r8]
 800b168:	e7c6      	b.n	800b0f8 <_scanf_float+0x3a0>
 800b16a:	2500      	movs	r5, #0
 800b16c:	e635      	b.n	800adda <_scanf_float+0x82>
 800b16e:	bf00      	nop
 800b170:	0800f010 	.word	0x0800f010
 800b174:	0800f3ff 	.word	0x0800f3ff

0800b178 <siprintf>:
 800b178:	b40e      	push	{r1, r2, r3}
 800b17a:	b500      	push	{lr}
 800b17c:	b09c      	sub	sp, #112	; 0x70
 800b17e:	ab1d      	add	r3, sp, #116	; 0x74
 800b180:	9002      	str	r0, [sp, #8]
 800b182:	9006      	str	r0, [sp, #24]
 800b184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b188:	4809      	ldr	r0, [pc, #36]	; (800b1b0 <siprintf+0x38>)
 800b18a:	9107      	str	r1, [sp, #28]
 800b18c:	9104      	str	r1, [sp, #16]
 800b18e:	4909      	ldr	r1, [pc, #36]	; (800b1b4 <siprintf+0x3c>)
 800b190:	f853 2b04 	ldr.w	r2, [r3], #4
 800b194:	9105      	str	r1, [sp, #20]
 800b196:	6800      	ldr	r0, [r0, #0]
 800b198:	9301      	str	r3, [sp, #4]
 800b19a:	a902      	add	r1, sp, #8
 800b19c:	f002 fa9c 	bl	800d6d8 <_svfiprintf_r>
 800b1a0:	9b02      	ldr	r3, [sp, #8]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	701a      	strb	r2, [r3, #0]
 800b1a6:	b01c      	add	sp, #112	; 0x70
 800b1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1ac:	b003      	add	sp, #12
 800b1ae:	4770      	bx	lr
 800b1b0:	2000025c 	.word	0x2000025c
 800b1b4:	ffff0208 	.word	0xffff0208

0800b1b8 <std>:
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	b510      	push	{r4, lr}
 800b1bc:	4604      	mov	r4, r0
 800b1be:	e9c0 3300 	strd	r3, r3, [r0]
 800b1c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1c6:	6083      	str	r3, [r0, #8]
 800b1c8:	8181      	strh	r1, [r0, #12]
 800b1ca:	6643      	str	r3, [r0, #100]	; 0x64
 800b1cc:	81c2      	strh	r2, [r0, #14]
 800b1ce:	6183      	str	r3, [r0, #24]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	2208      	movs	r2, #8
 800b1d4:	305c      	adds	r0, #92	; 0x5c
 800b1d6:	f000 ff59 	bl	800c08c <memset>
 800b1da:	4b0d      	ldr	r3, [pc, #52]	; (800b210 <std+0x58>)
 800b1dc:	6263      	str	r3, [r4, #36]	; 0x24
 800b1de:	4b0d      	ldr	r3, [pc, #52]	; (800b214 <std+0x5c>)
 800b1e0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1e2:	4b0d      	ldr	r3, [pc, #52]	; (800b218 <std+0x60>)
 800b1e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1e6:	4b0d      	ldr	r3, [pc, #52]	; (800b21c <std+0x64>)
 800b1e8:	6323      	str	r3, [r4, #48]	; 0x30
 800b1ea:	4b0d      	ldr	r3, [pc, #52]	; (800b220 <std+0x68>)
 800b1ec:	6224      	str	r4, [r4, #32]
 800b1ee:	429c      	cmp	r4, r3
 800b1f0:	d006      	beq.n	800b200 <std+0x48>
 800b1f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b1f6:	4294      	cmp	r4, r2
 800b1f8:	d002      	beq.n	800b200 <std+0x48>
 800b1fa:	33d0      	adds	r3, #208	; 0xd0
 800b1fc:	429c      	cmp	r4, r3
 800b1fe:	d105      	bne.n	800b20c <std+0x54>
 800b200:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b208:	f000 bfcc 	b.w	800c1a4 <__retarget_lock_init_recursive>
 800b20c:	bd10      	pop	{r4, pc}
 800b20e:	bf00      	nop
 800b210:	0800e517 	.word	0x0800e517
 800b214:	0800e539 	.word	0x0800e539
 800b218:	0800e571 	.word	0x0800e571
 800b21c:	0800e595 	.word	0x0800e595
 800b220:	20001524 	.word	0x20001524

0800b224 <stdio_exit_handler>:
 800b224:	4a02      	ldr	r2, [pc, #8]	; (800b230 <stdio_exit_handler+0xc>)
 800b226:	4903      	ldr	r1, [pc, #12]	; (800b234 <stdio_exit_handler+0x10>)
 800b228:	4803      	ldr	r0, [pc, #12]	; (800b238 <stdio_exit_handler+0x14>)
 800b22a:	f000 beff 	b.w	800c02c <_fwalk_sglue>
 800b22e:	bf00      	nop
 800b230:	20000098 	.word	0x20000098
 800b234:	0800db55 	.word	0x0800db55
 800b238:	20000210 	.word	0x20000210

0800b23c <cleanup_stdio>:
 800b23c:	6841      	ldr	r1, [r0, #4]
 800b23e:	4b0c      	ldr	r3, [pc, #48]	; (800b270 <cleanup_stdio+0x34>)
 800b240:	4299      	cmp	r1, r3
 800b242:	b510      	push	{r4, lr}
 800b244:	4604      	mov	r4, r0
 800b246:	d001      	beq.n	800b24c <cleanup_stdio+0x10>
 800b248:	f002 fc84 	bl	800db54 <_fflush_r>
 800b24c:	68a1      	ldr	r1, [r4, #8]
 800b24e:	4b09      	ldr	r3, [pc, #36]	; (800b274 <cleanup_stdio+0x38>)
 800b250:	4299      	cmp	r1, r3
 800b252:	d002      	beq.n	800b25a <cleanup_stdio+0x1e>
 800b254:	4620      	mov	r0, r4
 800b256:	f002 fc7d 	bl	800db54 <_fflush_r>
 800b25a:	68e1      	ldr	r1, [r4, #12]
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <cleanup_stdio+0x3c>)
 800b25e:	4299      	cmp	r1, r3
 800b260:	d004      	beq.n	800b26c <cleanup_stdio+0x30>
 800b262:	4620      	mov	r0, r4
 800b264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b268:	f002 bc74 	b.w	800db54 <_fflush_r>
 800b26c:	bd10      	pop	{r4, pc}
 800b26e:	bf00      	nop
 800b270:	20001524 	.word	0x20001524
 800b274:	2000158c 	.word	0x2000158c
 800b278:	200015f4 	.word	0x200015f4

0800b27c <global_stdio_init.part.0>:
 800b27c:	b510      	push	{r4, lr}
 800b27e:	4b0b      	ldr	r3, [pc, #44]	; (800b2ac <global_stdio_init.part.0+0x30>)
 800b280:	4c0b      	ldr	r4, [pc, #44]	; (800b2b0 <global_stdio_init.part.0+0x34>)
 800b282:	4a0c      	ldr	r2, [pc, #48]	; (800b2b4 <global_stdio_init.part.0+0x38>)
 800b284:	601a      	str	r2, [r3, #0]
 800b286:	4620      	mov	r0, r4
 800b288:	2200      	movs	r2, #0
 800b28a:	2104      	movs	r1, #4
 800b28c:	f7ff ff94 	bl	800b1b8 <std>
 800b290:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b294:	2201      	movs	r2, #1
 800b296:	2109      	movs	r1, #9
 800b298:	f7ff ff8e 	bl	800b1b8 <std>
 800b29c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b2a0:	2202      	movs	r2, #2
 800b2a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2a6:	2112      	movs	r1, #18
 800b2a8:	f7ff bf86 	b.w	800b1b8 <std>
 800b2ac:	2000165c 	.word	0x2000165c
 800b2b0:	20001524 	.word	0x20001524
 800b2b4:	0800b225 	.word	0x0800b225

0800b2b8 <__sfp_lock_acquire>:
 800b2b8:	4801      	ldr	r0, [pc, #4]	; (800b2c0 <__sfp_lock_acquire+0x8>)
 800b2ba:	f000 bf74 	b.w	800c1a6 <__retarget_lock_acquire_recursive>
 800b2be:	bf00      	nop
 800b2c0:	20001665 	.word	0x20001665

0800b2c4 <__sfp_lock_release>:
 800b2c4:	4801      	ldr	r0, [pc, #4]	; (800b2cc <__sfp_lock_release+0x8>)
 800b2c6:	f000 bf6f 	b.w	800c1a8 <__retarget_lock_release_recursive>
 800b2ca:	bf00      	nop
 800b2cc:	20001665 	.word	0x20001665

0800b2d0 <__sinit>:
 800b2d0:	b510      	push	{r4, lr}
 800b2d2:	4604      	mov	r4, r0
 800b2d4:	f7ff fff0 	bl	800b2b8 <__sfp_lock_acquire>
 800b2d8:	6a23      	ldr	r3, [r4, #32]
 800b2da:	b11b      	cbz	r3, 800b2e4 <__sinit+0x14>
 800b2dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2e0:	f7ff bff0 	b.w	800b2c4 <__sfp_lock_release>
 800b2e4:	4b04      	ldr	r3, [pc, #16]	; (800b2f8 <__sinit+0x28>)
 800b2e6:	6223      	str	r3, [r4, #32]
 800b2e8:	4b04      	ldr	r3, [pc, #16]	; (800b2fc <__sinit+0x2c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1f5      	bne.n	800b2dc <__sinit+0xc>
 800b2f0:	f7ff ffc4 	bl	800b27c <global_stdio_init.part.0>
 800b2f4:	e7f2      	b.n	800b2dc <__sinit+0xc>
 800b2f6:	bf00      	nop
 800b2f8:	0800b23d 	.word	0x0800b23d
 800b2fc:	2000165c 	.word	0x2000165c

0800b300 <sulp>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	4604      	mov	r4, r0
 800b304:	460d      	mov	r5, r1
 800b306:	ec45 4b10 	vmov	d0, r4, r5
 800b30a:	4616      	mov	r6, r2
 800b30c:	f002 ffc2 	bl	800e294 <__ulp>
 800b310:	ec51 0b10 	vmov	r0, r1, d0
 800b314:	b17e      	cbz	r6, 800b336 <sulp+0x36>
 800b316:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b31a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b31e:	2b00      	cmp	r3, #0
 800b320:	dd09      	ble.n	800b336 <sulp+0x36>
 800b322:	051b      	lsls	r3, r3, #20
 800b324:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b328:	2400      	movs	r4, #0
 800b32a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b32e:	4622      	mov	r2, r4
 800b330:	462b      	mov	r3, r5
 800b332:	f7f5 f979 	bl	8000628 <__aeabi_dmul>
 800b336:	bd70      	pop	{r4, r5, r6, pc}

0800b338 <_strtod_l>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	ed2d 8b02 	vpush	{d8}
 800b340:	b09b      	sub	sp, #108	; 0x6c
 800b342:	4604      	mov	r4, r0
 800b344:	9213      	str	r2, [sp, #76]	; 0x4c
 800b346:	2200      	movs	r2, #0
 800b348:	9216      	str	r2, [sp, #88]	; 0x58
 800b34a:	460d      	mov	r5, r1
 800b34c:	f04f 0800 	mov.w	r8, #0
 800b350:	f04f 0900 	mov.w	r9, #0
 800b354:	460a      	mov	r2, r1
 800b356:	9215      	str	r2, [sp, #84]	; 0x54
 800b358:	7811      	ldrb	r1, [r2, #0]
 800b35a:	292b      	cmp	r1, #43	; 0x2b
 800b35c:	d04c      	beq.n	800b3f8 <_strtod_l+0xc0>
 800b35e:	d83a      	bhi.n	800b3d6 <_strtod_l+0x9e>
 800b360:	290d      	cmp	r1, #13
 800b362:	d834      	bhi.n	800b3ce <_strtod_l+0x96>
 800b364:	2908      	cmp	r1, #8
 800b366:	d834      	bhi.n	800b3d2 <_strtod_l+0x9a>
 800b368:	2900      	cmp	r1, #0
 800b36a:	d03d      	beq.n	800b3e8 <_strtod_l+0xb0>
 800b36c:	2200      	movs	r2, #0
 800b36e:	920a      	str	r2, [sp, #40]	; 0x28
 800b370:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b372:	7832      	ldrb	r2, [r6, #0]
 800b374:	2a30      	cmp	r2, #48	; 0x30
 800b376:	f040 80b4 	bne.w	800b4e2 <_strtod_l+0x1aa>
 800b37a:	7872      	ldrb	r2, [r6, #1]
 800b37c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b380:	2a58      	cmp	r2, #88	; 0x58
 800b382:	d170      	bne.n	800b466 <_strtod_l+0x12e>
 800b384:	9302      	str	r3, [sp, #8]
 800b386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b388:	9301      	str	r3, [sp, #4]
 800b38a:	ab16      	add	r3, sp, #88	; 0x58
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	4a8e      	ldr	r2, [pc, #568]	; (800b5c8 <_strtod_l+0x290>)
 800b390:	ab17      	add	r3, sp, #92	; 0x5c
 800b392:	a915      	add	r1, sp, #84	; 0x54
 800b394:	4620      	mov	r0, r4
 800b396:	f001 fe55 	bl	800d044 <__gethex>
 800b39a:	f010 070f 	ands.w	r7, r0, #15
 800b39e:	4605      	mov	r5, r0
 800b3a0:	d005      	beq.n	800b3ae <_strtod_l+0x76>
 800b3a2:	2f06      	cmp	r7, #6
 800b3a4:	d12a      	bne.n	800b3fc <_strtod_l+0xc4>
 800b3a6:	3601      	adds	r6, #1
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9615      	str	r6, [sp, #84]	; 0x54
 800b3ac:	930a      	str	r3, [sp, #40]	; 0x28
 800b3ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f040 857f 	bne.w	800beb4 <_strtod_l+0xb7c>
 800b3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3b8:	b1db      	cbz	r3, 800b3f2 <_strtod_l+0xba>
 800b3ba:	4642      	mov	r2, r8
 800b3bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b3c0:	ec43 2b10 	vmov	d0, r2, r3
 800b3c4:	b01b      	add	sp, #108	; 0x6c
 800b3c6:	ecbd 8b02 	vpop	{d8}
 800b3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ce:	2920      	cmp	r1, #32
 800b3d0:	d1cc      	bne.n	800b36c <_strtod_l+0x34>
 800b3d2:	3201      	adds	r2, #1
 800b3d4:	e7bf      	b.n	800b356 <_strtod_l+0x1e>
 800b3d6:	292d      	cmp	r1, #45	; 0x2d
 800b3d8:	d1c8      	bne.n	800b36c <_strtod_l+0x34>
 800b3da:	2101      	movs	r1, #1
 800b3dc:	910a      	str	r1, [sp, #40]	; 0x28
 800b3de:	1c51      	adds	r1, r2, #1
 800b3e0:	9115      	str	r1, [sp, #84]	; 0x54
 800b3e2:	7852      	ldrb	r2, [r2, #1]
 800b3e4:	2a00      	cmp	r2, #0
 800b3e6:	d1c3      	bne.n	800b370 <_strtod_l+0x38>
 800b3e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3ea:	9515      	str	r5, [sp, #84]	; 0x54
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f040 855f 	bne.w	800beb0 <_strtod_l+0xb78>
 800b3f2:	4642      	mov	r2, r8
 800b3f4:	464b      	mov	r3, r9
 800b3f6:	e7e3      	b.n	800b3c0 <_strtod_l+0x88>
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	e7ef      	b.n	800b3dc <_strtod_l+0xa4>
 800b3fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b3fe:	b13a      	cbz	r2, 800b410 <_strtod_l+0xd8>
 800b400:	2135      	movs	r1, #53	; 0x35
 800b402:	a818      	add	r0, sp, #96	; 0x60
 800b404:	f003 f843 	bl	800e48e <__copybits>
 800b408:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b40a:	4620      	mov	r0, r4
 800b40c:	f002 fc16 	bl	800dc3c <_Bfree>
 800b410:	3f01      	subs	r7, #1
 800b412:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b414:	2f04      	cmp	r7, #4
 800b416:	d806      	bhi.n	800b426 <_strtod_l+0xee>
 800b418:	e8df f007 	tbb	[pc, r7]
 800b41c:	201d0314 	.word	0x201d0314
 800b420:	14          	.byte	0x14
 800b421:	00          	.byte	0x00
 800b422:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b426:	05e9      	lsls	r1, r5, #23
 800b428:	bf48      	it	mi
 800b42a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b42e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b432:	0d1b      	lsrs	r3, r3, #20
 800b434:	051b      	lsls	r3, r3, #20
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1b9      	bne.n	800b3ae <_strtod_l+0x76>
 800b43a:	f000 fe89 	bl	800c150 <__errno>
 800b43e:	2322      	movs	r3, #34	; 0x22
 800b440:	6003      	str	r3, [r0, #0]
 800b442:	e7b4      	b.n	800b3ae <_strtod_l+0x76>
 800b444:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b448:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b44c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b450:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b454:	e7e7      	b.n	800b426 <_strtod_l+0xee>
 800b456:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b5d0 <_strtod_l+0x298>
 800b45a:	e7e4      	b.n	800b426 <_strtod_l+0xee>
 800b45c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b460:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b464:	e7df      	b.n	800b426 <_strtod_l+0xee>
 800b466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b468:	1c5a      	adds	r2, r3, #1
 800b46a:	9215      	str	r2, [sp, #84]	; 0x54
 800b46c:	785b      	ldrb	r3, [r3, #1]
 800b46e:	2b30      	cmp	r3, #48	; 0x30
 800b470:	d0f9      	beq.n	800b466 <_strtod_l+0x12e>
 800b472:	2b00      	cmp	r3, #0
 800b474:	d09b      	beq.n	800b3ae <_strtod_l+0x76>
 800b476:	2301      	movs	r3, #1
 800b478:	f04f 0a00 	mov.w	sl, #0
 800b47c:	9304      	str	r3, [sp, #16]
 800b47e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b480:	930b      	str	r3, [sp, #44]	; 0x2c
 800b482:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b486:	46d3      	mov	fp, sl
 800b488:	220a      	movs	r2, #10
 800b48a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b48c:	7806      	ldrb	r6, [r0, #0]
 800b48e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b492:	b2d9      	uxtb	r1, r3
 800b494:	2909      	cmp	r1, #9
 800b496:	d926      	bls.n	800b4e6 <_strtod_l+0x1ae>
 800b498:	494c      	ldr	r1, [pc, #304]	; (800b5cc <_strtod_l+0x294>)
 800b49a:	2201      	movs	r2, #1
 800b49c:	f000 fde4 	bl	800c068 <strncmp>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d030      	beq.n	800b506 <_strtod_l+0x1ce>
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	4632      	mov	r2, r6
 800b4a8:	9005      	str	r0, [sp, #20]
 800b4aa:	465e      	mov	r6, fp
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2a65      	cmp	r2, #101	; 0x65
 800b4b0:	d001      	beq.n	800b4b6 <_strtod_l+0x17e>
 800b4b2:	2a45      	cmp	r2, #69	; 0x45
 800b4b4:	d113      	bne.n	800b4de <_strtod_l+0x1a6>
 800b4b6:	b91e      	cbnz	r6, 800b4c0 <_strtod_l+0x188>
 800b4b8:	9a04      	ldr	r2, [sp, #16]
 800b4ba:	4302      	orrs	r2, r0
 800b4bc:	d094      	beq.n	800b3e8 <_strtod_l+0xb0>
 800b4be:	2600      	movs	r6, #0
 800b4c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b4c2:	1c6a      	adds	r2, r5, #1
 800b4c4:	9215      	str	r2, [sp, #84]	; 0x54
 800b4c6:	786a      	ldrb	r2, [r5, #1]
 800b4c8:	2a2b      	cmp	r2, #43	; 0x2b
 800b4ca:	d074      	beq.n	800b5b6 <_strtod_l+0x27e>
 800b4cc:	2a2d      	cmp	r2, #45	; 0x2d
 800b4ce:	d078      	beq.n	800b5c2 <_strtod_l+0x28a>
 800b4d0:	f04f 0c00 	mov.w	ip, #0
 800b4d4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b4d8:	2909      	cmp	r1, #9
 800b4da:	d97f      	bls.n	800b5dc <_strtod_l+0x2a4>
 800b4dc:	9515      	str	r5, [sp, #84]	; 0x54
 800b4de:	2700      	movs	r7, #0
 800b4e0:	e09e      	b.n	800b620 <_strtod_l+0x2e8>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	e7c8      	b.n	800b478 <_strtod_l+0x140>
 800b4e6:	f1bb 0f08 	cmp.w	fp, #8
 800b4ea:	bfd8      	it	le
 800b4ec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b4ee:	f100 0001 	add.w	r0, r0, #1
 800b4f2:	bfda      	itte	le
 800b4f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800b4f8:	9309      	strle	r3, [sp, #36]	; 0x24
 800b4fa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b4fe:	f10b 0b01 	add.w	fp, fp, #1
 800b502:	9015      	str	r0, [sp, #84]	; 0x54
 800b504:	e7c1      	b.n	800b48a <_strtod_l+0x152>
 800b506:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b508:	1c5a      	adds	r2, r3, #1
 800b50a:	9215      	str	r2, [sp, #84]	; 0x54
 800b50c:	785a      	ldrb	r2, [r3, #1]
 800b50e:	f1bb 0f00 	cmp.w	fp, #0
 800b512:	d037      	beq.n	800b584 <_strtod_l+0x24c>
 800b514:	9005      	str	r0, [sp, #20]
 800b516:	465e      	mov	r6, fp
 800b518:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b51c:	2b09      	cmp	r3, #9
 800b51e:	d912      	bls.n	800b546 <_strtod_l+0x20e>
 800b520:	2301      	movs	r3, #1
 800b522:	e7c4      	b.n	800b4ae <_strtod_l+0x176>
 800b524:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b526:	1c5a      	adds	r2, r3, #1
 800b528:	9215      	str	r2, [sp, #84]	; 0x54
 800b52a:	785a      	ldrb	r2, [r3, #1]
 800b52c:	3001      	adds	r0, #1
 800b52e:	2a30      	cmp	r2, #48	; 0x30
 800b530:	d0f8      	beq.n	800b524 <_strtod_l+0x1ec>
 800b532:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b536:	2b08      	cmp	r3, #8
 800b538:	f200 84c1 	bhi.w	800bebe <_strtod_l+0xb86>
 800b53c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b53e:	9005      	str	r0, [sp, #20]
 800b540:	2000      	movs	r0, #0
 800b542:	930b      	str	r3, [sp, #44]	; 0x2c
 800b544:	4606      	mov	r6, r0
 800b546:	3a30      	subs	r2, #48	; 0x30
 800b548:	f100 0301 	add.w	r3, r0, #1
 800b54c:	d014      	beq.n	800b578 <_strtod_l+0x240>
 800b54e:	9905      	ldr	r1, [sp, #20]
 800b550:	4419      	add	r1, r3
 800b552:	9105      	str	r1, [sp, #20]
 800b554:	4633      	mov	r3, r6
 800b556:	eb00 0c06 	add.w	ip, r0, r6
 800b55a:	210a      	movs	r1, #10
 800b55c:	4563      	cmp	r3, ip
 800b55e:	d113      	bne.n	800b588 <_strtod_l+0x250>
 800b560:	1833      	adds	r3, r6, r0
 800b562:	2b08      	cmp	r3, #8
 800b564:	f106 0601 	add.w	r6, r6, #1
 800b568:	4406      	add	r6, r0
 800b56a:	dc1a      	bgt.n	800b5a2 <_strtod_l+0x26a>
 800b56c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b56e:	230a      	movs	r3, #10
 800b570:	fb03 2301 	mla	r3, r3, r1, r2
 800b574:	9309      	str	r3, [sp, #36]	; 0x24
 800b576:	2300      	movs	r3, #0
 800b578:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b57a:	1c51      	adds	r1, r2, #1
 800b57c:	9115      	str	r1, [sp, #84]	; 0x54
 800b57e:	7852      	ldrb	r2, [r2, #1]
 800b580:	4618      	mov	r0, r3
 800b582:	e7c9      	b.n	800b518 <_strtod_l+0x1e0>
 800b584:	4658      	mov	r0, fp
 800b586:	e7d2      	b.n	800b52e <_strtod_l+0x1f6>
 800b588:	2b08      	cmp	r3, #8
 800b58a:	f103 0301 	add.w	r3, r3, #1
 800b58e:	dc03      	bgt.n	800b598 <_strtod_l+0x260>
 800b590:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b592:	434f      	muls	r7, r1
 800b594:	9709      	str	r7, [sp, #36]	; 0x24
 800b596:	e7e1      	b.n	800b55c <_strtod_l+0x224>
 800b598:	2b10      	cmp	r3, #16
 800b59a:	bfd8      	it	le
 800b59c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b5a0:	e7dc      	b.n	800b55c <_strtod_l+0x224>
 800b5a2:	2e10      	cmp	r6, #16
 800b5a4:	bfdc      	itt	le
 800b5a6:	230a      	movle	r3, #10
 800b5a8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b5ac:	e7e3      	b.n	800b576 <_strtod_l+0x23e>
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	9305      	str	r3, [sp, #20]
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e780      	b.n	800b4b8 <_strtod_l+0x180>
 800b5b6:	f04f 0c00 	mov.w	ip, #0
 800b5ba:	1caa      	adds	r2, r5, #2
 800b5bc:	9215      	str	r2, [sp, #84]	; 0x54
 800b5be:	78aa      	ldrb	r2, [r5, #2]
 800b5c0:	e788      	b.n	800b4d4 <_strtod_l+0x19c>
 800b5c2:	f04f 0c01 	mov.w	ip, #1
 800b5c6:	e7f8      	b.n	800b5ba <_strtod_l+0x282>
 800b5c8:	0800f018 	.word	0x0800f018
 800b5cc:	0800f015 	.word	0x0800f015
 800b5d0:	7ff00000 	.word	0x7ff00000
 800b5d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b5d6:	1c51      	adds	r1, r2, #1
 800b5d8:	9115      	str	r1, [sp, #84]	; 0x54
 800b5da:	7852      	ldrb	r2, [r2, #1]
 800b5dc:	2a30      	cmp	r2, #48	; 0x30
 800b5de:	d0f9      	beq.n	800b5d4 <_strtod_l+0x29c>
 800b5e0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b5e4:	2908      	cmp	r1, #8
 800b5e6:	f63f af7a 	bhi.w	800b4de <_strtod_l+0x1a6>
 800b5ea:	3a30      	subs	r2, #48	; 0x30
 800b5ec:	9208      	str	r2, [sp, #32]
 800b5ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b5f0:	920c      	str	r2, [sp, #48]	; 0x30
 800b5f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b5f4:	1c57      	adds	r7, r2, #1
 800b5f6:	9715      	str	r7, [sp, #84]	; 0x54
 800b5f8:	7852      	ldrb	r2, [r2, #1]
 800b5fa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b5fe:	f1be 0f09 	cmp.w	lr, #9
 800b602:	d938      	bls.n	800b676 <_strtod_l+0x33e>
 800b604:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b606:	1a7f      	subs	r7, r7, r1
 800b608:	2f08      	cmp	r7, #8
 800b60a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b60e:	dc03      	bgt.n	800b618 <_strtod_l+0x2e0>
 800b610:	9908      	ldr	r1, [sp, #32]
 800b612:	428f      	cmp	r7, r1
 800b614:	bfa8      	it	ge
 800b616:	460f      	movge	r7, r1
 800b618:	f1bc 0f00 	cmp.w	ip, #0
 800b61c:	d000      	beq.n	800b620 <_strtod_l+0x2e8>
 800b61e:	427f      	negs	r7, r7
 800b620:	2e00      	cmp	r6, #0
 800b622:	d14f      	bne.n	800b6c4 <_strtod_l+0x38c>
 800b624:	9904      	ldr	r1, [sp, #16]
 800b626:	4301      	orrs	r1, r0
 800b628:	f47f aec1 	bne.w	800b3ae <_strtod_l+0x76>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f47f aedb 	bne.w	800b3e8 <_strtod_l+0xb0>
 800b632:	2a69      	cmp	r2, #105	; 0x69
 800b634:	d029      	beq.n	800b68a <_strtod_l+0x352>
 800b636:	dc26      	bgt.n	800b686 <_strtod_l+0x34e>
 800b638:	2a49      	cmp	r2, #73	; 0x49
 800b63a:	d026      	beq.n	800b68a <_strtod_l+0x352>
 800b63c:	2a4e      	cmp	r2, #78	; 0x4e
 800b63e:	f47f aed3 	bne.w	800b3e8 <_strtod_l+0xb0>
 800b642:	499b      	ldr	r1, [pc, #620]	; (800b8b0 <_strtod_l+0x578>)
 800b644:	a815      	add	r0, sp, #84	; 0x54
 800b646:	f001 ff3d 	bl	800d4c4 <__match>
 800b64a:	2800      	cmp	r0, #0
 800b64c:	f43f aecc 	beq.w	800b3e8 <_strtod_l+0xb0>
 800b650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	2b28      	cmp	r3, #40	; 0x28
 800b656:	d12f      	bne.n	800b6b8 <_strtod_l+0x380>
 800b658:	4996      	ldr	r1, [pc, #600]	; (800b8b4 <_strtod_l+0x57c>)
 800b65a:	aa18      	add	r2, sp, #96	; 0x60
 800b65c:	a815      	add	r0, sp, #84	; 0x54
 800b65e:	f001 ff45 	bl	800d4ec <__hexnan>
 800b662:	2805      	cmp	r0, #5
 800b664:	d128      	bne.n	800b6b8 <_strtod_l+0x380>
 800b666:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b668:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b66c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b670:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b674:	e69b      	b.n	800b3ae <_strtod_l+0x76>
 800b676:	9f08      	ldr	r7, [sp, #32]
 800b678:	210a      	movs	r1, #10
 800b67a:	fb01 2107 	mla	r1, r1, r7, r2
 800b67e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b682:	9208      	str	r2, [sp, #32]
 800b684:	e7b5      	b.n	800b5f2 <_strtod_l+0x2ba>
 800b686:	2a6e      	cmp	r2, #110	; 0x6e
 800b688:	e7d9      	b.n	800b63e <_strtod_l+0x306>
 800b68a:	498b      	ldr	r1, [pc, #556]	; (800b8b8 <_strtod_l+0x580>)
 800b68c:	a815      	add	r0, sp, #84	; 0x54
 800b68e:	f001 ff19 	bl	800d4c4 <__match>
 800b692:	2800      	cmp	r0, #0
 800b694:	f43f aea8 	beq.w	800b3e8 <_strtod_l+0xb0>
 800b698:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b69a:	4988      	ldr	r1, [pc, #544]	; (800b8bc <_strtod_l+0x584>)
 800b69c:	3b01      	subs	r3, #1
 800b69e:	a815      	add	r0, sp, #84	; 0x54
 800b6a0:	9315      	str	r3, [sp, #84]	; 0x54
 800b6a2:	f001 ff0f 	bl	800d4c4 <__match>
 800b6a6:	b910      	cbnz	r0, 800b6ae <_strtod_l+0x376>
 800b6a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	9315      	str	r3, [sp, #84]	; 0x54
 800b6ae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b8cc <_strtod_l+0x594>
 800b6b2:	f04f 0800 	mov.w	r8, #0
 800b6b6:	e67a      	b.n	800b3ae <_strtod_l+0x76>
 800b6b8:	4881      	ldr	r0, [pc, #516]	; (800b8c0 <_strtod_l+0x588>)
 800b6ba:	f000 fd85 	bl	800c1c8 <nan>
 800b6be:	ec59 8b10 	vmov	r8, r9, d0
 800b6c2:	e674      	b.n	800b3ae <_strtod_l+0x76>
 800b6c4:	9b05      	ldr	r3, [sp, #20]
 800b6c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6c8:	1afb      	subs	r3, r7, r3
 800b6ca:	f1bb 0f00 	cmp.w	fp, #0
 800b6ce:	bf08      	it	eq
 800b6d0:	46b3      	moveq	fp, r6
 800b6d2:	2e10      	cmp	r6, #16
 800b6d4:	9308      	str	r3, [sp, #32]
 800b6d6:	4635      	mov	r5, r6
 800b6d8:	bfa8      	it	ge
 800b6da:	2510      	movge	r5, #16
 800b6dc:	f7f4 ff2a 	bl	8000534 <__aeabi_ui2d>
 800b6e0:	2e09      	cmp	r6, #9
 800b6e2:	4680      	mov	r8, r0
 800b6e4:	4689      	mov	r9, r1
 800b6e6:	dd13      	ble.n	800b710 <_strtod_l+0x3d8>
 800b6e8:	4b76      	ldr	r3, [pc, #472]	; (800b8c4 <_strtod_l+0x58c>)
 800b6ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b6ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b6f2:	f7f4 ff99 	bl	8000628 <__aeabi_dmul>
 800b6f6:	4680      	mov	r8, r0
 800b6f8:	4650      	mov	r0, sl
 800b6fa:	4689      	mov	r9, r1
 800b6fc:	f7f4 ff1a 	bl	8000534 <__aeabi_ui2d>
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4640      	mov	r0, r8
 800b706:	4649      	mov	r1, r9
 800b708:	f7f4 fdd8 	bl	80002bc <__adddf3>
 800b70c:	4680      	mov	r8, r0
 800b70e:	4689      	mov	r9, r1
 800b710:	2e0f      	cmp	r6, #15
 800b712:	dc38      	bgt.n	800b786 <_strtod_l+0x44e>
 800b714:	9b08      	ldr	r3, [sp, #32]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f43f ae49 	beq.w	800b3ae <_strtod_l+0x76>
 800b71c:	dd24      	ble.n	800b768 <_strtod_l+0x430>
 800b71e:	2b16      	cmp	r3, #22
 800b720:	dc0b      	bgt.n	800b73a <_strtod_l+0x402>
 800b722:	4968      	ldr	r1, [pc, #416]	; (800b8c4 <_strtod_l+0x58c>)
 800b724:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b72c:	4642      	mov	r2, r8
 800b72e:	464b      	mov	r3, r9
 800b730:	f7f4 ff7a 	bl	8000628 <__aeabi_dmul>
 800b734:	4680      	mov	r8, r0
 800b736:	4689      	mov	r9, r1
 800b738:	e639      	b.n	800b3ae <_strtod_l+0x76>
 800b73a:	9a08      	ldr	r2, [sp, #32]
 800b73c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b740:	4293      	cmp	r3, r2
 800b742:	db20      	blt.n	800b786 <_strtod_l+0x44e>
 800b744:	4c5f      	ldr	r4, [pc, #380]	; (800b8c4 <_strtod_l+0x58c>)
 800b746:	f1c6 060f 	rsb	r6, r6, #15
 800b74a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b74e:	4642      	mov	r2, r8
 800b750:	464b      	mov	r3, r9
 800b752:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b756:	f7f4 ff67 	bl	8000628 <__aeabi_dmul>
 800b75a:	9b08      	ldr	r3, [sp, #32]
 800b75c:	1b9e      	subs	r6, r3, r6
 800b75e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b762:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b766:	e7e3      	b.n	800b730 <_strtod_l+0x3f8>
 800b768:	9b08      	ldr	r3, [sp, #32]
 800b76a:	3316      	adds	r3, #22
 800b76c:	db0b      	blt.n	800b786 <_strtod_l+0x44e>
 800b76e:	9b05      	ldr	r3, [sp, #20]
 800b770:	1bdf      	subs	r7, r3, r7
 800b772:	4b54      	ldr	r3, [pc, #336]	; (800b8c4 <_strtod_l+0x58c>)
 800b774:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b77c:	4640      	mov	r0, r8
 800b77e:	4649      	mov	r1, r9
 800b780:	f7f5 f87c 	bl	800087c <__aeabi_ddiv>
 800b784:	e7d6      	b.n	800b734 <_strtod_l+0x3fc>
 800b786:	9b08      	ldr	r3, [sp, #32]
 800b788:	1b75      	subs	r5, r6, r5
 800b78a:	441d      	add	r5, r3
 800b78c:	2d00      	cmp	r5, #0
 800b78e:	dd70      	ble.n	800b872 <_strtod_l+0x53a>
 800b790:	f015 030f 	ands.w	r3, r5, #15
 800b794:	d00a      	beq.n	800b7ac <_strtod_l+0x474>
 800b796:	494b      	ldr	r1, [pc, #300]	; (800b8c4 <_strtod_l+0x58c>)
 800b798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b79c:	4642      	mov	r2, r8
 800b79e:	464b      	mov	r3, r9
 800b7a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7a4:	f7f4 ff40 	bl	8000628 <__aeabi_dmul>
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	4689      	mov	r9, r1
 800b7ac:	f035 050f 	bics.w	r5, r5, #15
 800b7b0:	d04d      	beq.n	800b84e <_strtod_l+0x516>
 800b7b2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b7b6:	dd22      	ble.n	800b7fe <_strtod_l+0x4c6>
 800b7b8:	2500      	movs	r5, #0
 800b7ba:	46ab      	mov	fp, r5
 800b7bc:	9509      	str	r5, [sp, #36]	; 0x24
 800b7be:	9505      	str	r5, [sp, #20]
 800b7c0:	2322      	movs	r3, #34	; 0x22
 800b7c2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b8cc <_strtod_l+0x594>
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	f04f 0800 	mov.w	r8, #0
 800b7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f43f aded 	beq.w	800b3ae <_strtod_l+0x76>
 800b7d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f002 fa30 	bl	800dc3c <_Bfree>
 800b7dc:	9905      	ldr	r1, [sp, #20]
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f002 fa2c 	bl	800dc3c <_Bfree>
 800b7e4:	4659      	mov	r1, fp
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f002 fa28 	bl	800dc3c <_Bfree>
 800b7ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f002 fa24 	bl	800dc3c <_Bfree>
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4620      	mov	r0, r4
 800b7f8:	f002 fa20 	bl	800dc3c <_Bfree>
 800b7fc:	e5d7      	b.n	800b3ae <_strtod_l+0x76>
 800b7fe:	4b32      	ldr	r3, [pc, #200]	; (800b8c8 <_strtod_l+0x590>)
 800b800:	9304      	str	r3, [sp, #16]
 800b802:	2300      	movs	r3, #0
 800b804:	112d      	asrs	r5, r5, #4
 800b806:	4640      	mov	r0, r8
 800b808:	4649      	mov	r1, r9
 800b80a:	469a      	mov	sl, r3
 800b80c:	2d01      	cmp	r5, #1
 800b80e:	dc21      	bgt.n	800b854 <_strtod_l+0x51c>
 800b810:	b10b      	cbz	r3, 800b816 <_strtod_l+0x4de>
 800b812:	4680      	mov	r8, r0
 800b814:	4689      	mov	r9, r1
 800b816:	492c      	ldr	r1, [pc, #176]	; (800b8c8 <_strtod_l+0x590>)
 800b818:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b81c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b820:	4642      	mov	r2, r8
 800b822:	464b      	mov	r3, r9
 800b824:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b828:	f7f4 fefe 	bl	8000628 <__aeabi_dmul>
 800b82c:	4b27      	ldr	r3, [pc, #156]	; (800b8cc <_strtod_l+0x594>)
 800b82e:	460a      	mov	r2, r1
 800b830:	400b      	ands	r3, r1
 800b832:	4927      	ldr	r1, [pc, #156]	; (800b8d0 <_strtod_l+0x598>)
 800b834:	428b      	cmp	r3, r1
 800b836:	4680      	mov	r8, r0
 800b838:	d8be      	bhi.n	800b7b8 <_strtod_l+0x480>
 800b83a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b83e:	428b      	cmp	r3, r1
 800b840:	bf86      	itte	hi
 800b842:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b8d4 <_strtod_l+0x59c>
 800b846:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800b84a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b84e:	2300      	movs	r3, #0
 800b850:	9304      	str	r3, [sp, #16]
 800b852:	e07b      	b.n	800b94c <_strtod_l+0x614>
 800b854:	07ea      	lsls	r2, r5, #31
 800b856:	d505      	bpl.n	800b864 <_strtod_l+0x52c>
 800b858:	9b04      	ldr	r3, [sp, #16]
 800b85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85e:	f7f4 fee3 	bl	8000628 <__aeabi_dmul>
 800b862:	2301      	movs	r3, #1
 800b864:	9a04      	ldr	r2, [sp, #16]
 800b866:	3208      	adds	r2, #8
 800b868:	f10a 0a01 	add.w	sl, sl, #1
 800b86c:	106d      	asrs	r5, r5, #1
 800b86e:	9204      	str	r2, [sp, #16]
 800b870:	e7cc      	b.n	800b80c <_strtod_l+0x4d4>
 800b872:	d0ec      	beq.n	800b84e <_strtod_l+0x516>
 800b874:	426d      	negs	r5, r5
 800b876:	f015 020f 	ands.w	r2, r5, #15
 800b87a:	d00a      	beq.n	800b892 <_strtod_l+0x55a>
 800b87c:	4b11      	ldr	r3, [pc, #68]	; (800b8c4 <_strtod_l+0x58c>)
 800b87e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b882:	4640      	mov	r0, r8
 800b884:	4649      	mov	r1, r9
 800b886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88a:	f7f4 fff7 	bl	800087c <__aeabi_ddiv>
 800b88e:	4680      	mov	r8, r0
 800b890:	4689      	mov	r9, r1
 800b892:	112d      	asrs	r5, r5, #4
 800b894:	d0db      	beq.n	800b84e <_strtod_l+0x516>
 800b896:	2d1f      	cmp	r5, #31
 800b898:	dd1e      	ble.n	800b8d8 <_strtod_l+0x5a0>
 800b89a:	2500      	movs	r5, #0
 800b89c:	46ab      	mov	fp, r5
 800b89e:	9509      	str	r5, [sp, #36]	; 0x24
 800b8a0:	9505      	str	r5, [sp, #20]
 800b8a2:	2322      	movs	r3, #34	; 0x22
 800b8a4:	f04f 0800 	mov.w	r8, #0
 800b8a8:	f04f 0900 	mov.w	r9, #0
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	e78d      	b.n	800b7cc <_strtod_l+0x494>
 800b8b0:	0800efe9 	.word	0x0800efe9
 800b8b4:	0800f02c 	.word	0x0800f02c
 800b8b8:	0800efe1 	.word	0x0800efe1
 800b8bc:	0800f174 	.word	0x0800f174
 800b8c0:	0800f3ff 	.word	0x0800f3ff
 800b8c4:	0800f2f0 	.word	0x0800f2f0
 800b8c8:	0800f2c8 	.word	0x0800f2c8
 800b8cc:	7ff00000 	.word	0x7ff00000
 800b8d0:	7ca00000 	.word	0x7ca00000
 800b8d4:	7fefffff 	.word	0x7fefffff
 800b8d8:	f015 0310 	ands.w	r3, r5, #16
 800b8dc:	bf18      	it	ne
 800b8de:	236a      	movne	r3, #106	; 0x6a
 800b8e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800bc84 <_strtod_l+0x94c>
 800b8e4:	9304      	str	r3, [sp, #16]
 800b8e6:	4640      	mov	r0, r8
 800b8e8:	4649      	mov	r1, r9
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	07ea      	lsls	r2, r5, #31
 800b8ee:	d504      	bpl.n	800b8fa <_strtod_l+0x5c2>
 800b8f0:	e9da 2300 	ldrd	r2, r3, [sl]
 800b8f4:	f7f4 fe98 	bl	8000628 <__aeabi_dmul>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	106d      	asrs	r5, r5, #1
 800b8fc:	f10a 0a08 	add.w	sl, sl, #8
 800b900:	d1f4      	bne.n	800b8ec <_strtod_l+0x5b4>
 800b902:	b10b      	cbz	r3, 800b908 <_strtod_l+0x5d0>
 800b904:	4680      	mov	r8, r0
 800b906:	4689      	mov	r9, r1
 800b908:	9b04      	ldr	r3, [sp, #16]
 800b90a:	b1bb      	cbz	r3, 800b93c <_strtod_l+0x604>
 800b90c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b910:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b914:	2b00      	cmp	r3, #0
 800b916:	4649      	mov	r1, r9
 800b918:	dd10      	ble.n	800b93c <_strtod_l+0x604>
 800b91a:	2b1f      	cmp	r3, #31
 800b91c:	f340 811e 	ble.w	800bb5c <_strtod_l+0x824>
 800b920:	2b34      	cmp	r3, #52	; 0x34
 800b922:	bfde      	ittt	le
 800b924:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b928:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b92c:	4093      	lslle	r3, r2
 800b92e:	f04f 0800 	mov.w	r8, #0
 800b932:	bfcc      	ite	gt
 800b934:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b938:	ea03 0901 	andle.w	r9, r3, r1
 800b93c:	2200      	movs	r2, #0
 800b93e:	2300      	movs	r3, #0
 800b940:	4640      	mov	r0, r8
 800b942:	4649      	mov	r1, r9
 800b944:	f7f5 f8d8 	bl	8000af8 <__aeabi_dcmpeq>
 800b948:	2800      	cmp	r0, #0
 800b94a:	d1a6      	bne.n	800b89a <_strtod_l+0x562>
 800b94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b952:	4633      	mov	r3, r6
 800b954:	465a      	mov	r2, fp
 800b956:	4620      	mov	r0, r4
 800b958:	f002 f9d8 	bl	800dd0c <__s2b>
 800b95c:	9009      	str	r0, [sp, #36]	; 0x24
 800b95e:	2800      	cmp	r0, #0
 800b960:	f43f af2a 	beq.w	800b7b8 <_strtod_l+0x480>
 800b964:	9a08      	ldr	r2, [sp, #32]
 800b966:	9b05      	ldr	r3, [sp, #20]
 800b968:	2a00      	cmp	r2, #0
 800b96a:	eba3 0307 	sub.w	r3, r3, r7
 800b96e:	bfa8      	it	ge
 800b970:	2300      	movge	r3, #0
 800b972:	930c      	str	r3, [sp, #48]	; 0x30
 800b974:	2500      	movs	r5, #0
 800b976:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b97a:	9312      	str	r3, [sp, #72]	; 0x48
 800b97c:	46ab      	mov	fp, r5
 800b97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b980:	4620      	mov	r0, r4
 800b982:	6859      	ldr	r1, [r3, #4]
 800b984:	f002 f91a 	bl	800dbbc <_Balloc>
 800b988:	9005      	str	r0, [sp, #20]
 800b98a:	2800      	cmp	r0, #0
 800b98c:	f43f af18 	beq.w	800b7c0 <_strtod_l+0x488>
 800b990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b992:	691a      	ldr	r2, [r3, #16]
 800b994:	3202      	adds	r2, #2
 800b996:	f103 010c 	add.w	r1, r3, #12
 800b99a:	0092      	lsls	r2, r2, #2
 800b99c:	300c      	adds	r0, #12
 800b99e:	f000 fc04 	bl	800c1aa <memcpy>
 800b9a2:	ec49 8b10 	vmov	d0, r8, r9
 800b9a6:	aa18      	add	r2, sp, #96	; 0x60
 800b9a8:	a917      	add	r1, sp, #92	; 0x5c
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f002 fce2 	bl	800e374 <__d2b>
 800b9b0:	ec49 8b18 	vmov	d8, r8, r9
 800b9b4:	9016      	str	r0, [sp, #88]	; 0x58
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	f43f af02 	beq.w	800b7c0 <_strtod_l+0x488>
 800b9bc:	2101      	movs	r1, #1
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f002 fa3c 	bl	800de3c <__i2b>
 800b9c4:	4683      	mov	fp, r0
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	f43f aefa 	beq.w	800b7c0 <_strtod_l+0x488>
 800b9cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b9ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b9d0:	2e00      	cmp	r6, #0
 800b9d2:	bfab      	itete	ge
 800b9d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b9d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b9d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b9da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b9de:	bfac      	ite	ge
 800b9e0:	eb06 0a03 	addge.w	sl, r6, r3
 800b9e4:	1b9f      	sublt	r7, r3, r6
 800b9e6:	9b04      	ldr	r3, [sp, #16]
 800b9e8:	1af6      	subs	r6, r6, r3
 800b9ea:	4416      	add	r6, r2
 800b9ec:	4ba0      	ldr	r3, [pc, #640]	; (800bc70 <_strtod_l+0x938>)
 800b9ee:	3e01      	subs	r6, #1
 800b9f0:	429e      	cmp	r6, r3
 800b9f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b9f6:	f280 80c4 	bge.w	800bb82 <_strtod_l+0x84a>
 800b9fa:	1b9b      	subs	r3, r3, r6
 800b9fc:	2b1f      	cmp	r3, #31
 800b9fe:	eba2 0203 	sub.w	r2, r2, r3
 800ba02:	f04f 0101 	mov.w	r1, #1
 800ba06:	f300 80b0 	bgt.w	800bb6a <_strtod_l+0x832>
 800ba0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba0e:	930e      	str	r3, [sp, #56]	; 0x38
 800ba10:	2300      	movs	r3, #0
 800ba12:	930d      	str	r3, [sp, #52]	; 0x34
 800ba14:	eb0a 0602 	add.w	r6, sl, r2
 800ba18:	9b04      	ldr	r3, [sp, #16]
 800ba1a:	45b2      	cmp	sl, r6
 800ba1c:	4417      	add	r7, r2
 800ba1e:	441f      	add	r7, r3
 800ba20:	4653      	mov	r3, sl
 800ba22:	bfa8      	it	ge
 800ba24:	4633      	movge	r3, r6
 800ba26:	42bb      	cmp	r3, r7
 800ba28:	bfa8      	it	ge
 800ba2a:	463b      	movge	r3, r7
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	bfc2      	ittt	gt
 800ba30:	1af6      	subgt	r6, r6, r3
 800ba32:	1aff      	subgt	r7, r7, r3
 800ba34:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ba38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	dd17      	ble.n	800ba6e <_strtod_l+0x736>
 800ba3e:	4659      	mov	r1, fp
 800ba40:	461a      	mov	r2, r3
 800ba42:	4620      	mov	r0, r4
 800ba44:	f002 faba 	bl	800dfbc <__pow5mult>
 800ba48:	4683      	mov	fp, r0
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	f43f aeb8 	beq.w	800b7c0 <_strtod_l+0x488>
 800ba50:	4601      	mov	r1, r0
 800ba52:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ba54:	4620      	mov	r0, r4
 800ba56:	f002 fa07 	bl	800de68 <__multiply>
 800ba5a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba5c:	2800      	cmp	r0, #0
 800ba5e:	f43f aeaf 	beq.w	800b7c0 <_strtod_l+0x488>
 800ba62:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ba64:	4620      	mov	r0, r4
 800ba66:	f002 f8e9 	bl	800dc3c <_Bfree>
 800ba6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba6c:	9316      	str	r3, [sp, #88]	; 0x58
 800ba6e:	2e00      	cmp	r6, #0
 800ba70:	f300 808c 	bgt.w	800bb8c <_strtod_l+0x854>
 800ba74:	9b08      	ldr	r3, [sp, #32]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	dd08      	ble.n	800ba8c <_strtod_l+0x754>
 800ba7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba7c:	9905      	ldr	r1, [sp, #20]
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f002 fa9c 	bl	800dfbc <__pow5mult>
 800ba84:	9005      	str	r0, [sp, #20]
 800ba86:	2800      	cmp	r0, #0
 800ba88:	f43f ae9a 	beq.w	800b7c0 <_strtod_l+0x488>
 800ba8c:	2f00      	cmp	r7, #0
 800ba8e:	dd08      	ble.n	800baa2 <_strtod_l+0x76a>
 800ba90:	9905      	ldr	r1, [sp, #20]
 800ba92:	463a      	mov	r2, r7
 800ba94:	4620      	mov	r0, r4
 800ba96:	f002 faeb 	bl	800e070 <__lshift>
 800ba9a:	9005      	str	r0, [sp, #20]
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	f43f ae8f 	beq.w	800b7c0 <_strtod_l+0x488>
 800baa2:	f1ba 0f00 	cmp.w	sl, #0
 800baa6:	dd08      	ble.n	800baba <_strtod_l+0x782>
 800baa8:	4659      	mov	r1, fp
 800baaa:	4652      	mov	r2, sl
 800baac:	4620      	mov	r0, r4
 800baae:	f002 fadf 	bl	800e070 <__lshift>
 800bab2:	4683      	mov	fp, r0
 800bab4:	2800      	cmp	r0, #0
 800bab6:	f43f ae83 	beq.w	800b7c0 <_strtod_l+0x488>
 800baba:	9a05      	ldr	r2, [sp, #20]
 800babc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800babe:	4620      	mov	r0, r4
 800bac0:	f002 fb5e 	bl	800e180 <__mdiff>
 800bac4:	4605      	mov	r5, r0
 800bac6:	2800      	cmp	r0, #0
 800bac8:	f43f ae7a 	beq.w	800b7c0 <_strtod_l+0x488>
 800bacc:	68c3      	ldr	r3, [r0, #12]
 800bace:	930b      	str	r3, [sp, #44]	; 0x2c
 800bad0:	2300      	movs	r3, #0
 800bad2:	60c3      	str	r3, [r0, #12]
 800bad4:	4659      	mov	r1, fp
 800bad6:	f002 fb37 	bl	800e148 <__mcmp>
 800bada:	2800      	cmp	r0, #0
 800badc:	da60      	bge.n	800bba0 <_strtod_l+0x868>
 800bade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bae0:	ea53 0308 	orrs.w	r3, r3, r8
 800bae4:	f040 8084 	bne.w	800bbf0 <_strtod_l+0x8b8>
 800bae8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800baec:	2b00      	cmp	r3, #0
 800baee:	d17f      	bne.n	800bbf0 <_strtod_l+0x8b8>
 800baf0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800baf4:	0d1b      	lsrs	r3, r3, #20
 800baf6:	051b      	lsls	r3, r3, #20
 800baf8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bafc:	d978      	bls.n	800bbf0 <_strtod_l+0x8b8>
 800bafe:	696b      	ldr	r3, [r5, #20]
 800bb00:	b913      	cbnz	r3, 800bb08 <_strtod_l+0x7d0>
 800bb02:	692b      	ldr	r3, [r5, #16]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	dd73      	ble.n	800bbf0 <_strtod_l+0x8b8>
 800bb08:	4629      	mov	r1, r5
 800bb0a:	2201      	movs	r2, #1
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	f002 faaf 	bl	800e070 <__lshift>
 800bb12:	4659      	mov	r1, fp
 800bb14:	4605      	mov	r5, r0
 800bb16:	f002 fb17 	bl	800e148 <__mcmp>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	dd68      	ble.n	800bbf0 <_strtod_l+0x8b8>
 800bb1e:	9904      	ldr	r1, [sp, #16]
 800bb20:	4a54      	ldr	r2, [pc, #336]	; (800bc74 <_strtod_l+0x93c>)
 800bb22:	464b      	mov	r3, r9
 800bb24:	2900      	cmp	r1, #0
 800bb26:	f000 8084 	beq.w	800bc32 <_strtod_l+0x8fa>
 800bb2a:	ea02 0109 	and.w	r1, r2, r9
 800bb2e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bb32:	dc7e      	bgt.n	800bc32 <_strtod_l+0x8fa>
 800bb34:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bb38:	f77f aeb3 	ble.w	800b8a2 <_strtod_l+0x56a>
 800bb3c:	4b4e      	ldr	r3, [pc, #312]	; (800bc78 <_strtod_l+0x940>)
 800bb3e:	4640      	mov	r0, r8
 800bb40:	4649      	mov	r1, r9
 800bb42:	2200      	movs	r2, #0
 800bb44:	f7f4 fd70 	bl	8000628 <__aeabi_dmul>
 800bb48:	4b4a      	ldr	r3, [pc, #296]	; (800bc74 <_strtod_l+0x93c>)
 800bb4a:	400b      	ands	r3, r1
 800bb4c:	4680      	mov	r8, r0
 800bb4e:	4689      	mov	r9, r1
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f47f ae3f 	bne.w	800b7d4 <_strtod_l+0x49c>
 800bb56:	2322      	movs	r3, #34	; 0x22
 800bb58:	6023      	str	r3, [r4, #0]
 800bb5a:	e63b      	b.n	800b7d4 <_strtod_l+0x49c>
 800bb5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb60:	fa02 f303 	lsl.w	r3, r2, r3
 800bb64:	ea03 0808 	and.w	r8, r3, r8
 800bb68:	e6e8      	b.n	800b93c <_strtod_l+0x604>
 800bb6a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bb6e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bb72:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bb76:	36e2      	adds	r6, #226	; 0xe2
 800bb78:	fa01 f306 	lsl.w	r3, r1, r6
 800bb7c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800bb80:	e748      	b.n	800ba14 <_strtod_l+0x6dc>
 800bb82:	2100      	movs	r1, #0
 800bb84:	2301      	movs	r3, #1
 800bb86:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800bb8a:	e743      	b.n	800ba14 <_strtod_l+0x6dc>
 800bb8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bb8e:	4632      	mov	r2, r6
 800bb90:	4620      	mov	r0, r4
 800bb92:	f002 fa6d 	bl	800e070 <__lshift>
 800bb96:	9016      	str	r0, [sp, #88]	; 0x58
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	f47f af6b 	bne.w	800ba74 <_strtod_l+0x73c>
 800bb9e:	e60f      	b.n	800b7c0 <_strtod_l+0x488>
 800bba0:	46ca      	mov	sl, r9
 800bba2:	d171      	bne.n	800bc88 <_strtod_l+0x950>
 800bba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bba6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbaa:	b352      	cbz	r2, 800bc02 <_strtod_l+0x8ca>
 800bbac:	4a33      	ldr	r2, [pc, #204]	; (800bc7c <_strtod_l+0x944>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d12a      	bne.n	800bc08 <_strtod_l+0x8d0>
 800bbb2:	9b04      	ldr	r3, [sp, #16]
 800bbb4:	4641      	mov	r1, r8
 800bbb6:	b1fb      	cbz	r3, 800bbf8 <_strtod_l+0x8c0>
 800bbb8:	4b2e      	ldr	r3, [pc, #184]	; (800bc74 <_strtod_l+0x93c>)
 800bbba:	ea09 0303 	and.w	r3, r9, r3
 800bbbe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bbc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbc6:	d81a      	bhi.n	800bbfe <_strtod_l+0x8c6>
 800bbc8:	0d1b      	lsrs	r3, r3, #20
 800bbca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bbce:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd2:	4299      	cmp	r1, r3
 800bbd4:	d118      	bne.n	800bc08 <_strtod_l+0x8d0>
 800bbd6:	4b2a      	ldr	r3, [pc, #168]	; (800bc80 <_strtod_l+0x948>)
 800bbd8:	459a      	cmp	sl, r3
 800bbda:	d102      	bne.n	800bbe2 <_strtod_l+0x8aa>
 800bbdc:	3101      	adds	r1, #1
 800bbde:	f43f adef 	beq.w	800b7c0 <_strtod_l+0x488>
 800bbe2:	4b24      	ldr	r3, [pc, #144]	; (800bc74 <_strtod_l+0x93c>)
 800bbe4:	ea0a 0303 	and.w	r3, sl, r3
 800bbe8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bbec:	f04f 0800 	mov.w	r8, #0
 800bbf0:	9b04      	ldr	r3, [sp, #16]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1a2      	bne.n	800bb3c <_strtod_l+0x804>
 800bbf6:	e5ed      	b.n	800b7d4 <_strtod_l+0x49c>
 800bbf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbfc:	e7e9      	b.n	800bbd2 <_strtod_l+0x89a>
 800bbfe:	4613      	mov	r3, r2
 800bc00:	e7e7      	b.n	800bbd2 <_strtod_l+0x89a>
 800bc02:	ea53 0308 	orrs.w	r3, r3, r8
 800bc06:	d08a      	beq.n	800bb1e <_strtod_l+0x7e6>
 800bc08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc0a:	b1e3      	cbz	r3, 800bc46 <_strtod_l+0x90e>
 800bc0c:	ea13 0f0a 	tst.w	r3, sl
 800bc10:	d0ee      	beq.n	800bbf0 <_strtod_l+0x8b8>
 800bc12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc14:	9a04      	ldr	r2, [sp, #16]
 800bc16:	4640      	mov	r0, r8
 800bc18:	4649      	mov	r1, r9
 800bc1a:	b1c3      	cbz	r3, 800bc4e <_strtod_l+0x916>
 800bc1c:	f7ff fb70 	bl	800b300 <sulp>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	ec51 0b18 	vmov	r0, r1, d8
 800bc28:	f7f4 fb48 	bl	80002bc <__adddf3>
 800bc2c:	4680      	mov	r8, r0
 800bc2e:	4689      	mov	r9, r1
 800bc30:	e7de      	b.n	800bbf0 <_strtod_l+0x8b8>
 800bc32:	4013      	ands	r3, r2
 800bc34:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bc38:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800bc3c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800bc40:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800bc44:	e7d4      	b.n	800bbf0 <_strtod_l+0x8b8>
 800bc46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc48:	ea13 0f08 	tst.w	r3, r8
 800bc4c:	e7e0      	b.n	800bc10 <_strtod_l+0x8d8>
 800bc4e:	f7ff fb57 	bl	800b300 <sulp>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	ec51 0b18 	vmov	r0, r1, d8
 800bc5a:	f7f4 fb2d 	bl	80002b8 <__aeabi_dsub>
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2300      	movs	r3, #0
 800bc62:	4680      	mov	r8, r0
 800bc64:	4689      	mov	r9, r1
 800bc66:	f7f4 ff47 	bl	8000af8 <__aeabi_dcmpeq>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d0c0      	beq.n	800bbf0 <_strtod_l+0x8b8>
 800bc6e:	e618      	b.n	800b8a2 <_strtod_l+0x56a>
 800bc70:	fffffc02 	.word	0xfffffc02
 800bc74:	7ff00000 	.word	0x7ff00000
 800bc78:	39500000 	.word	0x39500000
 800bc7c:	000fffff 	.word	0x000fffff
 800bc80:	7fefffff 	.word	0x7fefffff
 800bc84:	0800f040 	.word	0x0800f040
 800bc88:	4659      	mov	r1, fp
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	f002 fbcc 	bl	800e428 <__ratio>
 800bc90:	ec57 6b10 	vmov	r6, r7, d0
 800bc94:	ee10 0a10 	vmov	r0, s0
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc9e:	4639      	mov	r1, r7
 800bca0:	f7f4 ff3e 	bl	8000b20 <__aeabi_dcmple>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d071      	beq.n	800bd8c <_strtod_l+0xa54>
 800bca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d17c      	bne.n	800bda8 <_strtod_l+0xa70>
 800bcae:	f1b8 0f00 	cmp.w	r8, #0
 800bcb2:	d15a      	bne.n	800bd6a <_strtod_l+0xa32>
 800bcb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d15d      	bne.n	800bd78 <_strtod_l+0xa40>
 800bcbc:	4b90      	ldr	r3, [pc, #576]	; (800bf00 <_strtod_l+0xbc8>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	4639      	mov	r1, r7
 800bcc4:	f7f4 ff22 	bl	8000b0c <__aeabi_dcmplt>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d15c      	bne.n	800bd86 <_strtod_l+0xa4e>
 800bccc:	4630      	mov	r0, r6
 800bcce:	4639      	mov	r1, r7
 800bcd0:	4b8c      	ldr	r3, [pc, #560]	; (800bf04 <_strtod_l+0xbcc>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	f7f4 fca8 	bl	8000628 <__aeabi_dmul>
 800bcd8:	4606      	mov	r6, r0
 800bcda:	460f      	mov	r7, r1
 800bcdc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800bce0:	9606      	str	r6, [sp, #24]
 800bce2:	9307      	str	r3, [sp, #28]
 800bce4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bce8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800bcec:	4b86      	ldr	r3, [pc, #536]	; (800bf08 <_strtod_l+0xbd0>)
 800bcee:	ea0a 0303 	and.w	r3, sl, r3
 800bcf2:	930d      	str	r3, [sp, #52]	; 0x34
 800bcf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bcf6:	4b85      	ldr	r3, [pc, #532]	; (800bf0c <_strtod_l+0xbd4>)
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	f040 8090 	bne.w	800be1e <_strtod_l+0xae6>
 800bcfe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800bd02:	ec49 8b10 	vmov	d0, r8, r9
 800bd06:	f002 fac5 	bl	800e294 <__ulp>
 800bd0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd0e:	ec51 0b10 	vmov	r0, r1, d0
 800bd12:	f7f4 fc89 	bl	8000628 <__aeabi_dmul>
 800bd16:	4642      	mov	r2, r8
 800bd18:	464b      	mov	r3, r9
 800bd1a:	f7f4 facf 	bl	80002bc <__adddf3>
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4979      	ldr	r1, [pc, #484]	; (800bf08 <_strtod_l+0xbd0>)
 800bd22:	4a7b      	ldr	r2, [pc, #492]	; (800bf10 <_strtod_l+0xbd8>)
 800bd24:	4019      	ands	r1, r3
 800bd26:	4291      	cmp	r1, r2
 800bd28:	4680      	mov	r8, r0
 800bd2a:	d944      	bls.n	800bdb6 <_strtod_l+0xa7e>
 800bd2c:	ee18 2a90 	vmov	r2, s17
 800bd30:	4b78      	ldr	r3, [pc, #480]	; (800bf14 <_strtod_l+0xbdc>)
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d104      	bne.n	800bd40 <_strtod_l+0xa08>
 800bd36:	ee18 3a10 	vmov	r3, s16
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	f43f ad40 	beq.w	800b7c0 <_strtod_l+0x488>
 800bd40:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800bf14 <_strtod_l+0xbdc>
 800bd44:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800bd48:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bd4a:	4620      	mov	r0, r4
 800bd4c:	f001 ff76 	bl	800dc3c <_Bfree>
 800bd50:	9905      	ldr	r1, [sp, #20]
 800bd52:	4620      	mov	r0, r4
 800bd54:	f001 ff72 	bl	800dc3c <_Bfree>
 800bd58:	4659      	mov	r1, fp
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	f001 ff6e 	bl	800dc3c <_Bfree>
 800bd60:	4629      	mov	r1, r5
 800bd62:	4620      	mov	r0, r4
 800bd64:	f001 ff6a 	bl	800dc3c <_Bfree>
 800bd68:	e609      	b.n	800b97e <_strtod_l+0x646>
 800bd6a:	f1b8 0f01 	cmp.w	r8, #1
 800bd6e:	d103      	bne.n	800bd78 <_strtod_l+0xa40>
 800bd70:	f1b9 0f00 	cmp.w	r9, #0
 800bd74:	f43f ad95 	beq.w	800b8a2 <_strtod_l+0x56a>
 800bd78:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800bed0 <_strtod_l+0xb98>
 800bd7c:	4f60      	ldr	r7, [pc, #384]	; (800bf00 <_strtod_l+0xbc8>)
 800bd7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bd82:	2600      	movs	r6, #0
 800bd84:	e7ae      	b.n	800bce4 <_strtod_l+0x9ac>
 800bd86:	4f5f      	ldr	r7, [pc, #380]	; (800bf04 <_strtod_l+0xbcc>)
 800bd88:	2600      	movs	r6, #0
 800bd8a:	e7a7      	b.n	800bcdc <_strtod_l+0x9a4>
 800bd8c:	4b5d      	ldr	r3, [pc, #372]	; (800bf04 <_strtod_l+0xbcc>)
 800bd8e:	4630      	mov	r0, r6
 800bd90:	4639      	mov	r1, r7
 800bd92:	2200      	movs	r2, #0
 800bd94:	f7f4 fc48 	bl	8000628 <__aeabi_dmul>
 800bd98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd9a:	4606      	mov	r6, r0
 800bd9c:	460f      	mov	r7, r1
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d09c      	beq.n	800bcdc <_strtod_l+0x9a4>
 800bda2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bda6:	e79d      	b.n	800bce4 <_strtod_l+0x9ac>
 800bda8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bed8 <_strtod_l+0xba0>
 800bdac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bdb0:	ec57 6b17 	vmov	r6, r7, d7
 800bdb4:	e796      	b.n	800bce4 <_strtod_l+0x9ac>
 800bdb6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800bdba:	9b04      	ldr	r3, [sp, #16]
 800bdbc:	46ca      	mov	sl, r9
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d1c2      	bne.n	800bd48 <_strtod_l+0xa10>
 800bdc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bdc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdc8:	0d1b      	lsrs	r3, r3, #20
 800bdca:	051b      	lsls	r3, r3, #20
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d1bb      	bne.n	800bd48 <_strtod_l+0xa10>
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	f7f4 ff88 	bl	8000ce8 <__aeabi_d2lz>
 800bdd8:	f7f4 fbf8 	bl	80005cc <__aeabi_l2d>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	f7f4 fa68 	bl	80002b8 <__aeabi_dsub>
 800bde8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bdee:	ea43 0308 	orr.w	r3, r3, r8
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	4606      	mov	r6, r0
 800bdf6:	460f      	mov	r7, r1
 800bdf8:	d054      	beq.n	800bea4 <_strtod_l+0xb6c>
 800bdfa:	a339      	add	r3, pc, #228	; (adr r3, 800bee0 <_strtod_l+0xba8>)
 800bdfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be00:	f7f4 fe84 	bl	8000b0c <__aeabi_dcmplt>
 800be04:	2800      	cmp	r0, #0
 800be06:	f47f ace5 	bne.w	800b7d4 <_strtod_l+0x49c>
 800be0a:	a337      	add	r3, pc, #220	; (adr r3, 800bee8 <_strtod_l+0xbb0>)
 800be0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be10:	4630      	mov	r0, r6
 800be12:	4639      	mov	r1, r7
 800be14:	f7f4 fe98 	bl	8000b48 <__aeabi_dcmpgt>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d095      	beq.n	800bd48 <_strtod_l+0xa10>
 800be1c:	e4da      	b.n	800b7d4 <_strtod_l+0x49c>
 800be1e:	9b04      	ldr	r3, [sp, #16]
 800be20:	b333      	cbz	r3, 800be70 <_strtod_l+0xb38>
 800be22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be24:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800be28:	d822      	bhi.n	800be70 <_strtod_l+0xb38>
 800be2a:	a331      	add	r3, pc, #196	; (adr r3, 800bef0 <_strtod_l+0xbb8>)
 800be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be30:	4630      	mov	r0, r6
 800be32:	4639      	mov	r1, r7
 800be34:	f7f4 fe74 	bl	8000b20 <__aeabi_dcmple>
 800be38:	b1a0      	cbz	r0, 800be64 <_strtod_l+0xb2c>
 800be3a:	4639      	mov	r1, r7
 800be3c:	4630      	mov	r0, r6
 800be3e:	f7f4 fecb 	bl	8000bd8 <__aeabi_d2uiz>
 800be42:	2801      	cmp	r0, #1
 800be44:	bf38      	it	cc
 800be46:	2001      	movcc	r0, #1
 800be48:	f7f4 fb74 	bl	8000534 <__aeabi_ui2d>
 800be4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be4e:	4606      	mov	r6, r0
 800be50:	460f      	mov	r7, r1
 800be52:	bb23      	cbnz	r3, 800be9e <_strtod_l+0xb66>
 800be54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be58:	9010      	str	r0, [sp, #64]	; 0x40
 800be5a:	9311      	str	r3, [sp, #68]	; 0x44
 800be5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800be64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be68:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800be6c:	1a9b      	subs	r3, r3, r2
 800be6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800be70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800be74:	eeb0 0a48 	vmov.f32	s0, s16
 800be78:	eef0 0a68 	vmov.f32	s1, s17
 800be7c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800be80:	f002 fa08 	bl	800e294 <__ulp>
 800be84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800be88:	ec53 2b10 	vmov	r2, r3, d0
 800be8c:	f7f4 fbcc 	bl	8000628 <__aeabi_dmul>
 800be90:	ec53 2b18 	vmov	r2, r3, d8
 800be94:	f7f4 fa12 	bl	80002bc <__adddf3>
 800be98:	4680      	mov	r8, r0
 800be9a:	4689      	mov	r9, r1
 800be9c:	e78d      	b.n	800bdba <_strtod_l+0xa82>
 800be9e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800bea2:	e7db      	b.n	800be5c <_strtod_l+0xb24>
 800bea4:	a314      	add	r3, pc, #80	; (adr r3, 800bef8 <_strtod_l+0xbc0>)
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	f7f4 fe2f 	bl	8000b0c <__aeabi_dcmplt>
 800beae:	e7b3      	b.n	800be18 <_strtod_l+0xae0>
 800beb0:	2300      	movs	r3, #0
 800beb2:	930a      	str	r3, [sp, #40]	; 0x28
 800beb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800beb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800beb8:	6013      	str	r3, [r2, #0]
 800beba:	f7ff ba7c 	b.w	800b3b6 <_strtod_l+0x7e>
 800bebe:	2a65      	cmp	r2, #101	; 0x65
 800bec0:	f43f ab75 	beq.w	800b5ae <_strtod_l+0x276>
 800bec4:	2a45      	cmp	r2, #69	; 0x45
 800bec6:	f43f ab72 	beq.w	800b5ae <_strtod_l+0x276>
 800beca:	2301      	movs	r3, #1
 800becc:	f7ff bbaa 	b.w	800b624 <_strtod_l+0x2ec>
 800bed0:	00000000 	.word	0x00000000
 800bed4:	bff00000 	.word	0xbff00000
 800bed8:	00000000 	.word	0x00000000
 800bedc:	3ff00000 	.word	0x3ff00000
 800bee0:	94a03595 	.word	0x94a03595
 800bee4:	3fdfffff 	.word	0x3fdfffff
 800bee8:	35afe535 	.word	0x35afe535
 800beec:	3fe00000 	.word	0x3fe00000
 800bef0:	ffc00000 	.word	0xffc00000
 800bef4:	41dfffff 	.word	0x41dfffff
 800bef8:	94a03595 	.word	0x94a03595
 800befc:	3fcfffff 	.word	0x3fcfffff
 800bf00:	3ff00000 	.word	0x3ff00000
 800bf04:	3fe00000 	.word	0x3fe00000
 800bf08:	7ff00000 	.word	0x7ff00000
 800bf0c:	7fe00000 	.word	0x7fe00000
 800bf10:	7c9fffff 	.word	0x7c9fffff
 800bf14:	7fefffff 	.word	0x7fefffff

0800bf18 <_strtod_r>:
 800bf18:	4b01      	ldr	r3, [pc, #4]	; (800bf20 <_strtod_r+0x8>)
 800bf1a:	f7ff ba0d 	b.w	800b338 <_strtod_l>
 800bf1e:	bf00      	nop
 800bf20:	200000a4 	.word	0x200000a4

0800bf24 <_strtol_l.constprop.0>:
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf2a:	d001      	beq.n	800bf30 <_strtol_l.constprop.0+0xc>
 800bf2c:	2b24      	cmp	r3, #36	; 0x24
 800bf2e:	d906      	bls.n	800bf3e <_strtol_l.constprop.0+0x1a>
 800bf30:	f000 f90e 	bl	800c150 <__errno>
 800bf34:	2316      	movs	r3, #22
 800bf36:	6003      	str	r3, [r0, #0]
 800bf38:	2000      	movs	r0, #0
 800bf3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c024 <_strtol_l.constprop.0+0x100>
 800bf42:	460d      	mov	r5, r1
 800bf44:	462e      	mov	r6, r5
 800bf46:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf4a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bf4e:	f017 0708 	ands.w	r7, r7, #8
 800bf52:	d1f7      	bne.n	800bf44 <_strtol_l.constprop.0+0x20>
 800bf54:	2c2d      	cmp	r4, #45	; 0x2d
 800bf56:	d132      	bne.n	800bfbe <_strtol_l.constprop.0+0x9a>
 800bf58:	782c      	ldrb	r4, [r5, #0]
 800bf5a:	2701      	movs	r7, #1
 800bf5c:	1cb5      	adds	r5, r6, #2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d05b      	beq.n	800c01a <_strtol_l.constprop.0+0xf6>
 800bf62:	2b10      	cmp	r3, #16
 800bf64:	d109      	bne.n	800bf7a <_strtol_l.constprop.0+0x56>
 800bf66:	2c30      	cmp	r4, #48	; 0x30
 800bf68:	d107      	bne.n	800bf7a <_strtol_l.constprop.0+0x56>
 800bf6a:	782c      	ldrb	r4, [r5, #0]
 800bf6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf70:	2c58      	cmp	r4, #88	; 0x58
 800bf72:	d14d      	bne.n	800c010 <_strtol_l.constprop.0+0xec>
 800bf74:	786c      	ldrb	r4, [r5, #1]
 800bf76:	2310      	movs	r3, #16
 800bf78:	3502      	adds	r5, #2
 800bf7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bf7e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bf82:	f04f 0e00 	mov.w	lr, #0
 800bf86:	fbb8 f9f3 	udiv	r9, r8, r3
 800bf8a:	4676      	mov	r6, lr
 800bf8c:	fb03 8a19 	mls	sl, r3, r9, r8
 800bf90:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bf94:	f1bc 0f09 	cmp.w	ip, #9
 800bf98:	d816      	bhi.n	800bfc8 <_strtol_l.constprop.0+0xa4>
 800bf9a:	4664      	mov	r4, ip
 800bf9c:	42a3      	cmp	r3, r4
 800bf9e:	dd24      	ble.n	800bfea <_strtol_l.constprop.0+0xc6>
 800bfa0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bfa4:	d008      	beq.n	800bfb8 <_strtol_l.constprop.0+0x94>
 800bfa6:	45b1      	cmp	r9, r6
 800bfa8:	d31c      	bcc.n	800bfe4 <_strtol_l.constprop.0+0xc0>
 800bfaa:	d101      	bne.n	800bfb0 <_strtol_l.constprop.0+0x8c>
 800bfac:	45a2      	cmp	sl, r4
 800bfae:	db19      	blt.n	800bfe4 <_strtol_l.constprop.0+0xc0>
 800bfb0:	fb06 4603 	mla	r6, r6, r3, r4
 800bfb4:	f04f 0e01 	mov.w	lr, #1
 800bfb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfbc:	e7e8      	b.n	800bf90 <_strtol_l.constprop.0+0x6c>
 800bfbe:	2c2b      	cmp	r4, #43	; 0x2b
 800bfc0:	bf04      	itt	eq
 800bfc2:	782c      	ldrbeq	r4, [r5, #0]
 800bfc4:	1cb5      	addeq	r5, r6, #2
 800bfc6:	e7ca      	b.n	800bf5e <_strtol_l.constprop.0+0x3a>
 800bfc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bfcc:	f1bc 0f19 	cmp.w	ip, #25
 800bfd0:	d801      	bhi.n	800bfd6 <_strtol_l.constprop.0+0xb2>
 800bfd2:	3c37      	subs	r4, #55	; 0x37
 800bfd4:	e7e2      	b.n	800bf9c <_strtol_l.constprop.0+0x78>
 800bfd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bfda:	f1bc 0f19 	cmp.w	ip, #25
 800bfde:	d804      	bhi.n	800bfea <_strtol_l.constprop.0+0xc6>
 800bfe0:	3c57      	subs	r4, #87	; 0x57
 800bfe2:	e7db      	b.n	800bf9c <_strtol_l.constprop.0+0x78>
 800bfe4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800bfe8:	e7e6      	b.n	800bfb8 <_strtol_l.constprop.0+0x94>
 800bfea:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800bfee:	d105      	bne.n	800bffc <_strtol_l.constprop.0+0xd8>
 800bff0:	2322      	movs	r3, #34	; 0x22
 800bff2:	6003      	str	r3, [r0, #0]
 800bff4:	4646      	mov	r6, r8
 800bff6:	b942      	cbnz	r2, 800c00a <_strtol_l.constprop.0+0xe6>
 800bff8:	4630      	mov	r0, r6
 800bffa:	e79e      	b.n	800bf3a <_strtol_l.constprop.0+0x16>
 800bffc:	b107      	cbz	r7, 800c000 <_strtol_l.constprop.0+0xdc>
 800bffe:	4276      	negs	r6, r6
 800c000:	2a00      	cmp	r2, #0
 800c002:	d0f9      	beq.n	800bff8 <_strtol_l.constprop.0+0xd4>
 800c004:	f1be 0f00 	cmp.w	lr, #0
 800c008:	d000      	beq.n	800c00c <_strtol_l.constprop.0+0xe8>
 800c00a:	1e69      	subs	r1, r5, #1
 800c00c:	6011      	str	r1, [r2, #0]
 800c00e:	e7f3      	b.n	800bff8 <_strtol_l.constprop.0+0xd4>
 800c010:	2430      	movs	r4, #48	; 0x30
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1b1      	bne.n	800bf7a <_strtol_l.constprop.0+0x56>
 800c016:	2308      	movs	r3, #8
 800c018:	e7af      	b.n	800bf7a <_strtol_l.constprop.0+0x56>
 800c01a:	2c30      	cmp	r4, #48	; 0x30
 800c01c:	d0a5      	beq.n	800bf6a <_strtol_l.constprop.0+0x46>
 800c01e:	230a      	movs	r3, #10
 800c020:	e7ab      	b.n	800bf7a <_strtol_l.constprop.0+0x56>
 800c022:	bf00      	nop
 800c024:	0800f071 	.word	0x0800f071

0800c028 <_strtol_r>:
 800c028:	f7ff bf7c 	b.w	800bf24 <_strtol_l.constprop.0>

0800c02c <_fwalk_sglue>:
 800c02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c030:	4607      	mov	r7, r0
 800c032:	4688      	mov	r8, r1
 800c034:	4614      	mov	r4, r2
 800c036:	2600      	movs	r6, #0
 800c038:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c03c:	f1b9 0901 	subs.w	r9, r9, #1
 800c040:	d505      	bpl.n	800c04e <_fwalk_sglue+0x22>
 800c042:	6824      	ldr	r4, [r4, #0]
 800c044:	2c00      	cmp	r4, #0
 800c046:	d1f7      	bne.n	800c038 <_fwalk_sglue+0xc>
 800c048:	4630      	mov	r0, r6
 800c04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04e:	89ab      	ldrh	r3, [r5, #12]
 800c050:	2b01      	cmp	r3, #1
 800c052:	d907      	bls.n	800c064 <_fwalk_sglue+0x38>
 800c054:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c058:	3301      	adds	r3, #1
 800c05a:	d003      	beq.n	800c064 <_fwalk_sglue+0x38>
 800c05c:	4629      	mov	r1, r5
 800c05e:	4638      	mov	r0, r7
 800c060:	47c0      	blx	r8
 800c062:	4306      	orrs	r6, r0
 800c064:	3568      	adds	r5, #104	; 0x68
 800c066:	e7e9      	b.n	800c03c <_fwalk_sglue+0x10>

0800c068 <strncmp>:
 800c068:	b510      	push	{r4, lr}
 800c06a:	b16a      	cbz	r2, 800c088 <strncmp+0x20>
 800c06c:	3901      	subs	r1, #1
 800c06e:	1884      	adds	r4, r0, r2
 800c070:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c074:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c078:	429a      	cmp	r2, r3
 800c07a:	d103      	bne.n	800c084 <strncmp+0x1c>
 800c07c:	42a0      	cmp	r0, r4
 800c07e:	d001      	beq.n	800c084 <strncmp+0x1c>
 800c080:	2a00      	cmp	r2, #0
 800c082:	d1f5      	bne.n	800c070 <strncmp+0x8>
 800c084:	1ad0      	subs	r0, r2, r3
 800c086:	bd10      	pop	{r4, pc}
 800c088:	4610      	mov	r0, r2
 800c08a:	e7fc      	b.n	800c086 <strncmp+0x1e>

0800c08c <memset>:
 800c08c:	4402      	add	r2, r0
 800c08e:	4603      	mov	r3, r0
 800c090:	4293      	cmp	r3, r2
 800c092:	d100      	bne.n	800c096 <memset+0xa>
 800c094:	4770      	bx	lr
 800c096:	f803 1b01 	strb.w	r1, [r3], #1
 800c09a:	e7f9      	b.n	800c090 <memset+0x4>

0800c09c <_localeconv_r>:
 800c09c:	4800      	ldr	r0, [pc, #0]	; (800c0a0 <_localeconv_r+0x4>)
 800c09e:	4770      	bx	lr
 800c0a0:	20000194 	.word	0x20000194

0800c0a4 <_reclaim_reent>:
 800c0a4:	4b29      	ldr	r3, [pc, #164]	; (800c14c <_reclaim_reent+0xa8>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4283      	cmp	r3, r0
 800c0aa:	b570      	push	{r4, r5, r6, lr}
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	d04b      	beq.n	800c148 <_reclaim_reent+0xa4>
 800c0b0:	69c3      	ldr	r3, [r0, #28]
 800c0b2:	b143      	cbz	r3, 800c0c6 <_reclaim_reent+0x22>
 800c0b4:	68db      	ldr	r3, [r3, #12]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d144      	bne.n	800c144 <_reclaim_reent+0xa0>
 800c0ba:	69e3      	ldr	r3, [r4, #28]
 800c0bc:	6819      	ldr	r1, [r3, #0]
 800c0be:	b111      	cbz	r1, 800c0c6 <_reclaim_reent+0x22>
 800c0c0:	4620      	mov	r0, r4
 800c0c2:	f000 ff0b 	bl	800cedc <_free_r>
 800c0c6:	6961      	ldr	r1, [r4, #20]
 800c0c8:	b111      	cbz	r1, 800c0d0 <_reclaim_reent+0x2c>
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 ff06 	bl	800cedc <_free_r>
 800c0d0:	69e1      	ldr	r1, [r4, #28]
 800c0d2:	b111      	cbz	r1, 800c0da <_reclaim_reent+0x36>
 800c0d4:	4620      	mov	r0, r4
 800c0d6:	f000 ff01 	bl	800cedc <_free_r>
 800c0da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c0dc:	b111      	cbz	r1, 800c0e4 <_reclaim_reent+0x40>
 800c0de:	4620      	mov	r0, r4
 800c0e0:	f000 fefc 	bl	800cedc <_free_r>
 800c0e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0e6:	b111      	cbz	r1, 800c0ee <_reclaim_reent+0x4a>
 800c0e8:	4620      	mov	r0, r4
 800c0ea:	f000 fef7 	bl	800cedc <_free_r>
 800c0ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c0f0:	b111      	cbz	r1, 800c0f8 <_reclaim_reent+0x54>
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 fef2 	bl	800cedc <_free_r>
 800c0f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c0fa:	b111      	cbz	r1, 800c102 <_reclaim_reent+0x5e>
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	f000 feed 	bl	800cedc <_free_r>
 800c102:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c104:	b111      	cbz	r1, 800c10c <_reclaim_reent+0x68>
 800c106:	4620      	mov	r0, r4
 800c108:	f000 fee8 	bl	800cedc <_free_r>
 800c10c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c10e:	b111      	cbz	r1, 800c116 <_reclaim_reent+0x72>
 800c110:	4620      	mov	r0, r4
 800c112:	f000 fee3 	bl	800cedc <_free_r>
 800c116:	6a23      	ldr	r3, [r4, #32]
 800c118:	b1b3      	cbz	r3, 800c148 <_reclaim_reent+0xa4>
 800c11a:	4620      	mov	r0, r4
 800c11c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c120:	4718      	bx	r3
 800c122:	5949      	ldr	r1, [r1, r5]
 800c124:	b941      	cbnz	r1, 800c138 <_reclaim_reent+0x94>
 800c126:	3504      	adds	r5, #4
 800c128:	69e3      	ldr	r3, [r4, #28]
 800c12a:	2d80      	cmp	r5, #128	; 0x80
 800c12c:	68d9      	ldr	r1, [r3, #12]
 800c12e:	d1f8      	bne.n	800c122 <_reclaim_reent+0x7e>
 800c130:	4620      	mov	r0, r4
 800c132:	f000 fed3 	bl	800cedc <_free_r>
 800c136:	e7c0      	b.n	800c0ba <_reclaim_reent+0x16>
 800c138:	680e      	ldr	r6, [r1, #0]
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 fece 	bl	800cedc <_free_r>
 800c140:	4631      	mov	r1, r6
 800c142:	e7ef      	b.n	800c124 <_reclaim_reent+0x80>
 800c144:	2500      	movs	r5, #0
 800c146:	e7ef      	b.n	800c128 <_reclaim_reent+0x84>
 800c148:	bd70      	pop	{r4, r5, r6, pc}
 800c14a:	bf00      	nop
 800c14c:	2000025c 	.word	0x2000025c

0800c150 <__errno>:
 800c150:	4b01      	ldr	r3, [pc, #4]	; (800c158 <__errno+0x8>)
 800c152:	6818      	ldr	r0, [r3, #0]
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	2000025c 	.word	0x2000025c

0800c15c <__libc_init_array>:
 800c15c:	b570      	push	{r4, r5, r6, lr}
 800c15e:	4d0d      	ldr	r5, [pc, #52]	; (800c194 <__libc_init_array+0x38>)
 800c160:	4c0d      	ldr	r4, [pc, #52]	; (800c198 <__libc_init_array+0x3c>)
 800c162:	1b64      	subs	r4, r4, r5
 800c164:	10a4      	asrs	r4, r4, #2
 800c166:	2600      	movs	r6, #0
 800c168:	42a6      	cmp	r6, r4
 800c16a:	d109      	bne.n	800c180 <__libc_init_array+0x24>
 800c16c:	4d0b      	ldr	r5, [pc, #44]	; (800c19c <__libc_init_array+0x40>)
 800c16e:	4c0c      	ldr	r4, [pc, #48]	; (800c1a0 <__libc_init_array+0x44>)
 800c170:	f002 fdb6 	bl	800ece0 <_init>
 800c174:	1b64      	subs	r4, r4, r5
 800c176:	10a4      	asrs	r4, r4, #2
 800c178:	2600      	movs	r6, #0
 800c17a:	42a6      	cmp	r6, r4
 800c17c:	d105      	bne.n	800c18a <__libc_init_array+0x2e>
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
 800c180:	f855 3b04 	ldr.w	r3, [r5], #4
 800c184:	4798      	blx	r3
 800c186:	3601      	adds	r6, #1
 800c188:	e7ee      	b.n	800c168 <__libc_init_array+0xc>
 800c18a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c18e:	4798      	blx	r3
 800c190:	3601      	adds	r6, #1
 800c192:	e7f2      	b.n	800c17a <__libc_init_array+0x1e>
 800c194:	0800f408 	.word	0x0800f408
 800c198:	0800f408 	.word	0x0800f408
 800c19c:	0800f408 	.word	0x0800f408
 800c1a0:	0800f40c 	.word	0x0800f40c

0800c1a4 <__retarget_lock_init_recursive>:
 800c1a4:	4770      	bx	lr

0800c1a6 <__retarget_lock_acquire_recursive>:
 800c1a6:	4770      	bx	lr

0800c1a8 <__retarget_lock_release_recursive>:
 800c1a8:	4770      	bx	lr

0800c1aa <memcpy>:
 800c1aa:	440a      	add	r2, r1
 800c1ac:	4291      	cmp	r1, r2
 800c1ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c1b2:	d100      	bne.n	800c1b6 <memcpy+0xc>
 800c1b4:	4770      	bx	lr
 800c1b6:	b510      	push	{r4, lr}
 800c1b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1c0:	4291      	cmp	r1, r2
 800c1c2:	d1f9      	bne.n	800c1b8 <memcpy+0xe>
 800c1c4:	bd10      	pop	{r4, pc}
	...

0800c1c8 <nan>:
 800c1c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c1d0 <nan+0x8>
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	00000000 	.word	0x00000000
 800c1d4:	7ff80000 	.word	0x7ff80000

0800c1d8 <nanf>:
 800c1d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1e0 <nanf+0x8>
 800c1dc:	4770      	bx	lr
 800c1de:	bf00      	nop
 800c1e0:	7fc00000 	.word	0x7fc00000

0800c1e4 <quorem>:
 800c1e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e8:	6903      	ldr	r3, [r0, #16]
 800c1ea:	690c      	ldr	r4, [r1, #16]
 800c1ec:	42a3      	cmp	r3, r4
 800c1ee:	4607      	mov	r7, r0
 800c1f0:	db7e      	blt.n	800c2f0 <quorem+0x10c>
 800c1f2:	3c01      	subs	r4, #1
 800c1f4:	f101 0814 	add.w	r8, r1, #20
 800c1f8:	f100 0514 	add.w	r5, r0, #20
 800c1fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c20a:	3301      	adds	r3, #1
 800c20c:	429a      	cmp	r2, r3
 800c20e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c212:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c216:	fbb2 f6f3 	udiv	r6, r2, r3
 800c21a:	d331      	bcc.n	800c280 <quorem+0x9c>
 800c21c:	f04f 0e00 	mov.w	lr, #0
 800c220:	4640      	mov	r0, r8
 800c222:	46ac      	mov	ip, r5
 800c224:	46f2      	mov	sl, lr
 800c226:	f850 2b04 	ldr.w	r2, [r0], #4
 800c22a:	b293      	uxth	r3, r2
 800c22c:	fb06 e303 	mla	r3, r6, r3, lr
 800c230:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c234:	0c1a      	lsrs	r2, r3, #16
 800c236:	b29b      	uxth	r3, r3
 800c238:	ebaa 0303 	sub.w	r3, sl, r3
 800c23c:	f8dc a000 	ldr.w	sl, [ip]
 800c240:	fa13 f38a 	uxtah	r3, r3, sl
 800c244:	fb06 220e 	mla	r2, r6, lr, r2
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	9b00      	ldr	r3, [sp, #0]
 800c24c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c250:	b292      	uxth	r2, r2
 800c252:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c256:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c25a:	f8bd 3000 	ldrh.w	r3, [sp]
 800c25e:	4581      	cmp	r9, r0
 800c260:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c264:	f84c 3b04 	str.w	r3, [ip], #4
 800c268:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c26c:	d2db      	bcs.n	800c226 <quorem+0x42>
 800c26e:	f855 300b 	ldr.w	r3, [r5, fp]
 800c272:	b92b      	cbnz	r3, 800c280 <quorem+0x9c>
 800c274:	9b01      	ldr	r3, [sp, #4]
 800c276:	3b04      	subs	r3, #4
 800c278:	429d      	cmp	r5, r3
 800c27a:	461a      	mov	r2, r3
 800c27c:	d32c      	bcc.n	800c2d8 <quorem+0xf4>
 800c27e:	613c      	str	r4, [r7, #16]
 800c280:	4638      	mov	r0, r7
 800c282:	f001 ff61 	bl	800e148 <__mcmp>
 800c286:	2800      	cmp	r0, #0
 800c288:	db22      	blt.n	800c2d0 <quorem+0xec>
 800c28a:	3601      	adds	r6, #1
 800c28c:	4629      	mov	r1, r5
 800c28e:	2000      	movs	r0, #0
 800c290:	f858 2b04 	ldr.w	r2, [r8], #4
 800c294:	f8d1 c000 	ldr.w	ip, [r1]
 800c298:	b293      	uxth	r3, r2
 800c29a:	1ac3      	subs	r3, r0, r3
 800c29c:	0c12      	lsrs	r2, r2, #16
 800c29e:	fa13 f38c 	uxtah	r3, r3, ip
 800c2a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c2a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2b0:	45c1      	cmp	r9, r8
 800c2b2:	f841 3b04 	str.w	r3, [r1], #4
 800c2b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c2ba:	d2e9      	bcs.n	800c290 <quorem+0xac>
 800c2bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2c4:	b922      	cbnz	r2, 800c2d0 <quorem+0xec>
 800c2c6:	3b04      	subs	r3, #4
 800c2c8:	429d      	cmp	r5, r3
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	d30a      	bcc.n	800c2e4 <quorem+0x100>
 800c2ce:	613c      	str	r4, [r7, #16]
 800c2d0:	4630      	mov	r0, r6
 800c2d2:	b003      	add	sp, #12
 800c2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d8:	6812      	ldr	r2, [r2, #0]
 800c2da:	3b04      	subs	r3, #4
 800c2dc:	2a00      	cmp	r2, #0
 800c2de:	d1ce      	bne.n	800c27e <quorem+0x9a>
 800c2e0:	3c01      	subs	r4, #1
 800c2e2:	e7c9      	b.n	800c278 <quorem+0x94>
 800c2e4:	6812      	ldr	r2, [r2, #0]
 800c2e6:	3b04      	subs	r3, #4
 800c2e8:	2a00      	cmp	r2, #0
 800c2ea:	d1f0      	bne.n	800c2ce <quorem+0xea>
 800c2ec:	3c01      	subs	r4, #1
 800c2ee:	e7eb      	b.n	800c2c8 <quorem+0xe4>
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	e7ee      	b.n	800c2d2 <quorem+0xee>
 800c2f4:	0000      	movs	r0, r0
	...

0800c2f8 <_dtoa_r>:
 800c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2fc:	ed2d 8b04 	vpush	{d8-d9}
 800c300:	69c5      	ldr	r5, [r0, #28]
 800c302:	b093      	sub	sp, #76	; 0x4c
 800c304:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c308:	ec57 6b10 	vmov	r6, r7, d0
 800c30c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c310:	9107      	str	r1, [sp, #28]
 800c312:	4604      	mov	r4, r0
 800c314:	920a      	str	r2, [sp, #40]	; 0x28
 800c316:	930d      	str	r3, [sp, #52]	; 0x34
 800c318:	b975      	cbnz	r5, 800c338 <_dtoa_r+0x40>
 800c31a:	2010      	movs	r0, #16
 800c31c:	f001 fada 	bl	800d8d4 <malloc>
 800c320:	4602      	mov	r2, r0
 800c322:	61e0      	str	r0, [r4, #28]
 800c324:	b920      	cbnz	r0, 800c330 <_dtoa_r+0x38>
 800c326:	4bae      	ldr	r3, [pc, #696]	; (800c5e0 <_dtoa_r+0x2e8>)
 800c328:	21ef      	movs	r1, #239	; 0xef
 800c32a:	48ae      	ldr	r0, [pc, #696]	; (800c5e4 <_dtoa_r+0x2ec>)
 800c32c:	f002 f9e2 	bl	800e6f4 <__assert_func>
 800c330:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c334:	6005      	str	r5, [r0, #0]
 800c336:	60c5      	str	r5, [r0, #12]
 800c338:	69e3      	ldr	r3, [r4, #28]
 800c33a:	6819      	ldr	r1, [r3, #0]
 800c33c:	b151      	cbz	r1, 800c354 <_dtoa_r+0x5c>
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	604a      	str	r2, [r1, #4]
 800c342:	2301      	movs	r3, #1
 800c344:	4093      	lsls	r3, r2
 800c346:	608b      	str	r3, [r1, #8]
 800c348:	4620      	mov	r0, r4
 800c34a:	f001 fc77 	bl	800dc3c <_Bfree>
 800c34e:	69e3      	ldr	r3, [r4, #28]
 800c350:	2200      	movs	r2, #0
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	1e3b      	subs	r3, r7, #0
 800c356:	bfbb      	ittet	lt
 800c358:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c35c:	9303      	strlt	r3, [sp, #12]
 800c35e:	2300      	movge	r3, #0
 800c360:	2201      	movlt	r2, #1
 800c362:	bfac      	ite	ge
 800c364:	f8c8 3000 	strge.w	r3, [r8]
 800c368:	f8c8 2000 	strlt.w	r2, [r8]
 800c36c:	4b9e      	ldr	r3, [pc, #632]	; (800c5e8 <_dtoa_r+0x2f0>)
 800c36e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c372:	ea33 0308 	bics.w	r3, r3, r8
 800c376:	d11b      	bne.n	800c3b0 <_dtoa_r+0xb8>
 800c378:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c37a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c37e:	6013      	str	r3, [r2, #0]
 800c380:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c384:	4333      	orrs	r3, r6
 800c386:	f000 8593 	beq.w	800ceb0 <_dtoa_r+0xbb8>
 800c38a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c38c:	b963      	cbnz	r3, 800c3a8 <_dtoa_r+0xb0>
 800c38e:	4b97      	ldr	r3, [pc, #604]	; (800c5ec <_dtoa_r+0x2f4>)
 800c390:	e027      	b.n	800c3e2 <_dtoa_r+0xea>
 800c392:	4b97      	ldr	r3, [pc, #604]	; (800c5f0 <_dtoa_r+0x2f8>)
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	3308      	adds	r3, #8
 800c398:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c39a:	6013      	str	r3, [r2, #0]
 800c39c:	9800      	ldr	r0, [sp, #0]
 800c39e:	b013      	add	sp, #76	; 0x4c
 800c3a0:	ecbd 8b04 	vpop	{d8-d9}
 800c3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a8:	4b90      	ldr	r3, [pc, #576]	; (800c5ec <_dtoa_r+0x2f4>)
 800c3aa:	9300      	str	r3, [sp, #0]
 800c3ac:	3303      	adds	r3, #3
 800c3ae:	e7f3      	b.n	800c398 <_dtoa_r+0xa0>
 800c3b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	ec51 0b17 	vmov	r0, r1, d7
 800c3ba:	eeb0 8a47 	vmov.f32	s16, s14
 800c3be:	eef0 8a67 	vmov.f32	s17, s15
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f7f4 fb98 	bl	8000af8 <__aeabi_dcmpeq>
 800c3c8:	4681      	mov	r9, r0
 800c3ca:	b160      	cbz	r0, 800c3e6 <_dtoa_r+0xee>
 800c3cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f000 8568 	beq.w	800ceaa <_dtoa_r+0xbb2>
 800c3da:	4b86      	ldr	r3, [pc, #536]	; (800c5f4 <_dtoa_r+0x2fc>)
 800c3dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3de:	6013      	str	r3, [r2, #0]
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	e7da      	b.n	800c39c <_dtoa_r+0xa4>
 800c3e6:	aa10      	add	r2, sp, #64	; 0x40
 800c3e8:	a911      	add	r1, sp, #68	; 0x44
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	eeb0 0a48 	vmov.f32	s0, s16
 800c3f0:	eef0 0a68 	vmov.f32	s1, s17
 800c3f4:	f001 ffbe 	bl	800e374 <__d2b>
 800c3f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c3fc:	4682      	mov	sl, r0
 800c3fe:	2d00      	cmp	r5, #0
 800c400:	d07f      	beq.n	800c502 <_dtoa_r+0x20a>
 800c402:	ee18 3a90 	vmov	r3, s17
 800c406:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c40a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c40e:	ec51 0b18 	vmov	r0, r1, d8
 800c412:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c416:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c41a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c41e:	4619      	mov	r1, r3
 800c420:	2200      	movs	r2, #0
 800c422:	4b75      	ldr	r3, [pc, #468]	; (800c5f8 <_dtoa_r+0x300>)
 800c424:	f7f3 ff48 	bl	80002b8 <__aeabi_dsub>
 800c428:	a367      	add	r3, pc, #412	; (adr r3, 800c5c8 <_dtoa_r+0x2d0>)
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	f7f4 f8fb 	bl	8000628 <__aeabi_dmul>
 800c432:	a367      	add	r3, pc, #412	; (adr r3, 800c5d0 <_dtoa_r+0x2d8>)
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	f7f3 ff40 	bl	80002bc <__adddf3>
 800c43c:	4606      	mov	r6, r0
 800c43e:	4628      	mov	r0, r5
 800c440:	460f      	mov	r7, r1
 800c442:	f7f4 f887 	bl	8000554 <__aeabi_i2d>
 800c446:	a364      	add	r3, pc, #400	; (adr r3, 800c5d8 <_dtoa_r+0x2e0>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	f7f4 f8ec 	bl	8000628 <__aeabi_dmul>
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	4630      	mov	r0, r6
 800c456:	4639      	mov	r1, r7
 800c458:	f7f3 ff30 	bl	80002bc <__adddf3>
 800c45c:	4606      	mov	r6, r0
 800c45e:	460f      	mov	r7, r1
 800c460:	f7f4 fb92 	bl	8000b88 <__aeabi_d2iz>
 800c464:	2200      	movs	r2, #0
 800c466:	4683      	mov	fp, r0
 800c468:	2300      	movs	r3, #0
 800c46a:	4630      	mov	r0, r6
 800c46c:	4639      	mov	r1, r7
 800c46e:	f7f4 fb4d 	bl	8000b0c <__aeabi_dcmplt>
 800c472:	b148      	cbz	r0, 800c488 <_dtoa_r+0x190>
 800c474:	4658      	mov	r0, fp
 800c476:	f7f4 f86d 	bl	8000554 <__aeabi_i2d>
 800c47a:	4632      	mov	r2, r6
 800c47c:	463b      	mov	r3, r7
 800c47e:	f7f4 fb3b 	bl	8000af8 <__aeabi_dcmpeq>
 800c482:	b908      	cbnz	r0, 800c488 <_dtoa_r+0x190>
 800c484:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c488:	f1bb 0f16 	cmp.w	fp, #22
 800c48c:	d857      	bhi.n	800c53e <_dtoa_r+0x246>
 800c48e:	4b5b      	ldr	r3, [pc, #364]	; (800c5fc <_dtoa_r+0x304>)
 800c490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	ec51 0b18 	vmov	r0, r1, d8
 800c49c:	f7f4 fb36 	bl	8000b0c <__aeabi_dcmplt>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d04e      	beq.n	800c542 <_dtoa_r+0x24a>
 800c4a4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c4ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4ae:	1b5b      	subs	r3, r3, r5
 800c4b0:	1e5a      	subs	r2, r3, #1
 800c4b2:	bf45      	ittet	mi
 800c4b4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c4b8:	9305      	strmi	r3, [sp, #20]
 800c4ba:	2300      	movpl	r3, #0
 800c4bc:	2300      	movmi	r3, #0
 800c4be:	9206      	str	r2, [sp, #24]
 800c4c0:	bf54      	ite	pl
 800c4c2:	9305      	strpl	r3, [sp, #20]
 800c4c4:	9306      	strmi	r3, [sp, #24]
 800c4c6:	f1bb 0f00 	cmp.w	fp, #0
 800c4ca:	db3c      	blt.n	800c546 <_dtoa_r+0x24e>
 800c4cc:	9b06      	ldr	r3, [sp, #24]
 800c4ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c4d2:	445b      	add	r3, fp
 800c4d4:	9306      	str	r3, [sp, #24]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	9308      	str	r3, [sp, #32]
 800c4da:	9b07      	ldr	r3, [sp, #28]
 800c4dc:	2b09      	cmp	r3, #9
 800c4de:	d868      	bhi.n	800c5b2 <_dtoa_r+0x2ba>
 800c4e0:	2b05      	cmp	r3, #5
 800c4e2:	bfc4      	itt	gt
 800c4e4:	3b04      	subgt	r3, #4
 800c4e6:	9307      	strgt	r3, [sp, #28]
 800c4e8:	9b07      	ldr	r3, [sp, #28]
 800c4ea:	f1a3 0302 	sub.w	r3, r3, #2
 800c4ee:	bfcc      	ite	gt
 800c4f0:	2500      	movgt	r5, #0
 800c4f2:	2501      	movle	r5, #1
 800c4f4:	2b03      	cmp	r3, #3
 800c4f6:	f200 8085 	bhi.w	800c604 <_dtoa_r+0x30c>
 800c4fa:	e8df f003 	tbb	[pc, r3]
 800c4fe:	3b2e      	.short	0x3b2e
 800c500:	5839      	.short	0x5839
 800c502:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c506:	441d      	add	r5, r3
 800c508:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c50c:	2b20      	cmp	r3, #32
 800c50e:	bfc1      	itttt	gt
 800c510:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c514:	fa08 f803 	lslgt.w	r8, r8, r3
 800c518:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c51c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c520:	bfd6      	itet	le
 800c522:	f1c3 0320 	rsble	r3, r3, #32
 800c526:	ea48 0003 	orrgt.w	r0, r8, r3
 800c52a:	fa06 f003 	lslle.w	r0, r6, r3
 800c52e:	f7f4 f801 	bl	8000534 <__aeabi_ui2d>
 800c532:	2201      	movs	r2, #1
 800c534:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c538:	3d01      	subs	r5, #1
 800c53a:	920e      	str	r2, [sp, #56]	; 0x38
 800c53c:	e76f      	b.n	800c41e <_dtoa_r+0x126>
 800c53e:	2301      	movs	r3, #1
 800c540:	e7b3      	b.n	800c4aa <_dtoa_r+0x1b2>
 800c542:	900c      	str	r0, [sp, #48]	; 0x30
 800c544:	e7b2      	b.n	800c4ac <_dtoa_r+0x1b4>
 800c546:	9b05      	ldr	r3, [sp, #20]
 800c548:	eba3 030b 	sub.w	r3, r3, fp
 800c54c:	9305      	str	r3, [sp, #20]
 800c54e:	f1cb 0300 	rsb	r3, fp, #0
 800c552:	9308      	str	r3, [sp, #32]
 800c554:	2300      	movs	r3, #0
 800c556:	930b      	str	r3, [sp, #44]	; 0x2c
 800c558:	e7bf      	b.n	800c4da <_dtoa_r+0x1e2>
 800c55a:	2300      	movs	r3, #0
 800c55c:	9309      	str	r3, [sp, #36]	; 0x24
 800c55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c560:	2b00      	cmp	r3, #0
 800c562:	dc52      	bgt.n	800c60a <_dtoa_r+0x312>
 800c564:	2301      	movs	r3, #1
 800c566:	9301      	str	r3, [sp, #4]
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	461a      	mov	r2, r3
 800c56c:	920a      	str	r2, [sp, #40]	; 0x28
 800c56e:	e00b      	b.n	800c588 <_dtoa_r+0x290>
 800c570:	2301      	movs	r3, #1
 800c572:	e7f3      	b.n	800c55c <_dtoa_r+0x264>
 800c574:	2300      	movs	r3, #0
 800c576:	9309      	str	r3, [sp, #36]	; 0x24
 800c578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c57a:	445b      	add	r3, fp
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	3301      	adds	r3, #1
 800c580:	2b01      	cmp	r3, #1
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	bfb8      	it	lt
 800c586:	2301      	movlt	r3, #1
 800c588:	69e0      	ldr	r0, [r4, #28]
 800c58a:	2100      	movs	r1, #0
 800c58c:	2204      	movs	r2, #4
 800c58e:	f102 0614 	add.w	r6, r2, #20
 800c592:	429e      	cmp	r6, r3
 800c594:	d93d      	bls.n	800c612 <_dtoa_r+0x31a>
 800c596:	6041      	str	r1, [r0, #4]
 800c598:	4620      	mov	r0, r4
 800c59a:	f001 fb0f 	bl	800dbbc <_Balloc>
 800c59e:	9000      	str	r0, [sp, #0]
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d139      	bne.n	800c618 <_dtoa_r+0x320>
 800c5a4:	4b16      	ldr	r3, [pc, #88]	; (800c600 <_dtoa_r+0x308>)
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	f240 11af 	movw	r1, #431	; 0x1af
 800c5ac:	e6bd      	b.n	800c32a <_dtoa_r+0x32>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	e7e1      	b.n	800c576 <_dtoa_r+0x27e>
 800c5b2:	2501      	movs	r5, #1
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	9307      	str	r3, [sp, #28]
 800c5b8:	9509      	str	r5, [sp, #36]	; 0x24
 800c5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c5be:	9301      	str	r3, [sp, #4]
 800c5c0:	9304      	str	r3, [sp, #16]
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	2312      	movs	r3, #18
 800c5c6:	e7d1      	b.n	800c56c <_dtoa_r+0x274>
 800c5c8:	636f4361 	.word	0x636f4361
 800c5cc:	3fd287a7 	.word	0x3fd287a7
 800c5d0:	8b60c8b3 	.word	0x8b60c8b3
 800c5d4:	3fc68a28 	.word	0x3fc68a28
 800c5d8:	509f79fb 	.word	0x509f79fb
 800c5dc:	3fd34413 	.word	0x3fd34413
 800c5e0:	0800f17e 	.word	0x0800f17e
 800c5e4:	0800f195 	.word	0x0800f195
 800c5e8:	7ff00000 	.word	0x7ff00000
 800c5ec:	0800f17a 	.word	0x0800f17a
 800c5f0:	0800f171 	.word	0x0800f171
 800c5f4:	0800efed 	.word	0x0800efed
 800c5f8:	3ff80000 	.word	0x3ff80000
 800c5fc:	0800f2f0 	.word	0x0800f2f0
 800c600:	0800f1ed 	.word	0x0800f1ed
 800c604:	2301      	movs	r3, #1
 800c606:	9309      	str	r3, [sp, #36]	; 0x24
 800c608:	e7d7      	b.n	800c5ba <_dtoa_r+0x2c2>
 800c60a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c60c:	9301      	str	r3, [sp, #4]
 800c60e:	9304      	str	r3, [sp, #16]
 800c610:	e7ba      	b.n	800c588 <_dtoa_r+0x290>
 800c612:	3101      	adds	r1, #1
 800c614:	0052      	lsls	r2, r2, #1
 800c616:	e7ba      	b.n	800c58e <_dtoa_r+0x296>
 800c618:	69e3      	ldr	r3, [r4, #28]
 800c61a:	9a00      	ldr	r2, [sp, #0]
 800c61c:	601a      	str	r2, [r3, #0]
 800c61e:	9b04      	ldr	r3, [sp, #16]
 800c620:	2b0e      	cmp	r3, #14
 800c622:	f200 80a8 	bhi.w	800c776 <_dtoa_r+0x47e>
 800c626:	2d00      	cmp	r5, #0
 800c628:	f000 80a5 	beq.w	800c776 <_dtoa_r+0x47e>
 800c62c:	f1bb 0f00 	cmp.w	fp, #0
 800c630:	dd38      	ble.n	800c6a4 <_dtoa_r+0x3ac>
 800c632:	4bc0      	ldr	r3, [pc, #768]	; (800c934 <_dtoa_r+0x63c>)
 800c634:	f00b 020f 	and.w	r2, fp, #15
 800c638:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c63c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c640:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c644:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c648:	d019      	beq.n	800c67e <_dtoa_r+0x386>
 800c64a:	4bbb      	ldr	r3, [pc, #748]	; (800c938 <_dtoa_r+0x640>)
 800c64c:	ec51 0b18 	vmov	r0, r1, d8
 800c650:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c654:	f7f4 f912 	bl	800087c <__aeabi_ddiv>
 800c658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c65c:	f008 080f 	and.w	r8, r8, #15
 800c660:	2503      	movs	r5, #3
 800c662:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c938 <_dtoa_r+0x640>
 800c666:	f1b8 0f00 	cmp.w	r8, #0
 800c66a:	d10a      	bne.n	800c682 <_dtoa_r+0x38a>
 800c66c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c670:	4632      	mov	r2, r6
 800c672:	463b      	mov	r3, r7
 800c674:	f7f4 f902 	bl	800087c <__aeabi_ddiv>
 800c678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c67c:	e02b      	b.n	800c6d6 <_dtoa_r+0x3de>
 800c67e:	2502      	movs	r5, #2
 800c680:	e7ef      	b.n	800c662 <_dtoa_r+0x36a>
 800c682:	f018 0f01 	tst.w	r8, #1
 800c686:	d008      	beq.n	800c69a <_dtoa_r+0x3a2>
 800c688:	4630      	mov	r0, r6
 800c68a:	4639      	mov	r1, r7
 800c68c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c690:	f7f3 ffca 	bl	8000628 <__aeabi_dmul>
 800c694:	3501      	adds	r5, #1
 800c696:	4606      	mov	r6, r0
 800c698:	460f      	mov	r7, r1
 800c69a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c69e:	f109 0908 	add.w	r9, r9, #8
 800c6a2:	e7e0      	b.n	800c666 <_dtoa_r+0x36e>
 800c6a4:	f000 809f 	beq.w	800c7e6 <_dtoa_r+0x4ee>
 800c6a8:	f1cb 0600 	rsb	r6, fp, #0
 800c6ac:	4ba1      	ldr	r3, [pc, #644]	; (800c934 <_dtoa_r+0x63c>)
 800c6ae:	4fa2      	ldr	r7, [pc, #648]	; (800c938 <_dtoa_r+0x640>)
 800c6b0:	f006 020f 	and.w	r2, r6, #15
 800c6b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6bc:	ec51 0b18 	vmov	r0, r1, d8
 800c6c0:	f7f3 ffb2 	bl	8000628 <__aeabi_dmul>
 800c6c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6c8:	1136      	asrs	r6, r6, #4
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	2502      	movs	r5, #2
 800c6ce:	2e00      	cmp	r6, #0
 800c6d0:	d17e      	bne.n	800c7d0 <_dtoa_r+0x4d8>
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d1d0      	bne.n	800c678 <_dtoa_r+0x380>
 800c6d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 8084 	beq.w	800c7ea <_dtoa_r+0x4f2>
 800c6e2:	4b96      	ldr	r3, [pc, #600]	; (800c93c <_dtoa_r+0x644>)
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	f7f4 fa0f 	bl	8000b0c <__aeabi_dcmplt>
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d07b      	beq.n	800c7ea <_dtoa_r+0x4f2>
 800c6f2:	9b04      	ldr	r3, [sp, #16]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d078      	beq.n	800c7ea <_dtoa_r+0x4f2>
 800c6f8:	9b01      	ldr	r3, [sp, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	dd39      	ble.n	800c772 <_dtoa_r+0x47a>
 800c6fe:	4b90      	ldr	r3, [pc, #576]	; (800c940 <_dtoa_r+0x648>)
 800c700:	2200      	movs	r2, #0
 800c702:	4640      	mov	r0, r8
 800c704:	4649      	mov	r1, r9
 800c706:	f7f3 ff8f 	bl	8000628 <__aeabi_dmul>
 800c70a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c70e:	9e01      	ldr	r6, [sp, #4]
 800c710:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800c714:	3501      	adds	r5, #1
 800c716:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c71a:	4628      	mov	r0, r5
 800c71c:	f7f3 ff1a 	bl	8000554 <__aeabi_i2d>
 800c720:	4642      	mov	r2, r8
 800c722:	464b      	mov	r3, r9
 800c724:	f7f3 ff80 	bl	8000628 <__aeabi_dmul>
 800c728:	4b86      	ldr	r3, [pc, #536]	; (800c944 <_dtoa_r+0x64c>)
 800c72a:	2200      	movs	r2, #0
 800c72c:	f7f3 fdc6 	bl	80002bc <__adddf3>
 800c730:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c738:	9303      	str	r3, [sp, #12]
 800c73a:	2e00      	cmp	r6, #0
 800c73c:	d158      	bne.n	800c7f0 <_dtoa_r+0x4f8>
 800c73e:	4b82      	ldr	r3, [pc, #520]	; (800c948 <_dtoa_r+0x650>)
 800c740:	2200      	movs	r2, #0
 800c742:	4640      	mov	r0, r8
 800c744:	4649      	mov	r1, r9
 800c746:	f7f3 fdb7 	bl	80002b8 <__aeabi_dsub>
 800c74a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c74e:	4680      	mov	r8, r0
 800c750:	4689      	mov	r9, r1
 800c752:	f7f4 f9f9 	bl	8000b48 <__aeabi_dcmpgt>
 800c756:	2800      	cmp	r0, #0
 800c758:	f040 8296 	bne.w	800cc88 <_dtoa_r+0x990>
 800c75c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c760:	4640      	mov	r0, r8
 800c762:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c766:	4649      	mov	r1, r9
 800c768:	f7f4 f9d0 	bl	8000b0c <__aeabi_dcmplt>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	f040 8289 	bne.w	800cc84 <_dtoa_r+0x98c>
 800c772:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c778:	2b00      	cmp	r3, #0
 800c77a:	f2c0 814e 	blt.w	800ca1a <_dtoa_r+0x722>
 800c77e:	f1bb 0f0e 	cmp.w	fp, #14
 800c782:	f300 814a 	bgt.w	800ca1a <_dtoa_r+0x722>
 800c786:	4b6b      	ldr	r3, [pc, #428]	; (800c934 <_dtoa_r+0x63c>)
 800c788:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c78c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c790:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c792:	2b00      	cmp	r3, #0
 800c794:	f280 80dc 	bge.w	800c950 <_dtoa_r+0x658>
 800c798:	9b04      	ldr	r3, [sp, #16]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f300 80d8 	bgt.w	800c950 <_dtoa_r+0x658>
 800c7a0:	f040 826f 	bne.w	800cc82 <_dtoa_r+0x98a>
 800c7a4:	4b68      	ldr	r3, [pc, #416]	; (800c948 <_dtoa_r+0x650>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	4649      	mov	r1, r9
 800c7ac:	f7f3 ff3c 	bl	8000628 <__aeabi_dmul>
 800c7b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7b4:	f7f4 f9be 	bl	8000b34 <__aeabi_dcmpge>
 800c7b8:	9e04      	ldr	r6, [sp, #16]
 800c7ba:	4637      	mov	r7, r6
 800c7bc:	2800      	cmp	r0, #0
 800c7be:	f040 8245 	bne.w	800cc4c <_dtoa_r+0x954>
 800c7c2:	9d00      	ldr	r5, [sp, #0]
 800c7c4:	2331      	movs	r3, #49	; 0x31
 800c7c6:	f805 3b01 	strb.w	r3, [r5], #1
 800c7ca:	f10b 0b01 	add.w	fp, fp, #1
 800c7ce:	e241      	b.n	800cc54 <_dtoa_r+0x95c>
 800c7d0:	07f2      	lsls	r2, r6, #31
 800c7d2:	d505      	bpl.n	800c7e0 <_dtoa_r+0x4e8>
 800c7d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d8:	f7f3 ff26 	bl	8000628 <__aeabi_dmul>
 800c7dc:	3501      	adds	r5, #1
 800c7de:	2301      	movs	r3, #1
 800c7e0:	1076      	asrs	r6, r6, #1
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	e773      	b.n	800c6ce <_dtoa_r+0x3d6>
 800c7e6:	2502      	movs	r5, #2
 800c7e8:	e775      	b.n	800c6d6 <_dtoa_r+0x3de>
 800c7ea:	9e04      	ldr	r6, [sp, #16]
 800c7ec:	465f      	mov	r7, fp
 800c7ee:	e792      	b.n	800c716 <_dtoa_r+0x41e>
 800c7f0:	9900      	ldr	r1, [sp, #0]
 800c7f2:	4b50      	ldr	r3, [pc, #320]	; (800c934 <_dtoa_r+0x63c>)
 800c7f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7f8:	4431      	add	r1, r6
 800c7fa:	9102      	str	r1, [sp, #8]
 800c7fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7fe:	eeb0 9a47 	vmov.f32	s18, s14
 800c802:	eef0 9a67 	vmov.f32	s19, s15
 800c806:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c80a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c80e:	2900      	cmp	r1, #0
 800c810:	d044      	beq.n	800c89c <_dtoa_r+0x5a4>
 800c812:	494e      	ldr	r1, [pc, #312]	; (800c94c <_dtoa_r+0x654>)
 800c814:	2000      	movs	r0, #0
 800c816:	f7f4 f831 	bl	800087c <__aeabi_ddiv>
 800c81a:	ec53 2b19 	vmov	r2, r3, d9
 800c81e:	f7f3 fd4b 	bl	80002b8 <__aeabi_dsub>
 800c822:	9d00      	ldr	r5, [sp, #0]
 800c824:	ec41 0b19 	vmov	d9, r0, r1
 800c828:	4649      	mov	r1, r9
 800c82a:	4640      	mov	r0, r8
 800c82c:	f7f4 f9ac 	bl	8000b88 <__aeabi_d2iz>
 800c830:	4606      	mov	r6, r0
 800c832:	f7f3 fe8f 	bl	8000554 <__aeabi_i2d>
 800c836:	4602      	mov	r2, r0
 800c838:	460b      	mov	r3, r1
 800c83a:	4640      	mov	r0, r8
 800c83c:	4649      	mov	r1, r9
 800c83e:	f7f3 fd3b 	bl	80002b8 <__aeabi_dsub>
 800c842:	3630      	adds	r6, #48	; 0x30
 800c844:	f805 6b01 	strb.w	r6, [r5], #1
 800c848:	ec53 2b19 	vmov	r2, r3, d9
 800c84c:	4680      	mov	r8, r0
 800c84e:	4689      	mov	r9, r1
 800c850:	f7f4 f95c 	bl	8000b0c <__aeabi_dcmplt>
 800c854:	2800      	cmp	r0, #0
 800c856:	d164      	bne.n	800c922 <_dtoa_r+0x62a>
 800c858:	4642      	mov	r2, r8
 800c85a:	464b      	mov	r3, r9
 800c85c:	4937      	ldr	r1, [pc, #220]	; (800c93c <_dtoa_r+0x644>)
 800c85e:	2000      	movs	r0, #0
 800c860:	f7f3 fd2a 	bl	80002b8 <__aeabi_dsub>
 800c864:	ec53 2b19 	vmov	r2, r3, d9
 800c868:	f7f4 f950 	bl	8000b0c <__aeabi_dcmplt>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	f040 80b6 	bne.w	800c9de <_dtoa_r+0x6e6>
 800c872:	9b02      	ldr	r3, [sp, #8]
 800c874:	429d      	cmp	r5, r3
 800c876:	f43f af7c 	beq.w	800c772 <_dtoa_r+0x47a>
 800c87a:	4b31      	ldr	r3, [pc, #196]	; (800c940 <_dtoa_r+0x648>)
 800c87c:	ec51 0b19 	vmov	r0, r1, d9
 800c880:	2200      	movs	r2, #0
 800c882:	f7f3 fed1 	bl	8000628 <__aeabi_dmul>
 800c886:	4b2e      	ldr	r3, [pc, #184]	; (800c940 <_dtoa_r+0x648>)
 800c888:	ec41 0b19 	vmov	d9, r0, r1
 800c88c:	2200      	movs	r2, #0
 800c88e:	4640      	mov	r0, r8
 800c890:	4649      	mov	r1, r9
 800c892:	f7f3 fec9 	bl	8000628 <__aeabi_dmul>
 800c896:	4680      	mov	r8, r0
 800c898:	4689      	mov	r9, r1
 800c89a:	e7c5      	b.n	800c828 <_dtoa_r+0x530>
 800c89c:	ec51 0b17 	vmov	r0, r1, d7
 800c8a0:	f7f3 fec2 	bl	8000628 <__aeabi_dmul>
 800c8a4:	9b02      	ldr	r3, [sp, #8]
 800c8a6:	9d00      	ldr	r5, [sp, #0]
 800c8a8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8aa:	ec41 0b19 	vmov	d9, r0, r1
 800c8ae:	4649      	mov	r1, r9
 800c8b0:	4640      	mov	r0, r8
 800c8b2:	f7f4 f969 	bl	8000b88 <__aeabi_d2iz>
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	f7f3 fe4c 	bl	8000554 <__aeabi_i2d>
 800c8bc:	3630      	adds	r6, #48	; 0x30
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	f7f3 fcf7 	bl	80002b8 <__aeabi_dsub>
 800c8ca:	f805 6b01 	strb.w	r6, [r5], #1
 800c8ce:	9b02      	ldr	r3, [sp, #8]
 800c8d0:	429d      	cmp	r5, r3
 800c8d2:	4680      	mov	r8, r0
 800c8d4:	4689      	mov	r9, r1
 800c8d6:	f04f 0200 	mov.w	r2, #0
 800c8da:	d124      	bne.n	800c926 <_dtoa_r+0x62e>
 800c8dc:	4b1b      	ldr	r3, [pc, #108]	; (800c94c <_dtoa_r+0x654>)
 800c8de:	ec51 0b19 	vmov	r0, r1, d9
 800c8e2:	f7f3 fceb 	bl	80002bc <__adddf3>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	4640      	mov	r0, r8
 800c8ec:	4649      	mov	r1, r9
 800c8ee:	f7f4 f92b 	bl	8000b48 <__aeabi_dcmpgt>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d173      	bne.n	800c9de <_dtoa_r+0x6e6>
 800c8f6:	ec53 2b19 	vmov	r2, r3, d9
 800c8fa:	4914      	ldr	r1, [pc, #80]	; (800c94c <_dtoa_r+0x654>)
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	f7f3 fcdb 	bl	80002b8 <__aeabi_dsub>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	4640      	mov	r0, r8
 800c908:	4649      	mov	r1, r9
 800c90a:	f7f4 f8ff 	bl	8000b0c <__aeabi_dcmplt>
 800c90e:	2800      	cmp	r0, #0
 800c910:	f43f af2f 	beq.w	800c772 <_dtoa_r+0x47a>
 800c914:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c916:	1e6b      	subs	r3, r5, #1
 800c918:	930f      	str	r3, [sp, #60]	; 0x3c
 800c91a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c91e:	2b30      	cmp	r3, #48	; 0x30
 800c920:	d0f8      	beq.n	800c914 <_dtoa_r+0x61c>
 800c922:	46bb      	mov	fp, r7
 800c924:	e04a      	b.n	800c9bc <_dtoa_r+0x6c4>
 800c926:	4b06      	ldr	r3, [pc, #24]	; (800c940 <_dtoa_r+0x648>)
 800c928:	f7f3 fe7e 	bl	8000628 <__aeabi_dmul>
 800c92c:	4680      	mov	r8, r0
 800c92e:	4689      	mov	r9, r1
 800c930:	e7bd      	b.n	800c8ae <_dtoa_r+0x5b6>
 800c932:	bf00      	nop
 800c934:	0800f2f0 	.word	0x0800f2f0
 800c938:	0800f2c8 	.word	0x0800f2c8
 800c93c:	3ff00000 	.word	0x3ff00000
 800c940:	40240000 	.word	0x40240000
 800c944:	401c0000 	.word	0x401c0000
 800c948:	40140000 	.word	0x40140000
 800c94c:	3fe00000 	.word	0x3fe00000
 800c950:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c954:	9d00      	ldr	r5, [sp, #0]
 800c956:	4642      	mov	r2, r8
 800c958:	464b      	mov	r3, r9
 800c95a:	4630      	mov	r0, r6
 800c95c:	4639      	mov	r1, r7
 800c95e:	f7f3 ff8d 	bl	800087c <__aeabi_ddiv>
 800c962:	f7f4 f911 	bl	8000b88 <__aeabi_d2iz>
 800c966:	9001      	str	r0, [sp, #4]
 800c968:	f7f3 fdf4 	bl	8000554 <__aeabi_i2d>
 800c96c:	4642      	mov	r2, r8
 800c96e:	464b      	mov	r3, r9
 800c970:	f7f3 fe5a 	bl	8000628 <__aeabi_dmul>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	4630      	mov	r0, r6
 800c97a:	4639      	mov	r1, r7
 800c97c:	f7f3 fc9c 	bl	80002b8 <__aeabi_dsub>
 800c980:	9e01      	ldr	r6, [sp, #4]
 800c982:	9f04      	ldr	r7, [sp, #16]
 800c984:	3630      	adds	r6, #48	; 0x30
 800c986:	f805 6b01 	strb.w	r6, [r5], #1
 800c98a:	9e00      	ldr	r6, [sp, #0]
 800c98c:	1bae      	subs	r6, r5, r6
 800c98e:	42b7      	cmp	r7, r6
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	d134      	bne.n	800ca00 <_dtoa_r+0x708>
 800c996:	f7f3 fc91 	bl	80002bc <__adddf3>
 800c99a:	4642      	mov	r2, r8
 800c99c:	464b      	mov	r3, r9
 800c99e:	4606      	mov	r6, r0
 800c9a0:	460f      	mov	r7, r1
 800c9a2:	f7f4 f8d1 	bl	8000b48 <__aeabi_dcmpgt>
 800c9a6:	b9c8      	cbnz	r0, 800c9dc <_dtoa_r+0x6e4>
 800c9a8:	4642      	mov	r2, r8
 800c9aa:	464b      	mov	r3, r9
 800c9ac:	4630      	mov	r0, r6
 800c9ae:	4639      	mov	r1, r7
 800c9b0:	f7f4 f8a2 	bl	8000af8 <__aeabi_dcmpeq>
 800c9b4:	b110      	cbz	r0, 800c9bc <_dtoa_r+0x6c4>
 800c9b6:	9b01      	ldr	r3, [sp, #4]
 800c9b8:	07db      	lsls	r3, r3, #31
 800c9ba:	d40f      	bmi.n	800c9dc <_dtoa_r+0x6e4>
 800c9bc:	4651      	mov	r1, sl
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f001 f93c 	bl	800dc3c <_Bfree>
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9c8:	702b      	strb	r3, [r5, #0]
 800c9ca:	f10b 0301 	add.w	r3, fp, #1
 800c9ce:	6013      	str	r3, [r2, #0]
 800c9d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f43f ace2 	beq.w	800c39c <_dtoa_r+0xa4>
 800c9d8:	601d      	str	r5, [r3, #0]
 800c9da:	e4df      	b.n	800c39c <_dtoa_r+0xa4>
 800c9dc:	465f      	mov	r7, fp
 800c9de:	462b      	mov	r3, r5
 800c9e0:	461d      	mov	r5, r3
 800c9e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9e6:	2a39      	cmp	r2, #57	; 0x39
 800c9e8:	d106      	bne.n	800c9f8 <_dtoa_r+0x700>
 800c9ea:	9a00      	ldr	r2, [sp, #0]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d1f7      	bne.n	800c9e0 <_dtoa_r+0x6e8>
 800c9f0:	9900      	ldr	r1, [sp, #0]
 800c9f2:	2230      	movs	r2, #48	; 0x30
 800c9f4:	3701      	adds	r7, #1
 800c9f6:	700a      	strb	r2, [r1, #0]
 800c9f8:	781a      	ldrb	r2, [r3, #0]
 800c9fa:	3201      	adds	r2, #1
 800c9fc:	701a      	strb	r2, [r3, #0]
 800c9fe:	e790      	b.n	800c922 <_dtoa_r+0x62a>
 800ca00:	4ba3      	ldr	r3, [pc, #652]	; (800cc90 <_dtoa_r+0x998>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	f7f3 fe10 	bl	8000628 <__aeabi_dmul>
 800ca08:	2200      	movs	r2, #0
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	4606      	mov	r6, r0
 800ca0e:	460f      	mov	r7, r1
 800ca10:	f7f4 f872 	bl	8000af8 <__aeabi_dcmpeq>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d09e      	beq.n	800c956 <_dtoa_r+0x65e>
 800ca18:	e7d0      	b.n	800c9bc <_dtoa_r+0x6c4>
 800ca1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca1c:	2a00      	cmp	r2, #0
 800ca1e:	f000 80ca 	beq.w	800cbb6 <_dtoa_r+0x8be>
 800ca22:	9a07      	ldr	r2, [sp, #28]
 800ca24:	2a01      	cmp	r2, #1
 800ca26:	f300 80ad 	bgt.w	800cb84 <_dtoa_r+0x88c>
 800ca2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca2c:	2a00      	cmp	r2, #0
 800ca2e:	f000 80a5 	beq.w	800cb7c <_dtoa_r+0x884>
 800ca32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca36:	9e08      	ldr	r6, [sp, #32]
 800ca38:	9d05      	ldr	r5, [sp, #20]
 800ca3a:	9a05      	ldr	r2, [sp, #20]
 800ca3c:	441a      	add	r2, r3
 800ca3e:	9205      	str	r2, [sp, #20]
 800ca40:	9a06      	ldr	r2, [sp, #24]
 800ca42:	2101      	movs	r1, #1
 800ca44:	441a      	add	r2, r3
 800ca46:	4620      	mov	r0, r4
 800ca48:	9206      	str	r2, [sp, #24]
 800ca4a:	f001 f9f7 	bl	800de3c <__i2b>
 800ca4e:	4607      	mov	r7, r0
 800ca50:	b165      	cbz	r5, 800ca6c <_dtoa_r+0x774>
 800ca52:	9b06      	ldr	r3, [sp, #24]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	dd09      	ble.n	800ca6c <_dtoa_r+0x774>
 800ca58:	42ab      	cmp	r3, r5
 800ca5a:	9a05      	ldr	r2, [sp, #20]
 800ca5c:	bfa8      	it	ge
 800ca5e:	462b      	movge	r3, r5
 800ca60:	1ad2      	subs	r2, r2, r3
 800ca62:	9205      	str	r2, [sp, #20]
 800ca64:	9a06      	ldr	r2, [sp, #24]
 800ca66:	1aed      	subs	r5, r5, r3
 800ca68:	1ad3      	subs	r3, r2, r3
 800ca6a:	9306      	str	r3, [sp, #24]
 800ca6c:	9b08      	ldr	r3, [sp, #32]
 800ca6e:	b1f3      	cbz	r3, 800caae <_dtoa_r+0x7b6>
 800ca70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 80a3 	beq.w	800cbbe <_dtoa_r+0x8c6>
 800ca78:	2e00      	cmp	r6, #0
 800ca7a:	dd10      	ble.n	800ca9e <_dtoa_r+0x7a6>
 800ca7c:	4639      	mov	r1, r7
 800ca7e:	4632      	mov	r2, r6
 800ca80:	4620      	mov	r0, r4
 800ca82:	f001 fa9b 	bl	800dfbc <__pow5mult>
 800ca86:	4652      	mov	r2, sl
 800ca88:	4601      	mov	r1, r0
 800ca8a:	4607      	mov	r7, r0
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	f001 f9eb 	bl	800de68 <__multiply>
 800ca92:	4651      	mov	r1, sl
 800ca94:	4680      	mov	r8, r0
 800ca96:	4620      	mov	r0, r4
 800ca98:	f001 f8d0 	bl	800dc3c <_Bfree>
 800ca9c:	46c2      	mov	sl, r8
 800ca9e:	9b08      	ldr	r3, [sp, #32]
 800caa0:	1b9a      	subs	r2, r3, r6
 800caa2:	d004      	beq.n	800caae <_dtoa_r+0x7b6>
 800caa4:	4651      	mov	r1, sl
 800caa6:	4620      	mov	r0, r4
 800caa8:	f001 fa88 	bl	800dfbc <__pow5mult>
 800caac:	4682      	mov	sl, r0
 800caae:	2101      	movs	r1, #1
 800cab0:	4620      	mov	r0, r4
 800cab2:	f001 f9c3 	bl	800de3c <__i2b>
 800cab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cab8:	2b00      	cmp	r3, #0
 800caba:	4606      	mov	r6, r0
 800cabc:	f340 8081 	ble.w	800cbc2 <_dtoa_r+0x8ca>
 800cac0:	461a      	mov	r2, r3
 800cac2:	4601      	mov	r1, r0
 800cac4:	4620      	mov	r0, r4
 800cac6:	f001 fa79 	bl	800dfbc <__pow5mult>
 800caca:	9b07      	ldr	r3, [sp, #28]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	4606      	mov	r6, r0
 800cad0:	dd7a      	ble.n	800cbc8 <_dtoa_r+0x8d0>
 800cad2:	f04f 0800 	mov.w	r8, #0
 800cad6:	6933      	ldr	r3, [r6, #16]
 800cad8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cadc:	6918      	ldr	r0, [r3, #16]
 800cade:	f001 f95f 	bl	800dda0 <__hi0bits>
 800cae2:	f1c0 0020 	rsb	r0, r0, #32
 800cae6:	9b06      	ldr	r3, [sp, #24]
 800cae8:	4418      	add	r0, r3
 800caea:	f010 001f 	ands.w	r0, r0, #31
 800caee:	f000 8094 	beq.w	800cc1a <_dtoa_r+0x922>
 800caf2:	f1c0 0320 	rsb	r3, r0, #32
 800caf6:	2b04      	cmp	r3, #4
 800caf8:	f340 8085 	ble.w	800cc06 <_dtoa_r+0x90e>
 800cafc:	9b05      	ldr	r3, [sp, #20]
 800cafe:	f1c0 001c 	rsb	r0, r0, #28
 800cb02:	4403      	add	r3, r0
 800cb04:	9305      	str	r3, [sp, #20]
 800cb06:	9b06      	ldr	r3, [sp, #24]
 800cb08:	4403      	add	r3, r0
 800cb0a:	4405      	add	r5, r0
 800cb0c:	9306      	str	r3, [sp, #24]
 800cb0e:	9b05      	ldr	r3, [sp, #20]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	dd05      	ble.n	800cb20 <_dtoa_r+0x828>
 800cb14:	4651      	mov	r1, sl
 800cb16:	461a      	mov	r2, r3
 800cb18:	4620      	mov	r0, r4
 800cb1a:	f001 faa9 	bl	800e070 <__lshift>
 800cb1e:	4682      	mov	sl, r0
 800cb20:	9b06      	ldr	r3, [sp, #24]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	dd05      	ble.n	800cb32 <_dtoa_r+0x83a>
 800cb26:	4631      	mov	r1, r6
 800cb28:	461a      	mov	r2, r3
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f001 faa0 	bl	800e070 <__lshift>
 800cb30:	4606      	mov	r6, r0
 800cb32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d072      	beq.n	800cc1e <_dtoa_r+0x926>
 800cb38:	4631      	mov	r1, r6
 800cb3a:	4650      	mov	r0, sl
 800cb3c:	f001 fb04 	bl	800e148 <__mcmp>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	da6c      	bge.n	800cc1e <_dtoa_r+0x926>
 800cb44:	2300      	movs	r3, #0
 800cb46:	4651      	mov	r1, sl
 800cb48:	220a      	movs	r2, #10
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f001 f898 	bl	800dc80 <__multadd>
 800cb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb52:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cb56:	4682      	mov	sl, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 81b0 	beq.w	800cebe <_dtoa_r+0xbc6>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	4639      	mov	r1, r7
 800cb62:	220a      	movs	r2, #10
 800cb64:	4620      	mov	r0, r4
 800cb66:	f001 f88b 	bl	800dc80 <__multadd>
 800cb6a:	9b01      	ldr	r3, [sp, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	4607      	mov	r7, r0
 800cb70:	f300 8096 	bgt.w	800cca0 <_dtoa_r+0x9a8>
 800cb74:	9b07      	ldr	r3, [sp, #28]
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	dc59      	bgt.n	800cc2e <_dtoa_r+0x936>
 800cb7a:	e091      	b.n	800cca0 <_dtoa_r+0x9a8>
 800cb7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb82:	e758      	b.n	800ca36 <_dtoa_r+0x73e>
 800cb84:	9b04      	ldr	r3, [sp, #16]
 800cb86:	1e5e      	subs	r6, r3, #1
 800cb88:	9b08      	ldr	r3, [sp, #32]
 800cb8a:	42b3      	cmp	r3, r6
 800cb8c:	bfbf      	itttt	lt
 800cb8e:	9b08      	ldrlt	r3, [sp, #32]
 800cb90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cb92:	9608      	strlt	r6, [sp, #32]
 800cb94:	1af3      	sublt	r3, r6, r3
 800cb96:	bfb4      	ite	lt
 800cb98:	18d2      	addlt	r2, r2, r3
 800cb9a:	1b9e      	subge	r6, r3, r6
 800cb9c:	9b04      	ldr	r3, [sp, #16]
 800cb9e:	bfbc      	itt	lt
 800cba0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cba2:	2600      	movlt	r6, #0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bfb7      	itett	lt
 800cba8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cbac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cbb0:	1a9d      	sublt	r5, r3, r2
 800cbb2:	2300      	movlt	r3, #0
 800cbb4:	e741      	b.n	800ca3a <_dtoa_r+0x742>
 800cbb6:	9e08      	ldr	r6, [sp, #32]
 800cbb8:	9d05      	ldr	r5, [sp, #20]
 800cbba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cbbc:	e748      	b.n	800ca50 <_dtoa_r+0x758>
 800cbbe:	9a08      	ldr	r2, [sp, #32]
 800cbc0:	e770      	b.n	800caa4 <_dtoa_r+0x7ac>
 800cbc2:	9b07      	ldr	r3, [sp, #28]
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	dc19      	bgt.n	800cbfc <_dtoa_r+0x904>
 800cbc8:	9b02      	ldr	r3, [sp, #8]
 800cbca:	b9bb      	cbnz	r3, 800cbfc <_dtoa_r+0x904>
 800cbcc:	9b03      	ldr	r3, [sp, #12]
 800cbce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbd2:	b99b      	cbnz	r3, 800cbfc <_dtoa_r+0x904>
 800cbd4:	9b03      	ldr	r3, [sp, #12]
 800cbd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbda:	0d1b      	lsrs	r3, r3, #20
 800cbdc:	051b      	lsls	r3, r3, #20
 800cbde:	b183      	cbz	r3, 800cc02 <_dtoa_r+0x90a>
 800cbe0:	9b05      	ldr	r3, [sp, #20]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	9305      	str	r3, [sp, #20]
 800cbe6:	9b06      	ldr	r3, [sp, #24]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	9306      	str	r3, [sp, #24]
 800cbec:	f04f 0801 	mov.w	r8, #1
 800cbf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f47f af6f 	bne.w	800cad6 <_dtoa_r+0x7de>
 800cbf8:	2001      	movs	r0, #1
 800cbfa:	e774      	b.n	800cae6 <_dtoa_r+0x7ee>
 800cbfc:	f04f 0800 	mov.w	r8, #0
 800cc00:	e7f6      	b.n	800cbf0 <_dtoa_r+0x8f8>
 800cc02:	4698      	mov	r8, r3
 800cc04:	e7f4      	b.n	800cbf0 <_dtoa_r+0x8f8>
 800cc06:	d082      	beq.n	800cb0e <_dtoa_r+0x816>
 800cc08:	9a05      	ldr	r2, [sp, #20]
 800cc0a:	331c      	adds	r3, #28
 800cc0c:	441a      	add	r2, r3
 800cc0e:	9205      	str	r2, [sp, #20]
 800cc10:	9a06      	ldr	r2, [sp, #24]
 800cc12:	441a      	add	r2, r3
 800cc14:	441d      	add	r5, r3
 800cc16:	9206      	str	r2, [sp, #24]
 800cc18:	e779      	b.n	800cb0e <_dtoa_r+0x816>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	e7f4      	b.n	800cc08 <_dtoa_r+0x910>
 800cc1e:	9b04      	ldr	r3, [sp, #16]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	dc37      	bgt.n	800cc94 <_dtoa_r+0x99c>
 800cc24:	9b07      	ldr	r3, [sp, #28]
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	dd34      	ble.n	800cc94 <_dtoa_r+0x99c>
 800cc2a:	9b04      	ldr	r3, [sp, #16]
 800cc2c:	9301      	str	r3, [sp, #4]
 800cc2e:	9b01      	ldr	r3, [sp, #4]
 800cc30:	b963      	cbnz	r3, 800cc4c <_dtoa_r+0x954>
 800cc32:	4631      	mov	r1, r6
 800cc34:	2205      	movs	r2, #5
 800cc36:	4620      	mov	r0, r4
 800cc38:	f001 f822 	bl	800dc80 <__multadd>
 800cc3c:	4601      	mov	r1, r0
 800cc3e:	4606      	mov	r6, r0
 800cc40:	4650      	mov	r0, sl
 800cc42:	f001 fa81 	bl	800e148 <__mcmp>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	f73f adbb 	bgt.w	800c7c2 <_dtoa_r+0x4ca>
 800cc4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc4e:	9d00      	ldr	r5, [sp, #0]
 800cc50:	ea6f 0b03 	mvn.w	fp, r3
 800cc54:	f04f 0800 	mov.w	r8, #0
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4620      	mov	r0, r4
 800cc5c:	f000 ffee 	bl	800dc3c <_Bfree>
 800cc60:	2f00      	cmp	r7, #0
 800cc62:	f43f aeab 	beq.w	800c9bc <_dtoa_r+0x6c4>
 800cc66:	f1b8 0f00 	cmp.w	r8, #0
 800cc6a:	d005      	beq.n	800cc78 <_dtoa_r+0x980>
 800cc6c:	45b8      	cmp	r8, r7
 800cc6e:	d003      	beq.n	800cc78 <_dtoa_r+0x980>
 800cc70:	4641      	mov	r1, r8
 800cc72:	4620      	mov	r0, r4
 800cc74:	f000 ffe2 	bl	800dc3c <_Bfree>
 800cc78:	4639      	mov	r1, r7
 800cc7a:	4620      	mov	r0, r4
 800cc7c:	f000 ffde 	bl	800dc3c <_Bfree>
 800cc80:	e69c      	b.n	800c9bc <_dtoa_r+0x6c4>
 800cc82:	2600      	movs	r6, #0
 800cc84:	4637      	mov	r7, r6
 800cc86:	e7e1      	b.n	800cc4c <_dtoa_r+0x954>
 800cc88:	46bb      	mov	fp, r7
 800cc8a:	4637      	mov	r7, r6
 800cc8c:	e599      	b.n	800c7c2 <_dtoa_r+0x4ca>
 800cc8e:	bf00      	nop
 800cc90:	40240000 	.word	0x40240000
 800cc94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	f000 80c8 	beq.w	800ce2c <_dtoa_r+0xb34>
 800cc9c:	9b04      	ldr	r3, [sp, #16]
 800cc9e:	9301      	str	r3, [sp, #4]
 800cca0:	2d00      	cmp	r5, #0
 800cca2:	dd05      	ble.n	800ccb0 <_dtoa_r+0x9b8>
 800cca4:	4639      	mov	r1, r7
 800cca6:	462a      	mov	r2, r5
 800cca8:	4620      	mov	r0, r4
 800ccaa:	f001 f9e1 	bl	800e070 <__lshift>
 800ccae:	4607      	mov	r7, r0
 800ccb0:	f1b8 0f00 	cmp.w	r8, #0
 800ccb4:	d05b      	beq.n	800cd6e <_dtoa_r+0xa76>
 800ccb6:	6879      	ldr	r1, [r7, #4]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f000 ff7f 	bl	800dbbc <_Balloc>
 800ccbe:	4605      	mov	r5, r0
 800ccc0:	b928      	cbnz	r0, 800ccce <_dtoa_r+0x9d6>
 800ccc2:	4b83      	ldr	r3, [pc, #524]	; (800ced0 <_dtoa_r+0xbd8>)
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ccca:	f7ff bb2e 	b.w	800c32a <_dtoa_r+0x32>
 800ccce:	693a      	ldr	r2, [r7, #16]
 800ccd0:	3202      	adds	r2, #2
 800ccd2:	0092      	lsls	r2, r2, #2
 800ccd4:	f107 010c 	add.w	r1, r7, #12
 800ccd8:	300c      	adds	r0, #12
 800ccda:	f7ff fa66 	bl	800c1aa <memcpy>
 800ccde:	2201      	movs	r2, #1
 800cce0:	4629      	mov	r1, r5
 800cce2:	4620      	mov	r0, r4
 800cce4:	f001 f9c4 	bl	800e070 <__lshift>
 800cce8:	9b00      	ldr	r3, [sp, #0]
 800ccea:	3301      	adds	r3, #1
 800ccec:	9304      	str	r3, [sp, #16]
 800ccee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccf2:	4413      	add	r3, r2
 800ccf4:	9308      	str	r3, [sp, #32]
 800ccf6:	9b02      	ldr	r3, [sp, #8]
 800ccf8:	f003 0301 	and.w	r3, r3, #1
 800ccfc:	46b8      	mov	r8, r7
 800ccfe:	9306      	str	r3, [sp, #24]
 800cd00:	4607      	mov	r7, r0
 800cd02:	9b04      	ldr	r3, [sp, #16]
 800cd04:	4631      	mov	r1, r6
 800cd06:	3b01      	subs	r3, #1
 800cd08:	4650      	mov	r0, sl
 800cd0a:	9301      	str	r3, [sp, #4]
 800cd0c:	f7ff fa6a 	bl	800c1e4 <quorem>
 800cd10:	4641      	mov	r1, r8
 800cd12:	9002      	str	r0, [sp, #8]
 800cd14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cd18:	4650      	mov	r0, sl
 800cd1a:	f001 fa15 	bl	800e148 <__mcmp>
 800cd1e:	463a      	mov	r2, r7
 800cd20:	9005      	str	r0, [sp, #20]
 800cd22:	4631      	mov	r1, r6
 800cd24:	4620      	mov	r0, r4
 800cd26:	f001 fa2b 	bl	800e180 <__mdiff>
 800cd2a:	68c2      	ldr	r2, [r0, #12]
 800cd2c:	4605      	mov	r5, r0
 800cd2e:	bb02      	cbnz	r2, 800cd72 <_dtoa_r+0xa7a>
 800cd30:	4601      	mov	r1, r0
 800cd32:	4650      	mov	r0, sl
 800cd34:	f001 fa08 	bl	800e148 <__mcmp>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	4629      	mov	r1, r5
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	9209      	str	r2, [sp, #36]	; 0x24
 800cd40:	f000 ff7c 	bl	800dc3c <_Bfree>
 800cd44:	9b07      	ldr	r3, [sp, #28]
 800cd46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd48:	9d04      	ldr	r5, [sp, #16]
 800cd4a:	ea43 0102 	orr.w	r1, r3, r2
 800cd4e:	9b06      	ldr	r3, [sp, #24]
 800cd50:	4319      	orrs	r1, r3
 800cd52:	d110      	bne.n	800cd76 <_dtoa_r+0xa7e>
 800cd54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd58:	d029      	beq.n	800cdae <_dtoa_r+0xab6>
 800cd5a:	9b05      	ldr	r3, [sp, #20]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	dd02      	ble.n	800cd66 <_dtoa_r+0xa6e>
 800cd60:	9b02      	ldr	r3, [sp, #8]
 800cd62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cd66:	9b01      	ldr	r3, [sp, #4]
 800cd68:	f883 9000 	strb.w	r9, [r3]
 800cd6c:	e774      	b.n	800cc58 <_dtoa_r+0x960>
 800cd6e:	4638      	mov	r0, r7
 800cd70:	e7ba      	b.n	800cce8 <_dtoa_r+0x9f0>
 800cd72:	2201      	movs	r2, #1
 800cd74:	e7e1      	b.n	800cd3a <_dtoa_r+0xa42>
 800cd76:	9b05      	ldr	r3, [sp, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	db04      	blt.n	800cd86 <_dtoa_r+0xa8e>
 800cd7c:	9907      	ldr	r1, [sp, #28]
 800cd7e:	430b      	orrs	r3, r1
 800cd80:	9906      	ldr	r1, [sp, #24]
 800cd82:	430b      	orrs	r3, r1
 800cd84:	d120      	bne.n	800cdc8 <_dtoa_r+0xad0>
 800cd86:	2a00      	cmp	r2, #0
 800cd88:	dded      	ble.n	800cd66 <_dtoa_r+0xa6e>
 800cd8a:	4651      	mov	r1, sl
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f001 f96e 	bl	800e070 <__lshift>
 800cd94:	4631      	mov	r1, r6
 800cd96:	4682      	mov	sl, r0
 800cd98:	f001 f9d6 	bl	800e148 <__mcmp>
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	dc03      	bgt.n	800cda8 <_dtoa_r+0xab0>
 800cda0:	d1e1      	bne.n	800cd66 <_dtoa_r+0xa6e>
 800cda2:	f019 0f01 	tst.w	r9, #1
 800cda6:	d0de      	beq.n	800cd66 <_dtoa_r+0xa6e>
 800cda8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cdac:	d1d8      	bne.n	800cd60 <_dtoa_r+0xa68>
 800cdae:	9a01      	ldr	r2, [sp, #4]
 800cdb0:	2339      	movs	r3, #57	; 0x39
 800cdb2:	7013      	strb	r3, [r2, #0]
 800cdb4:	462b      	mov	r3, r5
 800cdb6:	461d      	mov	r5, r3
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cdbe:	2a39      	cmp	r2, #57	; 0x39
 800cdc0:	d06c      	beq.n	800ce9c <_dtoa_r+0xba4>
 800cdc2:	3201      	adds	r2, #1
 800cdc4:	701a      	strb	r2, [r3, #0]
 800cdc6:	e747      	b.n	800cc58 <_dtoa_r+0x960>
 800cdc8:	2a00      	cmp	r2, #0
 800cdca:	dd07      	ble.n	800cddc <_dtoa_r+0xae4>
 800cdcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cdd0:	d0ed      	beq.n	800cdae <_dtoa_r+0xab6>
 800cdd2:	9a01      	ldr	r2, [sp, #4]
 800cdd4:	f109 0301 	add.w	r3, r9, #1
 800cdd8:	7013      	strb	r3, [r2, #0]
 800cdda:	e73d      	b.n	800cc58 <_dtoa_r+0x960>
 800cddc:	9b04      	ldr	r3, [sp, #16]
 800cdde:	9a08      	ldr	r2, [sp, #32]
 800cde0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d043      	beq.n	800ce70 <_dtoa_r+0xb78>
 800cde8:	4651      	mov	r1, sl
 800cdea:	2300      	movs	r3, #0
 800cdec:	220a      	movs	r2, #10
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f000 ff46 	bl	800dc80 <__multadd>
 800cdf4:	45b8      	cmp	r8, r7
 800cdf6:	4682      	mov	sl, r0
 800cdf8:	f04f 0300 	mov.w	r3, #0
 800cdfc:	f04f 020a 	mov.w	r2, #10
 800ce00:	4641      	mov	r1, r8
 800ce02:	4620      	mov	r0, r4
 800ce04:	d107      	bne.n	800ce16 <_dtoa_r+0xb1e>
 800ce06:	f000 ff3b 	bl	800dc80 <__multadd>
 800ce0a:	4680      	mov	r8, r0
 800ce0c:	4607      	mov	r7, r0
 800ce0e:	9b04      	ldr	r3, [sp, #16]
 800ce10:	3301      	adds	r3, #1
 800ce12:	9304      	str	r3, [sp, #16]
 800ce14:	e775      	b.n	800cd02 <_dtoa_r+0xa0a>
 800ce16:	f000 ff33 	bl	800dc80 <__multadd>
 800ce1a:	4639      	mov	r1, r7
 800ce1c:	4680      	mov	r8, r0
 800ce1e:	2300      	movs	r3, #0
 800ce20:	220a      	movs	r2, #10
 800ce22:	4620      	mov	r0, r4
 800ce24:	f000 ff2c 	bl	800dc80 <__multadd>
 800ce28:	4607      	mov	r7, r0
 800ce2a:	e7f0      	b.n	800ce0e <_dtoa_r+0xb16>
 800ce2c:	9b04      	ldr	r3, [sp, #16]
 800ce2e:	9301      	str	r3, [sp, #4]
 800ce30:	9d00      	ldr	r5, [sp, #0]
 800ce32:	4631      	mov	r1, r6
 800ce34:	4650      	mov	r0, sl
 800ce36:	f7ff f9d5 	bl	800c1e4 <quorem>
 800ce3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce3e:	9b00      	ldr	r3, [sp, #0]
 800ce40:	f805 9b01 	strb.w	r9, [r5], #1
 800ce44:	1aea      	subs	r2, r5, r3
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	dd07      	ble.n	800ce5c <_dtoa_r+0xb64>
 800ce4c:	4651      	mov	r1, sl
 800ce4e:	2300      	movs	r3, #0
 800ce50:	220a      	movs	r2, #10
 800ce52:	4620      	mov	r0, r4
 800ce54:	f000 ff14 	bl	800dc80 <__multadd>
 800ce58:	4682      	mov	sl, r0
 800ce5a:	e7ea      	b.n	800ce32 <_dtoa_r+0xb3a>
 800ce5c:	9b01      	ldr	r3, [sp, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	bfc8      	it	gt
 800ce62:	461d      	movgt	r5, r3
 800ce64:	9b00      	ldr	r3, [sp, #0]
 800ce66:	bfd8      	it	le
 800ce68:	2501      	movle	r5, #1
 800ce6a:	441d      	add	r5, r3
 800ce6c:	f04f 0800 	mov.w	r8, #0
 800ce70:	4651      	mov	r1, sl
 800ce72:	2201      	movs	r2, #1
 800ce74:	4620      	mov	r0, r4
 800ce76:	f001 f8fb 	bl	800e070 <__lshift>
 800ce7a:	4631      	mov	r1, r6
 800ce7c:	4682      	mov	sl, r0
 800ce7e:	f001 f963 	bl	800e148 <__mcmp>
 800ce82:	2800      	cmp	r0, #0
 800ce84:	dc96      	bgt.n	800cdb4 <_dtoa_r+0xabc>
 800ce86:	d102      	bne.n	800ce8e <_dtoa_r+0xb96>
 800ce88:	f019 0f01 	tst.w	r9, #1
 800ce8c:	d192      	bne.n	800cdb4 <_dtoa_r+0xabc>
 800ce8e:	462b      	mov	r3, r5
 800ce90:	461d      	mov	r5, r3
 800ce92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce96:	2a30      	cmp	r2, #48	; 0x30
 800ce98:	d0fa      	beq.n	800ce90 <_dtoa_r+0xb98>
 800ce9a:	e6dd      	b.n	800cc58 <_dtoa_r+0x960>
 800ce9c:	9a00      	ldr	r2, [sp, #0]
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d189      	bne.n	800cdb6 <_dtoa_r+0xabe>
 800cea2:	f10b 0b01 	add.w	fp, fp, #1
 800cea6:	2331      	movs	r3, #49	; 0x31
 800cea8:	e796      	b.n	800cdd8 <_dtoa_r+0xae0>
 800ceaa:	4b0a      	ldr	r3, [pc, #40]	; (800ced4 <_dtoa_r+0xbdc>)
 800ceac:	f7ff ba99 	b.w	800c3e2 <_dtoa_r+0xea>
 800ceb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f47f aa6d 	bne.w	800c392 <_dtoa_r+0x9a>
 800ceb8:	4b07      	ldr	r3, [pc, #28]	; (800ced8 <_dtoa_r+0xbe0>)
 800ceba:	f7ff ba92 	b.w	800c3e2 <_dtoa_r+0xea>
 800cebe:	9b01      	ldr	r3, [sp, #4]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	dcb5      	bgt.n	800ce30 <_dtoa_r+0xb38>
 800cec4:	9b07      	ldr	r3, [sp, #28]
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	f73f aeb1 	bgt.w	800cc2e <_dtoa_r+0x936>
 800cecc:	e7b0      	b.n	800ce30 <_dtoa_r+0xb38>
 800cece:	bf00      	nop
 800ced0:	0800f1ed 	.word	0x0800f1ed
 800ced4:	0800efec 	.word	0x0800efec
 800ced8:	0800f171 	.word	0x0800f171

0800cedc <_free_r>:
 800cedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cede:	2900      	cmp	r1, #0
 800cee0:	d044      	beq.n	800cf6c <_free_r+0x90>
 800cee2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cee6:	9001      	str	r0, [sp, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f1a1 0404 	sub.w	r4, r1, #4
 800ceee:	bfb8      	it	lt
 800cef0:	18e4      	addlt	r4, r4, r3
 800cef2:	f000 fe57 	bl	800dba4 <__malloc_lock>
 800cef6:	4a1e      	ldr	r2, [pc, #120]	; (800cf70 <_free_r+0x94>)
 800cef8:	9801      	ldr	r0, [sp, #4]
 800cefa:	6813      	ldr	r3, [r2, #0]
 800cefc:	b933      	cbnz	r3, 800cf0c <_free_r+0x30>
 800cefe:	6063      	str	r3, [r4, #4]
 800cf00:	6014      	str	r4, [r2, #0]
 800cf02:	b003      	add	sp, #12
 800cf04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf08:	f000 be52 	b.w	800dbb0 <__malloc_unlock>
 800cf0c:	42a3      	cmp	r3, r4
 800cf0e:	d908      	bls.n	800cf22 <_free_r+0x46>
 800cf10:	6825      	ldr	r5, [r4, #0]
 800cf12:	1961      	adds	r1, r4, r5
 800cf14:	428b      	cmp	r3, r1
 800cf16:	bf01      	itttt	eq
 800cf18:	6819      	ldreq	r1, [r3, #0]
 800cf1a:	685b      	ldreq	r3, [r3, #4]
 800cf1c:	1949      	addeq	r1, r1, r5
 800cf1e:	6021      	streq	r1, [r4, #0]
 800cf20:	e7ed      	b.n	800cefe <_free_r+0x22>
 800cf22:	461a      	mov	r2, r3
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	b10b      	cbz	r3, 800cf2c <_free_r+0x50>
 800cf28:	42a3      	cmp	r3, r4
 800cf2a:	d9fa      	bls.n	800cf22 <_free_r+0x46>
 800cf2c:	6811      	ldr	r1, [r2, #0]
 800cf2e:	1855      	adds	r5, r2, r1
 800cf30:	42a5      	cmp	r5, r4
 800cf32:	d10b      	bne.n	800cf4c <_free_r+0x70>
 800cf34:	6824      	ldr	r4, [r4, #0]
 800cf36:	4421      	add	r1, r4
 800cf38:	1854      	adds	r4, r2, r1
 800cf3a:	42a3      	cmp	r3, r4
 800cf3c:	6011      	str	r1, [r2, #0]
 800cf3e:	d1e0      	bne.n	800cf02 <_free_r+0x26>
 800cf40:	681c      	ldr	r4, [r3, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	6053      	str	r3, [r2, #4]
 800cf46:	440c      	add	r4, r1
 800cf48:	6014      	str	r4, [r2, #0]
 800cf4a:	e7da      	b.n	800cf02 <_free_r+0x26>
 800cf4c:	d902      	bls.n	800cf54 <_free_r+0x78>
 800cf4e:	230c      	movs	r3, #12
 800cf50:	6003      	str	r3, [r0, #0]
 800cf52:	e7d6      	b.n	800cf02 <_free_r+0x26>
 800cf54:	6825      	ldr	r5, [r4, #0]
 800cf56:	1961      	adds	r1, r4, r5
 800cf58:	428b      	cmp	r3, r1
 800cf5a:	bf04      	itt	eq
 800cf5c:	6819      	ldreq	r1, [r3, #0]
 800cf5e:	685b      	ldreq	r3, [r3, #4]
 800cf60:	6063      	str	r3, [r4, #4]
 800cf62:	bf04      	itt	eq
 800cf64:	1949      	addeq	r1, r1, r5
 800cf66:	6021      	streq	r1, [r4, #0]
 800cf68:	6054      	str	r4, [r2, #4]
 800cf6a:	e7ca      	b.n	800cf02 <_free_r+0x26>
 800cf6c:	b003      	add	sp, #12
 800cf6e:	bd30      	pop	{r4, r5, pc}
 800cf70:	20001668 	.word	0x20001668

0800cf74 <rshift>:
 800cf74:	6903      	ldr	r3, [r0, #16]
 800cf76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cf7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cf82:	f100 0414 	add.w	r4, r0, #20
 800cf86:	dd45      	ble.n	800d014 <rshift+0xa0>
 800cf88:	f011 011f 	ands.w	r1, r1, #31
 800cf8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cf90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cf94:	d10c      	bne.n	800cfb0 <rshift+0x3c>
 800cf96:	f100 0710 	add.w	r7, r0, #16
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	42b1      	cmp	r1, r6
 800cf9e:	d334      	bcc.n	800d00a <rshift+0x96>
 800cfa0:	1a9b      	subs	r3, r3, r2
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	1eea      	subs	r2, r5, #3
 800cfa6:	4296      	cmp	r6, r2
 800cfa8:	bf38      	it	cc
 800cfaa:	2300      	movcc	r3, #0
 800cfac:	4423      	add	r3, r4
 800cfae:	e015      	b.n	800cfdc <rshift+0x68>
 800cfb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cfb4:	f1c1 0820 	rsb	r8, r1, #32
 800cfb8:	40cf      	lsrs	r7, r1
 800cfba:	f105 0e04 	add.w	lr, r5, #4
 800cfbe:	46a1      	mov	r9, r4
 800cfc0:	4576      	cmp	r6, lr
 800cfc2:	46f4      	mov	ip, lr
 800cfc4:	d815      	bhi.n	800cff2 <rshift+0x7e>
 800cfc6:	1a9a      	subs	r2, r3, r2
 800cfc8:	0092      	lsls	r2, r2, #2
 800cfca:	3a04      	subs	r2, #4
 800cfcc:	3501      	adds	r5, #1
 800cfce:	42ae      	cmp	r6, r5
 800cfd0:	bf38      	it	cc
 800cfd2:	2200      	movcc	r2, #0
 800cfd4:	18a3      	adds	r3, r4, r2
 800cfd6:	50a7      	str	r7, [r4, r2]
 800cfd8:	b107      	cbz	r7, 800cfdc <rshift+0x68>
 800cfda:	3304      	adds	r3, #4
 800cfdc:	1b1a      	subs	r2, r3, r4
 800cfde:	42a3      	cmp	r3, r4
 800cfe0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cfe4:	bf08      	it	eq
 800cfe6:	2300      	moveq	r3, #0
 800cfe8:	6102      	str	r2, [r0, #16]
 800cfea:	bf08      	it	eq
 800cfec:	6143      	streq	r3, [r0, #20]
 800cfee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cff2:	f8dc c000 	ldr.w	ip, [ip]
 800cff6:	fa0c fc08 	lsl.w	ip, ip, r8
 800cffa:	ea4c 0707 	orr.w	r7, ip, r7
 800cffe:	f849 7b04 	str.w	r7, [r9], #4
 800d002:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d006:	40cf      	lsrs	r7, r1
 800d008:	e7da      	b.n	800cfc0 <rshift+0x4c>
 800d00a:	f851 cb04 	ldr.w	ip, [r1], #4
 800d00e:	f847 cf04 	str.w	ip, [r7, #4]!
 800d012:	e7c3      	b.n	800cf9c <rshift+0x28>
 800d014:	4623      	mov	r3, r4
 800d016:	e7e1      	b.n	800cfdc <rshift+0x68>

0800d018 <__hexdig_fun>:
 800d018:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d01c:	2b09      	cmp	r3, #9
 800d01e:	d802      	bhi.n	800d026 <__hexdig_fun+0xe>
 800d020:	3820      	subs	r0, #32
 800d022:	b2c0      	uxtb	r0, r0
 800d024:	4770      	bx	lr
 800d026:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d02a:	2b05      	cmp	r3, #5
 800d02c:	d801      	bhi.n	800d032 <__hexdig_fun+0x1a>
 800d02e:	3847      	subs	r0, #71	; 0x47
 800d030:	e7f7      	b.n	800d022 <__hexdig_fun+0xa>
 800d032:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d036:	2b05      	cmp	r3, #5
 800d038:	d801      	bhi.n	800d03e <__hexdig_fun+0x26>
 800d03a:	3827      	subs	r0, #39	; 0x27
 800d03c:	e7f1      	b.n	800d022 <__hexdig_fun+0xa>
 800d03e:	2000      	movs	r0, #0
 800d040:	4770      	bx	lr
	...

0800d044 <__gethex>:
 800d044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d048:	4617      	mov	r7, r2
 800d04a:	680a      	ldr	r2, [r1, #0]
 800d04c:	b085      	sub	sp, #20
 800d04e:	f102 0b02 	add.w	fp, r2, #2
 800d052:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d056:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d05a:	4681      	mov	r9, r0
 800d05c:	468a      	mov	sl, r1
 800d05e:	9302      	str	r3, [sp, #8]
 800d060:	32fe      	adds	r2, #254	; 0xfe
 800d062:	eb02 030b 	add.w	r3, r2, fp
 800d066:	46d8      	mov	r8, fp
 800d068:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d06c:	9301      	str	r3, [sp, #4]
 800d06e:	2830      	cmp	r0, #48	; 0x30
 800d070:	d0f7      	beq.n	800d062 <__gethex+0x1e>
 800d072:	f7ff ffd1 	bl	800d018 <__hexdig_fun>
 800d076:	4604      	mov	r4, r0
 800d078:	2800      	cmp	r0, #0
 800d07a:	d138      	bne.n	800d0ee <__gethex+0xaa>
 800d07c:	49a7      	ldr	r1, [pc, #668]	; (800d31c <__gethex+0x2d8>)
 800d07e:	2201      	movs	r2, #1
 800d080:	4640      	mov	r0, r8
 800d082:	f7fe fff1 	bl	800c068 <strncmp>
 800d086:	4606      	mov	r6, r0
 800d088:	2800      	cmp	r0, #0
 800d08a:	d169      	bne.n	800d160 <__gethex+0x11c>
 800d08c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d090:	465d      	mov	r5, fp
 800d092:	f7ff ffc1 	bl	800d018 <__hexdig_fun>
 800d096:	2800      	cmp	r0, #0
 800d098:	d064      	beq.n	800d164 <__gethex+0x120>
 800d09a:	465a      	mov	r2, fp
 800d09c:	7810      	ldrb	r0, [r2, #0]
 800d09e:	2830      	cmp	r0, #48	; 0x30
 800d0a0:	4690      	mov	r8, r2
 800d0a2:	f102 0201 	add.w	r2, r2, #1
 800d0a6:	d0f9      	beq.n	800d09c <__gethex+0x58>
 800d0a8:	f7ff ffb6 	bl	800d018 <__hexdig_fun>
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	fab0 f480 	clz	r4, r0
 800d0b2:	0964      	lsrs	r4, r4, #5
 800d0b4:	465e      	mov	r6, fp
 800d0b6:	9301      	str	r3, [sp, #4]
 800d0b8:	4642      	mov	r2, r8
 800d0ba:	4615      	mov	r5, r2
 800d0bc:	3201      	adds	r2, #1
 800d0be:	7828      	ldrb	r0, [r5, #0]
 800d0c0:	f7ff ffaa 	bl	800d018 <__hexdig_fun>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d1f8      	bne.n	800d0ba <__gethex+0x76>
 800d0c8:	4994      	ldr	r1, [pc, #592]	; (800d31c <__gethex+0x2d8>)
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	f7fe ffcb 	bl	800c068 <strncmp>
 800d0d2:	b978      	cbnz	r0, 800d0f4 <__gethex+0xb0>
 800d0d4:	b946      	cbnz	r6, 800d0e8 <__gethex+0xa4>
 800d0d6:	1c6e      	adds	r6, r5, #1
 800d0d8:	4632      	mov	r2, r6
 800d0da:	4615      	mov	r5, r2
 800d0dc:	3201      	adds	r2, #1
 800d0de:	7828      	ldrb	r0, [r5, #0]
 800d0e0:	f7ff ff9a 	bl	800d018 <__hexdig_fun>
 800d0e4:	2800      	cmp	r0, #0
 800d0e6:	d1f8      	bne.n	800d0da <__gethex+0x96>
 800d0e8:	1b73      	subs	r3, r6, r5
 800d0ea:	009e      	lsls	r6, r3, #2
 800d0ec:	e004      	b.n	800d0f8 <__gethex+0xb4>
 800d0ee:	2400      	movs	r4, #0
 800d0f0:	4626      	mov	r6, r4
 800d0f2:	e7e1      	b.n	800d0b8 <__gethex+0x74>
 800d0f4:	2e00      	cmp	r6, #0
 800d0f6:	d1f7      	bne.n	800d0e8 <__gethex+0xa4>
 800d0f8:	782b      	ldrb	r3, [r5, #0]
 800d0fa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d0fe:	2b50      	cmp	r3, #80	; 0x50
 800d100:	d13d      	bne.n	800d17e <__gethex+0x13a>
 800d102:	786b      	ldrb	r3, [r5, #1]
 800d104:	2b2b      	cmp	r3, #43	; 0x2b
 800d106:	d02f      	beq.n	800d168 <__gethex+0x124>
 800d108:	2b2d      	cmp	r3, #45	; 0x2d
 800d10a:	d031      	beq.n	800d170 <__gethex+0x12c>
 800d10c:	1c69      	adds	r1, r5, #1
 800d10e:	f04f 0b00 	mov.w	fp, #0
 800d112:	7808      	ldrb	r0, [r1, #0]
 800d114:	f7ff ff80 	bl	800d018 <__hexdig_fun>
 800d118:	1e42      	subs	r2, r0, #1
 800d11a:	b2d2      	uxtb	r2, r2
 800d11c:	2a18      	cmp	r2, #24
 800d11e:	d82e      	bhi.n	800d17e <__gethex+0x13a>
 800d120:	f1a0 0210 	sub.w	r2, r0, #16
 800d124:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d128:	f7ff ff76 	bl	800d018 <__hexdig_fun>
 800d12c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800d130:	fa5f fc8c 	uxtb.w	ip, ip
 800d134:	f1bc 0f18 	cmp.w	ip, #24
 800d138:	d91d      	bls.n	800d176 <__gethex+0x132>
 800d13a:	f1bb 0f00 	cmp.w	fp, #0
 800d13e:	d000      	beq.n	800d142 <__gethex+0xfe>
 800d140:	4252      	negs	r2, r2
 800d142:	4416      	add	r6, r2
 800d144:	f8ca 1000 	str.w	r1, [sl]
 800d148:	b1dc      	cbz	r4, 800d182 <__gethex+0x13e>
 800d14a:	9b01      	ldr	r3, [sp, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	bf14      	ite	ne
 800d150:	f04f 0800 	movne.w	r8, #0
 800d154:	f04f 0806 	moveq.w	r8, #6
 800d158:	4640      	mov	r0, r8
 800d15a:	b005      	add	sp, #20
 800d15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d160:	4645      	mov	r5, r8
 800d162:	4626      	mov	r6, r4
 800d164:	2401      	movs	r4, #1
 800d166:	e7c7      	b.n	800d0f8 <__gethex+0xb4>
 800d168:	f04f 0b00 	mov.w	fp, #0
 800d16c:	1ca9      	adds	r1, r5, #2
 800d16e:	e7d0      	b.n	800d112 <__gethex+0xce>
 800d170:	f04f 0b01 	mov.w	fp, #1
 800d174:	e7fa      	b.n	800d16c <__gethex+0x128>
 800d176:	230a      	movs	r3, #10
 800d178:	fb03 0002 	mla	r0, r3, r2, r0
 800d17c:	e7d0      	b.n	800d120 <__gethex+0xdc>
 800d17e:	4629      	mov	r1, r5
 800d180:	e7e0      	b.n	800d144 <__gethex+0x100>
 800d182:	eba5 0308 	sub.w	r3, r5, r8
 800d186:	3b01      	subs	r3, #1
 800d188:	4621      	mov	r1, r4
 800d18a:	2b07      	cmp	r3, #7
 800d18c:	dc0a      	bgt.n	800d1a4 <__gethex+0x160>
 800d18e:	4648      	mov	r0, r9
 800d190:	f000 fd14 	bl	800dbbc <_Balloc>
 800d194:	4604      	mov	r4, r0
 800d196:	b940      	cbnz	r0, 800d1aa <__gethex+0x166>
 800d198:	4b61      	ldr	r3, [pc, #388]	; (800d320 <__gethex+0x2dc>)
 800d19a:	4602      	mov	r2, r0
 800d19c:	21e4      	movs	r1, #228	; 0xe4
 800d19e:	4861      	ldr	r0, [pc, #388]	; (800d324 <__gethex+0x2e0>)
 800d1a0:	f001 faa8 	bl	800e6f4 <__assert_func>
 800d1a4:	3101      	adds	r1, #1
 800d1a6:	105b      	asrs	r3, r3, #1
 800d1a8:	e7ef      	b.n	800d18a <__gethex+0x146>
 800d1aa:	f100 0a14 	add.w	sl, r0, #20
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	495a      	ldr	r1, [pc, #360]	; (800d31c <__gethex+0x2d8>)
 800d1b2:	f8cd a004 	str.w	sl, [sp, #4]
 800d1b6:	469b      	mov	fp, r3
 800d1b8:	45a8      	cmp	r8, r5
 800d1ba:	d342      	bcc.n	800d242 <__gethex+0x1fe>
 800d1bc:	9801      	ldr	r0, [sp, #4]
 800d1be:	f840 bb04 	str.w	fp, [r0], #4
 800d1c2:	eba0 000a 	sub.w	r0, r0, sl
 800d1c6:	1080      	asrs	r0, r0, #2
 800d1c8:	6120      	str	r0, [r4, #16]
 800d1ca:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d1ce:	4658      	mov	r0, fp
 800d1d0:	f000 fde6 	bl	800dda0 <__hi0bits>
 800d1d4:	683d      	ldr	r5, [r7, #0]
 800d1d6:	eba8 0000 	sub.w	r0, r8, r0
 800d1da:	42a8      	cmp	r0, r5
 800d1dc:	dd59      	ble.n	800d292 <__gethex+0x24e>
 800d1de:	eba0 0805 	sub.w	r8, r0, r5
 800d1e2:	4641      	mov	r1, r8
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f001 f975 	bl	800e4d4 <__any_on>
 800d1ea:	4683      	mov	fp, r0
 800d1ec:	b1b8      	cbz	r0, 800d21e <__gethex+0x1da>
 800d1ee:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800d1f2:	1159      	asrs	r1, r3, #5
 800d1f4:	f003 021f 	and.w	r2, r3, #31
 800d1f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d1fc:	f04f 0b01 	mov.w	fp, #1
 800d200:	fa0b f202 	lsl.w	r2, fp, r2
 800d204:	420a      	tst	r2, r1
 800d206:	d00a      	beq.n	800d21e <__gethex+0x1da>
 800d208:	455b      	cmp	r3, fp
 800d20a:	dd06      	ble.n	800d21a <__gethex+0x1d6>
 800d20c:	f1a8 0102 	sub.w	r1, r8, #2
 800d210:	4620      	mov	r0, r4
 800d212:	f001 f95f 	bl	800e4d4 <__any_on>
 800d216:	2800      	cmp	r0, #0
 800d218:	d138      	bne.n	800d28c <__gethex+0x248>
 800d21a:	f04f 0b02 	mov.w	fp, #2
 800d21e:	4641      	mov	r1, r8
 800d220:	4620      	mov	r0, r4
 800d222:	f7ff fea7 	bl	800cf74 <rshift>
 800d226:	4446      	add	r6, r8
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	42b3      	cmp	r3, r6
 800d22c:	da41      	bge.n	800d2b2 <__gethex+0x26e>
 800d22e:	4621      	mov	r1, r4
 800d230:	4648      	mov	r0, r9
 800d232:	f000 fd03 	bl	800dc3c <_Bfree>
 800d236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d238:	2300      	movs	r3, #0
 800d23a:	6013      	str	r3, [r2, #0]
 800d23c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d240:	e78a      	b.n	800d158 <__gethex+0x114>
 800d242:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d246:	2a2e      	cmp	r2, #46	; 0x2e
 800d248:	d014      	beq.n	800d274 <__gethex+0x230>
 800d24a:	2b20      	cmp	r3, #32
 800d24c:	d106      	bne.n	800d25c <__gethex+0x218>
 800d24e:	9b01      	ldr	r3, [sp, #4]
 800d250:	f843 bb04 	str.w	fp, [r3], #4
 800d254:	f04f 0b00 	mov.w	fp, #0
 800d258:	9301      	str	r3, [sp, #4]
 800d25a:	465b      	mov	r3, fp
 800d25c:	7828      	ldrb	r0, [r5, #0]
 800d25e:	9303      	str	r3, [sp, #12]
 800d260:	f7ff feda 	bl	800d018 <__hexdig_fun>
 800d264:	9b03      	ldr	r3, [sp, #12]
 800d266:	f000 000f 	and.w	r0, r0, #15
 800d26a:	4098      	lsls	r0, r3
 800d26c:	ea4b 0b00 	orr.w	fp, fp, r0
 800d270:	3304      	adds	r3, #4
 800d272:	e7a1      	b.n	800d1b8 <__gethex+0x174>
 800d274:	45a8      	cmp	r8, r5
 800d276:	d8e8      	bhi.n	800d24a <__gethex+0x206>
 800d278:	2201      	movs	r2, #1
 800d27a:	4628      	mov	r0, r5
 800d27c:	9303      	str	r3, [sp, #12]
 800d27e:	f7fe fef3 	bl	800c068 <strncmp>
 800d282:	4926      	ldr	r1, [pc, #152]	; (800d31c <__gethex+0x2d8>)
 800d284:	9b03      	ldr	r3, [sp, #12]
 800d286:	2800      	cmp	r0, #0
 800d288:	d1df      	bne.n	800d24a <__gethex+0x206>
 800d28a:	e795      	b.n	800d1b8 <__gethex+0x174>
 800d28c:	f04f 0b03 	mov.w	fp, #3
 800d290:	e7c5      	b.n	800d21e <__gethex+0x1da>
 800d292:	da0b      	bge.n	800d2ac <__gethex+0x268>
 800d294:	eba5 0800 	sub.w	r8, r5, r0
 800d298:	4621      	mov	r1, r4
 800d29a:	4642      	mov	r2, r8
 800d29c:	4648      	mov	r0, r9
 800d29e:	f000 fee7 	bl	800e070 <__lshift>
 800d2a2:	eba6 0608 	sub.w	r6, r6, r8
 800d2a6:	4604      	mov	r4, r0
 800d2a8:	f100 0a14 	add.w	sl, r0, #20
 800d2ac:	f04f 0b00 	mov.w	fp, #0
 800d2b0:	e7ba      	b.n	800d228 <__gethex+0x1e4>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	42b3      	cmp	r3, r6
 800d2b6:	dd73      	ble.n	800d3a0 <__gethex+0x35c>
 800d2b8:	1b9e      	subs	r6, r3, r6
 800d2ba:	42b5      	cmp	r5, r6
 800d2bc:	dc34      	bgt.n	800d328 <__gethex+0x2e4>
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d023      	beq.n	800d30c <__gethex+0x2c8>
 800d2c4:	2b03      	cmp	r3, #3
 800d2c6:	d025      	beq.n	800d314 <__gethex+0x2d0>
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d115      	bne.n	800d2f8 <__gethex+0x2b4>
 800d2cc:	42b5      	cmp	r5, r6
 800d2ce:	d113      	bne.n	800d2f8 <__gethex+0x2b4>
 800d2d0:	2d01      	cmp	r5, #1
 800d2d2:	d10b      	bne.n	800d2ec <__gethex+0x2a8>
 800d2d4:	9a02      	ldr	r2, [sp, #8]
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6013      	str	r3, [r2, #0]
 800d2da:	2301      	movs	r3, #1
 800d2dc:	6123      	str	r3, [r4, #16]
 800d2de:	f8ca 3000 	str.w	r3, [sl]
 800d2e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2e4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d2e8:	601c      	str	r4, [r3, #0]
 800d2ea:	e735      	b.n	800d158 <__gethex+0x114>
 800d2ec:	1e69      	subs	r1, r5, #1
 800d2ee:	4620      	mov	r0, r4
 800d2f0:	f001 f8f0 	bl	800e4d4 <__any_on>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d1ed      	bne.n	800d2d4 <__gethex+0x290>
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	4648      	mov	r0, r9
 800d2fc:	f000 fc9e 	bl	800dc3c <_Bfree>
 800d300:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d302:	2300      	movs	r3, #0
 800d304:	6013      	str	r3, [r2, #0]
 800d306:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d30a:	e725      	b.n	800d158 <__gethex+0x114>
 800d30c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1f2      	bne.n	800d2f8 <__gethex+0x2b4>
 800d312:	e7df      	b.n	800d2d4 <__gethex+0x290>
 800d314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1dc      	bne.n	800d2d4 <__gethex+0x290>
 800d31a:	e7ed      	b.n	800d2f8 <__gethex+0x2b4>
 800d31c:	0800f015 	.word	0x0800f015
 800d320:	0800f1ed 	.word	0x0800f1ed
 800d324:	0800f1fe 	.word	0x0800f1fe
 800d328:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d32c:	f1bb 0f00 	cmp.w	fp, #0
 800d330:	d133      	bne.n	800d39a <__gethex+0x356>
 800d332:	f1b8 0f00 	cmp.w	r8, #0
 800d336:	d004      	beq.n	800d342 <__gethex+0x2fe>
 800d338:	4641      	mov	r1, r8
 800d33a:	4620      	mov	r0, r4
 800d33c:	f001 f8ca 	bl	800e4d4 <__any_on>
 800d340:	4683      	mov	fp, r0
 800d342:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d346:	2301      	movs	r3, #1
 800d348:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d34c:	f008 081f 	and.w	r8, r8, #31
 800d350:	fa03 f308 	lsl.w	r3, r3, r8
 800d354:	4213      	tst	r3, r2
 800d356:	4631      	mov	r1, r6
 800d358:	4620      	mov	r0, r4
 800d35a:	bf18      	it	ne
 800d35c:	f04b 0b02 	orrne.w	fp, fp, #2
 800d360:	1bad      	subs	r5, r5, r6
 800d362:	f7ff fe07 	bl	800cf74 <rshift>
 800d366:	687e      	ldr	r6, [r7, #4]
 800d368:	f04f 0802 	mov.w	r8, #2
 800d36c:	f1bb 0f00 	cmp.w	fp, #0
 800d370:	d04a      	beq.n	800d408 <__gethex+0x3c4>
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2b02      	cmp	r3, #2
 800d376:	d016      	beq.n	800d3a6 <__gethex+0x362>
 800d378:	2b03      	cmp	r3, #3
 800d37a:	d018      	beq.n	800d3ae <__gethex+0x36a>
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d109      	bne.n	800d394 <__gethex+0x350>
 800d380:	f01b 0f02 	tst.w	fp, #2
 800d384:	d006      	beq.n	800d394 <__gethex+0x350>
 800d386:	f8da 3000 	ldr.w	r3, [sl]
 800d38a:	ea4b 0b03 	orr.w	fp, fp, r3
 800d38e:	f01b 0f01 	tst.w	fp, #1
 800d392:	d10f      	bne.n	800d3b4 <__gethex+0x370>
 800d394:	f048 0810 	orr.w	r8, r8, #16
 800d398:	e036      	b.n	800d408 <__gethex+0x3c4>
 800d39a:	f04f 0b01 	mov.w	fp, #1
 800d39e:	e7d0      	b.n	800d342 <__gethex+0x2fe>
 800d3a0:	f04f 0801 	mov.w	r8, #1
 800d3a4:	e7e2      	b.n	800d36c <__gethex+0x328>
 800d3a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3a8:	f1c3 0301 	rsb	r3, r3, #1
 800d3ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d0ef      	beq.n	800d394 <__gethex+0x350>
 800d3b4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d3b8:	f104 0214 	add.w	r2, r4, #20
 800d3bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d3c0:	9301      	str	r3, [sp, #4]
 800d3c2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	4694      	mov	ip, r2
 800d3ca:	f852 1b04 	ldr.w	r1, [r2], #4
 800d3ce:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d3d2:	d01e      	beq.n	800d412 <__gethex+0x3ce>
 800d3d4:	3101      	adds	r1, #1
 800d3d6:	f8cc 1000 	str.w	r1, [ip]
 800d3da:	f1b8 0f02 	cmp.w	r8, #2
 800d3de:	f104 0214 	add.w	r2, r4, #20
 800d3e2:	d13d      	bne.n	800d460 <__gethex+0x41c>
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	42ab      	cmp	r3, r5
 800d3ea:	d10b      	bne.n	800d404 <__gethex+0x3c0>
 800d3ec:	1169      	asrs	r1, r5, #5
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	f005 051f 	and.w	r5, r5, #31
 800d3f4:	fa03 f505 	lsl.w	r5, r3, r5
 800d3f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3fc:	421d      	tst	r5, r3
 800d3fe:	bf18      	it	ne
 800d400:	f04f 0801 	movne.w	r8, #1
 800d404:	f048 0820 	orr.w	r8, r8, #32
 800d408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d40a:	601c      	str	r4, [r3, #0]
 800d40c:	9b02      	ldr	r3, [sp, #8]
 800d40e:	601e      	str	r6, [r3, #0]
 800d410:	e6a2      	b.n	800d158 <__gethex+0x114>
 800d412:	4290      	cmp	r0, r2
 800d414:	f842 3c04 	str.w	r3, [r2, #-4]
 800d418:	d8d6      	bhi.n	800d3c8 <__gethex+0x384>
 800d41a:	68a2      	ldr	r2, [r4, #8]
 800d41c:	4593      	cmp	fp, r2
 800d41e:	db17      	blt.n	800d450 <__gethex+0x40c>
 800d420:	6861      	ldr	r1, [r4, #4]
 800d422:	4648      	mov	r0, r9
 800d424:	3101      	adds	r1, #1
 800d426:	f000 fbc9 	bl	800dbbc <_Balloc>
 800d42a:	4682      	mov	sl, r0
 800d42c:	b918      	cbnz	r0, 800d436 <__gethex+0x3f2>
 800d42e:	4b1b      	ldr	r3, [pc, #108]	; (800d49c <__gethex+0x458>)
 800d430:	4602      	mov	r2, r0
 800d432:	2184      	movs	r1, #132	; 0x84
 800d434:	e6b3      	b.n	800d19e <__gethex+0x15a>
 800d436:	6922      	ldr	r2, [r4, #16]
 800d438:	3202      	adds	r2, #2
 800d43a:	f104 010c 	add.w	r1, r4, #12
 800d43e:	0092      	lsls	r2, r2, #2
 800d440:	300c      	adds	r0, #12
 800d442:	f7fe feb2 	bl	800c1aa <memcpy>
 800d446:	4621      	mov	r1, r4
 800d448:	4648      	mov	r0, r9
 800d44a:	f000 fbf7 	bl	800dc3c <_Bfree>
 800d44e:	4654      	mov	r4, sl
 800d450:	6922      	ldr	r2, [r4, #16]
 800d452:	1c51      	adds	r1, r2, #1
 800d454:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d458:	6121      	str	r1, [r4, #16]
 800d45a:	2101      	movs	r1, #1
 800d45c:	6151      	str	r1, [r2, #20]
 800d45e:	e7bc      	b.n	800d3da <__gethex+0x396>
 800d460:	6921      	ldr	r1, [r4, #16]
 800d462:	4559      	cmp	r1, fp
 800d464:	dd0b      	ble.n	800d47e <__gethex+0x43a>
 800d466:	2101      	movs	r1, #1
 800d468:	4620      	mov	r0, r4
 800d46a:	f7ff fd83 	bl	800cf74 <rshift>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	3601      	adds	r6, #1
 800d472:	42b3      	cmp	r3, r6
 800d474:	f6ff aedb 	blt.w	800d22e <__gethex+0x1ea>
 800d478:	f04f 0801 	mov.w	r8, #1
 800d47c:	e7c2      	b.n	800d404 <__gethex+0x3c0>
 800d47e:	f015 051f 	ands.w	r5, r5, #31
 800d482:	d0f9      	beq.n	800d478 <__gethex+0x434>
 800d484:	9b01      	ldr	r3, [sp, #4]
 800d486:	441a      	add	r2, r3
 800d488:	f1c5 0520 	rsb	r5, r5, #32
 800d48c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d490:	f000 fc86 	bl	800dda0 <__hi0bits>
 800d494:	42a8      	cmp	r0, r5
 800d496:	dbe6      	blt.n	800d466 <__gethex+0x422>
 800d498:	e7ee      	b.n	800d478 <__gethex+0x434>
 800d49a:	bf00      	nop
 800d49c:	0800f1ed 	.word	0x0800f1ed

0800d4a0 <L_shift>:
 800d4a0:	f1c2 0208 	rsb	r2, r2, #8
 800d4a4:	0092      	lsls	r2, r2, #2
 800d4a6:	b570      	push	{r4, r5, r6, lr}
 800d4a8:	f1c2 0620 	rsb	r6, r2, #32
 800d4ac:	6843      	ldr	r3, [r0, #4]
 800d4ae:	6804      	ldr	r4, [r0, #0]
 800d4b0:	fa03 f506 	lsl.w	r5, r3, r6
 800d4b4:	432c      	orrs	r4, r5
 800d4b6:	40d3      	lsrs	r3, r2
 800d4b8:	6004      	str	r4, [r0, #0]
 800d4ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800d4be:	4288      	cmp	r0, r1
 800d4c0:	d3f4      	bcc.n	800d4ac <L_shift+0xc>
 800d4c2:	bd70      	pop	{r4, r5, r6, pc}

0800d4c4 <__match>:
 800d4c4:	b530      	push	{r4, r5, lr}
 800d4c6:	6803      	ldr	r3, [r0, #0]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ce:	b914      	cbnz	r4, 800d4d6 <__match+0x12>
 800d4d0:	6003      	str	r3, [r0, #0]
 800d4d2:	2001      	movs	r0, #1
 800d4d4:	bd30      	pop	{r4, r5, pc}
 800d4d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d4de:	2d19      	cmp	r5, #25
 800d4e0:	bf98      	it	ls
 800d4e2:	3220      	addls	r2, #32
 800d4e4:	42a2      	cmp	r2, r4
 800d4e6:	d0f0      	beq.n	800d4ca <__match+0x6>
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	e7f3      	b.n	800d4d4 <__match+0x10>

0800d4ec <__hexnan>:
 800d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	680b      	ldr	r3, [r1, #0]
 800d4f2:	6801      	ldr	r1, [r0, #0]
 800d4f4:	115e      	asrs	r6, r3, #5
 800d4f6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d4fa:	f013 031f 	ands.w	r3, r3, #31
 800d4fe:	b087      	sub	sp, #28
 800d500:	bf18      	it	ne
 800d502:	3604      	addne	r6, #4
 800d504:	2500      	movs	r5, #0
 800d506:	1f37      	subs	r7, r6, #4
 800d508:	4682      	mov	sl, r0
 800d50a:	4690      	mov	r8, r2
 800d50c:	9301      	str	r3, [sp, #4]
 800d50e:	f846 5c04 	str.w	r5, [r6, #-4]
 800d512:	46b9      	mov	r9, r7
 800d514:	463c      	mov	r4, r7
 800d516:	9502      	str	r5, [sp, #8]
 800d518:	46ab      	mov	fp, r5
 800d51a:	784a      	ldrb	r2, [r1, #1]
 800d51c:	1c4b      	adds	r3, r1, #1
 800d51e:	9303      	str	r3, [sp, #12]
 800d520:	b342      	cbz	r2, 800d574 <__hexnan+0x88>
 800d522:	4610      	mov	r0, r2
 800d524:	9105      	str	r1, [sp, #20]
 800d526:	9204      	str	r2, [sp, #16]
 800d528:	f7ff fd76 	bl	800d018 <__hexdig_fun>
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d14f      	bne.n	800d5d0 <__hexnan+0xe4>
 800d530:	9a04      	ldr	r2, [sp, #16]
 800d532:	9905      	ldr	r1, [sp, #20]
 800d534:	2a20      	cmp	r2, #32
 800d536:	d818      	bhi.n	800d56a <__hexnan+0x7e>
 800d538:	9b02      	ldr	r3, [sp, #8]
 800d53a:	459b      	cmp	fp, r3
 800d53c:	dd13      	ble.n	800d566 <__hexnan+0x7a>
 800d53e:	454c      	cmp	r4, r9
 800d540:	d206      	bcs.n	800d550 <__hexnan+0x64>
 800d542:	2d07      	cmp	r5, #7
 800d544:	dc04      	bgt.n	800d550 <__hexnan+0x64>
 800d546:	462a      	mov	r2, r5
 800d548:	4649      	mov	r1, r9
 800d54a:	4620      	mov	r0, r4
 800d54c:	f7ff ffa8 	bl	800d4a0 <L_shift>
 800d550:	4544      	cmp	r4, r8
 800d552:	d950      	bls.n	800d5f6 <__hexnan+0x10a>
 800d554:	2300      	movs	r3, #0
 800d556:	f1a4 0904 	sub.w	r9, r4, #4
 800d55a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d55e:	f8cd b008 	str.w	fp, [sp, #8]
 800d562:	464c      	mov	r4, r9
 800d564:	461d      	mov	r5, r3
 800d566:	9903      	ldr	r1, [sp, #12]
 800d568:	e7d7      	b.n	800d51a <__hexnan+0x2e>
 800d56a:	2a29      	cmp	r2, #41	; 0x29
 800d56c:	d155      	bne.n	800d61a <__hexnan+0x12e>
 800d56e:	3102      	adds	r1, #2
 800d570:	f8ca 1000 	str.w	r1, [sl]
 800d574:	f1bb 0f00 	cmp.w	fp, #0
 800d578:	d04f      	beq.n	800d61a <__hexnan+0x12e>
 800d57a:	454c      	cmp	r4, r9
 800d57c:	d206      	bcs.n	800d58c <__hexnan+0xa0>
 800d57e:	2d07      	cmp	r5, #7
 800d580:	dc04      	bgt.n	800d58c <__hexnan+0xa0>
 800d582:	462a      	mov	r2, r5
 800d584:	4649      	mov	r1, r9
 800d586:	4620      	mov	r0, r4
 800d588:	f7ff ff8a 	bl	800d4a0 <L_shift>
 800d58c:	4544      	cmp	r4, r8
 800d58e:	d934      	bls.n	800d5fa <__hexnan+0x10e>
 800d590:	f1a8 0204 	sub.w	r2, r8, #4
 800d594:	4623      	mov	r3, r4
 800d596:	f853 1b04 	ldr.w	r1, [r3], #4
 800d59a:	f842 1f04 	str.w	r1, [r2, #4]!
 800d59e:	429f      	cmp	r7, r3
 800d5a0:	d2f9      	bcs.n	800d596 <__hexnan+0xaa>
 800d5a2:	1b3b      	subs	r3, r7, r4
 800d5a4:	f023 0303 	bic.w	r3, r3, #3
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	3e03      	subs	r6, #3
 800d5ac:	3401      	adds	r4, #1
 800d5ae:	42a6      	cmp	r6, r4
 800d5b0:	bf38      	it	cc
 800d5b2:	2304      	movcc	r3, #4
 800d5b4:	4443      	add	r3, r8
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f843 2b04 	str.w	r2, [r3], #4
 800d5bc:	429f      	cmp	r7, r3
 800d5be:	d2fb      	bcs.n	800d5b8 <__hexnan+0xcc>
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	b91b      	cbnz	r3, 800d5cc <__hexnan+0xe0>
 800d5c4:	4547      	cmp	r7, r8
 800d5c6:	d126      	bne.n	800d616 <__hexnan+0x12a>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	603b      	str	r3, [r7, #0]
 800d5cc:	2005      	movs	r0, #5
 800d5ce:	e025      	b.n	800d61c <__hexnan+0x130>
 800d5d0:	3501      	adds	r5, #1
 800d5d2:	2d08      	cmp	r5, #8
 800d5d4:	f10b 0b01 	add.w	fp, fp, #1
 800d5d8:	dd06      	ble.n	800d5e8 <__hexnan+0xfc>
 800d5da:	4544      	cmp	r4, r8
 800d5dc:	d9c3      	bls.n	800d566 <__hexnan+0x7a>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d5e4:	2501      	movs	r5, #1
 800d5e6:	3c04      	subs	r4, #4
 800d5e8:	6822      	ldr	r2, [r4, #0]
 800d5ea:	f000 000f 	and.w	r0, r0, #15
 800d5ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d5f2:	6020      	str	r0, [r4, #0]
 800d5f4:	e7b7      	b.n	800d566 <__hexnan+0x7a>
 800d5f6:	2508      	movs	r5, #8
 800d5f8:	e7b5      	b.n	800d566 <__hexnan+0x7a>
 800d5fa:	9b01      	ldr	r3, [sp, #4]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d0df      	beq.n	800d5c0 <__hexnan+0xd4>
 800d600:	f1c3 0320 	rsb	r3, r3, #32
 800d604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d608:	40da      	lsrs	r2, r3
 800d60a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d60e:	4013      	ands	r3, r2
 800d610:	f846 3c04 	str.w	r3, [r6, #-4]
 800d614:	e7d4      	b.n	800d5c0 <__hexnan+0xd4>
 800d616:	3f04      	subs	r7, #4
 800d618:	e7d2      	b.n	800d5c0 <__hexnan+0xd4>
 800d61a:	2004      	movs	r0, #4
 800d61c:	b007      	add	sp, #28
 800d61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d622 <__ssputs_r>:
 800d622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d626:	688e      	ldr	r6, [r1, #8]
 800d628:	461f      	mov	r7, r3
 800d62a:	42be      	cmp	r6, r7
 800d62c:	680b      	ldr	r3, [r1, #0]
 800d62e:	4682      	mov	sl, r0
 800d630:	460c      	mov	r4, r1
 800d632:	4690      	mov	r8, r2
 800d634:	d82c      	bhi.n	800d690 <__ssputs_r+0x6e>
 800d636:	898a      	ldrh	r2, [r1, #12]
 800d638:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d63c:	d026      	beq.n	800d68c <__ssputs_r+0x6a>
 800d63e:	6965      	ldr	r5, [r4, #20]
 800d640:	6909      	ldr	r1, [r1, #16]
 800d642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d646:	eba3 0901 	sub.w	r9, r3, r1
 800d64a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d64e:	1c7b      	adds	r3, r7, #1
 800d650:	444b      	add	r3, r9
 800d652:	106d      	asrs	r5, r5, #1
 800d654:	429d      	cmp	r5, r3
 800d656:	bf38      	it	cc
 800d658:	461d      	movcc	r5, r3
 800d65a:	0553      	lsls	r3, r2, #21
 800d65c:	d527      	bpl.n	800d6ae <__ssputs_r+0x8c>
 800d65e:	4629      	mov	r1, r5
 800d660:	f000 f960 	bl	800d924 <_malloc_r>
 800d664:	4606      	mov	r6, r0
 800d666:	b360      	cbz	r0, 800d6c2 <__ssputs_r+0xa0>
 800d668:	6921      	ldr	r1, [r4, #16]
 800d66a:	464a      	mov	r2, r9
 800d66c:	f7fe fd9d 	bl	800c1aa <memcpy>
 800d670:	89a3      	ldrh	r3, [r4, #12]
 800d672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d67a:	81a3      	strh	r3, [r4, #12]
 800d67c:	6126      	str	r6, [r4, #16]
 800d67e:	6165      	str	r5, [r4, #20]
 800d680:	444e      	add	r6, r9
 800d682:	eba5 0509 	sub.w	r5, r5, r9
 800d686:	6026      	str	r6, [r4, #0]
 800d688:	60a5      	str	r5, [r4, #8]
 800d68a:	463e      	mov	r6, r7
 800d68c:	42be      	cmp	r6, r7
 800d68e:	d900      	bls.n	800d692 <__ssputs_r+0x70>
 800d690:	463e      	mov	r6, r7
 800d692:	6820      	ldr	r0, [r4, #0]
 800d694:	4632      	mov	r2, r6
 800d696:	4641      	mov	r1, r8
 800d698:	f000 ffbc 	bl	800e614 <memmove>
 800d69c:	68a3      	ldr	r3, [r4, #8]
 800d69e:	1b9b      	subs	r3, r3, r6
 800d6a0:	60a3      	str	r3, [r4, #8]
 800d6a2:	6823      	ldr	r3, [r4, #0]
 800d6a4:	4433      	add	r3, r6
 800d6a6:	6023      	str	r3, [r4, #0]
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ae:	462a      	mov	r2, r5
 800d6b0:	f000 ff74 	bl	800e59c <_realloc_r>
 800d6b4:	4606      	mov	r6, r0
 800d6b6:	2800      	cmp	r0, #0
 800d6b8:	d1e0      	bne.n	800d67c <__ssputs_r+0x5a>
 800d6ba:	6921      	ldr	r1, [r4, #16]
 800d6bc:	4650      	mov	r0, sl
 800d6be:	f7ff fc0d 	bl	800cedc <_free_r>
 800d6c2:	230c      	movs	r3, #12
 800d6c4:	f8ca 3000 	str.w	r3, [sl]
 800d6c8:	89a3      	ldrh	r3, [r4, #12]
 800d6ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6ce:	81a3      	strh	r3, [r4, #12]
 800d6d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6d4:	e7e9      	b.n	800d6aa <__ssputs_r+0x88>
	...

0800d6d8 <_svfiprintf_r>:
 800d6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6dc:	4698      	mov	r8, r3
 800d6de:	898b      	ldrh	r3, [r1, #12]
 800d6e0:	061b      	lsls	r3, r3, #24
 800d6e2:	b09d      	sub	sp, #116	; 0x74
 800d6e4:	4607      	mov	r7, r0
 800d6e6:	460d      	mov	r5, r1
 800d6e8:	4614      	mov	r4, r2
 800d6ea:	d50e      	bpl.n	800d70a <_svfiprintf_r+0x32>
 800d6ec:	690b      	ldr	r3, [r1, #16]
 800d6ee:	b963      	cbnz	r3, 800d70a <_svfiprintf_r+0x32>
 800d6f0:	2140      	movs	r1, #64	; 0x40
 800d6f2:	f000 f917 	bl	800d924 <_malloc_r>
 800d6f6:	6028      	str	r0, [r5, #0]
 800d6f8:	6128      	str	r0, [r5, #16]
 800d6fa:	b920      	cbnz	r0, 800d706 <_svfiprintf_r+0x2e>
 800d6fc:	230c      	movs	r3, #12
 800d6fe:	603b      	str	r3, [r7, #0]
 800d700:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d704:	e0d0      	b.n	800d8a8 <_svfiprintf_r+0x1d0>
 800d706:	2340      	movs	r3, #64	; 0x40
 800d708:	616b      	str	r3, [r5, #20]
 800d70a:	2300      	movs	r3, #0
 800d70c:	9309      	str	r3, [sp, #36]	; 0x24
 800d70e:	2320      	movs	r3, #32
 800d710:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d714:	f8cd 800c 	str.w	r8, [sp, #12]
 800d718:	2330      	movs	r3, #48	; 0x30
 800d71a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d8c0 <_svfiprintf_r+0x1e8>
 800d71e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d722:	f04f 0901 	mov.w	r9, #1
 800d726:	4623      	mov	r3, r4
 800d728:	469a      	mov	sl, r3
 800d72a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d72e:	b10a      	cbz	r2, 800d734 <_svfiprintf_r+0x5c>
 800d730:	2a25      	cmp	r2, #37	; 0x25
 800d732:	d1f9      	bne.n	800d728 <_svfiprintf_r+0x50>
 800d734:	ebba 0b04 	subs.w	fp, sl, r4
 800d738:	d00b      	beq.n	800d752 <_svfiprintf_r+0x7a>
 800d73a:	465b      	mov	r3, fp
 800d73c:	4622      	mov	r2, r4
 800d73e:	4629      	mov	r1, r5
 800d740:	4638      	mov	r0, r7
 800d742:	f7ff ff6e 	bl	800d622 <__ssputs_r>
 800d746:	3001      	adds	r0, #1
 800d748:	f000 80a9 	beq.w	800d89e <_svfiprintf_r+0x1c6>
 800d74c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d74e:	445a      	add	r2, fp
 800d750:	9209      	str	r2, [sp, #36]	; 0x24
 800d752:	f89a 3000 	ldrb.w	r3, [sl]
 800d756:	2b00      	cmp	r3, #0
 800d758:	f000 80a1 	beq.w	800d89e <_svfiprintf_r+0x1c6>
 800d75c:	2300      	movs	r3, #0
 800d75e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d762:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d766:	f10a 0a01 	add.w	sl, sl, #1
 800d76a:	9304      	str	r3, [sp, #16]
 800d76c:	9307      	str	r3, [sp, #28]
 800d76e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d772:	931a      	str	r3, [sp, #104]	; 0x68
 800d774:	4654      	mov	r4, sl
 800d776:	2205      	movs	r2, #5
 800d778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d77c:	4850      	ldr	r0, [pc, #320]	; (800d8c0 <_svfiprintf_r+0x1e8>)
 800d77e:	f7f2 fd3f 	bl	8000200 <memchr>
 800d782:	9a04      	ldr	r2, [sp, #16]
 800d784:	b9d8      	cbnz	r0, 800d7be <_svfiprintf_r+0xe6>
 800d786:	06d0      	lsls	r0, r2, #27
 800d788:	bf44      	itt	mi
 800d78a:	2320      	movmi	r3, #32
 800d78c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d790:	0711      	lsls	r1, r2, #28
 800d792:	bf44      	itt	mi
 800d794:	232b      	movmi	r3, #43	; 0x2b
 800d796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d79a:	f89a 3000 	ldrb.w	r3, [sl]
 800d79e:	2b2a      	cmp	r3, #42	; 0x2a
 800d7a0:	d015      	beq.n	800d7ce <_svfiprintf_r+0xf6>
 800d7a2:	9a07      	ldr	r2, [sp, #28]
 800d7a4:	4654      	mov	r4, sl
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	f04f 0c0a 	mov.w	ip, #10
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7b2:	3b30      	subs	r3, #48	; 0x30
 800d7b4:	2b09      	cmp	r3, #9
 800d7b6:	d94d      	bls.n	800d854 <_svfiprintf_r+0x17c>
 800d7b8:	b1b0      	cbz	r0, 800d7e8 <_svfiprintf_r+0x110>
 800d7ba:	9207      	str	r2, [sp, #28]
 800d7bc:	e014      	b.n	800d7e8 <_svfiprintf_r+0x110>
 800d7be:	eba0 0308 	sub.w	r3, r0, r8
 800d7c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	9304      	str	r3, [sp, #16]
 800d7ca:	46a2      	mov	sl, r4
 800d7cc:	e7d2      	b.n	800d774 <_svfiprintf_r+0x9c>
 800d7ce:	9b03      	ldr	r3, [sp, #12]
 800d7d0:	1d19      	adds	r1, r3, #4
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	9103      	str	r1, [sp, #12]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bfbb      	ittet	lt
 800d7da:	425b      	neglt	r3, r3
 800d7dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d7e0:	9307      	strge	r3, [sp, #28]
 800d7e2:	9307      	strlt	r3, [sp, #28]
 800d7e4:	bfb8      	it	lt
 800d7e6:	9204      	strlt	r2, [sp, #16]
 800d7e8:	7823      	ldrb	r3, [r4, #0]
 800d7ea:	2b2e      	cmp	r3, #46	; 0x2e
 800d7ec:	d10c      	bne.n	800d808 <_svfiprintf_r+0x130>
 800d7ee:	7863      	ldrb	r3, [r4, #1]
 800d7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d7f2:	d134      	bne.n	800d85e <_svfiprintf_r+0x186>
 800d7f4:	9b03      	ldr	r3, [sp, #12]
 800d7f6:	1d1a      	adds	r2, r3, #4
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	9203      	str	r2, [sp, #12]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	bfb8      	it	lt
 800d800:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d804:	3402      	adds	r4, #2
 800d806:	9305      	str	r3, [sp, #20]
 800d808:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d8d0 <_svfiprintf_r+0x1f8>
 800d80c:	7821      	ldrb	r1, [r4, #0]
 800d80e:	2203      	movs	r2, #3
 800d810:	4650      	mov	r0, sl
 800d812:	f7f2 fcf5 	bl	8000200 <memchr>
 800d816:	b138      	cbz	r0, 800d828 <_svfiprintf_r+0x150>
 800d818:	9b04      	ldr	r3, [sp, #16]
 800d81a:	eba0 000a 	sub.w	r0, r0, sl
 800d81e:	2240      	movs	r2, #64	; 0x40
 800d820:	4082      	lsls	r2, r0
 800d822:	4313      	orrs	r3, r2
 800d824:	3401      	adds	r4, #1
 800d826:	9304      	str	r3, [sp, #16]
 800d828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d82c:	4825      	ldr	r0, [pc, #148]	; (800d8c4 <_svfiprintf_r+0x1ec>)
 800d82e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d832:	2206      	movs	r2, #6
 800d834:	f7f2 fce4 	bl	8000200 <memchr>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d038      	beq.n	800d8ae <_svfiprintf_r+0x1d6>
 800d83c:	4b22      	ldr	r3, [pc, #136]	; (800d8c8 <_svfiprintf_r+0x1f0>)
 800d83e:	bb1b      	cbnz	r3, 800d888 <_svfiprintf_r+0x1b0>
 800d840:	9b03      	ldr	r3, [sp, #12]
 800d842:	3307      	adds	r3, #7
 800d844:	f023 0307 	bic.w	r3, r3, #7
 800d848:	3308      	adds	r3, #8
 800d84a:	9303      	str	r3, [sp, #12]
 800d84c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d84e:	4433      	add	r3, r6
 800d850:	9309      	str	r3, [sp, #36]	; 0x24
 800d852:	e768      	b.n	800d726 <_svfiprintf_r+0x4e>
 800d854:	fb0c 3202 	mla	r2, ip, r2, r3
 800d858:	460c      	mov	r4, r1
 800d85a:	2001      	movs	r0, #1
 800d85c:	e7a6      	b.n	800d7ac <_svfiprintf_r+0xd4>
 800d85e:	2300      	movs	r3, #0
 800d860:	3401      	adds	r4, #1
 800d862:	9305      	str	r3, [sp, #20]
 800d864:	4619      	mov	r1, r3
 800d866:	f04f 0c0a 	mov.w	ip, #10
 800d86a:	4620      	mov	r0, r4
 800d86c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d870:	3a30      	subs	r2, #48	; 0x30
 800d872:	2a09      	cmp	r2, #9
 800d874:	d903      	bls.n	800d87e <_svfiprintf_r+0x1a6>
 800d876:	2b00      	cmp	r3, #0
 800d878:	d0c6      	beq.n	800d808 <_svfiprintf_r+0x130>
 800d87a:	9105      	str	r1, [sp, #20]
 800d87c:	e7c4      	b.n	800d808 <_svfiprintf_r+0x130>
 800d87e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d882:	4604      	mov	r4, r0
 800d884:	2301      	movs	r3, #1
 800d886:	e7f0      	b.n	800d86a <_svfiprintf_r+0x192>
 800d888:	ab03      	add	r3, sp, #12
 800d88a:	9300      	str	r3, [sp, #0]
 800d88c:	462a      	mov	r2, r5
 800d88e:	4b0f      	ldr	r3, [pc, #60]	; (800d8cc <_svfiprintf_r+0x1f4>)
 800d890:	a904      	add	r1, sp, #16
 800d892:	4638      	mov	r0, r7
 800d894:	f7fc fe9a 	bl	800a5cc <_printf_float>
 800d898:	1c42      	adds	r2, r0, #1
 800d89a:	4606      	mov	r6, r0
 800d89c:	d1d6      	bne.n	800d84c <_svfiprintf_r+0x174>
 800d89e:	89ab      	ldrh	r3, [r5, #12]
 800d8a0:	065b      	lsls	r3, r3, #25
 800d8a2:	f53f af2d 	bmi.w	800d700 <_svfiprintf_r+0x28>
 800d8a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8a8:	b01d      	add	sp, #116	; 0x74
 800d8aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ae:	ab03      	add	r3, sp, #12
 800d8b0:	9300      	str	r3, [sp, #0]
 800d8b2:	462a      	mov	r2, r5
 800d8b4:	4b05      	ldr	r3, [pc, #20]	; (800d8cc <_svfiprintf_r+0x1f4>)
 800d8b6:	a904      	add	r1, sp, #16
 800d8b8:	4638      	mov	r0, r7
 800d8ba:	f7fd f92b 	bl	800ab14 <_printf_i>
 800d8be:	e7eb      	b.n	800d898 <_svfiprintf_r+0x1c0>
 800d8c0:	0800f25e 	.word	0x0800f25e
 800d8c4:	0800f268 	.word	0x0800f268
 800d8c8:	0800a5cd 	.word	0x0800a5cd
 800d8cc:	0800d623 	.word	0x0800d623
 800d8d0:	0800f264 	.word	0x0800f264

0800d8d4 <malloc>:
 800d8d4:	4b02      	ldr	r3, [pc, #8]	; (800d8e0 <malloc+0xc>)
 800d8d6:	4601      	mov	r1, r0
 800d8d8:	6818      	ldr	r0, [r3, #0]
 800d8da:	f000 b823 	b.w	800d924 <_malloc_r>
 800d8de:	bf00      	nop
 800d8e0:	2000025c 	.word	0x2000025c

0800d8e4 <sbrk_aligned>:
 800d8e4:	b570      	push	{r4, r5, r6, lr}
 800d8e6:	4e0e      	ldr	r6, [pc, #56]	; (800d920 <sbrk_aligned+0x3c>)
 800d8e8:	460c      	mov	r4, r1
 800d8ea:	6831      	ldr	r1, [r6, #0]
 800d8ec:	4605      	mov	r5, r0
 800d8ee:	b911      	cbnz	r1, 800d8f6 <sbrk_aligned+0x12>
 800d8f0:	f000 fede 	bl	800e6b0 <_sbrk_r>
 800d8f4:	6030      	str	r0, [r6, #0]
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f000 fed9 	bl	800e6b0 <_sbrk_r>
 800d8fe:	1c43      	adds	r3, r0, #1
 800d900:	d00a      	beq.n	800d918 <sbrk_aligned+0x34>
 800d902:	1cc4      	adds	r4, r0, #3
 800d904:	f024 0403 	bic.w	r4, r4, #3
 800d908:	42a0      	cmp	r0, r4
 800d90a:	d007      	beq.n	800d91c <sbrk_aligned+0x38>
 800d90c:	1a21      	subs	r1, r4, r0
 800d90e:	4628      	mov	r0, r5
 800d910:	f000 fece 	bl	800e6b0 <_sbrk_r>
 800d914:	3001      	adds	r0, #1
 800d916:	d101      	bne.n	800d91c <sbrk_aligned+0x38>
 800d918:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d91c:	4620      	mov	r0, r4
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	2000166c 	.word	0x2000166c

0800d924 <_malloc_r>:
 800d924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d928:	1ccd      	adds	r5, r1, #3
 800d92a:	f025 0503 	bic.w	r5, r5, #3
 800d92e:	3508      	adds	r5, #8
 800d930:	2d0c      	cmp	r5, #12
 800d932:	bf38      	it	cc
 800d934:	250c      	movcc	r5, #12
 800d936:	2d00      	cmp	r5, #0
 800d938:	4607      	mov	r7, r0
 800d93a:	db01      	blt.n	800d940 <_malloc_r+0x1c>
 800d93c:	42a9      	cmp	r1, r5
 800d93e:	d905      	bls.n	800d94c <_malloc_r+0x28>
 800d940:	230c      	movs	r3, #12
 800d942:	603b      	str	r3, [r7, #0]
 800d944:	2600      	movs	r6, #0
 800d946:	4630      	mov	r0, r6
 800d948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d94c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800da20 <_malloc_r+0xfc>
 800d950:	f000 f928 	bl	800dba4 <__malloc_lock>
 800d954:	f8d8 3000 	ldr.w	r3, [r8]
 800d958:	461c      	mov	r4, r3
 800d95a:	bb5c      	cbnz	r4, 800d9b4 <_malloc_r+0x90>
 800d95c:	4629      	mov	r1, r5
 800d95e:	4638      	mov	r0, r7
 800d960:	f7ff ffc0 	bl	800d8e4 <sbrk_aligned>
 800d964:	1c43      	adds	r3, r0, #1
 800d966:	4604      	mov	r4, r0
 800d968:	d155      	bne.n	800da16 <_malloc_r+0xf2>
 800d96a:	f8d8 4000 	ldr.w	r4, [r8]
 800d96e:	4626      	mov	r6, r4
 800d970:	2e00      	cmp	r6, #0
 800d972:	d145      	bne.n	800da00 <_malloc_r+0xdc>
 800d974:	2c00      	cmp	r4, #0
 800d976:	d048      	beq.n	800da0a <_malloc_r+0xe6>
 800d978:	6823      	ldr	r3, [r4, #0]
 800d97a:	4631      	mov	r1, r6
 800d97c:	4638      	mov	r0, r7
 800d97e:	eb04 0903 	add.w	r9, r4, r3
 800d982:	f000 fe95 	bl	800e6b0 <_sbrk_r>
 800d986:	4581      	cmp	r9, r0
 800d988:	d13f      	bne.n	800da0a <_malloc_r+0xe6>
 800d98a:	6821      	ldr	r1, [r4, #0]
 800d98c:	1a6d      	subs	r5, r5, r1
 800d98e:	4629      	mov	r1, r5
 800d990:	4638      	mov	r0, r7
 800d992:	f7ff ffa7 	bl	800d8e4 <sbrk_aligned>
 800d996:	3001      	adds	r0, #1
 800d998:	d037      	beq.n	800da0a <_malloc_r+0xe6>
 800d99a:	6823      	ldr	r3, [r4, #0]
 800d99c:	442b      	add	r3, r5
 800d99e:	6023      	str	r3, [r4, #0]
 800d9a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d038      	beq.n	800da1a <_malloc_r+0xf6>
 800d9a8:	685a      	ldr	r2, [r3, #4]
 800d9aa:	42a2      	cmp	r2, r4
 800d9ac:	d12b      	bne.n	800da06 <_malloc_r+0xe2>
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	605a      	str	r2, [r3, #4]
 800d9b2:	e00f      	b.n	800d9d4 <_malloc_r+0xb0>
 800d9b4:	6822      	ldr	r2, [r4, #0]
 800d9b6:	1b52      	subs	r2, r2, r5
 800d9b8:	d41f      	bmi.n	800d9fa <_malloc_r+0xd6>
 800d9ba:	2a0b      	cmp	r2, #11
 800d9bc:	d917      	bls.n	800d9ee <_malloc_r+0xca>
 800d9be:	1961      	adds	r1, r4, r5
 800d9c0:	42a3      	cmp	r3, r4
 800d9c2:	6025      	str	r5, [r4, #0]
 800d9c4:	bf18      	it	ne
 800d9c6:	6059      	strne	r1, [r3, #4]
 800d9c8:	6863      	ldr	r3, [r4, #4]
 800d9ca:	bf08      	it	eq
 800d9cc:	f8c8 1000 	streq.w	r1, [r8]
 800d9d0:	5162      	str	r2, [r4, r5]
 800d9d2:	604b      	str	r3, [r1, #4]
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	f104 060b 	add.w	r6, r4, #11
 800d9da:	f000 f8e9 	bl	800dbb0 <__malloc_unlock>
 800d9de:	f026 0607 	bic.w	r6, r6, #7
 800d9e2:	1d23      	adds	r3, r4, #4
 800d9e4:	1af2      	subs	r2, r6, r3
 800d9e6:	d0ae      	beq.n	800d946 <_malloc_r+0x22>
 800d9e8:	1b9b      	subs	r3, r3, r6
 800d9ea:	50a3      	str	r3, [r4, r2]
 800d9ec:	e7ab      	b.n	800d946 <_malloc_r+0x22>
 800d9ee:	42a3      	cmp	r3, r4
 800d9f0:	6862      	ldr	r2, [r4, #4]
 800d9f2:	d1dd      	bne.n	800d9b0 <_malloc_r+0x8c>
 800d9f4:	f8c8 2000 	str.w	r2, [r8]
 800d9f8:	e7ec      	b.n	800d9d4 <_malloc_r+0xb0>
 800d9fa:	4623      	mov	r3, r4
 800d9fc:	6864      	ldr	r4, [r4, #4]
 800d9fe:	e7ac      	b.n	800d95a <_malloc_r+0x36>
 800da00:	4634      	mov	r4, r6
 800da02:	6876      	ldr	r6, [r6, #4]
 800da04:	e7b4      	b.n	800d970 <_malloc_r+0x4c>
 800da06:	4613      	mov	r3, r2
 800da08:	e7cc      	b.n	800d9a4 <_malloc_r+0x80>
 800da0a:	230c      	movs	r3, #12
 800da0c:	603b      	str	r3, [r7, #0]
 800da0e:	4638      	mov	r0, r7
 800da10:	f000 f8ce 	bl	800dbb0 <__malloc_unlock>
 800da14:	e797      	b.n	800d946 <_malloc_r+0x22>
 800da16:	6025      	str	r5, [r4, #0]
 800da18:	e7dc      	b.n	800d9d4 <_malloc_r+0xb0>
 800da1a:	605b      	str	r3, [r3, #4]
 800da1c:	deff      	udf	#255	; 0xff
 800da1e:	bf00      	nop
 800da20:	20001668 	.word	0x20001668

0800da24 <__ascii_mbtowc>:
 800da24:	b082      	sub	sp, #8
 800da26:	b901      	cbnz	r1, 800da2a <__ascii_mbtowc+0x6>
 800da28:	a901      	add	r1, sp, #4
 800da2a:	b142      	cbz	r2, 800da3e <__ascii_mbtowc+0x1a>
 800da2c:	b14b      	cbz	r3, 800da42 <__ascii_mbtowc+0x1e>
 800da2e:	7813      	ldrb	r3, [r2, #0]
 800da30:	600b      	str	r3, [r1, #0]
 800da32:	7812      	ldrb	r2, [r2, #0]
 800da34:	1e10      	subs	r0, r2, #0
 800da36:	bf18      	it	ne
 800da38:	2001      	movne	r0, #1
 800da3a:	b002      	add	sp, #8
 800da3c:	4770      	bx	lr
 800da3e:	4610      	mov	r0, r2
 800da40:	e7fb      	b.n	800da3a <__ascii_mbtowc+0x16>
 800da42:	f06f 0001 	mvn.w	r0, #1
 800da46:	e7f8      	b.n	800da3a <__ascii_mbtowc+0x16>

0800da48 <__sflush_r>:
 800da48:	898a      	ldrh	r2, [r1, #12]
 800da4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da4e:	4605      	mov	r5, r0
 800da50:	0710      	lsls	r0, r2, #28
 800da52:	460c      	mov	r4, r1
 800da54:	d458      	bmi.n	800db08 <__sflush_r+0xc0>
 800da56:	684b      	ldr	r3, [r1, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	dc05      	bgt.n	800da68 <__sflush_r+0x20>
 800da5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da5e:	2b00      	cmp	r3, #0
 800da60:	dc02      	bgt.n	800da68 <__sflush_r+0x20>
 800da62:	2000      	movs	r0, #0
 800da64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da6a:	2e00      	cmp	r6, #0
 800da6c:	d0f9      	beq.n	800da62 <__sflush_r+0x1a>
 800da6e:	2300      	movs	r3, #0
 800da70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da74:	682f      	ldr	r7, [r5, #0]
 800da76:	6a21      	ldr	r1, [r4, #32]
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	d032      	beq.n	800dae2 <__sflush_r+0x9a>
 800da7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da7e:	89a3      	ldrh	r3, [r4, #12]
 800da80:	075a      	lsls	r2, r3, #29
 800da82:	d505      	bpl.n	800da90 <__sflush_r+0x48>
 800da84:	6863      	ldr	r3, [r4, #4]
 800da86:	1ac0      	subs	r0, r0, r3
 800da88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da8a:	b10b      	cbz	r3, 800da90 <__sflush_r+0x48>
 800da8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da8e:	1ac0      	subs	r0, r0, r3
 800da90:	2300      	movs	r3, #0
 800da92:	4602      	mov	r2, r0
 800da94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da96:	6a21      	ldr	r1, [r4, #32]
 800da98:	4628      	mov	r0, r5
 800da9a:	47b0      	blx	r6
 800da9c:	1c43      	adds	r3, r0, #1
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	d106      	bne.n	800dab0 <__sflush_r+0x68>
 800daa2:	6829      	ldr	r1, [r5, #0]
 800daa4:	291d      	cmp	r1, #29
 800daa6:	d82b      	bhi.n	800db00 <__sflush_r+0xb8>
 800daa8:	4a29      	ldr	r2, [pc, #164]	; (800db50 <__sflush_r+0x108>)
 800daaa:	410a      	asrs	r2, r1
 800daac:	07d6      	lsls	r6, r2, #31
 800daae:	d427      	bmi.n	800db00 <__sflush_r+0xb8>
 800dab0:	2200      	movs	r2, #0
 800dab2:	6062      	str	r2, [r4, #4]
 800dab4:	04d9      	lsls	r1, r3, #19
 800dab6:	6922      	ldr	r2, [r4, #16]
 800dab8:	6022      	str	r2, [r4, #0]
 800daba:	d504      	bpl.n	800dac6 <__sflush_r+0x7e>
 800dabc:	1c42      	adds	r2, r0, #1
 800dabe:	d101      	bne.n	800dac4 <__sflush_r+0x7c>
 800dac0:	682b      	ldr	r3, [r5, #0]
 800dac2:	b903      	cbnz	r3, 800dac6 <__sflush_r+0x7e>
 800dac4:	6560      	str	r0, [r4, #84]	; 0x54
 800dac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dac8:	602f      	str	r7, [r5, #0]
 800daca:	2900      	cmp	r1, #0
 800dacc:	d0c9      	beq.n	800da62 <__sflush_r+0x1a>
 800dace:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dad2:	4299      	cmp	r1, r3
 800dad4:	d002      	beq.n	800dadc <__sflush_r+0x94>
 800dad6:	4628      	mov	r0, r5
 800dad8:	f7ff fa00 	bl	800cedc <_free_r>
 800dadc:	2000      	movs	r0, #0
 800dade:	6360      	str	r0, [r4, #52]	; 0x34
 800dae0:	e7c0      	b.n	800da64 <__sflush_r+0x1c>
 800dae2:	2301      	movs	r3, #1
 800dae4:	4628      	mov	r0, r5
 800dae6:	47b0      	blx	r6
 800dae8:	1c41      	adds	r1, r0, #1
 800daea:	d1c8      	bne.n	800da7e <__sflush_r+0x36>
 800daec:	682b      	ldr	r3, [r5, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d0c5      	beq.n	800da7e <__sflush_r+0x36>
 800daf2:	2b1d      	cmp	r3, #29
 800daf4:	d001      	beq.n	800dafa <__sflush_r+0xb2>
 800daf6:	2b16      	cmp	r3, #22
 800daf8:	d101      	bne.n	800dafe <__sflush_r+0xb6>
 800dafa:	602f      	str	r7, [r5, #0]
 800dafc:	e7b1      	b.n	800da62 <__sflush_r+0x1a>
 800dafe:	89a3      	ldrh	r3, [r4, #12]
 800db00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db04:	81a3      	strh	r3, [r4, #12]
 800db06:	e7ad      	b.n	800da64 <__sflush_r+0x1c>
 800db08:	690f      	ldr	r7, [r1, #16]
 800db0a:	2f00      	cmp	r7, #0
 800db0c:	d0a9      	beq.n	800da62 <__sflush_r+0x1a>
 800db0e:	0793      	lsls	r3, r2, #30
 800db10:	680e      	ldr	r6, [r1, #0]
 800db12:	bf08      	it	eq
 800db14:	694b      	ldreq	r3, [r1, #20]
 800db16:	600f      	str	r7, [r1, #0]
 800db18:	bf18      	it	ne
 800db1a:	2300      	movne	r3, #0
 800db1c:	eba6 0807 	sub.w	r8, r6, r7
 800db20:	608b      	str	r3, [r1, #8]
 800db22:	f1b8 0f00 	cmp.w	r8, #0
 800db26:	dd9c      	ble.n	800da62 <__sflush_r+0x1a>
 800db28:	6a21      	ldr	r1, [r4, #32]
 800db2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db2c:	4643      	mov	r3, r8
 800db2e:	463a      	mov	r2, r7
 800db30:	4628      	mov	r0, r5
 800db32:	47b0      	blx	r6
 800db34:	2800      	cmp	r0, #0
 800db36:	dc06      	bgt.n	800db46 <__sflush_r+0xfe>
 800db38:	89a3      	ldrh	r3, [r4, #12]
 800db3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db3e:	81a3      	strh	r3, [r4, #12]
 800db40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db44:	e78e      	b.n	800da64 <__sflush_r+0x1c>
 800db46:	4407      	add	r7, r0
 800db48:	eba8 0800 	sub.w	r8, r8, r0
 800db4c:	e7e9      	b.n	800db22 <__sflush_r+0xda>
 800db4e:	bf00      	nop
 800db50:	dfbffffe 	.word	0xdfbffffe

0800db54 <_fflush_r>:
 800db54:	b538      	push	{r3, r4, r5, lr}
 800db56:	690b      	ldr	r3, [r1, #16]
 800db58:	4605      	mov	r5, r0
 800db5a:	460c      	mov	r4, r1
 800db5c:	b913      	cbnz	r3, 800db64 <_fflush_r+0x10>
 800db5e:	2500      	movs	r5, #0
 800db60:	4628      	mov	r0, r5
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	b118      	cbz	r0, 800db6e <_fflush_r+0x1a>
 800db66:	6a03      	ldr	r3, [r0, #32]
 800db68:	b90b      	cbnz	r3, 800db6e <_fflush_r+0x1a>
 800db6a:	f7fd fbb1 	bl	800b2d0 <__sinit>
 800db6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d0f3      	beq.n	800db5e <_fflush_r+0xa>
 800db76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db78:	07d0      	lsls	r0, r2, #31
 800db7a:	d404      	bmi.n	800db86 <_fflush_r+0x32>
 800db7c:	0599      	lsls	r1, r3, #22
 800db7e:	d402      	bmi.n	800db86 <_fflush_r+0x32>
 800db80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db82:	f7fe fb10 	bl	800c1a6 <__retarget_lock_acquire_recursive>
 800db86:	4628      	mov	r0, r5
 800db88:	4621      	mov	r1, r4
 800db8a:	f7ff ff5d 	bl	800da48 <__sflush_r>
 800db8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db90:	07da      	lsls	r2, r3, #31
 800db92:	4605      	mov	r5, r0
 800db94:	d4e4      	bmi.n	800db60 <_fflush_r+0xc>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	059b      	lsls	r3, r3, #22
 800db9a:	d4e1      	bmi.n	800db60 <_fflush_r+0xc>
 800db9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db9e:	f7fe fb03 	bl	800c1a8 <__retarget_lock_release_recursive>
 800dba2:	e7dd      	b.n	800db60 <_fflush_r+0xc>

0800dba4 <__malloc_lock>:
 800dba4:	4801      	ldr	r0, [pc, #4]	; (800dbac <__malloc_lock+0x8>)
 800dba6:	f7fe bafe 	b.w	800c1a6 <__retarget_lock_acquire_recursive>
 800dbaa:	bf00      	nop
 800dbac:	20001664 	.word	0x20001664

0800dbb0 <__malloc_unlock>:
 800dbb0:	4801      	ldr	r0, [pc, #4]	; (800dbb8 <__malloc_unlock+0x8>)
 800dbb2:	f7fe baf9 	b.w	800c1a8 <__retarget_lock_release_recursive>
 800dbb6:	bf00      	nop
 800dbb8:	20001664 	.word	0x20001664

0800dbbc <_Balloc>:
 800dbbc:	b570      	push	{r4, r5, r6, lr}
 800dbbe:	69c6      	ldr	r6, [r0, #28]
 800dbc0:	4604      	mov	r4, r0
 800dbc2:	460d      	mov	r5, r1
 800dbc4:	b976      	cbnz	r6, 800dbe4 <_Balloc+0x28>
 800dbc6:	2010      	movs	r0, #16
 800dbc8:	f7ff fe84 	bl	800d8d4 <malloc>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	61e0      	str	r0, [r4, #28]
 800dbd0:	b920      	cbnz	r0, 800dbdc <_Balloc+0x20>
 800dbd2:	4b18      	ldr	r3, [pc, #96]	; (800dc34 <_Balloc+0x78>)
 800dbd4:	4818      	ldr	r0, [pc, #96]	; (800dc38 <_Balloc+0x7c>)
 800dbd6:	216b      	movs	r1, #107	; 0x6b
 800dbd8:	f000 fd8c 	bl	800e6f4 <__assert_func>
 800dbdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dbe0:	6006      	str	r6, [r0, #0]
 800dbe2:	60c6      	str	r6, [r0, #12]
 800dbe4:	69e6      	ldr	r6, [r4, #28]
 800dbe6:	68f3      	ldr	r3, [r6, #12]
 800dbe8:	b183      	cbz	r3, 800dc0c <_Balloc+0x50>
 800dbea:	69e3      	ldr	r3, [r4, #28]
 800dbec:	68db      	ldr	r3, [r3, #12]
 800dbee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dbf2:	b9b8      	cbnz	r0, 800dc24 <_Balloc+0x68>
 800dbf4:	2101      	movs	r1, #1
 800dbf6:	fa01 f605 	lsl.w	r6, r1, r5
 800dbfa:	1d72      	adds	r2, r6, #5
 800dbfc:	0092      	lsls	r2, r2, #2
 800dbfe:	4620      	mov	r0, r4
 800dc00:	f000 fd96 	bl	800e730 <_calloc_r>
 800dc04:	b160      	cbz	r0, 800dc20 <_Balloc+0x64>
 800dc06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc0a:	e00e      	b.n	800dc2a <_Balloc+0x6e>
 800dc0c:	2221      	movs	r2, #33	; 0x21
 800dc0e:	2104      	movs	r1, #4
 800dc10:	4620      	mov	r0, r4
 800dc12:	f000 fd8d 	bl	800e730 <_calloc_r>
 800dc16:	69e3      	ldr	r3, [r4, #28]
 800dc18:	60f0      	str	r0, [r6, #12]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1e4      	bne.n	800dbea <_Balloc+0x2e>
 800dc20:	2000      	movs	r0, #0
 800dc22:	bd70      	pop	{r4, r5, r6, pc}
 800dc24:	6802      	ldr	r2, [r0, #0]
 800dc26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dc30:	e7f7      	b.n	800dc22 <_Balloc+0x66>
 800dc32:	bf00      	nop
 800dc34:	0800f17e 	.word	0x0800f17e
 800dc38:	0800f26f 	.word	0x0800f26f

0800dc3c <_Bfree>:
 800dc3c:	b570      	push	{r4, r5, r6, lr}
 800dc3e:	69c6      	ldr	r6, [r0, #28]
 800dc40:	4605      	mov	r5, r0
 800dc42:	460c      	mov	r4, r1
 800dc44:	b976      	cbnz	r6, 800dc64 <_Bfree+0x28>
 800dc46:	2010      	movs	r0, #16
 800dc48:	f7ff fe44 	bl	800d8d4 <malloc>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	61e8      	str	r0, [r5, #28]
 800dc50:	b920      	cbnz	r0, 800dc5c <_Bfree+0x20>
 800dc52:	4b09      	ldr	r3, [pc, #36]	; (800dc78 <_Bfree+0x3c>)
 800dc54:	4809      	ldr	r0, [pc, #36]	; (800dc7c <_Bfree+0x40>)
 800dc56:	218f      	movs	r1, #143	; 0x8f
 800dc58:	f000 fd4c 	bl	800e6f4 <__assert_func>
 800dc5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc60:	6006      	str	r6, [r0, #0]
 800dc62:	60c6      	str	r6, [r0, #12]
 800dc64:	b13c      	cbz	r4, 800dc76 <_Bfree+0x3a>
 800dc66:	69eb      	ldr	r3, [r5, #28]
 800dc68:	6862      	ldr	r2, [r4, #4]
 800dc6a:	68db      	ldr	r3, [r3, #12]
 800dc6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc70:	6021      	str	r1, [r4, #0]
 800dc72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	0800f17e 	.word	0x0800f17e
 800dc7c:	0800f26f 	.word	0x0800f26f

0800dc80 <__multadd>:
 800dc80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc84:	690d      	ldr	r5, [r1, #16]
 800dc86:	4607      	mov	r7, r0
 800dc88:	460c      	mov	r4, r1
 800dc8a:	461e      	mov	r6, r3
 800dc8c:	f101 0c14 	add.w	ip, r1, #20
 800dc90:	2000      	movs	r0, #0
 800dc92:	f8dc 3000 	ldr.w	r3, [ip]
 800dc96:	b299      	uxth	r1, r3
 800dc98:	fb02 6101 	mla	r1, r2, r1, r6
 800dc9c:	0c1e      	lsrs	r6, r3, #16
 800dc9e:	0c0b      	lsrs	r3, r1, #16
 800dca0:	fb02 3306 	mla	r3, r2, r6, r3
 800dca4:	b289      	uxth	r1, r1
 800dca6:	3001      	adds	r0, #1
 800dca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dcac:	4285      	cmp	r5, r0
 800dcae:	f84c 1b04 	str.w	r1, [ip], #4
 800dcb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dcb6:	dcec      	bgt.n	800dc92 <__multadd+0x12>
 800dcb8:	b30e      	cbz	r6, 800dcfe <__multadd+0x7e>
 800dcba:	68a3      	ldr	r3, [r4, #8]
 800dcbc:	42ab      	cmp	r3, r5
 800dcbe:	dc19      	bgt.n	800dcf4 <__multadd+0x74>
 800dcc0:	6861      	ldr	r1, [r4, #4]
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	3101      	adds	r1, #1
 800dcc6:	f7ff ff79 	bl	800dbbc <_Balloc>
 800dcca:	4680      	mov	r8, r0
 800dccc:	b928      	cbnz	r0, 800dcda <__multadd+0x5a>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	4b0c      	ldr	r3, [pc, #48]	; (800dd04 <__multadd+0x84>)
 800dcd2:	480d      	ldr	r0, [pc, #52]	; (800dd08 <__multadd+0x88>)
 800dcd4:	21ba      	movs	r1, #186	; 0xba
 800dcd6:	f000 fd0d 	bl	800e6f4 <__assert_func>
 800dcda:	6922      	ldr	r2, [r4, #16]
 800dcdc:	3202      	adds	r2, #2
 800dcde:	f104 010c 	add.w	r1, r4, #12
 800dce2:	0092      	lsls	r2, r2, #2
 800dce4:	300c      	adds	r0, #12
 800dce6:	f7fe fa60 	bl	800c1aa <memcpy>
 800dcea:	4621      	mov	r1, r4
 800dcec:	4638      	mov	r0, r7
 800dcee:	f7ff ffa5 	bl	800dc3c <_Bfree>
 800dcf2:	4644      	mov	r4, r8
 800dcf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dcf8:	3501      	adds	r5, #1
 800dcfa:	615e      	str	r6, [r3, #20]
 800dcfc:	6125      	str	r5, [r4, #16]
 800dcfe:	4620      	mov	r0, r4
 800dd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd04:	0800f1ed 	.word	0x0800f1ed
 800dd08:	0800f26f 	.word	0x0800f26f

0800dd0c <__s2b>:
 800dd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd10:	460c      	mov	r4, r1
 800dd12:	4615      	mov	r5, r2
 800dd14:	461f      	mov	r7, r3
 800dd16:	2209      	movs	r2, #9
 800dd18:	3308      	adds	r3, #8
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd20:	2100      	movs	r1, #0
 800dd22:	2201      	movs	r2, #1
 800dd24:	429a      	cmp	r2, r3
 800dd26:	db09      	blt.n	800dd3c <__s2b+0x30>
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7ff ff47 	bl	800dbbc <_Balloc>
 800dd2e:	b940      	cbnz	r0, 800dd42 <__s2b+0x36>
 800dd30:	4602      	mov	r2, r0
 800dd32:	4b19      	ldr	r3, [pc, #100]	; (800dd98 <__s2b+0x8c>)
 800dd34:	4819      	ldr	r0, [pc, #100]	; (800dd9c <__s2b+0x90>)
 800dd36:	21d3      	movs	r1, #211	; 0xd3
 800dd38:	f000 fcdc 	bl	800e6f4 <__assert_func>
 800dd3c:	0052      	lsls	r2, r2, #1
 800dd3e:	3101      	adds	r1, #1
 800dd40:	e7f0      	b.n	800dd24 <__s2b+0x18>
 800dd42:	9b08      	ldr	r3, [sp, #32]
 800dd44:	6143      	str	r3, [r0, #20]
 800dd46:	2d09      	cmp	r5, #9
 800dd48:	f04f 0301 	mov.w	r3, #1
 800dd4c:	6103      	str	r3, [r0, #16]
 800dd4e:	dd16      	ble.n	800dd7e <__s2b+0x72>
 800dd50:	f104 0909 	add.w	r9, r4, #9
 800dd54:	46c8      	mov	r8, r9
 800dd56:	442c      	add	r4, r5
 800dd58:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dd5c:	4601      	mov	r1, r0
 800dd5e:	3b30      	subs	r3, #48	; 0x30
 800dd60:	220a      	movs	r2, #10
 800dd62:	4630      	mov	r0, r6
 800dd64:	f7ff ff8c 	bl	800dc80 <__multadd>
 800dd68:	45a0      	cmp	r8, r4
 800dd6a:	d1f5      	bne.n	800dd58 <__s2b+0x4c>
 800dd6c:	f1a5 0408 	sub.w	r4, r5, #8
 800dd70:	444c      	add	r4, r9
 800dd72:	1b2d      	subs	r5, r5, r4
 800dd74:	1963      	adds	r3, r4, r5
 800dd76:	42bb      	cmp	r3, r7
 800dd78:	db04      	blt.n	800dd84 <__s2b+0x78>
 800dd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd7e:	340a      	adds	r4, #10
 800dd80:	2509      	movs	r5, #9
 800dd82:	e7f6      	b.n	800dd72 <__s2b+0x66>
 800dd84:	f814 3b01 	ldrb.w	r3, [r4], #1
 800dd88:	4601      	mov	r1, r0
 800dd8a:	3b30      	subs	r3, #48	; 0x30
 800dd8c:	220a      	movs	r2, #10
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f7ff ff76 	bl	800dc80 <__multadd>
 800dd94:	e7ee      	b.n	800dd74 <__s2b+0x68>
 800dd96:	bf00      	nop
 800dd98:	0800f1ed 	.word	0x0800f1ed
 800dd9c:	0800f26f 	.word	0x0800f26f

0800dda0 <__hi0bits>:
 800dda0:	0c03      	lsrs	r3, r0, #16
 800dda2:	041b      	lsls	r3, r3, #16
 800dda4:	b9d3      	cbnz	r3, 800dddc <__hi0bits+0x3c>
 800dda6:	0400      	lsls	r0, r0, #16
 800dda8:	2310      	movs	r3, #16
 800ddaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ddae:	bf04      	itt	eq
 800ddb0:	0200      	lsleq	r0, r0, #8
 800ddb2:	3308      	addeq	r3, #8
 800ddb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ddb8:	bf04      	itt	eq
 800ddba:	0100      	lsleq	r0, r0, #4
 800ddbc:	3304      	addeq	r3, #4
 800ddbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ddc2:	bf04      	itt	eq
 800ddc4:	0080      	lsleq	r0, r0, #2
 800ddc6:	3302      	addeq	r3, #2
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	db05      	blt.n	800ddd8 <__hi0bits+0x38>
 800ddcc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ddd0:	f103 0301 	add.w	r3, r3, #1
 800ddd4:	bf08      	it	eq
 800ddd6:	2320      	moveq	r3, #32
 800ddd8:	4618      	mov	r0, r3
 800ddda:	4770      	bx	lr
 800dddc:	2300      	movs	r3, #0
 800ddde:	e7e4      	b.n	800ddaa <__hi0bits+0xa>

0800dde0 <__lo0bits>:
 800dde0:	6803      	ldr	r3, [r0, #0]
 800dde2:	f013 0207 	ands.w	r2, r3, #7
 800dde6:	d00c      	beq.n	800de02 <__lo0bits+0x22>
 800dde8:	07d9      	lsls	r1, r3, #31
 800ddea:	d422      	bmi.n	800de32 <__lo0bits+0x52>
 800ddec:	079a      	lsls	r2, r3, #30
 800ddee:	bf49      	itett	mi
 800ddf0:	085b      	lsrmi	r3, r3, #1
 800ddf2:	089b      	lsrpl	r3, r3, #2
 800ddf4:	6003      	strmi	r3, [r0, #0]
 800ddf6:	2201      	movmi	r2, #1
 800ddf8:	bf5c      	itt	pl
 800ddfa:	6003      	strpl	r3, [r0, #0]
 800ddfc:	2202      	movpl	r2, #2
 800ddfe:	4610      	mov	r0, r2
 800de00:	4770      	bx	lr
 800de02:	b299      	uxth	r1, r3
 800de04:	b909      	cbnz	r1, 800de0a <__lo0bits+0x2a>
 800de06:	0c1b      	lsrs	r3, r3, #16
 800de08:	2210      	movs	r2, #16
 800de0a:	b2d9      	uxtb	r1, r3
 800de0c:	b909      	cbnz	r1, 800de12 <__lo0bits+0x32>
 800de0e:	3208      	adds	r2, #8
 800de10:	0a1b      	lsrs	r3, r3, #8
 800de12:	0719      	lsls	r1, r3, #28
 800de14:	bf04      	itt	eq
 800de16:	091b      	lsreq	r3, r3, #4
 800de18:	3204      	addeq	r2, #4
 800de1a:	0799      	lsls	r1, r3, #30
 800de1c:	bf04      	itt	eq
 800de1e:	089b      	lsreq	r3, r3, #2
 800de20:	3202      	addeq	r2, #2
 800de22:	07d9      	lsls	r1, r3, #31
 800de24:	d403      	bmi.n	800de2e <__lo0bits+0x4e>
 800de26:	085b      	lsrs	r3, r3, #1
 800de28:	f102 0201 	add.w	r2, r2, #1
 800de2c:	d003      	beq.n	800de36 <__lo0bits+0x56>
 800de2e:	6003      	str	r3, [r0, #0]
 800de30:	e7e5      	b.n	800ddfe <__lo0bits+0x1e>
 800de32:	2200      	movs	r2, #0
 800de34:	e7e3      	b.n	800ddfe <__lo0bits+0x1e>
 800de36:	2220      	movs	r2, #32
 800de38:	e7e1      	b.n	800ddfe <__lo0bits+0x1e>
	...

0800de3c <__i2b>:
 800de3c:	b510      	push	{r4, lr}
 800de3e:	460c      	mov	r4, r1
 800de40:	2101      	movs	r1, #1
 800de42:	f7ff febb 	bl	800dbbc <_Balloc>
 800de46:	4602      	mov	r2, r0
 800de48:	b928      	cbnz	r0, 800de56 <__i2b+0x1a>
 800de4a:	4b05      	ldr	r3, [pc, #20]	; (800de60 <__i2b+0x24>)
 800de4c:	4805      	ldr	r0, [pc, #20]	; (800de64 <__i2b+0x28>)
 800de4e:	f240 1145 	movw	r1, #325	; 0x145
 800de52:	f000 fc4f 	bl	800e6f4 <__assert_func>
 800de56:	2301      	movs	r3, #1
 800de58:	6144      	str	r4, [r0, #20]
 800de5a:	6103      	str	r3, [r0, #16]
 800de5c:	bd10      	pop	{r4, pc}
 800de5e:	bf00      	nop
 800de60:	0800f1ed 	.word	0x0800f1ed
 800de64:	0800f26f 	.word	0x0800f26f

0800de68 <__multiply>:
 800de68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6c:	4691      	mov	r9, r2
 800de6e:	690a      	ldr	r2, [r1, #16]
 800de70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de74:	429a      	cmp	r2, r3
 800de76:	bfb8      	it	lt
 800de78:	460b      	movlt	r3, r1
 800de7a:	460c      	mov	r4, r1
 800de7c:	bfbc      	itt	lt
 800de7e:	464c      	movlt	r4, r9
 800de80:	4699      	movlt	r9, r3
 800de82:	6927      	ldr	r7, [r4, #16]
 800de84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de88:	68a3      	ldr	r3, [r4, #8]
 800de8a:	6861      	ldr	r1, [r4, #4]
 800de8c:	eb07 060a 	add.w	r6, r7, sl
 800de90:	42b3      	cmp	r3, r6
 800de92:	b085      	sub	sp, #20
 800de94:	bfb8      	it	lt
 800de96:	3101      	addlt	r1, #1
 800de98:	f7ff fe90 	bl	800dbbc <_Balloc>
 800de9c:	b930      	cbnz	r0, 800deac <__multiply+0x44>
 800de9e:	4602      	mov	r2, r0
 800dea0:	4b44      	ldr	r3, [pc, #272]	; (800dfb4 <__multiply+0x14c>)
 800dea2:	4845      	ldr	r0, [pc, #276]	; (800dfb8 <__multiply+0x150>)
 800dea4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dea8:	f000 fc24 	bl	800e6f4 <__assert_func>
 800deac:	f100 0514 	add.w	r5, r0, #20
 800deb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800deb4:	462b      	mov	r3, r5
 800deb6:	2200      	movs	r2, #0
 800deb8:	4543      	cmp	r3, r8
 800deba:	d321      	bcc.n	800df00 <__multiply+0x98>
 800debc:	f104 0314 	add.w	r3, r4, #20
 800dec0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dec4:	f109 0314 	add.w	r3, r9, #20
 800dec8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800decc:	9202      	str	r2, [sp, #8]
 800dece:	1b3a      	subs	r2, r7, r4
 800ded0:	3a15      	subs	r2, #21
 800ded2:	f022 0203 	bic.w	r2, r2, #3
 800ded6:	3204      	adds	r2, #4
 800ded8:	f104 0115 	add.w	r1, r4, #21
 800dedc:	428f      	cmp	r7, r1
 800dede:	bf38      	it	cc
 800dee0:	2204      	movcc	r2, #4
 800dee2:	9201      	str	r2, [sp, #4]
 800dee4:	9a02      	ldr	r2, [sp, #8]
 800dee6:	9303      	str	r3, [sp, #12]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d80c      	bhi.n	800df06 <__multiply+0x9e>
 800deec:	2e00      	cmp	r6, #0
 800deee:	dd03      	ble.n	800def8 <__multiply+0x90>
 800def0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800def4:	2b00      	cmp	r3, #0
 800def6:	d05b      	beq.n	800dfb0 <__multiply+0x148>
 800def8:	6106      	str	r6, [r0, #16]
 800defa:	b005      	add	sp, #20
 800defc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df00:	f843 2b04 	str.w	r2, [r3], #4
 800df04:	e7d8      	b.n	800deb8 <__multiply+0x50>
 800df06:	f8b3 a000 	ldrh.w	sl, [r3]
 800df0a:	f1ba 0f00 	cmp.w	sl, #0
 800df0e:	d024      	beq.n	800df5a <__multiply+0xf2>
 800df10:	f104 0e14 	add.w	lr, r4, #20
 800df14:	46a9      	mov	r9, r5
 800df16:	f04f 0c00 	mov.w	ip, #0
 800df1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df1e:	f8d9 1000 	ldr.w	r1, [r9]
 800df22:	fa1f fb82 	uxth.w	fp, r2
 800df26:	b289      	uxth	r1, r1
 800df28:	fb0a 110b 	mla	r1, sl, fp, r1
 800df2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df30:	f8d9 2000 	ldr.w	r2, [r9]
 800df34:	4461      	add	r1, ip
 800df36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df3a:	fb0a c20b 	mla	r2, sl, fp, ip
 800df3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df42:	b289      	uxth	r1, r1
 800df44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df48:	4577      	cmp	r7, lr
 800df4a:	f849 1b04 	str.w	r1, [r9], #4
 800df4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df52:	d8e2      	bhi.n	800df1a <__multiply+0xb2>
 800df54:	9a01      	ldr	r2, [sp, #4]
 800df56:	f845 c002 	str.w	ip, [r5, r2]
 800df5a:	9a03      	ldr	r2, [sp, #12]
 800df5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df60:	3304      	adds	r3, #4
 800df62:	f1b9 0f00 	cmp.w	r9, #0
 800df66:	d021      	beq.n	800dfac <__multiply+0x144>
 800df68:	6829      	ldr	r1, [r5, #0]
 800df6a:	f104 0c14 	add.w	ip, r4, #20
 800df6e:	46ae      	mov	lr, r5
 800df70:	f04f 0a00 	mov.w	sl, #0
 800df74:	f8bc b000 	ldrh.w	fp, [ip]
 800df78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df7c:	fb09 220b 	mla	r2, r9, fp, r2
 800df80:	4452      	add	r2, sl
 800df82:	b289      	uxth	r1, r1
 800df84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df88:	f84e 1b04 	str.w	r1, [lr], #4
 800df8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800df90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df94:	f8be 1000 	ldrh.w	r1, [lr]
 800df98:	fb09 110a 	mla	r1, r9, sl, r1
 800df9c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dfa0:	4567      	cmp	r7, ip
 800dfa2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dfa6:	d8e5      	bhi.n	800df74 <__multiply+0x10c>
 800dfa8:	9a01      	ldr	r2, [sp, #4]
 800dfaa:	50a9      	str	r1, [r5, r2]
 800dfac:	3504      	adds	r5, #4
 800dfae:	e799      	b.n	800dee4 <__multiply+0x7c>
 800dfb0:	3e01      	subs	r6, #1
 800dfb2:	e79b      	b.n	800deec <__multiply+0x84>
 800dfb4:	0800f1ed 	.word	0x0800f1ed
 800dfb8:	0800f26f 	.word	0x0800f26f

0800dfbc <__pow5mult>:
 800dfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfc0:	4615      	mov	r5, r2
 800dfc2:	f012 0203 	ands.w	r2, r2, #3
 800dfc6:	4606      	mov	r6, r0
 800dfc8:	460f      	mov	r7, r1
 800dfca:	d007      	beq.n	800dfdc <__pow5mult+0x20>
 800dfcc:	4c25      	ldr	r4, [pc, #148]	; (800e064 <__pow5mult+0xa8>)
 800dfce:	3a01      	subs	r2, #1
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfd6:	f7ff fe53 	bl	800dc80 <__multadd>
 800dfda:	4607      	mov	r7, r0
 800dfdc:	10ad      	asrs	r5, r5, #2
 800dfde:	d03d      	beq.n	800e05c <__pow5mult+0xa0>
 800dfe0:	69f4      	ldr	r4, [r6, #28]
 800dfe2:	b97c      	cbnz	r4, 800e004 <__pow5mult+0x48>
 800dfe4:	2010      	movs	r0, #16
 800dfe6:	f7ff fc75 	bl	800d8d4 <malloc>
 800dfea:	4602      	mov	r2, r0
 800dfec:	61f0      	str	r0, [r6, #28]
 800dfee:	b928      	cbnz	r0, 800dffc <__pow5mult+0x40>
 800dff0:	4b1d      	ldr	r3, [pc, #116]	; (800e068 <__pow5mult+0xac>)
 800dff2:	481e      	ldr	r0, [pc, #120]	; (800e06c <__pow5mult+0xb0>)
 800dff4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dff8:	f000 fb7c 	bl	800e6f4 <__assert_func>
 800dffc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e000:	6004      	str	r4, [r0, #0]
 800e002:	60c4      	str	r4, [r0, #12]
 800e004:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800e008:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e00c:	b94c      	cbnz	r4, 800e022 <__pow5mult+0x66>
 800e00e:	f240 2171 	movw	r1, #625	; 0x271
 800e012:	4630      	mov	r0, r6
 800e014:	f7ff ff12 	bl	800de3c <__i2b>
 800e018:	2300      	movs	r3, #0
 800e01a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e01e:	4604      	mov	r4, r0
 800e020:	6003      	str	r3, [r0, #0]
 800e022:	f04f 0900 	mov.w	r9, #0
 800e026:	07eb      	lsls	r3, r5, #31
 800e028:	d50a      	bpl.n	800e040 <__pow5mult+0x84>
 800e02a:	4639      	mov	r1, r7
 800e02c:	4622      	mov	r2, r4
 800e02e:	4630      	mov	r0, r6
 800e030:	f7ff ff1a 	bl	800de68 <__multiply>
 800e034:	4639      	mov	r1, r7
 800e036:	4680      	mov	r8, r0
 800e038:	4630      	mov	r0, r6
 800e03a:	f7ff fdff 	bl	800dc3c <_Bfree>
 800e03e:	4647      	mov	r7, r8
 800e040:	106d      	asrs	r5, r5, #1
 800e042:	d00b      	beq.n	800e05c <__pow5mult+0xa0>
 800e044:	6820      	ldr	r0, [r4, #0]
 800e046:	b938      	cbnz	r0, 800e058 <__pow5mult+0x9c>
 800e048:	4622      	mov	r2, r4
 800e04a:	4621      	mov	r1, r4
 800e04c:	4630      	mov	r0, r6
 800e04e:	f7ff ff0b 	bl	800de68 <__multiply>
 800e052:	6020      	str	r0, [r4, #0]
 800e054:	f8c0 9000 	str.w	r9, [r0]
 800e058:	4604      	mov	r4, r0
 800e05a:	e7e4      	b.n	800e026 <__pow5mult+0x6a>
 800e05c:	4638      	mov	r0, r7
 800e05e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e062:	bf00      	nop
 800e064:	0800f3b8 	.word	0x0800f3b8
 800e068:	0800f17e 	.word	0x0800f17e
 800e06c:	0800f26f 	.word	0x0800f26f

0800e070 <__lshift>:
 800e070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e074:	460c      	mov	r4, r1
 800e076:	6849      	ldr	r1, [r1, #4]
 800e078:	6923      	ldr	r3, [r4, #16]
 800e07a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e07e:	68a3      	ldr	r3, [r4, #8]
 800e080:	4607      	mov	r7, r0
 800e082:	4691      	mov	r9, r2
 800e084:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e088:	f108 0601 	add.w	r6, r8, #1
 800e08c:	42b3      	cmp	r3, r6
 800e08e:	db0b      	blt.n	800e0a8 <__lshift+0x38>
 800e090:	4638      	mov	r0, r7
 800e092:	f7ff fd93 	bl	800dbbc <_Balloc>
 800e096:	4605      	mov	r5, r0
 800e098:	b948      	cbnz	r0, 800e0ae <__lshift+0x3e>
 800e09a:	4602      	mov	r2, r0
 800e09c:	4b28      	ldr	r3, [pc, #160]	; (800e140 <__lshift+0xd0>)
 800e09e:	4829      	ldr	r0, [pc, #164]	; (800e144 <__lshift+0xd4>)
 800e0a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e0a4:	f000 fb26 	bl	800e6f4 <__assert_func>
 800e0a8:	3101      	adds	r1, #1
 800e0aa:	005b      	lsls	r3, r3, #1
 800e0ac:	e7ee      	b.n	800e08c <__lshift+0x1c>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f100 0114 	add.w	r1, r0, #20
 800e0b4:	f100 0210 	add.w	r2, r0, #16
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	4553      	cmp	r3, sl
 800e0bc:	db33      	blt.n	800e126 <__lshift+0xb6>
 800e0be:	6920      	ldr	r0, [r4, #16]
 800e0c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0c4:	f104 0314 	add.w	r3, r4, #20
 800e0c8:	f019 091f 	ands.w	r9, r9, #31
 800e0cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0d4:	d02b      	beq.n	800e12e <__lshift+0xbe>
 800e0d6:	f1c9 0e20 	rsb	lr, r9, #32
 800e0da:	468a      	mov	sl, r1
 800e0dc:	2200      	movs	r2, #0
 800e0de:	6818      	ldr	r0, [r3, #0]
 800e0e0:	fa00 f009 	lsl.w	r0, r0, r9
 800e0e4:	4310      	orrs	r0, r2
 800e0e6:	f84a 0b04 	str.w	r0, [sl], #4
 800e0ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0ee:	459c      	cmp	ip, r3
 800e0f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0f4:	d8f3      	bhi.n	800e0de <__lshift+0x6e>
 800e0f6:	ebac 0304 	sub.w	r3, ip, r4
 800e0fa:	3b15      	subs	r3, #21
 800e0fc:	f023 0303 	bic.w	r3, r3, #3
 800e100:	3304      	adds	r3, #4
 800e102:	f104 0015 	add.w	r0, r4, #21
 800e106:	4584      	cmp	ip, r0
 800e108:	bf38      	it	cc
 800e10a:	2304      	movcc	r3, #4
 800e10c:	50ca      	str	r2, [r1, r3]
 800e10e:	b10a      	cbz	r2, 800e114 <__lshift+0xa4>
 800e110:	f108 0602 	add.w	r6, r8, #2
 800e114:	3e01      	subs	r6, #1
 800e116:	4638      	mov	r0, r7
 800e118:	612e      	str	r6, [r5, #16]
 800e11a:	4621      	mov	r1, r4
 800e11c:	f7ff fd8e 	bl	800dc3c <_Bfree>
 800e120:	4628      	mov	r0, r5
 800e122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e126:	f842 0f04 	str.w	r0, [r2, #4]!
 800e12a:	3301      	adds	r3, #1
 800e12c:	e7c5      	b.n	800e0ba <__lshift+0x4a>
 800e12e:	3904      	subs	r1, #4
 800e130:	f853 2b04 	ldr.w	r2, [r3], #4
 800e134:	f841 2f04 	str.w	r2, [r1, #4]!
 800e138:	459c      	cmp	ip, r3
 800e13a:	d8f9      	bhi.n	800e130 <__lshift+0xc0>
 800e13c:	e7ea      	b.n	800e114 <__lshift+0xa4>
 800e13e:	bf00      	nop
 800e140:	0800f1ed 	.word	0x0800f1ed
 800e144:	0800f26f 	.word	0x0800f26f

0800e148 <__mcmp>:
 800e148:	b530      	push	{r4, r5, lr}
 800e14a:	6902      	ldr	r2, [r0, #16]
 800e14c:	690c      	ldr	r4, [r1, #16]
 800e14e:	1b12      	subs	r2, r2, r4
 800e150:	d10e      	bne.n	800e170 <__mcmp+0x28>
 800e152:	f100 0314 	add.w	r3, r0, #20
 800e156:	3114      	adds	r1, #20
 800e158:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e15c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e160:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e164:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e168:	42a5      	cmp	r5, r4
 800e16a:	d003      	beq.n	800e174 <__mcmp+0x2c>
 800e16c:	d305      	bcc.n	800e17a <__mcmp+0x32>
 800e16e:	2201      	movs	r2, #1
 800e170:	4610      	mov	r0, r2
 800e172:	bd30      	pop	{r4, r5, pc}
 800e174:	4283      	cmp	r3, r0
 800e176:	d3f3      	bcc.n	800e160 <__mcmp+0x18>
 800e178:	e7fa      	b.n	800e170 <__mcmp+0x28>
 800e17a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e17e:	e7f7      	b.n	800e170 <__mcmp+0x28>

0800e180 <__mdiff>:
 800e180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e184:	460c      	mov	r4, r1
 800e186:	4606      	mov	r6, r0
 800e188:	4611      	mov	r1, r2
 800e18a:	4620      	mov	r0, r4
 800e18c:	4690      	mov	r8, r2
 800e18e:	f7ff ffdb 	bl	800e148 <__mcmp>
 800e192:	1e05      	subs	r5, r0, #0
 800e194:	d110      	bne.n	800e1b8 <__mdiff+0x38>
 800e196:	4629      	mov	r1, r5
 800e198:	4630      	mov	r0, r6
 800e19a:	f7ff fd0f 	bl	800dbbc <_Balloc>
 800e19e:	b930      	cbnz	r0, 800e1ae <__mdiff+0x2e>
 800e1a0:	4b3a      	ldr	r3, [pc, #232]	; (800e28c <__mdiff+0x10c>)
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	f240 2137 	movw	r1, #567	; 0x237
 800e1a8:	4839      	ldr	r0, [pc, #228]	; (800e290 <__mdiff+0x110>)
 800e1aa:	f000 faa3 	bl	800e6f4 <__assert_func>
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1b8:	bfa4      	itt	ge
 800e1ba:	4643      	movge	r3, r8
 800e1bc:	46a0      	movge	r8, r4
 800e1be:	4630      	mov	r0, r6
 800e1c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1c4:	bfa6      	itte	ge
 800e1c6:	461c      	movge	r4, r3
 800e1c8:	2500      	movge	r5, #0
 800e1ca:	2501      	movlt	r5, #1
 800e1cc:	f7ff fcf6 	bl	800dbbc <_Balloc>
 800e1d0:	b920      	cbnz	r0, 800e1dc <__mdiff+0x5c>
 800e1d2:	4b2e      	ldr	r3, [pc, #184]	; (800e28c <__mdiff+0x10c>)
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	f240 2145 	movw	r1, #581	; 0x245
 800e1da:	e7e5      	b.n	800e1a8 <__mdiff+0x28>
 800e1dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1e0:	6926      	ldr	r6, [r4, #16]
 800e1e2:	60c5      	str	r5, [r0, #12]
 800e1e4:	f104 0914 	add.w	r9, r4, #20
 800e1e8:	f108 0514 	add.w	r5, r8, #20
 800e1ec:	f100 0e14 	add.w	lr, r0, #20
 800e1f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e1f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e1f8:	f108 0210 	add.w	r2, r8, #16
 800e1fc:	46f2      	mov	sl, lr
 800e1fe:	2100      	movs	r1, #0
 800e200:	f859 3b04 	ldr.w	r3, [r9], #4
 800e204:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e208:	fa11 f88b 	uxtah	r8, r1, fp
 800e20c:	b299      	uxth	r1, r3
 800e20e:	0c1b      	lsrs	r3, r3, #16
 800e210:	eba8 0801 	sub.w	r8, r8, r1
 800e214:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e218:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e21c:	fa1f f888 	uxth.w	r8, r8
 800e220:	1419      	asrs	r1, r3, #16
 800e222:	454e      	cmp	r6, r9
 800e224:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e228:	f84a 3b04 	str.w	r3, [sl], #4
 800e22c:	d8e8      	bhi.n	800e200 <__mdiff+0x80>
 800e22e:	1b33      	subs	r3, r6, r4
 800e230:	3b15      	subs	r3, #21
 800e232:	f023 0303 	bic.w	r3, r3, #3
 800e236:	3304      	adds	r3, #4
 800e238:	3415      	adds	r4, #21
 800e23a:	42a6      	cmp	r6, r4
 800e23c:	bf38      	it	cc
 800e23e:	2304      	movcc	r3, #4
 800e240:	441d      	add	r5, r3
 800e242:	4473      	add	r3, lr
 800e244:	469e      	mov	lr, r3
 800e246:	462e      	mov	r6, r5
 800e248:	4566      	cmp	r6, ip
 800e24a:	d30e      	bcc.n	800e26a <__mdiff+0xea>
 800e24c:	f10c 0203 	add.w	r2, ip, #3
 800e250:	1b52      	subs	r2, r2, r5
 800e252:	f022 0203 	bic.w	r2, r2, #3
 800e256:	3d03      	subs	r5, #3
 800e258:	45ac      	cmp	ip, r5
 800e25a:	bf38      	it	cc
 800e25c:	2200      	movcc	r2, #0
 800e25e:	4413      	add	r3, r2
 800e260:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e264:	b17a      	cbz	r2, 800e286 <__mdiff+0x106>
 800e266:	6107      	str	r7, [r0, #16]
 800e268:	e7a4      	b.n	800e1b4 <__mdiff+0x34>
 800e26a:	f856 8b04 	ldr.w	r8, [r6], #4
 800e26e:	fa11 f288 	uxtah	r2, r1, r8
 800e272:	1414      	asrs	r4, r2, #16
 800e274:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e278:	b292      	uxth	r2, r2
 800e27a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e27e:	f84e 2b04 	str.w	r2, [lr], #4
 800e282:	1421      	asrs	r1, r4, #16
 800e284:	e7e0      	b.n	800e248 <__mdiff+0xc8>
 800e286:	3f01      	subs	r7, #1
 800e288:	e7ea      	b.n	800e260 <__mdiff+0xe0>
 800e28a:	bf00      	nop
 800e28c:	0800f1ed 	.word	0x0800f1ed
 800e290:	0800f26f 	.word	0x0800f26f

0800e294 <__ulp>:
 800e294:	b082      	sub	sp, #8
 800e296:	ed8d 0b00 	vstr	d0, [sp]
 800e29a:	9a01      	ldr	r2, [sp, #4]
 800e29c:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <__ulp+0x48>)
 800e29e:	4013      	ands	r3, r2
 800e2a0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	dc08      	bgt.n	800e2ba <__ulp+0x26>
 800e2a8:	425b      	negs	r3, r3
 800e2aa:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800e2ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e2b2:	da04      	bge.n	800e2be <__ulp+0x2a>
 800e2b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e2b8:	4113      	asrs	r3, r2
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	e008      	b.n	800e2d0 <__ulp+0x3c>
 800e2be:	f1a2 0314 	sub.w	r3, r2, #20
 800e2c2:	2b1e      	cmp	r3, #30
 800e2c4:	bfda      	itte	le
 800e2c6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800e2ca:	40da      	lsrle	r2, r3
 800e2cc:	2201      	movgt	r2, #1
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	ec41 0b10 	vmov	d0, r0, r1
 800e2d8:	b002      	add	sp, #8
 800e2da:	4770      	bx	lr
 800e2dc:	7ff00000 	.word	0x7ff00000

0800e2e0 <__b2d>:
 800e2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2e4:	6906      	ldr	r6, [r0, #16]
 800e2e6:	f100 0814 	add.w	r8, r0, #20
 800e2ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e2ee:	1f37      	subs	r7, r6, #4
 800e2f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e2f4:	4610      	mov	r0, r2
 800e2f6:	f7ff fd53 	bl	800dda0 <__hi0bits>
 800e2fa:	f1c0 0320 	rsb	r3, r0, #32
 800e2fe:	280a      	cmp	r0, #10
 800e300:	600b      	str	r3, [r1, #0]
 800e302:	491b      	ldr	r1, [pc, #108]	; (800e370 <__b2d+0x90>)
 800e304:	dc15      	bgt.n	800e332 <__b2d+0x52>
 800e306:	f1c0 0c0b 	rsb	ip, r0, #11
 800e30a:	fa22 f30c 	lsr.w	r3, r2, ip
 800e30e:	45b8      	cmp	r8, r7
 800e310:	ea43 0501 	orr.w	r5, r3, r1
 800e314:	bf34      	ite	cc
 800e316:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e31a:	2300      	movcs	r3, #0
 800e31c:	3015      	adds	r0, #21
 800e31e:	fa02 f000 	lsl.w	r0, r2, r0
 800e322:	fa23 f30c 	lsr.w	r3, r3, ip
 800e326:	4303      	orrs	r3, r0
 800e328:	461c      	mov	r4, r3
 800e32a:	ec45 4b10 	vmov	d0, r4, r5
 800e32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e332:	45b8      	cmp	r8, r7
 800e334:	bf3a      	itte	cc
 800e336:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e33a:	f1a6 0708 	subcc.w	r7, r6, #8
 800e33e:	2300      	movcs	r3, #0
 800e340:	380b      	subs	r0, #11
 800e342:	d012      	beq.n	800e36a <__b2d+0x8a>
 800e344:	f1c0 0120 	rsb	r1, r0, #32
 800e348:	fa23 f401 	lsr.w	r4, r3, r1
 800e34c:	4082      	lsls	r2, r0
 800e34e:	4322      	orrs	r2, r4
 800e350:	4547      	cmp	r7, r8
 800e352:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800e356:	bf8c      	ite	hi
 800e358:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e35c:	2200      	movls	r2, #0
 800e35e:	4083      	lsls	r3, r0
 800e360:	40ca      	lsrs	r2, r1
 800e362:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e366:	4313      	orrs	r3, r2
 800e368:	e7de      	b.n	800e328 <__b2d+0x48>
 800e36a:	ea42 0501 	orr.w	r5, r2, r1
 800e36e:	e7db      	b.n	800e328 <__b2d+0x48>
 800e370:	3ff00000 	.word	0x3ff00000

0800e374 <__d2b>:
 800e374:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e378:	460f      	mov	r7, r1
 800e37a:	2101      	movs	r1, #1
 800e37c:	ec59 8b10 	vmov	r8, r9, d0
 800e380:	4616      	mov	r6, r2
 800e382:	f7ff fc1b 	bl	800dbbc <_Balloc>
 800e386:	4604      	mov	r4, r0
 800e388:	b930      	cbnz	r0, 800e398 <__d2b+0x24>
 800e38a:	4602      	mov	r2, r0
 800e38c:	4b24      	ldr	r3, [pc, #144]	; (800e420 <__d2b+0xac>)
 800e38e:	4825      	ldr	r0, [pc, #148]	; (800e424 <__d2b+0xb0>)
 800e390:	f240 310f 	movw	r1, #783	; 0x30f
 800e394:	f000 f9ae 	bl	800e6f4 <__assert_func>
 800e398:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e39c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e3a0:	bb2d      	cbnz	r5, 800e3ee <__d2b+0x7a>
 800e3a2:	9301      	str	r3, [sp, #4]
 800e3a4:	f1b8 0300 	subs.w	r3, r8, #0
 800e3a8:	d026      	beq.n	800e3f8 <__d2b+0x84>
 800e3aa:	4668      	mov	r0, sp
 800e3ac:	9300      	str	r3, [sp, #0]
 800e3ae:	f7ff fd17 	bl	800dde0 <__lo0bits>
 800e3b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e3b6:	b1e8      	cbz	r0, 800e3f4 <__d2b+0x80>
 800e3b8:	f1c0 0320 	rsb	r3, r0, #32
 800e3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e3c0:	430b      	orrs	r3, r1
 800e3c2:	40c2      	lsrs	r2, r0
 800e3c4:	6163      	str	r3, [r4, #20]
 800e3c6:	9201      	str	r2, [sp, #4]
 800e3c8:	9b01      	ldr	r3, [sp, #4]
 800e3ca:	61a3      	str	r3, [r4, #24]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	bf14      	ite	ne
 800e3d0:	2202      	movne	r2, #2
 800e3d2:	2201      	moveq	r2, #1
 800e3d4:	6122      	str	r2, [r4, #16]
 800e3d6:	b1bd      	cbz	r5, 800e408 <__d2b+0x94>
 800e3d8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e3dc:	4405      	add	r5, r0
 800e3de:	603d      	str	r5, [r7, #0]
 800e3e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e3e4:	6030      	str	r0, [r6, #0]
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	b003      	add	sp, #12
 800e3ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e3f2:	e7d6      	b.n	800e3a2 <__d2b+0x2e>
 800e3f4:	6161      	str	r1, [r4, #20]
 800e3f6:	e7e7      	b.n	800e3c8 <__d2b+0x54>
 800e3f8:	a801      	add	r0, sp, #4
 800e3fa:	f7ff fcf1 	bl	800dde0 <__lo0bits>
 800e3fe:	9b01      	ldr	r3, [sp, #4]
 800e400:	6163      	str	r3, [r4, #20]
 800e402:	3020      	adds	r0, #32
 800e404:	2201      	movs	r2, #1
 800e406:	e7e5      	b.n	800e3d4 <__d2b+0x60>
 800e408:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e40c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e410:	6038      	str	r0, [r7, #0]
 800e412:	6918      	ldr	r0, [r3, #16]
 800e414:	f7ff fcc4 	bl	800dda0 <__hi0bits>
 800e418:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e41c:	e7e2      	b.n	800e3e4 <__d2b+0x70>
 800e41e:	bf00      	nop
 800e420:	0800f1ed 	.word	0x0800f1ed
 800e424:	0800f26f 	.word	0x0800f26f

0800e428 <__ratio>:
 800e428:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e42c:	4688      	mov	r8, r1
 800e42e:	4669      	mov	r1, sp
 800e430:	4681      	mov	r9, r0
 800e432:	f7ff ff55 	bl	800e2e0 <__b2d>
 800e436:	a901      	add	r1, sp, #4
 800e438:	4640      	mov	r0, r8
 800e43a:	ec55 4b10 	vmov	r4, r5, d0
 800e43e:	f7ff ff4f 	bl	800e2e0 <__b2d>
 800e442:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e446:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e44a:	eba3 0c02 	sub.w	ip, r3, r2
 800e44e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e452:	1a9b      	subs	r3, r3, r2
 800e454:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e458:	ec51 0b10 	vmov	r0, r1, d0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	bfd6      	itet	le
 800e460:	460a      	movle	r2, r1
 800e462:	462a      	movgt	r2, r5
 800e464:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e468:	468b      	mov	fp, r1
 800e46a:	462f      	mov	r7, r5
 800e46c:	bfd4      	ite	le
 800e46e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e472:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e476:	4620      	mov	r0, r4
 800e478:	ee10 2a10 	vmov	r2, s0
 800e47c:	465b      	mov	r3, fp
 800e47e:	4639      	mov	r1, r7
 800e480:	f7f2 f9fc 	bl	800087c <__aeabi_ddiv>
 800e484:	ec41 0b10 	vmov	d0, r0, r1
 800e488:	b003      	add	sp, #12
 800e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e48e <__copybits>:
 800e48e:	3901      	subs	r1, #1
 800e490:	b570      	push	{r4, r5, r6, lr}
 800e492:	1149      	asrs	r1, r1, #5
 800e494:	6914      	ldr	r4, [r2, #16]
 800e496:	3101      	adds	r1, #1
 800e498:	f102 0314 	add.w	r3, r2, #20
 800e49c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e4a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e4a4:	1f05      	subs	r5, r0, #4
 800e4a6:	42a3      	cmp	r3, r4
 800e4a8:	d30c      	bcc.n	800e4c4 <__copybits+0x36>
 800e4aa:	1aa3      	subs	r3, r4, r2
 800e4ac:	3b11      	subs	r3, #17
 800e4ae:	f023 0303 	bic.w	r3, r3, #3
 800e4b2:	3211      	adds	r2, #17
 800e4b4:	42a2      	cmp	r2, r4
 800e4b6:	bf88      	it	hi
 800e4b8:	2300      	movhi	r3, #0
 800e4ba:	4418      	add	r0, r3
 800e4bc:	2300      	movs	r3, #0
 800e4be:	4288      	cmp	r0, r1
 800e4c0:	d305      	bcc.n	800e4ce <__copybits+0x40>
 800e4c2:	bd70      	pop	{r4, r5, r6, pc}
 800e4c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800e4c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800e4cc:	e7eb      	b.n	800e4a6 <__copybits+0x18>
 800e4ce:	f840 3b04 	str.w	r3, [r0], #4
 800e4d2:	e7f4      	b.n	800e4be <__copybits+0x30>

0800e4d4 <__any_on>:
 800e4d4:	f100 0214 	add.w	r2, r0, #20
 800e4d8:	6900      	ldr	r0, [r0, #16]
 800e4da:	114b      	asrs	r3, r1, #5
 800e4dc:	4298      	cmp	r0, r3
 800e4de:	b510      	push	{r4, lr}
 800e4e0:	db11      	blt.n	800e506 <__any_on+0x32>
 800e4e2:	dd0a      	ble.n	800e4fa <__any_on+0x26>
 800e4e4:	f011 011f 	ands.w	r1, r1, #31
 800e4e8:	d007      	beq.n	800e4fa <__any_on+0x26>
 800e4ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e4ee:	fa24 f001 	lsr.w	r0, r4, r1
 800e4f2:	fa00 f101 	lsl.w	r1, r0, r1
 800e4f6:	428c      	cmp	r4, r1
 800e4f8:	d10b      	bne.n	800e512 <__any_on+0x3e>
 800e4fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d803      	bhi.n	800e50a <__any_on+0x36>
 800e502:	2000      	movs	r0, #0
 800e504:	bd10      	pop	{r4, pc}
 800e506:	4603      	mov	r3, r0
 800e508:	e7f7      	b.n	800e4fa <__any_on+0x26>
 800e50a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e50e:	2900      	cmp	r1, #0
 800e510:	d0f5      	beq.n	800e4fe <__any_on+0x2a>
 800e512:	2001      	movs	r0, #1
 800e514:	e7f6      	b.n	800e504 <__any_on+0x30>

0800e516 <__sread>:
 800e516:	b510      	push	{r4, lr}
 800e518:	460c      	mov	r4, r1
 800e51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e51e:	f000 f8b5 	bl	800e68c <_read_r>
 800e522:	2800      	cmp	r0, #0
 800e524:	bfab      	itete	ge
 800e526:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e528:	89a3      	ldrhlt	r3, [r4, #12]
 800e52a:	181b      	addge	r3, r3, r0
 800e52c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e530:	bfac      	ite	ge
 800e532:	6563      	strge	r3, [r4, #84]	; 0x54
 800e534:	81a3      	strhlt	r3, [r4, #12]
 800e536:	bd10      	pop	{r4, pc}

0800e538 <__swrite>:
 800e538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e53c:	461f      	mov	r7, r3
 800e53e:	898b      	ldrh	r3, [r1, #12]
 800e540:	05db      	lsls	r3, r3, #23
 800e542:	4605      	mov	r5, r0
 800e544:	460c      	mov	r4, r1
 800e546:	4616      	mov	r6, r2
 800e548:	d505      	bpl.n	800e556 <__swrite+0x1e>
 800e54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e54e:	2302      	movs	r3, #2
 800e550:	2200      	movs	r2, #0
 800e552:	f000 f889 	bl	800e668 <_lseek_r>
 800e556:	89a3      	ldrh	r3, [r4, #12]
 800e558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e55c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e560:	81a3      	strh	r3, [r4, #12]
 800e562:	4632      	mov	r2, r6
 800e564:	463b      	mov	r3, r7
 800e566:	4628      	mov	r0, r5
 800e568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e56c:	f000 b8b0 	b.w	800e6d0 <_write_r>

0800e570 <__sseek>:
 800e570:	b510      	push	{r4, lr}
 800e572:	460c      	mov	r4, r1
 800e574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e578:	f000 f876 	bl	800e668 <_lseek_r>
 800e57c:	1c43      	adds	r3, r0, #1
 800e57e:	89a3      	ldrh	r3, [r4, #12]
 800e580:	bf15      	itete	ne
 800e582:	6560      	strne	r0, [r4, #84]	; 0x54
 800e584:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e588:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e58c:	81a3      	strheq	r3, [r4, #12]
 800e58e:	bf18      	it	ne
 800e590:	81a3      	strhne	r3, [r4, #12]
 800e592:	bd10      	pop	{r4, pc}

0800e594 <__sclose>:
 800e594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e598:	f000 b856 	b.w	800e648 <_close_r>

0800e59c <_realloc_r>:
 800e59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a0:	4680      	mov	r8, r0
 800e5a2:	4614      	mov	r4, r2
 800e5a4:	460e      	mov	r6, r1
 800e5a6:	b921      	cbnz	r1, 800e5b2 <_realloc_r+0x16>
 800e5a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	f7ff b9b9 	b.w	800d924 <_malloc_r>
 800e5b2:	b92a      	cbnz	r2, 800e5c0 <_realloc_r+0x24>
 800e5b4:	f7fe fc92 	bl	800cedc <_free_r>
 800e5b8:	4625      	mov	r5, r4
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5c0:	f000 f8cc 	bl	800e75c <_malloc_usable_size_r>
 800e5c4:	4284      	cmp	r4, r0
 800e5c6:	4607      	mov	r7, r0
 800e5c8:	d802      	bhi.n	800e5d0 <_realloc_r+0x34>
 800e5ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e5ce:	d812      	bhi.n	800e5f6 <_realloc_r+0x5a>
 800e5d0:	4621      	mov	r1, r4
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	f7ff f9a6 	bl	800d924 <_malloc_r>
 800e5d8:	4605      	mov	r5, r0
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	d0ed      	beq.n	800e5ba <_realloc_r+0x1e>
 800e5de:	42bc      	cmp	r4, r7
 800e5e0:	4622      	mov	r2, r4
 800e5e2:	4631      	mov	r1, r6
 800e5e4:	bf28      	it	cs
 800e5e6:	463a      	movcs	r2, r7
 800e5e8:	f7fd fddf 	bl	800c1aa <memcpy>
 800e5ec:	4631      	mov	r1, r6
 800e5ee:	4640      	mov	r0, r8
 800e5f0:	f7fe fc74 	bl	800cedc <_free_r>
 800e5f4:	e7e1      	b.n	800e5ba <_realloc_r+0x1e>
 800e5f6:	4635      	mov	r5, r6
 800e5f8:	e7df      	b.n	800e5ba <_realloc_r+0x1e>

0800e5fa <__ascii_wctomb>:
 800e5fa:	b149      	cbz	r1, 800e610 <__ascii_wctomb+0x16>
 800e5fc:	2aff      	cmp	r2, #255	; 0xff
 800e5fe:	bf85      	ittet	hi
 800e600:	238a      	movhi	r3, #138	; 0x8a
 800e602:	6003      	strhi	r3, [r0, #0]
 800e604:	700a      	strbls	r2, [r1, #0]
 800e606:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e60a:	bf98      	it	ls
 800e60c:	2001      	movls	r0, #1
 800e60e:	4770      	bx	lr
 800e610:	4608      	mov	r0, r1
 800e612:	4770      	bx	lr

0800e614 <memmove>:
 800e614:	4288      	cmp	r0, r1
 800e616:	b510      	push	{r4, lr}
 800e618:	eb01 0402 	add.w	r4, r1, r2
 800e61c:	d902      	bls.n	800e624 <memmove+0x10>
 800e61e:	4284      	cmp	r4, r0
 800e620:	4623      	mov	r3, r4
 800e622:	d807      	bhi.n	800e634 <memmove+0x20>
 800e624:	1e43      	subs	r3, r0, #1
 800e626:	42a1      	cmp	r1, r4
 800e628:	d008      	beq.n	800e63c <memmove+0x28>
 800e62a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e62e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e632:	e7f8      	b.n	800e626 <memmove+0x12>
 800e634:	4402      	add	r2, r0
 800e636:	4601      	mov	r1, r0
 800e638:	428a      	cmp	r2, r1
 800e63a:	d100      	bne.n	800e63e <memmove+0x2a>
 800e63c:	bd10      	pop	{r4, pc}
 800e63e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e646:	e7f7      	b.n	800e638 <memmove+0x24>

0800e648 <_close_r>:
 800e648:	b538      	push	{r3, r4, r5, lr}
 800e64a:	4d06      	ldr	r5, [pc, #24]	; (800e664 <_close_r+0x1c>)
 800e64c:	2300      	movs	r3, #0
 800e64e:	4604      	mov	r4, r0
 800e650:	4608      	mov	r0, r1
 800e652:	602b      	str	r3, [r5, #0]
 800e654:	f7f5 fad3 	bl	8003bfe <_close>
 800e658:	1c43      	adds	r3, r0, #1
 800e65a:	d102      	bne.n	800e662 <_close_r+0x1a>
 800e65c:	682b      	ldr	r3, [r5, #0]
 800e65e:	b103      	cbz	r3, 800e662 <_close_r+0x1a>
 800e660:	6023      	str	r3, [r4, #0]
 800e662:	bd38      	pop	{r3, r4, r5, pc}
 800e664:	20001660 	.word	0x20001660

0800e668 <_lseek_r>:
 800e668:	b538      	push	{r3, r4, r5, lr}
 800e66a:	4d07      	ldr	r5, [pc, #28]	; (800e688 <_lseek_r+0x20>)
 800e66c:	4604      	mov	r4, r0
 800e66e:	4608      	mov	r0, r1
 800e670:	4611      	mov	r1, r2
 800e672:	2200      	movs	r2, #0
 800e674:	602a      	str	r2, [r5, #0]
 800e676:	461a      	mov	r2, r3
 800e678:	f7f5 fae8 	bl	8003c4c <_lseek>
 800e67c:	1c43      	adds	r3, r0, #1
 800e67e:	d102      	bne.n	800e686 <_lseek_r+0x1e>
 800e680:	682b      	ldr	r3, [r5, #0]
 800e682:	b103      	cbz	r3, 800e686 <_lseek_r+0x1e>
 800e684:	6023      	str	r3, [r4, #0]
 800e686:	bd38      	pop	{r3, r4, r5, pc}
 800e688:	20001660 	.word	0x20001660

0800e68c <_read_r>:
 800e68c:	b538      	push	{r3, r4, r5, lr}
 800e68e:	4d07      	ldr	r5, [pc, #28]	; (800e6ac <_read_r+0x20>)
 800e690:	4604      	mov	r4, r0
 800e692:	4608      	mov	r0, r1
 800e694:	4611      	mov	r1, r2
 800e696:	2200      	movs	r2, #0
 800e698:	602a      	str	r2, [r5, #0]
 800e69a:	461a      	mov	r2, r3
 800e69c:	f7f5 fa76 	bl	8003b8c <_read>
 800e6a0:	1c43      	adds	r3, r0, #1
 800e6a2:	d102      	bne.n	800e6aa <_read_r+0x1e>
 800e6a4:	682b      	ldr	r3, [r5, #0]
 800e6a6:	b103      	cbz	r3, 800e6aa <_read_r+0x1e>
 800e6a8:	6023      	str	r3, [r4, #0]
 800e6aa:	bd38      	pop	{r3, r4, r5, pc}
 800e6ac:	20001660 	.word	0x20001660

0800e6b0 <_sbrk_r>:
 800e6b0:	b538      	push	{r3, r4, r5, lr}
 800e6b2:	4d06      	ldr	r5, [pc, #24]	; (800e6cc <_sbrk_r+0x1c>)
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	4608      	mov	r0, r1
 800e6ba:	602b      	str	r3, [r5, #0]
 800e6bc:	f7f5 fad4 	bl	8003c68 <_sbrk>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	d102      	bne.n	800e6ca <_sbrk_r+0x1a>
 800e6c4:	682b      	ldr	r3, [r5, #0]
 800e6c6:	b103      	cbz	r3, 800e6ca <_sbrk_r+0x1a>
 800e6c8:	6023      	str	r3, [r4, #0]
 800e6ca:	bd38      	pop	{r3, r4, r5, pc}
 800e6cc:	20001660 	.word	0x20001660

0800e6d0 <_write_r>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	4d07      	ldr	r5, [pc, #28]	; (800e6f0 <_write_r+0x20>)
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	4608      	mov	r0, r1
 800e6d8:	4611      	mov	r1, r2
 800e6da:	2200      	movs	r2, #0
 800e6dc:	602a      	str	r2, [r5, #0]
 800e6de:	461a      	mov	r2, r3
 800e6e0:	f7f5 fa71 	bl	8003bc6 <_write>
 800e6e4:	1c43      	adds	r3, r0, #1
 800e6e6:	d102      	bne.n	800e6ee <_write_r+0x1e>
 800e6e8:	682b      	ldr	r3, [r5, #0]
 800e6ea:	b103      	cbz	r3, 800e6ee <_write_r+0x1e>
 800e6ec:	6023      	str	r3, [r4, #0]
 800e6ee:	bd38      	pop	{r3, r4, r5, pc}
 800e6f0:	20001660 	.word	0x20001660

0800e6f4 <__assert_func>:
 800e6f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e6f6:	4614      	mov	r4, r2
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	4b09      	ldr	r3, [pc, #36]	; (800e720 <__assert_func+0x2c>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	4605      	mov	r5, r0
 800e700:	68d8      	ldr	r0, [r3, #12]
 800e702:	b14c      	cbz	r4, 800e718 <__assert_func+0x24>
 800e704:	4b07      	ldr	r3, [pc, #28]	; (800e724 <__assert_func+0x30>)
 800e706:	9100      	str	r1, [sp, #0]
 800e708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e70c:	4906      	ldr	r1, [pc, #24]	; (800e728 <__assert_func+0x34>)
 800e70e:	462b      	mov	r3, r5
 800e710:	f000 f82c 	bl	800e76c <fiprintf>
 800e714:	f000 f83c 	bl	800e790 <abort>
 800e718:	4b04      	ldr	r3, [pc, #16]	; (800e72c <__assert_func+0x38>)
 800e71a:	461c      	mov	r4, r3
 800e71c:	e7f3      	b.n	800e706 <__assert_func+0x12>
 800e71e:	bf00      	nop
 800e720:	2000025c 	.word	0x2000025c
 800e724:	0800f3c4 	.word	0x0800f3c4
 800e728:	0800f3d1 	.word	0x0800f3d1
 800e72c:	0800f3ff 	.word	0x0800f3ff

0800e730 <_calloc_r>:
 800e730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e732:	fba1 2402 	umull	r2, r4, r1, r2
 800e736:	b94c      	cbnz	r4, 800e74c <_calloc_r+0x1c>
 800e738:	4611      	mov	r1, r2
 800e73a:	9201      	str	r2, [sp, #4]
 800e73c:	f7ff f8f2 	bl	800d924 <_malloc_r>
 800e740:	9a01      	ldr	r2, [sp, #4]
 800e742:	4605      	mov	r5, r0
 800e744:	b930      	cbnz	r0, 800e754 <_calloc_r+0x24>
 800e746:	4628      	mov	r0, r5
 800e748:	b003      	add	sp, #12
 800e74a:	bd30      	pop	{r4, r5, pc}
 800e74c:	220c      	movs	r2, #12
 800e74e:	6002      	str	r2, [r0, #0]
 800e750:	2500      	movs	r5, #0
 800e752:	e7f8      	b.n	800e746 <_calloc_r+0x16>
 800e754:	4621      	mov	r1, r4
 800e756:	f7fd fc99 	bl	800c08c <memset>
 800e75a:	e7f4      	b.n	800e746 <_calloc_r+0x16>

0800e75c <_malloc_usable_size_r>:
 800e75c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e760:	1f18      	subs	r0, r3, #4
 800e762:	2b00      	cmp	r3, #0
 800e764:	bfbc      	itt	lt
 800e766:	580b      	ldrlt	r3, [r1, r0]
 800e768:	18c0      	addlt	r0, r0, r3
 800e76a:	4770      	bx	lr

0800e76c <fiprintf>:
 800e76c:	b40e      	push	{r1, r2, r3}
 800e76e:	b503      	push	{r0, r1, lr}
 800e770:	4601      	mov	r1, r0
 800e772:	ab03      	add	r3, sp, #12
 800e774:	4805      	ldr	r0, [pc, #20]	; (800e78c <fiprintf+0x20>)
 800e776:	f853 2b04 	ldr.w	r2, [r3], #4
 800e77a:	6800      	ldr	r0, [r0, #0]
 800e77c:	9301      	str	r3, [sp, #4]
 800e77e:	f000 f837 	bl	800e7f0 <_vfiprintf_r>
 800e782:	b002      	add	sp, #8
 800e784:	f85d eb04 	ldr.w	lr, [sp], #4
 800e788:	b003      	add	sp, #12
 800e78a:	4770      	bx	lr
 800e78c:	2000025c 	.word	0x2000025c

0800e790 <abort>:
 800e790:	b508      	push	{r3, lr}
 800e792:	2006      	movs	r0, #6
 800e794:	f000 fa88 	bl	800eca8 <raise>
 800e798:	2001      	movs	r0, #1
 800e79a:	f7f5 f9ed 	bl	8003b78 <_exit>

0800e79e <__sfputc_r>:
 800e79e:	6893      	ldr	r3, [r2, #8]
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	b410      	push	{r4}
 800e7a6:	6093      	str	r3, [r2, #8]
 800e7a8:	da08      	bge.n	800e7bc <__sfputc_r+0x1e>
 800e7aa:	6994      	ldr	r4, [r2, #24]
 800e7ac:	42a3      	cmp	r3, r4
 800e7ae:	db01      	blt.n	800e7b4 <__sfputc_r+0x16>
 800e7b0:	290a      	cmp	r1, #10
 800e7b2:	d103      	bne.n	800e7bc <__sfputc_r+0x1e>
 800e7b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7b8:	f000 b934 	b.w	800ea24 <__swbuf_r>
 800e7bc:	6813      	ldr	r3, [r2, #0]
 800e7be:	1c58      	adds	r0, r3, #1
 800e7c0:	6010      	str	r0, [r2, #0]
 800e7c2:	7019      	strb	r1, [r3, #0]
 800e7c4:	4608      	mov	r0, r1
 800e7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <__sfputs_r>:
 800e7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ce:	4606      	mov	r6, r0
 800e7d0:	460f      	mov	r7, r1
 800e7d2:	4614      	mov	r4, r2
 800e7d4:	18d5      	adds	r5, r2, r3
 800e7d6:	42ac      	cmp	r4, r5
 800e7d8:	d101      	bne.n	800e7de <__sfputs_r+0x12>
 800e7da:	2000      	movs	r0, #0
 800e7dc:	e007      	b.n	800e7ee <__sfputs_r+0x22>
 800e7de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e2:	463a      	mov	r2, r7
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	f7ff ffda 	bl	800e79e <__sfputc_r>
 800e7ea:	1c43      	adds	r3, r0, #1
 800e7ec:	d1f3      	bne.n	800e7d6 <__sfputs_r+0xa>
 800e7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e7f0 <_vfiprintf_r>:
 800e7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f4:	460d      	mov	r5, r1
 800e7f6:	b09d      	sub	sp, #116	; 0x74
 800e7f8:	4614      	mov	r4, r2
 800e7fa:	4698      	mov	r8, r3
 800e7fc:	4606      	mov	r6, r0
 800e7fe:	b118      	cbz	r0, 800e808 <_vfiprintf_r+0x18>
 800e800:	6a03      	ldr	r3, [r0, #32]
 800e802:	b90b      	cbnz	r3, 800e808 <_vfiprintf_r+0x18>
 800e804:	f7fc fd64 	bl	800b2d0 <__sinit>
 800e808:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e80a:	07d9      	lsls	r1, r3, #31
 800e80c:	d405      	bmi.n	800e81a <_vfiprintf_r+0x2a>
 800e80e:	89ab      	ldrh	r3, [r5, #12]
 800e810:	059a      	lsls	r2, r3, #22
 800e812:	d402      	bmi.n	800e81a <_vfiprintf_r+0x2a>
 800e814:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e816:	f7fd fcc6 	bl	800c1a6 <__retarget_lock_acquire_recursive>
 800e81a:	89ab      	ldrh	r3, [r5, #12]
 800e81c:	071b      	lsls	r3, r3, #28
 800e81e:	d501      	bpl.n	800e824 <_vfiprintf_r+0x34>
 800e820:	692b      	ldr	r3, [r5, #16]
 800e822:	b99b      	cbnz	r3, 800e84c <_vfiprintf_r+0x5c>
 800e824:	4629      	mov	r1, r5
 800e826:	4630      	mov	r0, r6
 800e828:	f000 f93a 	bl	800eaa0 <__swsetup_r>
 800e82c:	b170      	cbz	r0, 800e84c <_vfiprintf_r+0x5c>
 800e82e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e830:	07dc      	lsls	r4, r3, #31
 800e832:	d504      	bpl.n	800e83e <_vfiprintf_r+0x4e>
 800e834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e838:	b01d      	add	sp, #116	; 0x74
 800e83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e83e:	89ab      	ldrh	r3, [r5, #12]
 800e840:	0598      	lsls	r0, r3, #22
 800e842:	d4f7      	bmi.n	800e834 <_vfiprintf_r+0x44>
 800e844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e846:	f7fd fcaf 	bl	800c1a8 <__retarget_lock_release_recursive>
 800e84a:	e7f3      	b.n	800e834 <_vfiprintf_r+0x44>
 800e84c:	2300      	movs	r3, #0
 800e84e:	9309      	str	r3, [sp, #36]	; 0x24
 800e850:	2320      	movs	r3, #32
 800e852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e856:	f8cd 800c 	str.w	r8, [sp, #12]
 800e85a:	2330      	movs	r3, #48	; 0x30
 800e85c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ea10 <_vfiprintf_r+0x220>
 800e860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e864:	f04f 0901 	mov.w	r9, #1
 800e868:	4623      	mov	r3, r4
 800e86a:	469a      	mov	sl, r3
 800e86c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e870:	b10a      	cbz	r2, 800e876 <_vfiprintf_r+0x86>
 800e872:	2a25      	cmp	r2, #37	; 0x25
 800e874:	d1f9      	bne.n	800e86a <_vfiprintf_r+0x7a>
 800e876:	ebba 0b04 	subs.w	fp, sl, r4
 800e87a:	d00b      	beq.n	800e894 <_vfiprintf_r+0xa4>
 800e87c:	465b      	mov	r3, fp
 800e87e:	4622      	mov	r2, r4
 800e880:	4629      	mov	r1, r5
 800e882:	4630      	mov	r0, r6
 800e884:	f7ff ffa2 	bl	800e7cc <__sfputs_r>
 800e888:	3001      	adds	r0, #1
 800e88a:	f000 80a9 	beq.w	800e9e0 <_vfiprintf_r+0x1f0>
 800e88e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e890:	445a      	add	r2, fp
 800e892:	9209      	str	r2, [sp, #36]	; 0x24
 800e894:	f89a 3000 	ldrb.w	r3, [sl]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f000 80a1 	beq.w	800e9e0 <_vfiprintf_r+0x1f0>
 800e89e:	2300      	movs	r3, #0
 800e8a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8a8:	f10a 0a01 	add.w	sl, sl, #1
 800e8ac:	9304      	str	r3, [sp, #16]
 800e8ae:	9307      	str	r3, [sp, #28]
 800e8b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8b4:	931a      	str	r3, [sp, #104]	; 0x68
 800e8b6:	4654      	mov	r4, sl
 800e8b8:	2205      	movs	r2, #5
 800e8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8be:	4854      	ldr	r0, [pc, #336]	; (800ea10 <_vfiprintf_r+0x220>)
 800e8c0:	f7f1 fc9e 	bl	8000200 <memchr>
 800e8c4:	9a04      	ldr	r2, [sp, #16]
 800e8c6:	b9d8      	cbnz	r0, 800e900 <_vfiprintf_r+0x110>
 800e8c8:	06d1      	lsls	r1, r2, #27
 800e8ca:	bf44      	itt	mi
 800e8cc:	2320      	movmi	r3, #32
 800e8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8d2:	0713      	lsls	r3, r2, #28
 800e8d4:	bf44      	itt	mi
 800e8d6:	232b      	movmi	r3, #43	; 0x2b
 800e8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800e8e0:	2b2a      	cmp	r3, #42	; 0x2a
 800e8e2:	d015      	beq.n	800e910 <_vfiprintf_r+0x120>
 800e8e4:	9a07      	ldr	r2, [sp, #28]
 800e8e6:	4654      	mov	r4, sl
 800e8e8:	2000      	movs	r0, #0
 800e8ea:	f04f 0c0a 	mov.w	ip, #10
 800e8ee:	4621      	mov	r1, r4
 800e8f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8f4:	3b30      	subs	r3, #48	; 0x30
 800e8f6:	2b09      	cmp	r3, #9
 800e8f8:	d94d      	bls.n	800e996 <_vfiprintf_r+0x1a6>
 800e8fa:	b1b0      	cbz	r0, 800e92a <_vfiprintf_r+0x13a>
 800e8fc:	9207      	str	r2, [sp, #28]
 800e8fe:	e014      	b.n	800e92a <_vfiprintf_r+0x13a>
 800e900:	eba0 0308 	sub.w	r3, r0, r8
 800e904:	fa09 f303 	lsl.w	r3, r9, r3
 800e908:	4313      	orrs	r3, r2
 800e90a:	9304      	str	r3, [sp, #16]
 800e90c:	46a2      	mov	sl, r4
 800e90e:	e7d2      	b.n	800e8b6 <_vfiprintf_r+0xc6>
 800e910:	9b03      	ldr	r3, [sp, #12]
 800e912:	1d19      	adds	r1, r3, #4
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	9103      	str	r1, [sp, #12]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	bfbb      	ittet	lt
 800e91c:	425b      	neglt	r3, r3
 800e91e:	f042 0202 	orrlt.w	r2, r2, #2
 800e922:	9307      	strge	r3, [sp, #28]
 800e924:	9307      	strlt	r3, [sp, #28]
 800e926:	bfb8      	it	lt
 800e928:	9204      	strlt	r2, [sp, #16]
 800e92a:	7823      	ldrb	r3, [r4, #0]
 800e92c:	2b2e      	cmp	r3, #46	; 0x2e
 800e92e:	d10c      	bne.n	800e94a <_vfiprintf_r+0x15a>
 800e930:	7863      	ldrb	r3, [r4, #1]
 800e932:	2b2a      	cmp	r3, #42	; 0x2a
 800e934:	d134      	bne.n	800e9a0 <_vfiprintf_r+0x1b0>
 800e936:	9b03      	ldr	r3, [sp, #12]
 800e938:	1d1a      	adds	r2, r3, #4
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	9203      	str	r2, [sp, #12]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	bfb8      	it	lt
 800e942:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e946:	3402      	adds	r4, #2
 800e948:	9305      	str	r3, [sp, #20]
 800e94a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ea20 <_vfiprintf_r+0x230>
 800e94e:	7821      	ldrb	r1, [r4, #0]
 800e950:	2203      	movs	r2, #3
 800e952:	4650      	mov	r0, sl
 800e954:	f7f1 fc54 	bl	8000200 <memchr>
 800e958:	b138      	cbz	r0, 800e96a <_vfiprintf_r+0x17a>
 800e95a:	9b04      	ldr	r3, [sp, #16]
 800e95c:	eba0 000a 	sub.w	r0, r0, sl
 800e960:	2240      	movs	r2, #64	; 0x40
 800e962:	4082      	lsls	r2, r0
 800e964:	4313      	orrs	r3, r2
 800e966:	3401      	adds	r4, #1
 800e968:	9304      	str	r3, [sp, #16]
 800e96a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e96e:	4829      	ldr	r0, [pc, #164]	; (800ea14 <_vfiprintf_r+0x224>)
 800e970:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e974:	2206      	movs	r2, #6
 800e976:	f7f1 fc43 	bl	8000200 <memchr>
 800e97a:	2800      	cmp	r0, #0
 800e97c:	d03f      	beq.n	800e9fe <_vfiprintf_r+0x20e>
 800e97e:	4b26      	ldr	r3, [pc, #152]	; (800ea18 <_vfiprintf_r+0x228>)
 800e980:	bb1b      	cbnz	r3, 800e9ca <_vfiprintf_r+0x1da>
 800e982:	9b03      	ldr	r3, [sp, #12]
 800e984:	3307      	adds	r3, #7
 800e986:	f023 0307 	bic.w	r3, r3, #7
 800e98a:	3308      	adds	r3, #8
 800e98c:	9303      	str	r3, [sp, #12]
 800e98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e990:	443b      	add	r3, r7
 800e992:	9309      	str	r3, [sp, #36]	; 0x24
 800e994:	e768      	b.n	800e868 <_vfiprintf_r+0x78>
 800e996:	fb0c 3202 	mla	r2, ip, r2, r3
 800e99a:	460c      	mov	r4, r1
 800e99c:	2001      	movs	r0, #1
 800e99e:	e7a6      	b.n	800e8ee <_vfiprintf_r+0xfe>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	3401      	adds	r4, #1
 800e9a4:	9305      	str	r3, [sp, #20]
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	f04f 0c0a 	mov.w	ip, #10
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9b2:	3a30      	subs	r2, #48	; 0x30
 800e9b4:	2a09      	cmp	r2, #9
 800e9b6:	d903      	bls.n	800e9c0 <_vfiprintf_r+0x1d0>
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d0c6      	beq.n	800e94a <_vfiprintf_r+0x15a>
 800e9bc:	9105      	str	r1, [sp, #20]
 800e9be:	e7c4      	b.n	800e94a <_vfiprintf_r+0x15a>
 800e9c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9c4:	4604      	mov	r4, r0
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e7f0      	b.n	800e9ac <_vfiprintf_r+0x1bc>
 800e9ca:	ab03      	add	r3, sp, #12
 800e9cc:	9300      	str	r3, [sp, #0]
 800e9ce:	462a      	mov	r2, r5
 800e9d0:	4b12      	ldr	r3, [pc, #72]	; (800ea1c <_vfiprintf_r+0x22c>)
 800e9d2:	a904      	add	r1, sp, #16
 800e9d4:	4630      	mov	r0, r6
 800e9d6:	f7fb fdf9 	bl	800a5cc <_printf_float>
 800e9da:	4607      	mov	r7, r0
 800e9dc:	1c78      	adds	r0, r7, #1
 800e9de:	d1d6      	bne.n	800e98e <_vfiprintf_r+0x19e>
 800e9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9e2:	07d9      	lsls	r1, r3, #31
 800e9e4:	d405      	bmi.n	800e9f2 <_vfiprintf_r+0x202>
 800e9e6:	89ab      	ldrh	r3, [r5, #12]
 800e9e8:	059a      	lsls	r2, r3, #22
 800e9ea:	d402      	bmi.n	800e9f2 <_vfiprintf_r+0x202>
 800e9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e9ee:	f7fd fbdb 	bl	800c1a8 <__retarget_lock_release_recursive>
 800e9f2:	89ab      	ldrh	r3, [r5, #12]
 800e9f4:	065b      	lsls	r3, r3, #25
 800e9f6:	f53f af1d 	bmi.w	800e834 <_vfiprintf_r+0x44>
 800e9fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9fc:	e71c      	b.n	800e838 <_vfiprintf_r+0x48>
 800e9fe:	ab03      	add	r3, sp, #12
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	462a      	mov	r2, r5
 800ea04:	4b05      	ldr	r3, [pc, #20]	; (800ea1c <_vfiprintf_r+0x22c>)
 800ea06:	a904      	add	r1, sp, #16
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f7fc f883 	bl	800ab14 <_printf_i>
 800ea0e:	e7e4      	b.n	800e9da <_vfiprintf_r+0x1ea>
 800ea10:	0800f25e 	.word	0x0800f25e
 800ea14:	0800f268 	.word	0x0800f268
 800ea18:	0800a5cd 	.word	0x0800a5cd
 800ea1c:	0800e7cd 	.word	0x0800e7cd
 800ea20:	0800f264 	.word	0x0800f264

0800ea24 <__swbuf_r>:
 800ea24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea26:	460e      	mov	r6, r1
 800ea28:	4614      	mov	r4, r2
 800ea2a:	4605      	mov	r5, r0
 800ea2c:	b118      	cbz	r0, 800ea36 <__swbuf_r+0x12>
 800ea2e:	6a03      	ldr	r3, [r0, #32]
 800ea30:	b90b      	cbnz	r3, 800ea36 <__swbuf_r+0x12>
 800ea32:	f7fc fc4d 	bl	800b2d0 <__sinit>
 800ea36:	69a3      	ldr	r3, [r4, #24]
 800ea38:	60a3      	str	r3, [r4, #8]
 800ea3a:	89a3      	ldrh	r3, [r4, #12]
 800ea3c:	071a      	lsls	r2, r3, #28
 800ea3e:	d525      	bpl.n	800ea8c <__swbuf_r+0x68>
 800ea40:	6923      	ldr	r3, [r4, #16]
 800ea42:	b31b      	cbz	r3, 800ea8c <__swbuf_r+0x68>
 800ea44:	6823      	ldr	r3, [r4, #0]
 800ea46:	6922      	ldr	r2, [r4, #16]
 800ea48:	1a98      	subs	r0, r3, r2
 800ea4a:	6963      	ldr	r3, [r4, #20]
 800ea4c:	b2f6      	uxtb	r6, r6
 800ea4e:	4283      	cmp	r3, r0
 800ea50:	4637      	mov	r7, r6
 800ea52:	dc04      	bgt.n	800ea5e <__swbuf_r+0x3a>
 800ea54:	4621      	mov	r1, r4
 800ea56:	4628      	mov	r0, r5
 800ea58:	f7ff f87c 	bl	800db54 <_fflush_r>
 800ea5c:	b9e0      	cbnz	r0, 800ea98 <__swbuf_r+0x74>
 800ea5e:	68a3      	ldr	r3, [r4, #8]
 800ea60:	3b01      	subs	r3, #1
 800ea62:	60a3      	str	r3, [r4, #8]
 800ea64:	6823      	ldr	r3, [r4, #0]
 800ea66:	1c5a      	adds	r2, r3, #1
 800ea68:	6022      	str	r2, [r4, #0]
 800ea6a:	701e      	strb	r6, [r3, #0]
 800ea6c:	6962      	ldr	r2, [r4, #20]
 800ea6e:	1c43      	adds	r3, r0, #1
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d004      	beq.n	800ea7e <__swbuf_r+0x5a>
 800ea74:	89a3      	ldrh	r3, [r4, #12]
 800ea76:	07db      	lsls	r3, r3, #31
 800ea78:	d506      	bpl.n	800ea88 <__swbuf_r+0x64>
 800ea7a:	2e0a      	cmp	r6, #10
 800ea7c:	d104      	bne.n	800ea88 <__swbuf_r+0x64>
 800ea7e:	4621      	mov	r1, r4
 800ea80:	4628      	mov	r0, r5
 800ea82:	f7ff f867 	bl	800db54 <_fflush_r>
 800ea86:	b938      	cbnz	r0, 800ea98 <__swbuf_r+0x74>
 800ea88:	4638      	mov	r0, r7
 800ea8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ea8c:	4621      	mov	r1, r4
 800ea8e:	4628      	mov	r0, r5
 800ea90:	f000 f806 	bl	800eaa0 <__swsetup_r>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d0d5      	beq.n	800ea44 <__swbuf_r+0x20>
 800ea98:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ea9c:	e7f4      	b.n	800ea88 <__swbuf_r+0x64>
	...

0800eaa0 <__swsetup_r>:
 800eaa0:	b538      	push	{r3, r4, r5, lr}
 800eaa2:	4b2a      	ldr	r3, [pc, #168]	; (800eb4c <__swsetup_r+0xac>)
 800eaa4:	4605      	mov	r5, r0
 800eaa6:	6818      	ldr	r0, [r3, #0]
 800eaa8:	460c      	mov	r4, r1
 800eaaa:	b118      	cbz	r0, 800eab4 <__swsetup_r+0x14>
 800eaac:	6a03      	ldr	r3, [r0, #32]
 800eaae:	b90b      	cbnz	r3, 800eab4 <__swsetup_r+0x14>
 800eab0:	f7fc fc0e 	bl	800b2d0 <__sinit>
 800eab4:	89a3      	ldrh	r3, [r4, #12]
 800eab6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eaba:	0718      	lsls	r0, r3, #28
 800eabc:	d422      	bmi.n	800eb04 <__swsetup_r+0x64>
 800eabe:	06d9      	lsls	r1, r3, #27
 800eac0:	d407      	bmi.n	800ead2 <__swsetup_r+0x32>
 800eac2:	2309      	movs	r3, #9
 800eac4:	602b      	str	r3, [r5, #0]
 800eac6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eaca:	81a3      	strh	r3, [r4, #12]
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ead0:	e034      	b.n	800eb3c <__swsetup_r+0x9c>
 800ead2:	0758      	lsls	r0, r3, #29
 800ead4:	d512      	bpl.n	800eafc <__swsetup_r+0x5c>
 800ead6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ead8:	b141      	cbz	r1, 800eaec <__swsetup_r+0x4c>
 800eada:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eade:	4299      	cmp	r1, r3
 800eae0:	d002      	beq.n	800eae8 <__swsetup_r+0x48>
 800eae2:	4628      	mov	r0, r5
 800eae4:	f7fe f9fa 	bl	800cedc <_free_r>
 800eae8:	2300      	movs	r3, #0
 800eaea:	6363      	str	r3, [r4, #52]	; 0x34
 800eaec:	89a3      	ldrh	r3, [r4, #12]
 800eaee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eaf2:	81a3      	strh	r3, [r4, #12]
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	6063      	str	r3, [r4, #4]
 800eaf8:	6923      	ldr	r3, [r4, #16]
 800eafa:	6023      	str	r3, [r4, #0]
 800eafc:	89a3      	ldrh	r3, [r4, #12]
 800eafe:	f043 0308 	orr.w	r3, r3, #8
 800eb02:	81a3      	strh	r3, [r4, #12]
 800eb04:	6923      	ldr	r3, [r4, #16]
 800eb06:	b94b      	cbnz	r3, 800eb1c <__swsetup_r+0x7c>
 800eb08:	89a3      	ldrh	r3, [r4, #12]
 800eb0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800eb0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb12:	d003      	beq.n	800eb1c <__swsetup_r+0x7c>
 800eb14:	4621      	mov	r1, r4
 800eb16:	4628      	mov	r0, r5
 800eb18:	f000 f840 	bl	800eb9c <__smakebuf_r>
 800eb1c:	89a0      	ldrh	r0, [r4, #12]
 800eb1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb22:	f010 0301 	ands.w	r3, r0, #1
 800eb26:	d00a      	beq.n	800eb3e <__swsetup_r+0x9e>
 800eb28:	2300      	movs	r3, #0
 800eb2a:	60a3      	str	r3, [r4, #8]
 800eb2c:	6963      	ldr	r3, [r4, #20]
 800eb2e:	425b      	negs	r3, r3
 800eb30:	61a3      	str	r3, [r4, #24]
 800eb32:	6923      	ldr	r3, [r4, #16]
 800eb34:	b943      	cbnz	r3, 800eb48 <__swsetup_r+0xa8>
 800eb36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800eb3a:	d1c4      	bne.n	800eac6 <__swsetup_r+0x26>
 800eb3c:	bd38      	pop	{r3, r4, r5, pc}
 800eb3e:	0781      	lsls	r1, r0, #30
 800eb40:	bf58      	it	pl
 800eb42:	6963      	ldrpl	r3, [r4, #20]
 800eb44:	60a3      	str	r3, [r4, #8]
 800eb46:	e7f4      	b.n	800eb32 <__swsetup_r+0x92>
 800eb48:	2000      	movs	r0, #0
 800eb4a:	e7f7      	b.n	800eb3c <__swsetup_r+0x9c>
 800eb4c:	2000025c 	.word	0x2000025c

0800eb50 <__swhatbuf_r>:
 800eb50:	b570      	push	{r4, r5, r6, lr}
 800eb52:	460c      	mov	r4, r1
 800eb54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb58:	2900      	cmp	r1, #0
 800eb5a:	b096      	sub	sp, #88	; 0x58
 800eb5c:	4615      	mov	r5, r2
 800eb5e:	461e      	mov	r6, r3
 800eb60:	da0d      	bge.n	800eb7e <__swhatbuf_r+0x2e>
 800eb62:	89a3      	ldrh	r3, [r4, #12]
 800eb64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800eb68:	f04f 0100 	mov.w	r1, #0
 800eb6c:	bf0c      	ite	eq
 800eb6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800eb72:	2340      	movne	r3, #64	; 0x40
 800eb74:	2000      	movs	r0, #0
 800eb76:	6031      	str	r1, [r6, #0]
 800eb78:	602b      	str	r3, [r5, #0]
 800eb7a:	b016      	add	sp, #88	; 0x58
 800eb7c:	bd70      	pop	{r4, r5, r6, pc}
 800eb7e:	466a      	mov	r2, sp
 800eb80:	f000 f848 	bl	800ec14 <_fstat_r>
 800eb84:	2800      	cmp	r0, #0
 800eb86:	dbec      	blt.n	800eb62 <__swhatbuf_r+0x12>
 800eb88:	9901      	ldr	r1, [sp, #4]
 800eb8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800eb8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800eb92:	4259      	negs	r1, r3
 800eb94:	4159      	adcs	r1, r3
 800eb96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb9a:	e7eb      	b.n	800eb74 <__swhatbuf_r+0x24>

0800eb9c <__smakebuf_r>:
 800eb9c:	898b      	ldrh	r3, [r1, #12]
 800eb9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800eba0:	079d      	lsls	r5, r3, #30
 800eba2:	4606      	mov	r6, r0
 800eba4:	460c      	mov	r4, r1
 800eba6:	d507      	bpl.n	800ebb8 <__smakebuf_r+0x1c>
 800eba8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ebac:	6023      	str	r3, [r4, #0]
 800ebae:	6123      	str	r3, [r4, #16]
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	6163      	str	r3, [r4, #20]
 800ebb4:	b002      	add	sp, #8
 800ebb6:	bd70      	pop	{r4, r5, r6, pc}
 800ebb8:	ab01      	add	r3, sp, #4
 800ebba:	466a      	mov	r2, sp
 800ebbc:	f7ff ffc8 	bl	800eb50 <__swhatbuf_r>
 800ebc0:	9900      	ldr	r1, [sp, #0]
 800ebc2:	4605      	mov	r5, r0
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f7fe fead 	bl	800d924 <_malloc_r>
 800ebca:	b948      	cbnz	r0, 800ebe0 <__smakebuf_r+0x44>
 800ebcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebd0:	059a      	lsls	r2, r3, #22
 800ebd2:	d4ef      	bmi.n	800ebb4 <__smakebuf_r+0x18>
 800ebd4:	f023 0303 	bic.w	r3, r3, #3
 800ebd8:	f043 0302 	orr.w	r3, r3, #2
 800ebdc:	81a3      	strh	r3, [r4, #12]
 800ebde:	e7e3      	b.n	800eba8 <__smakebuf_r+0xc>
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	6020      	str	r0, [r4, #0]
 800ebe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebe8:	81a3      	strh	r3, [r4, #12]
 800ebea:	9b00      	ldr	r3, [sp, #0]
 800ebec:	6163      	str	r3, [r4, #20]
 800ebee:	9b01      	ldr	r3, [sp, #4]
 800ebf0:	6120      	str	r0, [r4, #16]
 800ebf2:	b15b      	cbz	r3, 800ec0c <__smakebuf_r+0x70>
 800ebf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebf8:	4630      	mov	r0, r6
 800ebfa:	f000 f81d 	bl	800ec38 <_isatty_r>
 800ebfe:	b128      	cbz	r0, 800ec0c <__smakebuf_r+0x70>
 800ec00:	89a3      	ldrh	r3, [r4, #12]
 800ec02:	f023 0303 	bic.w	r3, r3, #3
 800ec06:	f043 0301 	orr.w	r3, r3, #1
 800ec0a:	81a3      	strh	r3, [r4, #12]
 800ec0c:	89a3      	ldrh	r3, [r4, #12]
 800ec0e:	431d      	orrs	r5, r3
 800ec10:	81a5      	strh	r5, [r4, #12]
 800ec12:	e7cf      	b.n	800ebb4 <__smakebuf_r+0x18>

0800ec14 <_fstat_r>:
 800ec14:	b538      	push	{r3, r4, r5, lr}
 800ec16:	4d07      	ldr	r5, [pc, #28]	; (800ec34 <_fstat_r+0x20>)
 800ec18:	2300      	movs	r3, #0
 800ec1a:	4604      	mov	r4, r0
 800ec1c:	4608      	mov	r0, r1
 800ec1e:	4611      	mov	r1, r2
 800ec20:	602b      	str	r3, [r5, #0]
 800ec22:	f7f4 fff8 	bl	8003c16 <_fstat>
 800ec26:	1c43      	adds	r3, r0, #1
 800ec28:	d102      	bne.n	800ec30 <_fstat_r+0x1c>
 800ec2a:	682b      	ldr	r3, [r5, #0]
 800ec2c:	b103      	cbz	r3, 800ec30 <_fstat_r+0x1c>
 800ec2e:	6023      	str	r3, [r4, #0]
 800ec30:	bd38      	pop	{r3, r4, r5, pc}
 800ec32:	bf00      	nop
 800ec34:	20001660 	.word	0x20001660

0800ec38 <_isatty_r>:
 800ec38:	b538      	push	{r3, r4, r5, lr}
 800ec3a:	4d06      	ldr	r5, [pc, #24]	; (800ec54 <_isatty_r+0x1c>)
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	4604      	mov	r4, r0
 800ec40:	4608      	mov	r0, r1
 800ec42:	602b      	str	r3, [r5, #0]
 800ec44:	f7f4 fff7 	bl	8003c36 <_isatty>
 800ec48:	1c43      	adds	r3, r0, #1
 800ec4a:	d102      	bne.n	800ec52 <_isatty_r+0x1a>
 800ec4c:	682b      	ldr	r3, [r5, #0]
 800ec4e:	b103      	cbz	r3, 800ec52 <_isatty_r+0x1a>
 800ec50:	6023      	str	r3, [r4, #0]
 800ec52:	bd38      	pop	{r3, r4, r5, pc}
 800ec54:	20001660 	.word	0x20001660

0800ec58 <_raise_r>:
 800ec58:	291f      	cmp	r1, #31
 800ec5a:	b538      	push	{r3, r4, r5, lr}
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	460d      	mov	r5, r1
 800ec60:	d904      	bls.n	800ec6c <_raise_r+0x14>
 800ec62:	2316      	movs	r3, #22
 800ec64:	6003      	str	r3, [r0, #0]
 800ec66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec6a:	bd38      	pop	{r3, r4, r5, pc}
 800ec6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ec6e:	b112      	cbz	r2, 800ec76 <_raise_r+0x1e>
 800ec70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec74:	b94b      	cbnz	r3, 800ec8a <_raise_r+0x32>
 800ec76:	4620      	mov	r0, r4
 800ec78:	f000 f830 	bl	800ecdc <_getpid_r>
 800ec7c:	462a      	mov	r2, r5
 800ec7e:	4601      	mov	r1, r0
 800ec80:	4620      	mov	r0, r4
 800ec82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec86:	f000 b817 	b.w	800ecb8 <_kill_r>
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d00a      	beq.n	800eca4 <_raise_r+0x4c>
 800ec8e:	1c59      	adds	r1, r3, #1
 800ec90:	d103      	bne.n	800ec9a <_raise_r+0x42>
 800ec92:	2316      	movs	r3, #22
 800ec94:	6003      	str	r3, [r0, #0]
 800ec96:	2001      	movs	r0, #1
 800ec98:	e7e7      	b.n	800ec6a <_raise_r+0x12>
 800ec9a:	2400      	movs	r4, #0
 800ec9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eca0:	4628      	mov	r0, r5
 800eca2:	4798      	blx	r3
 800eca4:	2000      	movs	r0, #0
 800eca6:	e7e0      	b.n	800ec6a <_raise_r+0x12>

0800eca8 <raise>:
 800eca8:	4b02      	ldr	r3, [pc, #8]	; (800ecb4 <raise+0xc>)
 800ecaa:	4601      	mov	r1, r0
 800ecac:	6818      	ldr	r0, [r3, #0]
 800ecae:	f7ff bfd3 	b.w	800ec58 <_raise_r>
 800ecb2:	bf00      	nop
 800ecb4:	2000025c 	.word	0x2000025c

0800ecb8 <_kill_r>:
 800ecb8:	b538      	push	{r3, r4, r5, lr}
 800ecba:	4d07      	ldr	r5, [pc, #28]	; (800ecd8 <_kill_r+0x20>)
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	4608      	mov	r0, r1
 800ecc2:	4611      	mov	r1, r2
 800ecc4:	602b      	str	r3, [r5, #0]
 800ecc6:	f7f4 ff47 	bl	8003b58 <_kill>
 800ecca:	1c43      	adds	r3, r0, #1
 800eccc:	d102      	bne.n	800ecd4 <_kill_r+0x1c>
 800ecce:	682b      	ldr	r3, [r5, #0]
 800ecd0:	b103      	cbz	r3, 800ecd4 <_kill_r+0x1c>
 800ecd2:	6023      	str	r3, [r4, #0]
 800ecd4:	bd38      	pop	{r3, r4, r5, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20001660 	.word	0x20001660

0800ecdc <_getpid_r>:
 800ecdc:	f7f4 bf34 	b.w	8003b48 <_getpid>

0800ece0 <_init>:
 800ece0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece2:	bf00      	nop
 800ece4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ece6:	bc08      	pop	{r3}
 800ece8:	469e      	mov	lr, r3
 800ecea:	4770      	bx	lr

0800ecec <_fini>:
 800ecec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecee:	bf00      	nop
 800ecf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecf2:	bc08      	pop	{r3}
 800ecf4:	469e      	mov	lr, r3
 800ecf6:	4770      	bx	lr
