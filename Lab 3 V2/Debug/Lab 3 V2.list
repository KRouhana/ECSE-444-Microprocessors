
Lab 3 V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004edc  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0800509c  0800509c  0001509c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058e0  080058e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080058e0  080058e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058e0  080058e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0007d27c  2000000c  080058f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2007d288  080058f4  0002d288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e04  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288c  00000000  00000000  00033ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00036788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d10  00000000  00000000  000378b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ae05  00000000  00000000  000385c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123ab  00000000  00000000  000633c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00109f9e  00000000  00000000  00075770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004834  00000000  00000000  0017f710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00183f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000000fa  00000000  00000000  00183f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000010  00000000  00000000  00184097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005084 	.word	0x08005084

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08005084 	.word	0x08005084

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_d2f>:
 8000578:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800057c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000580:	bf24      	itt	cs
 8000582:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000586:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800058a:	d90d      	bls.n	80005a8 <__aeabi_d2f+0x30>
 800058c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000590:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000594:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000598:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800059c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005a0:	bf08      	it	eq
 80005a2:	f020 0001 	biceq.w	r0, r0, #1
 80005a6:	4770      	bx	lr
 80005a8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005ac:	d121      	bne.n	80005f2 <__aeabi_d2f+0x7a>
 80005ae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005b2:	bfbc      	itt	lt
 80005b4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005b8:	4770      	bxlt	lr
 80005ba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005be:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005c2:	f1c2 0218 	rsb	r2, r2, #24
 80005c6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ca:	fa10 f30c 	lsls.w	r3, r0, ip
 80005ce:	fa20 f002 	lsr.w	r0, r0, r2
 80005d2:	bf18      	it	ne
 80005d4:	f040 0001 	orrne.w	r0, r0, #1
 80005d8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005dc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005e0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005e4:	ea40 000c 	orr.w	r0, r0, ip
 80005e8:	fa23 f302 	lsr.w	r3, r3, r2
 80005ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005f0:	e7cc      	b.n	800058c <__aeabi_d2f+0x14>
 80005f2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005f6:	d107      	bne.n	8000608 <__aeabi_d2f+0x90>
 80005f8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005fc:	bf1e      	ittt	ne
 80005fe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000602:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000606:	4770      	bxne	lr
 8000608:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800060c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000610:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <getSineValues>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void getSineValues(){
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

	// 44 samples at 44kHz -> ~1kHz
	for(uint8_t i = 0; i < 44; i++)
 800061e:	2300      	movs	r3, #0
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e02f      	b.n	8000684 <getSineValues+0x6c>
	{
		// scale signal to 80% of possible range (max is 215 ~ 83%)
		sin_samples[i] = (uint8_t)((arm_sin_f32(x) * 87) + 128);
 8000624:	4b5a      	ldr	r3, [pc, #360]	; (8000790 <getSineValues+0x178>)
 8000626:	edd3 7a00 	vldr	s15, [r3]
 800062a:	eeb0 0a67 	vmov.f32	s0, s15
 800062e:	f004 fcb7 	bl	8004fa0 <arm_sin_f32>
 8000632:	eef0 7a40 	vmov.f32	s15, s0
 8000636:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000794 <getSineValues+0x17c>
 800063a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000798 <getSineValues+0x180>
 8000642:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800064c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000650:	793a      	ldrb	r2, [r7, #4]
 8000652:	b2d1      	uxtb	r1, r2
 8000654:	4a51      	ldr	r2, [pc, #324]	; (800079c <getSineValues+0x184>)
 8000656:	54d1      	strb	r1, [r2, r3]
		x+= 6.28319 / 44;
 8000658:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <getSineValues+0x178>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f7ff ff33 	bl	80004c8 <__aeabi_f2d>
 8000662:	a345      	add	r3, pc, #276	; (adr r3, 8000778 <getSineValues+0x160>)
 8000664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000668:	f7ff fdd0 	bl	800020c <__adddf3>
 800066c:	4602      	mov	r2, r0
 800066e:	460b      	mov	r3, r1
 8000670:	4610      	mov	r0, r2
 8000672:	4619      	mov	r1, r3
 8000674:	f7ff ff80 	bl	8000578 <__aeabi_d2f>
 8000678:	4603      	mov	r3, r0
 800067a:	4a45      	ldr	r2, [pc, #276]	; (8000790 <getSineValues+0x178>)
 800067c:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < 44; i++)
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2b2b      	cmp	r3, #43	; 0x2b
 8000688:	d9cc      	bls.n	8000624 <getSineValues+0xc>

	}

  	//33 samples at 44kHz -> ~1.33kHz
	x = 0;
 800068a:	4b41      	ldr	r3, [pc, #260]	; (8000790 <getSineValues+0x178>)
 800068c:	f04f 0200 	mov.w	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 33; i++)
 8000692:	2300      	movs	r3, #0
 8000694:	73bb      	strb	r3, [r7, #14]
 8000696:	e02e      	b.n	80006f6 <getSineValues+0xde>
	{
		// scale signal to 80% of possible range (max is 215 ~ 83%)
		sin_samples_2[i] = (uint32_t)((arm_sin_f32(x) * 87) + 128);
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <getSineValues+0x178>)
 800069a:	edd3 7a00 	vldr	s15, [r3]
 800069e:	eeb0 0a67 	vmov.f32	s0, s15
 80006a2:	f004 fc7d 	bl	8004fa0 <arm_sin_f32>
 80006a6:	eef0 7a40 	vmov.f32	s15, s0
 80006aa:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000794 <getSineValues+0x17c>
 80006ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8000798 <getSineValues+0x180>
 80006b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80006ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006be:	edc7 7a01 	vstr	s15, [r7, #4]
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	7939      	ldrb	r1, [r7, #4]
 80006c6:	4a36      	ldr	r2, [pc, #216]	; (80007a0 <getSineValues+0x188>)
 80006c8:	54d1      	strb	r1, [r2, r3]
		x+= 6.28319 / 33;
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <getSineValues+0x178>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fefa 	bl	80004c8 <__aeabi_f2d>
 80006d4:	a32a      	add	r3, pc, #168	; (adr r3, 8000780 <getSineValues+0x168>)
 80006d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006da:	f7ff fd97 	bl	800020c <__adddf3>
 80006de:	4602      	mov	r2, r0
 80006e0:	460b      	mov	r3, r1
 80006e2:	4610      	mov	r0, r2
 80006e4:	4619      	mov	r1, r3
 80006e6:	f7ff ff47 	bl	8000578 <__aeabi_d2f>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <getSineValues+0x178>)
 80006ee:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < 33; i++)
 80006f0:	7bbb      	ldrb	r3, [r7, #14]
 80006f2:	3301      	adds	r3, #1
 80006f4:	73bb      	strb	r3, [r7, #14]
 80006f6:	7bbb      	ldrb	r3, [r7, #14]
 80006f8:	2b20      	cmp	r3, #32
 80006fa:	d9cd      	bls.n	8000698 <getSineValues+0x80>

	}

  	//22 samples at 44kHz -> ~2kHz
	x = 0;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <getSineValues+0x178>)
 80006fe:	f04f 0200 	mov.w	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < 22; i++)
 8000704:	2300      	movs	r3, #0
 8000706:	737b      	strb	r3, [r7, #13]
 8000708:	e02e      	b.n	8000768 <getSineValues+0x150>
	{
		// scale signal to 80% of possible range (max is 215 ~ 83%)
		sin_samples_3[i] = (uint32_t)((arm_sin_f32(x) * 87) + 128);
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <getSineValues+0x178>)
 800070c:	edd3 7a00 	vldr	s15, [r3]
 8000710:	eeb0 0a67 	vmov.f32	s0, s15
 8000714:	f004 fc44 	bl	8004fa0 <arm_sin_f32>
 8000718:	eef0 7a40 	vmov.f32	s15, s0
 800071c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8000794 <getSineValues+0x17c>
 8000720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000724:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000798 <getSineValues+0x180>
 8000728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800072c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000730:	edc7 7a01 	vstr	s15, [r7, #4]
 8000734:	7b7b      	ldrb	r3, [r7, #13]
 8000736:	7939      	ldrb	r1, [r7, #4]
 8000738:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <getSineValues+0x18c>)
 800073a:	54d1      	strb	r1, [r2, r3]
		x+= 6.28319 / 22;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <getSineValues+0x178>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fec1 	bl	80004c8 <__aeabi_f2d>
 8000746:	a310      	add	r3, pc, #64	; (adr r3, 8000788 <getSineValues+0x170>)
 8000748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800074c:	f7ff fd5e 	bl	800020c <__adddf3>
 8000750:	4602      	mov	r2, r0
 8000752:	460b      	mov	r3, r1
 8000754:	4610      	mov	r0, r2
 8000756:	4619      	mov	r1, r3
 8000758:	f7ff ff0e 	bl	8000578 <__aeabi_d2f>
 800075c:	4603      	mov	r3, r0
 800075e:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <getSineValues+0x178>)
 8000760:	6013      	str	r3, [r2, #0]
	for(uint8_t i = 0; i < 22; i++)
 8000762:	7b7b      	ldrb	r3, [r7, #13]
 8000764:	3301      	adds	r3, #1
 8000766:	737b      	strb	r3, [r7, #13]
 8000768:	7b7b      	ldrb	r3, [r7, #13]
 800076a:	2b15      	cmp	r3, #21
 800076c:	d9cd      	bls.n	800070a <getSineValues+0xf2>
	}

}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	50deb408 	.word	0x50deb408
 800077c:	3fc24743 	.word	0x3fc24743
 8000780:	6bd39ab5 	.word	0x6bd39ab5
 8000784:	3fc85f04 	.word	0x3fc85f04
 8000788:	50deb408 	.word	0x50deb408
 800078c:	3fd24743 	.word	0x3fd24743
 8000790:	2007d1ec 	.word	0x2007d1ec
 8000794:	42ae0000 	.word	0x42ae0000
 8000798:	43000000 	.word	0x43000000
 800079c:	2007d1f0 	.word	0x2007d1f0
 80007a0:	2007d21c 	.word	0x2007d21c
 80007a4:	2007d240 	.word	0x2007d240

080007a8 <recordMode>:

void recordMode(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

	PlaybackMode = 0;
 80007ac:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <recordMode+0x28>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
	doneRecording = 0;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <recordMode+0x2c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]

	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80007b8:	2100      	movs	r1, #0
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <recordMode+0x30>)
 80007bc:	f001 f854 	bl	8001868 <HAL_DAC_Stop_DMA>
	HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, signal, LENGTH);
 80007c0:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 80007c4:	4905      	ldr	r1, [pc, #20]	; (80007dc <recordMode+0x34>)
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <recordMode+0x38>)
 80007c8:	f001 fc68 	bl	800209c <HAL_DFSDM_FilterRegularStart_DMA>

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200001e0 	.word	0x200001e0
 80007d4:	200001e4 	.word	0x200001e4
 80007d8:	20000028 	.word	0x20000028
 80007dc:	200001ec 	.word	0x200001ec
 80007e0:	2000009c 	.word	0x2000009c

080007e4 <playbackMode>:


void playbackMode(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af02      	add	r7, sp, #8


	if(counter == 0 || counter == 1){
 80007ea:	4b40      	ldr	r3, [pc, #256]	; (80008ec <playbackMode+0x108>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d003      	beq.n	80007fa <playbackMode+0x16>
 80007f2:	4b3e      	ldr	r3, [pc, #248]	; (80008ec <playbackMode+0x108>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d117      	bne.n	800082a <playbackMode+0x46>

		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80007fa:	2100      	movs	r1, #0
 80007fc:	483c      	ldr	r0, [pc, #240]	; (80008f0 <playbackMode+0x10c>)
 80007fe:	f001 f833 	bl	8001868 <HAL_DAC_Stop_DMA>

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &proccessedSignal, LENGTH, DAC_ALIGN_12B_R);
 8000802:	2300      	movs	r3, #0
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800080a:	4a3a      	ldr	r2, [pc, #232]	; (80008f4 <playbackMode+0x110>)
 800080c:	2100      	movs	r1, #0
 800080e:	4838      	ldr	r0, [pc, #224]	; (80008f0 <playbackMode+0x10c>)
 8000810:	f000 ff5e 	bl	80016d0 <HAL_DAC_Start_DMA>

		//Set the LED to on
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800081a:	4837      	ldr	r0, [pc, #220]	; (80008f8 <playbackMode+0x114>)
 800081c:	f002 fa72 	bl	8002d04 <HAL_GPIO_WritePin>

		HAL_Delay(2000);
 8000820:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000824:	f000 fdfc 	bl	8001420 <HAL_Delay>
 8000828:	e05c      	b.n	80008e4 <playbackMode+0x100>


	}

	else if(counter == 2 || counter == 3){
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <playbackMode+0x108>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	2b02      	cmp	r3, #2
 8000830:	d003      	beq.n	800083a <playbackMode+0x56>
 8000832:	4b2e      	ldr	r3, [pc, #184]	; (80008ec <playbackMode+0x108>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d116      	bne.n	8000868 <playbackMode+0x84>


		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800083a:	2100      	movs	r1, #0
 800083c:	482c      	ldr	r0, [pc, #176]	; (80008f0 <playbackMode+0x10c>)
 800083e:	f001 f813 	bl	8001868 <HAL_DAC_Stop_DMA>

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &sin_samples, 44, DAC_ALIGN_8B_R);
 8000842:	2308      	movs	r3, #8
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	232c      	movs	r3, #44	; 0x2c
 8000848:	4a2c      	ldr	r2, [pc, #176]	; (80008fc <playbackMode+0x118>)
 800084a:	2100      	movs	r1, #0
 800084c:	4828      	ldr	r0, [pc, #160]	; (80008f0 <playbackMode+0x10c>)
 800084e:	f000 ff3f 	bl	80016d0 <HAL_DAC_Start_DMA>

		//Set the LED to off
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000858:	4827      	ldr	r0, [pc, #156]	; (80008f8 <playbackMode+0x114>)
 800085a:	f002 fa53 	bl	8002d04 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 800085e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000862:	f000 fddd 	bl	8001420 <HAL_Delay>
 8000866:	e03d      	b.n	80008e4 <playbackMode+0x100>

	}

	else if(counter == 4 || counter == 5){
 8000868:	4b20      	ldr	r3, [pc, #128]	; (80008ec <playbackMode+0x108>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b04      	cmp	r3, #4
 800086e:	d003      	beq.n	8000878 <playbackMode+0x94>
 8000870:	4b1e      	ldr	r3, [pc, #120]	; (80008ec <playbackMode+0x108>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b05      	cmp	r3, #5
 8000876:	d116      	bne.n	80008a6 <playbackMode+0xc2>

		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000878:	2100      	movs	r1, #0
 800087a:	481d      	ldr	r0, [pc, #116]	; (80008f0 <playbackMode+0x10c>)
 800087c:	f000 fff4 	bl	8001868 <HAL_DAC_Stop_DMA>

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &sin_samples_2, 33, DAC_ALIGN_8B_R);
 8000880:	2308      	movs	r3, #8
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	2321      	movs	r3, #33	; 0x21
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <playbackMode+0x11c>)
 8000888:	2100      	movs	r1, #0
 800088a:	4819      	ldr	r0, [pc, #100]	; (80008f0 <playbackMode+0x10c>)
 800088c:	f000 ff20 	bl	80016d0 <HAL_DAC_Start_DMA>

		//Set the LED to on
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000896:	4818      	ldr	r0, [pc, #96]	; (80008f8 <playbackMode+0x114>)
 8000898:	f002 fa34 	bl	8002d04 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f000 fdbe 	bl	8001420 <HAL_Delay>
 80008a4:	e01e      	b.n	80008e4 <playbackMode+0x100>


	}

	else if(counter == 6 || counter == 7){
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <playbackMode+0x108>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b06      	cmp	r3, #6
 80008ac:	d003      	beq.n	80008b6 <playbackMode+0xd2>
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <playbackMode+0x108>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b07      	cmp	r3, #7
 80008b4:	d116      	bne.n	80008e4 <playbackMode+0x100>

		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80008b6:	2100      	movs	r1, #0
 80008b8:	480d      	ldr	r0, [pc, #52]	; (80008f0 <playbackMode+0x10c>)
 80008ba:	f000 ffd5 	bl	8001868 <HAL_DAC_Stop_DMA>

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, &sin_samples_3, 22, DAC_ALIGN_8B_R);
 80008be:	2308      	movs	r3, #8
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2316      	movs	r3, #22
 80008c4:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <playbackMode+0x120>)
 80008c6:	2100      	movs	r1, #0
 80008c8:	4809      	ldr	r0, [pc, #36]	; (80008f0 <playbackMode+0x10c>)
 80008ca:	f000 ff01 	bl	80016d0 <HAL_DAC_Start_DMA>

		//Set the LED to off
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d4:	4808      	ldr	r0, [pc, #32]	; (80008f8 <playbackMode+0x114>)
 80008d6:	f002 fa15 	bl	8002d04 <HAL_GPIO_WritePin>

		HAL_Delay(1000);
 80008da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008de:	f000 fd9f 	bl	8001420 <HAL_Delay>


	}
}
 80008e2:	e7ff      	b.n	80008e4 <playbackMode+0x100>
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001d8 	.word	0x200001d8
 80008f0:	20000028 	.word	0x20000028
 80008f4:	2003e9ec 	.word	0x2003e9ec
 80008f8:	48000400 	.word	0x48000400
 80008fc:	2007d1f0 	.word	0x2007d1f0
 8000900:	2007d21c 	.word	0x2007d21c
 8000904:	2007d240 	.word	0x2007d240

08000908 <HAL_GPIO_EXTI_Callback>:



// callback for button
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == User_Button_Pin){
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000918:	d123      	bne.n	8000962 <HAL_GPIO_EXTI_Callback+0x5a>


		buttonPressed =! buttonPressed;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_GPIO_EXTI_Callback+0x64>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2b00      	cmp	r3, #0
 8000920:	bf0c      	ite	eq
 8000922:	2301      	moveq	r3, #1
 8000924:	2300      	movne	r3, #0
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <HAL_GPIO_EXTI_Callback+0x64>)
 800092c:	601a      	str	r2, [r3, #0]

		//Recording:
		if(buttonPressed){
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <HAL_GPIO_EXTI_Callback+0x64>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d008      	beq.n	8000948 <HAL_GPIO_EXTI_Callback+0x40>

			//Set the LED to on
			HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <HAL_GPIO_EXTI_Callback+0x68>)
 800093e:	f002 f9e1 	bl	8002d04 <HAL_GPIO_WritePin>

			recordMode();
 8000942:	f7ff ff31 	bl	80007a8 <recordMode>
			}
		}
	}


}
 8000946:	e00c      	b.n	8000962 <HAL_GPIO_EXTI_Callback+0x5a>
			if(doneRecording == 1){
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_GPIO_EXTI_Callback+0x6c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d108      	bne.n	8000962 <HAL_GPIO_EXTI_Callback+0x5a>
				PlaybackMode = 1;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_GPIO_EXTI_Callback+0x70>)
 8000952:	2201      	movs	r2, #1
 8000954:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800095c:	4804      	ldr	r0, [pc, #16]	; (8000970 <HAL_GPIO_EXTI_Callback+0x68>)
 800095e:	f002 f9d1 	bl	8002d04 <HAL_GPIO_WritePin>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200001dc 	.word	0x200001dc
 8000970:	48000400 	.word	0x48000400
 8000974:	200001e4 	.word	0x200001e4
 8000978:	200001e0 	.word	0x200001e0

0800097c <HAL_DFSDM_FilterRegConvCpltCallback>:

// callback for mic
void HAL_DFSDM_FilterRegConvCpltCallback (DFSDM_Filter_HandleTypeDef * hdfsdm_filter)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	// check to make sure correct callback
	if(hdfsdm_filter == &hdfsdm1_filter0){
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <HAL_DFSDM_FilterRegConvCpltCallback+0x88>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d137      	bne.n	80009fc <HAL_DFSDM_FilterRegConvCpltCallback+0x80>


		HAL_DFSDM_FilterRegularStop_DMA(hdfsdm_filter);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f001 fc07 	bl	80021a0 <HAL_DFSDM_FilterRegularStop_DMA>

		// scale 24 bits
		for(int i = 0; i < LENGTH; i++){
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	e024      	b.n	80009e2 <HAL_DFSDM_FilterRegConvCpltCallback+0x66>

			tempData = signal[i];
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <HAL_DFSDM_FilterRegConvCpltCallback+0x8c>)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a0:	4a1a      	ldr	r2, [pc, #104]	; (8000a0c <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 80009a2:	6013      	str	r3, [r2, #0]

			tempData = tempData>>8;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	121b      	asrs	r3, r3, #8
 80009aa:	4a18      	ldr	r2, [pc, #96]	; (8000a0c <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 80009ac:	6013      	str	r3, [r2, #0]

			tempData+= 8388608;
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 80009b8:	6013      	str	r3, [r2, #0]

			//best is 256
			tempData = tempData/2048;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	da01      	bge.n	80009c6 <HAL_DFSDM_FilterRegConvCpltCallback+0x4a>
 80009c2:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80009c6:	12db      	asrs	r3, r3, #11
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 80009cc:	601a      	str	r2, [r3, #0]

			proccessedSignal[i] = (uint32_t) (tempData);
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4619      	mov	r1, r3
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < LENGTH; i++){
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80009e8:	dbd6      	blt.n	8000998 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c>

		}

		doneRecording = 1;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_DFSDM_FilterRegConvCpltCallback+0x98>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]

		//Set the LED to off
		HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f6:	4808      	ldr	r0, [pc, #32]	; (8000a18 <HAL_DFSDM_FilterRegConvCpltCallback+0x9c>)
 80009f8:	f002 f984 	bl	8002d04 <HAL_GPIO_WritePin>

	}
}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000009c 	.word	0x2000009c
 8000a08:	200001ec 	.word	0x200001ec
 8000a0c:	200001e8 	.word	0x200001e8
 8000a10:	2003e9ec 	.word	0x2003e9ec
 8000a14:	200001e4 	.word	0x200001e4
 8000a18:	48000400 	.word	0x48000400

08000a1c <HAL_TIM_PeriodElapsedCallback>:

//callback for timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	// check to ensure timer correct source
	if(htim->Instance == TIM2)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a2c:	d119      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x46>
	{

		//1 second elapsed
		if(++timer >= 44395){
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f64a 526a 	movw	r2, #44394	; 0xad6a
 8000a40:	4293      	cmp	r3, r2
 8000a42:	dd07      	ble.n	8000a54 <HAL_TIM_PeriodElapsedCallback+0x38>
			timer = 0;
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
			counter++;
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	4a08      	ldr	r2, [pc, #32]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a52:	6013      	str	r3, [r2, #0]
		}

		//Increment seconds counter
		if(counter == 8){
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	d102      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x46>
			counter = 0;
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
		}

	}
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200001d4 	.word	0x200001d4
 8000a74:	200001d8 	.word	0x200001d8

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7c:	f000 fc5b 	bl	8001336 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a80:	f000 f81a 	bl	8000ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a84:	f000 f984 	bl	8000d90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a88:	f000 f950 	bl	8000d2c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000a8c:	f000 f89a 	bl	8000bc4 <MX_DFSDM1_Init>
  MX_DAC1_Init();
 8000a90:	f000 f864 	bl	8000b5c <MX_DAC1_Init>
  MX_TIM2_Init();
 8000a94:	f000 f8fc 	bl	8000c90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  // starts timer in interrupt mode
  HAL_TIM_Base_Start_IT(&htim2);
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <main+0x38>)
 8000a9a:	f003 fe43 	bl	8004724 <HAL_TIM_Base_Start_IT>


  getSineValues();
 8000a9e:	f7ff fdbb 	bl	8000618 <getSineValues>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(PlaybackMode){
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <main+0x3c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d0fb      	beq.n	8000aa2 <main+0x2a>
		  playbackMode();
 8000aaa:	f7ff fe9b 	bl	80007e4 <playbackMode>
	  if(PlaybackMode){
 8000aae:	e7f8      	b.n	8000aa2 <main+0x2a>
 8000ab0:	20000188 	.word	0x20000188
 8000ab4:	200001e0 	.word	0x200001e0

08000ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b096      	sub	sp, #88	; 0x58
 8000abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2244      	movs	r2, #68	; 0x44
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f004 fab0 	bl	800502c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000acc:	463b      	mov	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000ada:	2000      	movs	r0, #0
 8000adc:	f002 f962 	bl	8002da4 <HAL_PWREx_ControlVoltageScaling>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000ae6:	f000 f9c3 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000aea:	2310      	movs	r3, #16
 8000aec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000af6:	2360      	movs	r3, #96	; 0x60
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afa:	2302      	movs	r3, #2
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000afe:	2301      	movs	r3, #1
 8000b00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000b06:	233c      	movs	r3, #60	; 0x3c
 8000b08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b12:	2302      	movs	r3, #2
 8000b14:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 f9e6 	bl	8002eec <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b26:	f000 f9a3 	bl	8000e70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	2105      	movs	r1, #5
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 fdec 	bl	8003720 <HAL_RCC_ClockConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b4e:	f000 f98f 	bl	8000e70 <Error_Handler>
  }
}
 8000b52:	bf00      	nop
 8000b54:	3758      	adds	r7, #88	; 0x58
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08a      	sub	sp, #40	; 0x28
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2228      	movs	r2, #40	; 0x28
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f004 fa5f 	bl	800502c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_DAC1_Init+0x60>)
 8000b70:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <MX_DAC1_Init+0x64>)
 8000b72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b74:	4811      	ldr	r0, [pc, #68]	; (8000bbc <MX_DAC1_Init+0x60>)
 8000b76:	f000 fd88 	bl	800168a <HAL_DAC_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b80:	f000 f976 	bl	8000e70 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000b88:	230a      	movs	r3, #10
 8000b8a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8000b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b90:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_DAC1_Init+0x60>)
 8000ba6:	f000 fec3 	bl	8001930 <HAL_DAC_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f95e 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	3728      	adds	r7, #40	; 0x28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000028 	.word	0x20000028
 8000bc0:	40007400 	.word	0x40007400

08000bc4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000bc8:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <MX_DFSDM1_Init+0xb8>)
 8000bca:	4a2d      	ldr	r2, [pc, #180]	; (8000c80 <MX_DFSDM1_Init+0xbc>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <MX_DFSDM1_Init+0xb8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <MX_DFSDM1_Init+0xb8>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000bda:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <MX_DFSDM1_Init+0xb8>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000be0:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <MX_DFSDM1_Init+0xb8>)
 8000be2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000be6:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 53;
 8000be8:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <MX_DFSDM1_Init+0xb8>)
 8000bea:	2235      	movs	r2, #53	; 0x35
 8000bec:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <MX_DFSDM1_Init+0xb8>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8000bf4:	4821      	ldr	r0, [pc, #132]	; (8000c7c <MX_DFSDM1_Init+0xb8>)
 8000bf6:	f001 f931 	bl	8001e5c <HAL_DFSDM_FilterInit>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8000c00:	f000 f936 	bl	8000e70 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c06:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <MX_DFSDM1_Init+0xc4>)
 8000c08:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 51;
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c18:	2233      	movs	r2, #51	; 0x33
 8000c1a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000c28:	4b16      	ldr	r3, [pc, #88]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c36:	2204      	movs	r2, #4
 8000c38:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000c40:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000c4c:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000c52:	480c      	ldr	r0, [pc, #48]	; (8000c84 <MX_DFSDM1_Init+0xc0>)
 8000c54:	f001 f842 	bl	8001cdc <HAL_DFSDM_ChannelInit>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8000c5e:	f000 f907 	bl	8000e70 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8000c62:	2201      	movs	r2, #1
 8000c64:	4909      	ldr	r1, [pc, #36]	; (8000c8c <MX_DFSDM1_Init+0xc8>)
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_DFSDM1_Init+0xb8>)
 8000c68:	f001 f9d2 	bl	8002010 <HAL_DFSDM_FilterConfigRegChannel>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8000c72:	f000 f8fd 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000009c 	.word	0x2000009c
 8000c80:	40016100 	.word	0x40016100
 8000c84:	200000f0 	.word	0x200000f0
 8000c88:	40016040 	.word	0x40016040
 8000c8c:	00020004 	.word	0x00020004

08000c90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <MX_TIM2_Init+0x98>)
 8000cb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_TIM2_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_TIM2_Init+0x98>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2703;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_TIM2_Init+0x98>)
 8000cc4:	f640 228f 	movw	r2, #2703	; 0xa8f
 8000cc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cca:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_TIM2_Init+0x98>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd0:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_TIM2_Init+0x98>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <MX_TIM2_Init+0x98>)
 8000cd8:	f003 fccc 	bl	8004674 <HAL_TIM_Base_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ce2:	f000 f8c5 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_TIM2_Init+0x98>)
 8000cf4:	f003 fe88 	bl	8004a08 <HAL_TIM_ConfigClockSource>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cfe:	f000 f8b7 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d02:	2320      	movs	r3, #32
 8000d04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4806      	ldr	r0, [pc, #24]	; (8000d28 <MX_TIM2_Init+0x98>)
 8000d10:	f004 f8a0 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d1a:	f000 f8a9 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3720      	adds	r7, #32
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	20000188 	.word	0x20000188

08000d2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d36:	4a15      	ldr	r2, [pc, #84]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d38:	f043 0304 	orr.w	r3, r3, #4
 8000d3c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d42:	f003 0304 	and.w	r3, r3, #4
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d4e:	4a0f      	ldr	r2, [pc, #60]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6493      	str	r3, [r2, #72]	; 0x48
 8000d56:	4b0d      	ldr	r3, [pc, #52]	; (8000d8c <MX_DMA_Init+0x60>)
 8000d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	200b      	movs	r0, #11
 8000d68:	f000 fc59 	bl	800161e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d6c:	200b      	movs	r0, #11
 8000d6e:	f000 fc72 	bl	8001656 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	200c      	movs	r0, #12
 8000d78:	f000 fc51 	bl	800161e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d7c:	200c      	movs	r0, #12
 8000d7e:	f000 fc6a 	bl	8001656 <HAL_NVIC_EnableIRQ>

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b2f      	ldr	r3, [pc, #188]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a2e      	ldr	r2, [pc, #184]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b2c      	ldr	r3, [pc, #176]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000ddc:	f043 0310 	orr.w	r3, r3, #16
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0310 	and.w	r3, r3, #16
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_GPIO_Init+0xd4>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e0c:	4816      	ldr	r0, [pc, #88]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000e0e:	f001 ff79 	bl	8002d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Button_Pin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8000e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4810      	ldr	r0, [pc, #64]	; (8000e6c <MX_GPIO_Init+0xdc>)
 8000e2a:	f001 fdd9 	bl	80029e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_2_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin;
 8000e2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_2_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <MX_GPIO_Init+0xd8>)
 8000e48:	f001 fdca 	bl	80029e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f000 fbe4 	bl	800161e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e56:	2028      	movs	r0, #40	; 0x28
 8000e58:	f000 fbfd 	bl	8001656 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a2b      	ldr	r2, [pc, #172]	; (8000f90 <HAL_DAC_MspInit+0xcc>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d14f      	bne.n	8000f86 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <HAL_DAC_MspInit+0xd0>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a2a      	ldr	r2, [pc, #168]	; (8000f94 <HAL_DAC_MspInit+0xd0>)
 8000eec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <HAL_DAC_MspInit+0xd0>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <HAL_DAC_MspInit+0xd0>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a24      	ldr	r2, [pc, #144]	; (8000f94 <HAL_DAC_MspInit+0xd0>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_DAC_MspInit+0xd0>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f16:	2310      	movs	r3, #16
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2c:	f001 fd58 	bl	80029e0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f32:	4a1a      	ldr	r2, [pc, #104]	; (8000f9c <HAL_DAC_MspInit+0xd8>)
 8000f34:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8000f36:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f38:	2206      	movs	r2, #6
 8000f3a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f3c:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f3e:	2210      	movs	r2, #16
 8000f40:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f48:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f4e:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f54:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f5c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f60:	2220      	movs	r2, #32
 8000f62:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000f6a:	480b      	ldr	r0, [pc, #44]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f6c:	f001 fa6a 	bl	8002444 <HAL_DMA_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8000f76:	f7ff ff7b 	bl	8000e70 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <HAL_DAC_MspInit+0xd4>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40007400 	.word	0x40007400
 8000f94:	40021000 	.word	0x40021000
 8000f98:	2000003c 	.word	0x2000003c
 8000f9c:	40020008 	.word	0x40020008

08000fa0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b0ae      	sub	sp, #184	; 0xb8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2294      	movs	r2, #148	; 0x94
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 f833 	bl	800502c <memset>
  if(DFSDM1_Init == 0)
 8000fc6:	4b45      	ldr	r3, [pc, #276]	; (80010dc <HAL_DFSDM_FilterMspInit+0x13c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d14b      	bne.n	8001066 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fe30 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8000fea:	f7ff ff41 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000fee:	4b3c      	ldr	r3, [pc, #240]	; (80010e0 <HAL_DFSDM_FilterMspInit+0x140>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a3a      	ldr	r2, [pc, #232]	; (80010e0 <HAL_DFSDM_FilterMspInit+0x140>)
 8000ff6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000ff8:	4b39      	ldr	r3, [pc, #228]	; (80010e0 <HAL_DFSDM_FilterMspInit+0x140>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d10b      	bne.n	8001018 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001000:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <HAL_DFSDM_FilterMspInit+0x144>)
 8001002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001004:	4a37      	ldr	r2, [pc, #220]	; (80010e4 <HAL_DFSDM_FilterMspInit+0x144>)
 8001006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800100a:	6613      	str	r3, [r2, #96]	; 0x60
 800100c:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <HAL_DFSDM_FilterMspInit+0x144>)
 800100e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001010:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001018:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <HAL_DFSDM_FilterMspInit+0x144>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <HAL_DFSDM_FilterMspInit+0x144>)
 800101e:	f043 0310 	orr.w	r3, r3, #16
 8001022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <HAL_DFSDM_FilterMspInit+0x144>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	f003 0310 	and.w	r3, r3, #16
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001030:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800104a:	2306      	movs	r3, #6
 800104c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001050:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001054:	4619      	mov	r1, r3
 8001056:	4824      	ldr	r0, [pc, #144]	; (80010e8 <HAL_DFSDM_FilterMspInit+0x148>)
 8001058:	f001 fcc2 	bl	80029e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <HAL_DFSDM_FilterMspInit+0x13c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <HAL_DFSDM_FilterMspInit+0x13c>)
 8001064:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a20      	ldr	r2, [pc, #128]	; (80010ec <HAL_DFSDM_FilterMspInit+0x14c>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d130      	bne.n	80010d2 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_DFSDM_FilterMspInit+0x154>)
 8001074:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001078:	2256      	movs	r2, #86	; 0x56
 800107a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001090:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001094:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 8001098:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800109c:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800109e:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80010aa:	4811      	ldr	r0, [pc, #68]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 80010ac:	f001 f9ca 	bl	8002444 <HAL_DMA_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 80010b6:	f7ff fedb 	bl	8000e70 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a0c      	ldr	r2, [pc, #48]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 80010be:	62da      	str	r2, [r3, #44]	; 0x2c
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
 80010cc:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <HAL_DFSDM_FilterMspInit+0x150>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80010d2:	bf00      	nop
 80010d4:	37b8      	adds	r7, #184	; 0xb8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2007d25c 	.word	0x2007d25c
 80010e0:	2007d258 	.word	0x2007d258
 80010e4:	40021000 	.word	0x40021000
 80010e8:	48001000 	.word	0x48001000
 80010ec:	40016100 	.word	0x40016100
 80010f0:	20000128 	.word	0x20000128
 80010f4:	4002001c 	.word	0x4002001c

080010f8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0ae      	sub	sp, #184	; 0xb8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2294      	movs	r2, #148	; 0x94
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f003 ff87 	bl	800502c <memset>
  if(DFSDM1_Init == 0)
 800111e:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d14b      	bne.n	80011be <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800112a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4618      	mov	r0, r3
 8001138:	f002 fd84 	bl	8003c44 <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001142:	f7ff fe95 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <HAL_DFSDM_ChannelMspInit+0xd4>)
 800114e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <HAL_DFSDM_ChannelMspInit+0xd4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d10b      	bne.n	8001170 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115c:	4a1c      	ldr	r2, [pc, #112]	; (80011d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800115e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001162:	6613      	str	r3, [r2, #96]	; 0x60
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8001188:	f44f 7320 	mov.w	r3, #640	; 0x280
 800118c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001190:	2302      	movs	r3, #2
 8001192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011a2:	2306      	movs	r3, #6
 80011a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80011b0:	f001 fc16 	bl	80029e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80011bc:	6013      	str	r3, [r2, #0]
  }

}
 80011be:	bf00      	nop
 80011c0:	37b8      	adds	r7, #184	; 0xb8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2007d25c 	.word	0x2007d25c
 80011cc:	2007d258 	.word	0x2007d258
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48001000 	.word	0x48001000

080011d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e8:	d113      	bne.n	8001212 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6593      	str	r3, [r2, #88]	; 0x58
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_TIM_Base_MspInit+0x44>)
 80011f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	201c      	movs	r0, #28
 8001208:	f000 fa09 	bl	800161e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800120c:	201c      	movs	r0, #28
 800120e:	f000 fa22 	bl	8001656 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f8b8 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <DMA1_Channel1_IRQHandler+0x10>)
 800127a:	f001 fa62 	bl	8002742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000003c 	.word	0x2000003c

08001288 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800128c:	4802      	ldr	r0, [pc, #8]	; (8001298 <DMA1_Channel2_IRQHandler+0x10>)
 800128e:	f001 fa58 	bl	8002742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000128 	.word	0x20000128

0800129c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM2_IRQHandler+0x10>)
 80012a2:	f003 faaf 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000188 	.word	0x20000188

080012b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(User_Button_Pin);
 80012b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012b8:	f001 fd3c 	bl	8002d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	; (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e8:	f7ff ffea 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ee:	490d      	ldr	r1, [pc, #52]	; (8001324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <LoopForever+0xe>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001304:	4c0a      	ldr	r4, [pc, #40]	; (8001330 <LoopForever+0x16>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001312:	f003 fe93 	bl	800503c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001316:	f7ff fbaf 	bl	8000a78 <main>

0800131a <LoopForever>:

LoopForever:
    b LoopForever
 800131a:	e7fe      	b.n	800131a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800131c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001328:	080058e8 	.word	0x080058e8
  ldr r2, =_sbss
 800132c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001330:	2007d288 	.word	0x2007d288

08001334 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC1_IRQHandler>

08001336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 f961 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001346:	200f      	movs	r0, #15
 8001348:	f000 f80e 	bl	8001368 <HAL_InitTick>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d002      	beq.n	8001358 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	71fb      	strb	r3, [r7, #7]
 8001356:	e001      	b.n	800135c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001358:	f7ff fd90 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800135c:	79fb      	ldrb	r3, [r7, #7]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001374:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_InitTick+0x6c>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d023      	beq.n	80013c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_InitTick+0x70>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_InitTick+0x6c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f96d 	bl	8001672 <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d809      	bhi.n	80013b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013ac:	f000 f937 	bl	800161e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_InitTick+0x74>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	e007      	b.n	80013c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e004      	b.n	80013c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e001      	b.n	80013c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000008 	.word	0x20000008
 80013d8:	20000000 	.word	0x20000000
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	2007d260 	.word	0x2007d260

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	2007d260 	.word	0x2007d260

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_Delay+0x44>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	; (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff29 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff3e 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff8e 	bl	800155c <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5d 	bl	8001508 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff31 	bl	80014cc <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff ffa2 	bl	80015c4 <SysTick_Config>
 8001680:	4603      	mov	r3, r0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e014      	b.n	80016c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	791b      	ldrb	r3, [r3, #4]
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d105      	bne.n	80016b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7ff fc09 	bl	8000ec4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	795b      	ldrb	r3, [r3, #5]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_DAC_Start_DMA+0x1e>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e0ab      	b.n	8001846 <HAL_DAC_Start_DMA+0x176>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2202      	movs	r2, #2
 80016f8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d12f      	bne.n	8001760 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a52      	ldr	r2, [pc, #328]	; (8001850 <HAL_DAC_Start_DMA+0x180>)
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a51      	ldr	r2, [pc, #324]	; (8001854 <HAL_DAC_Start_DMA+0x184>)
 800170e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a50      	ldr	r2, [pc, #320]	; (8001858 <HAL_DAC_Start_DMA+0x188>)
 8001716:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001726:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001728:	6a3b      	ldr	r3, [r7, #32]
 800172a:	2b08      	cmp	r3, #8
 800172c:	d013      	beq.n	8001756 <HAL_DAC_Start_DMA+0x86>
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d845      	bhi.n	80017c0 <HAL_DAC_Start_DMA+0xf0>
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_DAC_Start_DMA+0x72>
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	2b04      	cmp	r3, #4
 800173e:	d005      	beq.n	800174c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001740:	e03e      	b.n	80017c0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3308      	adds	r3, #8
 8001748:	613b      	str	r3, [r7, #16]
        break;
 800174a:	e03c      	b.n	80017c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	330c      	adds	r3, #12
 8001752:	613b      	str	r3, [r7, #16]
        break;
 8001754:	e037      	b.n	80017c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	3310      	adds	r3, #16
 800175c:	613b      	str	r3, [r7, #16]
        break;
 800175e:	e032      	b.n	80017c6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4a3d      	ldr	r2, [pc, #244]	; (800185c <HAL_DAC_Start_DMA+0x18c>)
 8001766:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	4a3c      	ldr	r2, [pc, #240]	; (8001860 <HAL_DAC_Start_DMA+0x190>)
 800176e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4a3b      	ldr	r2, [pc, #236]	; (8001864 <HAL_DAC_Start_DMA+0x194>)
 8001776:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001786:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d013      	beq.n	80017b6 <HAL_DAC_Start_DMA+0xe6>
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	2b08      	cmp	r3, #8
 8001792:	d817      	bhi.n	80017c4 <HAL_DAC_Start_DMA+0xf4>
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_DAC_Start_DMA+0xd2>
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	2b04      	cmp	r3, #4
 800179e:	d005      	beq.n	80017ac <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80017a0:	e010      	b.n	80017c4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3314      	adds	r3, #20
 80017a8:	613b      	str	r3, [r7, #16]
        break;
 80017aa:	e00c      	b.n	80017c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3318      	adds	r3, #24
 80017b2:	613b      	str	r3, [r7, #16]
        break;
 80017b4:	e007      	b.n	80017c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	331c      	adds	r3, #28
 80017bc:	613b      	str	r3, [r7, #16]
        break;
 80017be:	e002      	b.n	80017c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80017c0:	bf00      	nop
 80017c2:	e000      	b.n	80017c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80017c4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d111      	bne.n	80017f0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6898      	ldr	r0, [r3, #8]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	f000 fed5 	bl	8002594 <HAL_DMA_Start_IT>
 80017ea:	4603      	mov	r3, r0
 80017ec:	75fb      	strb	r3, [r7, #23]
 80017ee:	e010      	b.n	8001812 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80017fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	68d8      	ldr	r0, [r3, #12]
 8001804:	6879      	ldr	r1, [r7, #4]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	f000 fec3 	bl	8002594 <HAL_DMA_Start_IT>
 800180e:	4603      	mov	r3, r0
 8001810:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2200      	movs	r2, #0
 8001816:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6819      	ldr	r1, [r3, #0]
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2201      	movs	r2, #1
 800182c:	409a      	lsls	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	e005      	b.n	8001844 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	f043 0204 	orr.w	r2, r3, #4
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001844:	7dfb      	ldrb	r3, [r7, #23]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	08001bc9 	.word	0x08001bc9
 8001854:	08001beb 	.word	0x08001beb
 8001858:	08001c07 	.word	0x08001c07
 800185c:	08001c71 	.word	0x08001c71
 8001860:	08001c93 	.word	0x08001c93
 8001864:	08001caf 	.word	0x08001caf

08001868 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	6819      	ldr	r1, [r3, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	400a      	ands	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6819      	ldr	r1, [r3, #0]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f003 0310 	and.w	r3, r3, #16
 800189c:	2201      	movs	r2, #1
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d10d      	bne.n	80018ce <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f000 fee7 	bl	800268a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	e00c      	b.n	80018e8 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f000 fed9 	bl	800268a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80018e6:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800191a:	b480      	push	{r7}
 800191c:	b083      	sub	sp, #12
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	795b      	ldrb	r3, [r3, #5]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_DAC_ConfigChannel+0x1c>
 8001948:	2302      	movs	r3, #2
 800194a:	e137      	b.n	8001bbc <HAL_DAC_ConfigChannel+0x28c>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2202      	movs	r2, #2
 8001956:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b04      	cmp	r3, #4
 800195e:	f040 8081 	bne.w	8001a64 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001962:	f7ff fd51 	bl	8001408 <HAL_GetTick>
 8001966:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d140      	bne.n	80019f0 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800196e:	e018      	b.n	80019a2 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001970:	f7ff fd4a 	bl	8001408 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d911      	bls.n	80019a2 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00a      	beq.n	80019a2 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f043 0208 	orr.w	r2, r3, #8
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2203      	movs	r2, #3
 800199c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e10c      	b.n	8001bbc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1df      	bne.n	8001970 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80019b0:	2001      	movs	r0, #1
 80019b2:	f7ff fd35 	bl	8001420 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	69d2      	ldr	r2, [r2, #28]
 80019be:	641a      	str	r2, [r3, #64]	; 0x40
 80019c0:	e023      	b.n	8001a0a <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80019c2:	f7ff fd21 	bl	8001408 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d90f      	bls.n	80019f0 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da0a      	bge.n	80019f0 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	f043 0208 	orr.w	r2, r3, #8
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2203      	movs	r2, #3
 80019ea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e0e5      	b.n	8001bbc <HAL_DAC_ConfigChannel+0x28c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	dbe3      	blt.n	80019c2 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff fd10 	bl	8001420 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68ba      	ldr	r2, [r7, #8]
 8001a06:	69d2      	ldr	r2, [r2, #28]
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	ea02 0103 	and.w	r1, r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	6a1a      	ldr	r2, [r3, #32]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f003 0310 	and.w	r3, r3, #16
 8001a44:	21ff      	movs	r1, #255	; 0xff
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	ea02 0103 	and.w	r1, r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d11d      	bne.n	8001aa8 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a72:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0310 	and.w	r3, r3, #16
 8001a7a:	221f      	movs	r2, #31
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aae:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0310 	and.w	r3, r3, #16
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69fa      	ldr	r2, [r7, #28]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	431a      	orrs	r2, r3
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43da      	mvns	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f003 0310 	and.w	r3, r3, #16
 8001b1c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b4c:	d104      	bne.n	8001b58 <HAL_DAC_ConfigChannel+0x228>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e018      	b.n	8001b8a <HAL_DAC_ConfigChannel+0x25a>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d104      	bne.n	8001b6a <HAL_DAC_ConfigChannel+0x23a>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	e00f      	b.n	8001b8a <HAL_DAC_ConfigChannel+0x25a>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8001b6a:	f001 ff9f 	bl	8003aac <HAL_RCC_GetHCLKFreq>
 8001b6e:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4a14      	ldr	r2, [pc, #80]	; (8001bc4 <HAL_DAC_ConfigChannel+0x294>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d904      	bls.n	8001b82 <HAL_DAC_ConfigChannel+0x252>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7e:	61fb      	str	r3, [r7, #28]
 8001b80:	e003      	b.n	8001b8a <HAL_DAC_ConfigChannel+0x25a>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b88:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	22c0      	movs	r2, #192	; 0xc0
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43da      	mvns	r2, r3
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	400a      	ands	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	04c4b400 	.word	0x04c4b400

08001bc8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff fe8b 	bl	80018f2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	711a      	strb	r2, [r3, #4]
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b084      	sub	sp, #16
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001bf8:	68f8      	ldr	r0, [r7, #12]
 8001bfa:	f7ff fe84 	bl	8001906 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f043 0204 	orr.w	r2, r3, #4
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f7ff fe7a 	bl	800191a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	711a      	strb	r2, [r3, #4]
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff ffd8 	bl	8001c34 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	711a      	strb	r2, [r3, #4]
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001ca0:	68f8      	ldr	r0, [r7, #12]
 8001ca2:	f7ff ffd1 	bl	8001c48 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f043 0204 	orr.w	r2, r3, #4
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f7ff ffc7 	bl	8001c5c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	711a      	strb	r2, [r3, #4]
}
 8001cd4:	bf00      	nop
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0ac      	b.n	8001e48 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fab6 	bl	8002264 <DFSDM_GetChannelFromInstance>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a55      	ldr	r2, [pc, #340]	; (8001e50 <HAL_DFSDM_ChannelInit+0x174>)
 8001cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e09f      	b.n	8001e48 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff f9f5 	bl	80010f8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001d0e:	4b51      	ldr	r3, [pc, #324]	; (8001e54 <HAL_DFSDM_ChannelInit+0x178>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	4a4f      	ldr	r2, [pc, #316]	; (8001e54 <HAL_DFSDM_ChannelInit+0x178>)
 8001d16:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001d18:	4b4e      	ldr	r3, [pc, #312]	; (8001e54 <HAL_DFSDM_ChannelInit+0x178>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d125      	bne.n	8001d6c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001d20:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d2a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001d2c:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	4948      	ldr	r1, [pc, #288]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001d3a:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d40:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001d44:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	791b      	ldrb	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d108      	bne.n	8001d60 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001d4e:	4b42      	ldr	r3, [pc, #264]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	3b01      	subs	r3, #1
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	493f      	ldr	r1, [pc, #252]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001d60:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a3c      	ldr	r2, [pc, #240]	; (8001e58 <HAL_DFSDM_ChannelInit+0x17c>)
 8001d66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d6a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001d7a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d8a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001d90:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 020f 	bic.w	r2, r2, #15
 8001da8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6819      	ldr	r1, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001dd0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	3b01      	subs	r3, #1
 8001de2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f002 0207 	and.w	r2, r2, #7
 8001dfc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001e10:	431a      	orrs	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e28:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 fa14 	bl	8002264 <DFSDM_GetChannelFromInstance>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4904      	ldr	r1, [pc, #16]	; (8001e50 <HAL_DFSDM_ChannelInit+0x174>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	2007d268 	.word	0x2007d268
 8001e54:	2007d264 	.word	0x2007d264
 8001e58:	40016000 	.word	0x40016000

08001e5c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0ca      	b.n	8002004 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a66      	ldr	r2, [pc, #408]	; (800200c <HAL_DFSDM_FilterInit+0x1b0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d109      	bne.n	8001e8c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d003      	beq.n	8001e88 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0bb      	b.n	8002004 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff f87b 	bl	8000fa0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001eb8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7a1b      	ldrb	r3, [r3, #8]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d108      	bne.n	8001ed4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e007      	b.n	8001ee4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001ee2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7a5b      	ldrb	r3, [r3, #9]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d108      	bne.n	8001efe <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	e007      	b.n	8001f0e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001f0c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f1c:	f023 0308 	bic.w	r3, r3, #8
 8001f20:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d108      	bne.n	8001f3c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7c1b      	ldrb	r3, [r3, #16]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d108      	bne.n	8001f56 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f042 0210 	orr.w	r2, r2, #16
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	e007      	b.n	8001f66 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0210 	bic.w	r2, r2, #16
 8001f64:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	7c5b      	ldrb	r3, [r3, #17]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d108      	bne.n	8001f80 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f042 0220 	orr.w	r2, r2, #32
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	e007      	b.n	8001f90 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0220 	bic.w	r2, r2, #32
 8001f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6812      	ldr	r2, [r2, #0]
 8001f9a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8001f9e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001fa2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6959      	ldr	r1, [r3, #20]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001fb6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8001fbe:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7c1a      	ldrb	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40016100 	.word	0x40016100

08002010 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d02e      	beq.n	8002088 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002030:	2bff      	cmp	r3, #255	; 0xff
 8002032:	d029      	beq.n	8002088 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10d      	bne.n	800206a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	021b      	lsls	r3, r3, #8
 8002058:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800205c:	431a      	orrs	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e00a      	b.n	8002080 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6819      	ldr	r1, [r3, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
 8002086:	e001      	b.n	800208c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800208c:	7dfb      	ldrb	r3, [r7, #23]
}
 800208e:	4618      	mov	r0, r3
 8002090:	371c      	adds	r7, #28
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
	...

0800209c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d002      	beq.n	80020b8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
 80020bc:	e064      	b.n	8002188 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020cc:	d002      	beq.n	80020d4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	75fb      	strb	r3, [r7, #23]
 80020d2:	e059      	b.n	8002188 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d10e      	bne.n	80020fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10a      	bne.n	80020fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d105      	bne.n	80020fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d002      	beq.n	80020fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	75fb      	strb	r3, [r7, #23]
 80020f8:	e046      	b.n	8002188 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10b      	bne.n	800211a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8002106:	2b00      	cmp	r3, #0
 8002108:	d107      	bne.n	800211a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8002110:	2b20      	cmp	r3, #32
 8002112:	d102      	bne.n	800211a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	75fb      	strb	r3, [r7, #23]
 8002118:	e036      	b.n	8002188 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d004      	beq.n	800212e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800212a:	2b03      	cmp	r3, #3
 800212c:	d12a      	bne.n	8002184 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002132:	4a18      	ldr	r2, [pc, #96]	; (8002194 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8002134:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800213c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8002144:	2b20      	cmp	r3, #32
 8002146:	d101      	bne.n	800214c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800214a:	e000      	b.n	800214e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800214c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	331c      	adds	r3, #28
 800215e:	4619      	mov	r1, r3
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f000 fa16 	bl	8002594 <HAL_DMA_Start_IT>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d006      	beq.n	800217c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	22ff      	movs	r2, #255	; 0xff
 8002172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800217a:	e005      	b.n	8002188 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f8bd 	bl	80022fc <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8002182:	e001      	b.n	8002188 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8002188:	7dfb      	ldrb	r3, [r7, #23]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	08002225 	.word	0x08002225
 8002198:	08002241 	.word	0x08002241
 800219c:	08002209 	.word	0x08002209

080021a0 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d007      	beq.n	80021c6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d002      	beq.n	80021c6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	73fb      	strb	r3, [r7, #15]
 80021c4:	e007      	b.n	80021d6 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ca:	4618      	mov	r0, r3
 80021cc:	f000 fa5d 	bl	800268a <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8e9 	bl	80023a8 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff ffe2 	bl	80021e0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7fe fba2 	bl	800097c <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8002238:	bf00      	nop
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2203      	movs	r2, #3
 8002252:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff ffcd 	bl	80021f4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a1c      	ldr	r2, [pc, #112]	; (80022e0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d102      	bne.n	800227a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e02b      	b.n	80022d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <DFSDM_GetChannelFromInstance+0x80>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d102      	bne.n	8002288 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002282:	2301      	movs	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	e024      	b.n	80022d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <DFSDM_GetChannelFromInstance+0x84>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d102      	bne.n	8002296 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002290:	2302      	movs	r3, #2
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e01d      	b.n	80022d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a14      	ldr	r2, [pc, #80]	; (80022ec <DFSDM_GetChannelFromInstance+0x88>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d102      	bne.n	80022a4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800229e:	2304      	movs	r3, #4
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e016      	b.n	80022d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <DFSDM_GetChannelFromInstance+0x8c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d102      	bne.n	80022b2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80022ac:	2305      	movs	r3, #5
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e00f      	b.n	80022d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <DFSDM_GetChannelFromInstance+0x90>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d102      	bne.n	80022c0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80022ba:	2306      	movs	r3, #6
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e008      	b.n	80022d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a0d      	ldr	r2, [pc, #52]	; (80022f8 <DFSDM_GetChannelFromInstance+0x94>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d102      	bne.n	80022ce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80022c8:	2307      	movs	r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e001      	b.n	80022d2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80022ce:	2303      	movs	r3, #3
 80022d0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80022d2:	68fb      	ldr	r3, [r7, #12]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40016000 	.word	0x40016000
 80022e4:	40016020 	.word	0x40016020
 80022e8:	40016040 	.word	0x40016040
 80022ec:	40016080 	.word	0x40016080
 80022f0:	400160a0 	.word	0x400160a0
 80022f4:	400160c0 	.word	0x400160c0
 80022f8:	400160e0 	.word	0x400160e0

080022fc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002308:	2b00      	cmp	r3, #0
 800230a:	d108      	bne.n	800231e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	e033      	b.n	8002386 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0201 	bic.w	r2, r2, #1
 800232c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800233c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0201 	orr.w	r2, r2, #1
 800234c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002354:	2b03      	cmp	r3, #3
 8002356:	d116      	bne.n	8002386 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235c:	2b00      	cmp	r3, #0
 800235e:	d107      	bne.n	8002370 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0202 	orr.w	r2, r2, #2
 800236e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002376:	2b01      	cmp	r3, #1
 8002378:	d102      	bne.n	8002380 <DFSDM_RegConvStart+0x84>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	e000      	b.n	8002382 <DFSDM_RegConvStart+0x86>
 8002380:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <DFSDM_RegConvStart+0x98>
 8002390:	2202      	movs	r2, #2
 8002392:	e000      	b.n	8002396 <DFSDM_RegConvStart+0x9a>
 8002394:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0201 	bic.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d107      	bne.n	80023d8 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80023d6:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0201 	orr.w	r2, r2, #1
 80023e6:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80023ee:	2b04      	cmp	r3, #4
 80023f0:	d116      	bne.n	8002420 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0202 	orr.w	r2, r2, #2
 8002408:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <DFSDM_RegConvStop+0x72>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	e000      	b.n	800241c <DFSDM_RegConvStop+0x74>
 800241a:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8002426:	2b02      	cmp	r3, #2
 8002428:	d101      	bne.n	800242e <DFSDM_RegConvStop+0x86>
 800242a:	2201      	movs	r2, #1
 800242c:	e000      	b.n	8002430 <DFSDM_RegConvStop+0x88>
 800242e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e08d      	b.n	8002572 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	4b47      	ldr	r3, [pc, #284]	; (800257c <HAL_DMA_Init+0x138>)
 800245e:	429a      	cmp	r2, r3
 8002460:	d80f      	bhi.n	8002482 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	4b45      	ldr	r3, [pc, #276]	; (8002580 <HAL_DMA_Init+0x13c>)
 800246a:	4413      	add	r3, r2
 800246c:	4a45      	ldr	r2, [pc, #276]	; (8002584 <HAL_DMA_Init+0x140>)
 800246e:	fba2 2303 	umull	r2, r3, r2, r3
 8002472:	091b      	lsrs	r3, r3, #4
 8002474:	009a      	lsls	r2, r3, #2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a42      	ldr	r2, [pc, #264]	; (8002588 <HAL_DMA_Init+0x144>)
 800247e:	641a      	str	r2, [r3, #64]	; 0x40
 8002480:	e00e      	b.n	80024a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	4b40      	ldr	r3, [pc, #256]	; (800258c <HAL_DMA_Init+0x148>)
 800248a:	4413      	add	r3, r2
 800248c:	4a3d      	ldr	r2, [pc, #244]	; (8002584 <HAL_DMA_Init+0x140>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	009a      	lsls	r2, r3, #2
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a3c      	ldr	r2, [pc, #240]	; (8002590 <HAL_DMA_Init+0x14c>)
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80024b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a1b      	ldr	r3, [r3, #32]
 80024e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 fa12 	bl	800291c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002500:	d102      	bne.n	8002508 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800251c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d010      	beq.n	8002548 <HAL_DMA_Init+0x104>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b04      	cmp	r3, #4
 800252c:	d80c      	bhi.n	8002548 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 fa32 	bl	8002998 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002544:	605a      	str	r2, [r3, #4]
 8002546:	e008      	b.n	800255a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40020407 	.word	0x40020407
 8002580:	bffdfff8 	.word	0xbffdfff8
 8002584:	cccccccd 	.word	0xcccccccd
 8002588:	40020000 	.word	0x40020000
 800258c:	bffdfbf8 	.word	0xbffdfbf8
 8002590:	40020400 	.word	0x40020400

08002594 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
 80025a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Start_IT+0x20>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e066      	b.n	8002682 <HAL_DMA_Start_IT+0xee>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d155      	bne.n	8002674 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2202      	movs	r2, #2
 80025cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0201 	bic.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f957 	bl	80028a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 020e 	orr.w	r2, r2, #14
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e00f      	b.n	800262c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 0204 	bic.w	r2, r2, #4
 800261a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 020a 	orr.w	r2, r2, #10
 800262a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002648:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002660:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f042 0201 	orr.w	r2, r2, #1
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	e005      	b.n	8002680 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800267c:	2302      	movs	r3, #2
 800267e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002680:	7dfb      	ldrb	r3, [r7, #23]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d008      	beq.n	80026b4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2204      	movs	r2, #4
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e040      	b.n	8002736 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 020e 	bic.w	r2, r2, #14
 80026c2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f003 021c 	and.w	r2, r3, #28
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002700:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00c      	beq.n	8002724 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002718:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002722:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002734:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f003 031c 	and.w	r3, r3, #28
 8002762:	2204      	movs	r2, #4
 8002764:	409a      	lsls	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d026      	beq.n	80027bc <HAL_DMA_IRQHandler+0x7a>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d021      	beq.n	80027bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d107      	bne.n	8002796 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0204 	bic.w	r2, r2, #4
 8002794:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f003 021c 	and.w	r2, r3, #28
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	2104      	movs	r1, #4
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d071      	beq.n	8002896 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027ba:	e06c      	b.n	8002896 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c0:	f003 031c 	and.w	r3, r3, #28
 80027c4:	2202      	movs	r2, #2
 80027c6:	409a      	lsls	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d02e      	beq.n	800282e <HAL_DMA_IRQHandler+0xec>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d029      	beq.n	800282e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 020a 	bic.w	r2, r2, #10
 80027f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f003 021c 	and.w	r2, r3, #28
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2102      	movs	r1, #2
 800280e:	fa01 f202 	lsl.w	r2, r1, r2
 8002812:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d038      	beq.n	8002896 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800282c:	e033      	b.n	8002896 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f003 031c 	and.w	r3, r3, #28
 8002836:	2208      	movs	r2, #8
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d02a      	beq.n	8002898 <HAL_DMA_IRQHandler+0x156>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d025      	beq.n	8002898 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020e 	bic.w	r2, r2, #14
 800285a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f003 021c 	and.w	r2, r3, #28
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2101      	movs	r1, #1
 800286a:	fa01 f202 	lsl.w	r2, r1, r2
 800286e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	2b00      	cmp	r3, #0
 800288c:	d004      	beq.n	8002898 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002896:	bf00      	nop
 8002898:	bf00      	nop
}
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d004      	beq.n	80028ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80028c8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f003 021c 	and.w	r2, r3, #28
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f202 	lsl.w	r2, r1, r2
 80028dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d108      	bne.n	8002900 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028fe:	e007      	b.n	8002910 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	60da      	str	r2, [r3, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800292c:	429a      	cmp	r2, r3
 800292e:	d80a      	bhi.n	8002946 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800293c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6493      	str	r3, [r2, #72]	; 0x48
 8002944:	e007      	b.n	8002956 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	009a      	lsls	r2, r3, #2
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002950:	4413      	add	r3, r2
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3b08      	subs	r3, #8
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800296c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2201      	movs	r2, #1
 8002976:	409a      	lsls	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40020407 	.word	0x40020407
 800298c:	4002081c 	.word	0x4002081c
 8002990:	cccccccd 	.word	0xcccccccd
 8002994:	40020880 	.word	0x40020880

08002998 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	461a      	mov	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a08      	ldr	r2, [pc, #32]	; (80029dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80029ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2201      	movs	r2, #1
 80029c6:	409a      	lsls	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	1000823f 	.word	0x1000823f
 80029dc:	40020940 	.word	0x40020940

080029e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ee:	e166      	b.n	8002cbe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	2101      	movs	r1, #1
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	fa01 f303 	lsl.w	r3, r1, r3
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 8158 	beq.w	8002cb8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d005      	beq.n	8002a20 <HAL_GPIO_Init+0x40>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d130      	bne.n	8002a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a56:	2201      	movs	r2, #1
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	f003 0201 	and.w	r2, r3, #1
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d017      	beq.n	8002abe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d123      	bne.n	8002b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	220f      	movs	r2, #15
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4013      	ands	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	6939      	ldr	r1, [r7, #16]
 8002b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0203 	and.w	r2, r3, #3
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 80b2 	beq.w	8002cb8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b54:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b58:	4a60      	ldr	r2, [pc, #384]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6613      	str	r3, [r2, #96]	; 0x60
 8002b60:	4b5e      	ldr	r3, [pc, #376]	; (8002cdc <HAL_GPIO_Init+0x2fc>)
 8002b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b6c:	4a5c      	ldr	r2, [pc, #368]	; (8002ce0 <HAL_GPIO_Init+0x300>)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b96:	d02b      	beq.n	8002bf0 <HAL_GPIO_Init+0x210>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a52      	ldr	r2, [pc, #328]	; (8002ce4 <HAL_GPIO_Init+0x304>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d025      	beq.n	8002bec <HAL_GPIO_Init+0x20c>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a51      	ldr	r2, [pc, #324]	; (8002ce8 <HAL_GPIO_Init+0x308>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d01f      	beq.n	8002be8 <HAL_GPIO_Init+0x208>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a50      	ldr	r2, [pc, #320]	; (8002cec <HAL_GPIO_Init+0x30c>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d019      	beq.n	8002be4 <HAL_GPIO_Init+0x204>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a4f      	ldr	r2, [pc, #316]	; (8002cf0 <HAL_GPIO_Init+0x310>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_GPIO_Init+0x200>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a4e      	ldr	r2, [pc, #312]	; (8002cf4 <HAL_GPIO_Init+0x314>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00d      	beq.n	8002bdc <HAL_GPIO_Init+0x1fc>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a4d      	ldr	r2, [pc, #308]	; (8002cf8 <HAL_GPIO_Init+0x318>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <HAL_GPIO_Init+0x1f8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a4c      	ldr	r2, [pc, #304]	; (8002cfc <HAL_GPIO_Init+0x31c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_GPIO_Init+0x1f4>
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	e00e      	b.n	8002bf2 <HAL_GPIO_Init+0x212>
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	e00c      	b.n	8002bf2 <HAL_GPIO_Init+0x212>
 8002bd8:	2306      	movs	r3, #6
 8002bda:	e00a      	b.n	8002bf2 <HAL_GPIO_Init+0x212>
 8002bdc:	2305      	movs	r3, #5
 8002bde:	e008      	b.n	8002bf2 <HAL_GPIO_Init+0x212>
 8002be0:	2304      	movs	r3, #4
 8002be2:	e006      	b.n	8002bf2 <HAL_GPIO_Init+0x212>
 8002be4:	2303      	movs	r3, #3
 8002be6:	e004      	b.n	8002bf2 <HAL_GPIO_Init+0x212>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e002      	b.n	8002bf2 <HAL_GPIO_Init+0x212>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_GPIO_Init+0x212>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	f002 0203 	and.w	r2, r2, #3
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	4093      	lsls	r3, r2
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c02:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <HAL_GPIO_Init+0x300>)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	3302      	adds	r3, #2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c10:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <HAL_GPIO_Init+0x320>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c34:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <HAL_GPIO_Init+0x320>)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c3a:	4b31      	ldr	r3, [pc, #196]	; (8002d00 <HAL_GPIO_Init+0x320>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c5e:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <HAL_GPIO_Init+0x320>)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c64:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_GPIO_Init+0x320>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c88:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <HAL_GPIO_Init+0x320>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c8e:	4b1c      	ldr	r3, [pc, #112]	; (8002d00 <HAL_GPIO_Init+0x320>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb2:	4a13      	ldr	r2, [pc, #76]	; (8002d00 <HAL_GPIO_Init+0x320>)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f47f ae91 	bne.w	80029f0 <HAL_GPIO_Init+0x10>
  }
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	48000800 	.word	0x48000800
 8002cec:	48000c00 	.word	0x48000c00
 8002cf0:	48001000 	.word	0x48001000
 8002cf4:	48001400 	.word	0x48001400
 8002cf8:	48001800 	.word	0x48001800
 8002cfc:	48001c00 	.word	0x48001c00
 8002d00:	40010400 	.word	0x40010400

08002d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
 8002d10:	4613      	mov	r3, r2
 8002d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d14:	787b      	ldrb	r3, [r7, #1]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d1a:	887a      	ldrh	r2, [r7, #2]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d20:	e002      	b.n	8002d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d22:	887a      	ldrh	r2, [r7, #2]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fd fdd8 	bl	8000908 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d68:	4b0d      	ldr	r3, [pc, #52]	; (8002da0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d74:	d102      	bne.n	8002d7c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d7a:	e00b      	b.n	8002d94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8a:	d102      	bne.n	8002d92 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d90:	e000      	b.n	8002d94 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002d92:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40007000 	.word	0x40007000

08002da4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d141      	bne.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002db2:	4b4b      	ldr	r3, [pc, #300]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dbe:	d131      	bne.n	8002e24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dc0:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc6:	4a46      	ldr	r2, [pc, #280]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dd0:	4b43      	ldr	r3, [pc, #268]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dd8:	4a41      	ldr	r2, [pc, #260]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002de0:	4b40      	ldr	r3, [pc, #256]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2232      	movs	r2, #50	; 0x32
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	4a3f      	ldr	r2, [pc, #252]	; (8002ee8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	0c9b      	lsrs	r3, r3, #18
 8002df2:	3301      	adds	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df6:	e002      	b.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dfe:	4b38      	ldr	r3, [pc, #224]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0a:	d102      	bne.n	8002e12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f2      	bne.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e12:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1e:	d158      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e057      	b.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e24:	4b2e      	ldr	r3, [pc, #184]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2a:	4a2d      	ldr	r2, [pc, #180]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e34:	e04d      	b.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3c:	d141      	bne.n	8002ec2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e3e:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4a:	d131      	bne.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e4c:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e52:	4a23      	ldr	r2, [pc, #140]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e5c:	4b20      	ldr	r3, [pc, #128]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e64:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e6c:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2232      	movs	r2, #50	; 0x32
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	0c9b      	lsrs	r3, r3, #18
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e82:	e002      	b.n	8002e8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e96:	d102      	bne.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f2      	bne.n	8002e84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eaa:	d112      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e011      	b.n	8002ed4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ebc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ec0:	e007      	b.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002eca:	4a05      	ldr	r2, [pc, #20]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ecc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40007000 	.word	0x40007000
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	431bde83 	.word	0x431bde83

08002eec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f000 bc08 	b.w	8003710 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f00:	4b96      	ldr	r3, [pc, #600]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0a:	4b94      	ldr	r3, [pc, #592]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80e4 	beq.w	80030ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d007      	beq.n	8002f38 <HAL_RCC_OscConfig+0x4c>
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	f040 808b 	bne.w	8003046 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	f040 8087 	bne.w	8003046 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f38:	4b88      	ldr	r3, [pc, #544]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d005      	beq.n	8002f50 <HAL_RCC_OscConfig+0x64>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e3df      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	4b81      	ldr	r3, [pc, #516]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_RCC_OscConfig+0x7e>
 8002f60:	4b7e      	ldr	r3, [pc, #504]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f68:	e005      	b.n	8002f76 <HAL_RCC_OscConfig+0x8a>
 8002f6a:	4b7c      	ldr	r3, [pc, #496]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d223      	bcs.n	8002fc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 fda0 	bl	8003ac4 <RCC_SetFlashLatencyFromMSIRange>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e3c0      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a72      	ldr	r2, [pc, #456]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b70      	ldr	r3, [pc, #448]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	496d      	ldr	r1, [pc, #436]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fac:	4b6b      	ldr	r3, [pc, #428]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	4968      	ldr	r1, [pc, #416]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	604b      	str	r3, [r1, #4]
 8002fc0:	e025      	b.n	800300e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc2:	4b66      	ldr	r3, [pc, #408]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a65      	ldr	r2, [pc, #404]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002fc8:	f043 0308 	orr.w	r3, r3, #8
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b63      	ldr	r3, [pc, #396]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4960      	ldr	r1, [pc, #384]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe0:	4b5e      	ldr	r3, [pc, #376]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	495b      	ldr	r1, [pc, #364]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fd60 	bl	8003ac4 <RCC_SetFlashLatencyFromMSIRange>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e380      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800300e:	f000 fcc1 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8003012:	4602      	mov	r2, r0
 8003014:	4b51      	ldr	r3, [pc, #324]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	091b      	lsrs	r3, r3, #4
 800301a:	f003 030f 	and.w	r3, r3, #15
 800301e:	4950      	ldr	r1, [pc, #320]	; (8003160 <HAL_RCC_OscConfig+0x274>)
 8003020:	5ccb      	ldrb	r3, [r1, r3]
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	fa22 f303 	lsr.w	r3, r2, r3
 800302a:	4a4e      	ldr	r2, [pc, #312]	; (8003164 <HAL_RCC_OscConfig+0x278>)
 800302c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800302e:	4b4e      	ldr	r3, [pc, #312]	; (8003168 <HAL_RCC_OscConfig+0x27c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fe f998 	bl	8001368 <HAL_InitTick>
 8003038:	4603      	mov	r3, r0
 800303a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d052      	beq.n	80030e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	e364      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d032      	beq.n	80030b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800304e:	4b43      	ldr	r3, [pc, #268]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a42      	ldr	r2, [pc, #264]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800305a:	f7fe f9d5 	bl	8001408 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003062:	f7fe f9d1 	bl	8001408 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e34d      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003074:	4b39      	ldr	r3, [pc, #228]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a35      	ldr	r2, [pc, #212]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003086:	f043 0308 	orr.w	r3, r3, #8
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	4b33      	ldr	r3, [pc, #204]	; (800315c <HAL_RCC_OscConfig+0x270>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4930      	ldr	r1, [pc, #192]	; (800315c <HAL_RCC_OscConfig+0x270>)
 800309a:	4313      	orrs	r3, r2
 800309c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800309e:	4b2f      	ldr	r3, [pc, #188]	; (800315c <HAL_RCC_OscConfig+0x270>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	021b      	lsls	r3, r3, #8
 80030ac:	492b      	ldr	r1, [pc, #172]	; (800315c <HAL_RCC_OscConfig+0x270>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]
 80030b2:	e01a      	b.n	80030ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030b4:	4b29      	ldr	r3, [pc, #164]	; (800315c <HAL_RCC_OscConfig+0x270>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a28      	ldr	r2, [pc, #160]	; (800315c <HAL_RCC_OscConfig+0x270>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030c0:	f7fe f9a2 	bl	8001408 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030c8:	f7fe f99e 	bl	8001408 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e31a      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030da:	4b20      	ldr	r3, [pc, #128]	; (800315c <HAL_RCC_OscConfig+0x270>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1dc>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d073      	beq.n	80031de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d005      	beq.n	8003108 <HAL_RCC_OscConfig+0x21c>
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d10e      	bne.n	8003120 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b03      	cmp	r3, #3
 8003106:	d10b      	bne.n	8003120 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_RCC_OscConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d063      	beq.n	80031dc <HAL_RCC_OscConfig+0x2f0>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d15f      	bne.n	80031dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e2f7      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x24c>
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_RCC_OscConfig+0x270>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a0b      	ldr	r2, [pc, #44]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e025      	b.n	8003184 <HAL_RCC_OscConfig+0x298>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003140:	d114      	bne.n	800316c <HAL_RCC_OscConfig+0x280>
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a05      	ldr	r2, [pc, #20]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	4b03      	ldr	r3, [pc, #12]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a02      	ldr	r2, [pc, #8]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	6013      	str	r3, [r2, #0]
 800315a:	e013      	b.n	8003184 <HAL_RCC_OscConfig+0x298>
 800315c:	40021000 	.word	0x40021000
 8003160:	0800509c 	.word	0x0800509c
 8003164:	20000000 	.word	0x20000000
 8003168:	20000004 	.word	0x20000004
 800316c:	4ba0      	ldr	r3, [pc, #640]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a9f      	ldr	r2, [pc, #636]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	4b9d      	ldr	r3, [pc, #628]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a9c      	ldr	r2, [pc, #624]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 800317e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d013      	beq.n	80031b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe f93c 	bl	8001408 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003194:	f7fe f938 	bl	8001408 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b64      	cmp	r3, #100	; 0x64
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e2b4      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031a6:	4b92      	ldr	r3, [pc, #584]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0f0      	beq.n	8003194 <HAL_RCC_OscConfig+0x2a8>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7fe f928 	bl	8001408 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031bc:	f7fe f924 	bl	8001408 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b64      	cmp	r3, #100	; 0x64
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e2a0      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ce:	4b88      	ldr	r3, [pc, #544]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <HAL_RCC_OscConfig+0x2d0>
 80031da:	e000      	b.n	80031de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d060      	beq.n	80032ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_OscConfig+0x310>
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d119      	bne.n	800322a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d116      	bne.n	800322a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031fc:	4b7c      	ldr	r3, [pc, #496]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_OscConfig+0x328>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e27d      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003214:	4b76      	ldr	r3, [pc, #472]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	4973      	ldr	r1, [pc, #460]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003228:	e040      	b.n	80032ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d023      	beq.n	800327a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003232:	4b6f      	ldr	r3, [pc, #444]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6e      	ldr	r2, [pc, #440]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800323c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323e:	f7fe f8e3 	bl	8001408 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003246:	f7fe f8df 	bl	8001408 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e25b      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003258:	4b65      	ldr	r3, [pc, #404]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003264:	4b62      	ldr	r3, [pc, #392]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	061b      	lsls	r3, r3, #24
 8003272:	495f      	ldr	r1, [pc, #380]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003274:	4313      	orrs	r3, r2
 8003276:	604b      	str	r3, [r1, #4]
 8003278:	e018      	b.n	80032ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327a:	4b5d      	ldr	r3, [pc, #372]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a5c      	ldr	r2, [pc, #368]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003280:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fe f8bf 	bl	8001408 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328e:	f7fe f8bb 	bl	8001408 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e237      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032a0:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f0      	bne.n	800328e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d03c      	beq.n	8003332 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01c      	beq.n	80032fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c0:	4b4b      	ldr	r3, [pc, #300]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032c6:	4a4a      	ldr	r2, [pc, #296]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032c8:	f043 0301 	orr.w	r3, r3, #1
 80032cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe f89a 	bl	8001408 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fe f896 	bl	8001408 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e212      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ea:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0ef      	beq.n	80032d8 <HAL_RCC_OscConfig+0x3ec>
 80032f8:	e01b      	b.n	8003332 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032fa:	4b3d      	ldr	r3, [pc, #244]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80032fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003300:	4a3b      	ldr	r2, [pc, #236]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fe f87d 	bl	8001408 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003310:	e008      	b.n	8003324 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003312:	f7fe f879 	bl	8001408 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d901      	bls.n	8003324 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e1f5      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1ef      	bne.n	8003312 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 80a6 	beq.w	800348c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003340:	2300      	movs	r3, #0
 8003342:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003344:	4b2a      	ldr	r3, [pc, #168]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10d      	bne.n	800336c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003350:	4b27      	ldr	r3, [pc, #156]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	4a26      	ldr	r2, [pc, #152]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335a:	6593      	str	r3, [r2, #88]	; 0x58
 800335c:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 800335e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003368:	2301      	movs	r3, #1
 800336a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800336c:	4b21      	ldr	r3, [pc, #132]	; (80033f4 <HAL_RCC_OscConfig+0x508>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d118      	bne.n	80033aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003378:	4b1e      	ldr	r3, [pc, #120]	; (80033f4 <HAL_RCC_OscConfig+0x508>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a1d      	ldr	r2, [pc, #116]	; (80033f4 <HAL_RCC_OscConfig+0x508>)
 800337e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003382:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003384:	f7fe f840 	bl	8001408 <HAL_GetTick>
 8003388:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800338a:	e008      	b.n	800339e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800338c:	f7fe f83c 	bl	8001408 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d901      	bls.n	800339e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e1b8      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_RCC_OscConfig+0x508>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d0f0      	beq.n	800338c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d108      	bne.n	80033c4 <HAL_RCC_OscConfig+0x4d8>
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b8:	4a0d      	ldr	r2, [pc, #52]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033ba:	f043 0301 	orr.w	r3, r3, #1
 80033be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c2:	e029      	b.n	8003418 <HAL_RCC_OscConfig+0x52c>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b05      	cmp	r3, #5
 80033ca:	d115      	bne.n	80033f8 <HAL_RCC_OscConfig+0x50c>
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d2:	4a07      	ldr	r2, [pc, #28]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033d4:	f043 0304 	orr.w	r3, r3, #4
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e2:	4a03      	ldr	r2, [pc, #12]	; (80033f0 <HAL_RCC_OscConfig+0x504>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ec:	e014      	b.n	8003418 <HAL_RCC_OscConfig+0x52c>
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40007000 	.word	0x40007000
 80033f8:	4b9d      	ldr	r3, [pc, #628]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	4a9c      	ldr	r2, [pc, #624]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003400:	f023 0301 	bic.w	r3, r3, #1
 8003404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003408:	4b99      	ldr	r3, [pc, #612]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 800340a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340e:	4a98      	ldr	r2, [pc, #608]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d016      	beq.n	800344e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fd fff2 	bl	8001408 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fd ffee 	bl	8001408 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e168      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800343e:	4b8c      	ldr	r3, [pc, #560]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ed      	beq.n	8003428 <HAL_RCC_OscConfig+0x53c>
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344e:	f7fd ffdb 	bl	8001408 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fd ffd7 	bl	8001408 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e151      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800346c:	4b80      	ldr	r3, [pc, #512]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1ed      	bne.n	8003456 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800347a:	7ffb      	ldrb	r3, [r7, #31]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d105      	bne.n	800348c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003480:	4b7b      	ldr	r3, [pc, #492]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	4a7a      	ldr	r2, [pc, #488]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0320 	and.w	r3, r3, #32
 8003494:	2b00      	cmp	r3, #0
 8003496:	d03c      	beq.n	8003512 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01c      	beq.n	80034da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80034a0:	4b73      	ldr	r3, [pc, #460]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80034a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034a6:	4a72      	ldr	r2, [pc, #456]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b0:	f7fd ffaa 	bl	8001408 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034b8:	f7fd ffa6 	bl	8001408 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e122      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034ca:	4b69      	ldr	r3, [pc, #420]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80034cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0ef      	beq.n	80034b8 <HAL_RCC_OscConfig+0x5cc>
 80034d8:	e01b      	b.n	8003512 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034da:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80034dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034e0:	4a63      	ldr	r2, [pc, #396]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80034e2:	f023 0301 	bic.w	r3, r3, #1
 80034e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ea:	f7fd ff8d 	bl	8001408 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034f2:	f7fd ff89 	bl	8001408 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e105      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003504:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1ef      	bne.n	80034f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80f9 	beq.w	800370e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	2b02      	cmp	r3, #2
 8003522:	f040 80cf 	bne.w	80036c4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003526:	4b52      	ldr	r3, [pc, #328]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f003 0203 	and.w	r2, r3, #3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	429a      	cmp	r2, r3
 8003538:	d12c      	bne.n	8003594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	3b01      	subs	r3, #1
 8003546:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003548:	429a      	cmp	r2, r3
 800354a:	d123      	bne.n	8003594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003556:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d11b      	bne.n	8003594 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d113      	bne.n	8003594 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	3b01      	subs	r3, #1
 800357a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d109      	bne.n	8003594 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	085b      	lsrs	r3, r3, #1
 800358c:	3b01      	subs	r3, #1
 800358e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003590:	429a      	cmp	r2, r3
 8003592:	d071      	beq.n	8003678 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d068      	beq.n	800366c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800359a:	4b35      	ldr	r3, [pc, #212]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d105      	bne.n	80035b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035a6:	4b32      	ldr	r3, [pc, #200]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e0ac      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80035bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035c2:	f7fd ff21 	bl	8001408 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fd ff1d 	bl	8001408 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e099      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 80035ea:	68da      	ldr	r2, [r3, #12]
 80035ec:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_RCC_OscConfig+0x788>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035f8:	3a01      	subs	r2, #1
 80035fa:	0112      	lsls	r2, r2, #4
 80035fc:	4311      	orrs	r1, r2
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003602:	0212      	lsls	r2, r2, #8
 8003604:	4311      	orrs	r1, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800360a:	0852      	lsrs	r2, r2, #1
 800360c:	3a01      	subs	r2, #1
 800360e:	0552      	lsls	r2, r2, #21
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003616:	0852      	lsrs	r2, r2, #1
 8003618:	3a01      	subs	r2, #1
 800361a:	0652      	lsls	r2, r2, #25
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003622:	06d2      	lsls	r2, r2, #27
 8003624:	430a      	orrs	r2, r1
 8003626:	4912      	ldr	r1, [pc, #72]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003628:	4313      	orrs	r3, r2
 800362a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800362c:	4b10      	ldr	r3, [pc, #64]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0f      	ldr	r2, [pc, #60]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003638:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a0c      	ldr	r2, [pc, #48]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003642:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003644:	f7fd fee0 	bl	8001408 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fd fedc 	bl	8001408 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e058      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_RCC_OscConfig+0x784>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d0f0      	beq.n	800364c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800366a:	e050      	b.n	800370e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e04f      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
 8003670:	40021000 	.word	0x40021000
 8003674:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d144      	bne.n	800370e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a23      	ldr	r2, [pc, #140]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 800368a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800368e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003690:	4b21      	ldr	r3, [pc, #132]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a20      	ldr	r2, [pc, #128]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 8003696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800369a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800369c:	f7fd feb4 	bl	8001408 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a4:	f7fd feb0 	bl	8001408 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e02c      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036b6:	4b18      	ldr	r3, [pc, #96]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0x7b8>
 80036c2:	e024      	b.n	800370e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d01f      	beq.n	800370a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a12      	ldr	r2, [pc, #72]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 80036d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d6:	f7fd fe97 	bl	8001408 <HAL_GetTick>
 80036da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036de:	f7fd fe93 	bl	8001408 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e00f      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f0      	bne.n	80036de <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036fc:	4b06      	ldr	r3, [pc, #24]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	4905      	ldr	r1, [pc, #20]	; (8003718 <HAL_RCC_OscConfig+0x82c>)
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <HAL_RCC_OscConfig+0x830>)
 8003704:	4013      	ands	r3, r2
 8003706:	60cb      	str	r3, [r1, #12]
 8003708:	e001      	b.n	800370e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40021000 	.word	0x40021000
 800371c:	feeefffc 	.word	0xfeeefffc

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e11d      	b.n	8003974 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003738:	4b90      	ldr	r3, [pc, #576]	; (800397c <HAL_RCC_ClockConfig+0x25c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	683a      	ldr	r2, [r7, #0]
 8003742:	429a      	cmp	r2, r3
 8003744:	d910      	bls.n	8003768 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4b8d      	ldr	r3, [pc, #564]	; (800397c <HAL_RCC_ClockConfig+0x25c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f023 020f 	bic.w	r2, r3, #15
 800374e:	498b      	ldr	r1, [pc, #556]	; (800397c <HAL_RCC_ClockConfig+0x25c>)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	4313      	orrs	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003756:	4b89      	ldr	r3, [pc, #548]	; (800397c <HAL_RCC_ClockConfig+0x25c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d001      	beq.n	8003768 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e105      	b.n	8003974 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d010      	beq.n	8003796 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	4b81      	ldr	r3, [pc, #516]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003780:	429a      	cmp	r2, r3
 8003782:	d908      	bls.n	8003796 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4b7e      	ldr	r3, [pc, #504]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	497b      	ldr	r1, [pc, #492]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d079      	beq.n	8003896 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d11e      	bne.n	80037e8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	4b75      	ldr	r3, [pc, #468]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0dc      	b.n	8003974 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80037ba:	f000 f9dd 	bl	8003b78 <RCC_GetSysClockFreqFromPLLSource>
 80037be:	4603      	mov	r3, r0
 80037c0:	4a70      	ldr	r2, [pc, #448]	; (8003984 <HAL_RCC_ClockConfig+0x264>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d946      	bls.n	8003854 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037c6:	4b6e      	ldr	r3, [pc, #440]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d140      	bne.n	8003854 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037d2:	4b6b      	ldr	r3, [pc, #428]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037da:	4a69      	ldr	r2, [pc, #420]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 80037dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037e2:	2380      	movs	r3, #128	; 0x80
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e035      	b.n	8003854 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037f0:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d115      	bne.n	8003828 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0b9      	b.n	8003974 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d107      	bne.n	8003818 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003808:	4b5d      	ldr	r3, [pc, #372]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d109      	bne.n	8003828 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0ad      	b.n	8003974 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003818:	4b59      	ldr	r3, [pc, #356]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0a5      	b.n	8003974 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003828:	f000 f8b4 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 800382c:	4603      	mov	r3, r0
 800382e:	4a55      	ldr	r2, [pc, #340]	; (8003984 <HAL_RCC_ClockConfig+0x264>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d90f      	bls.n	8003854 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003834:	4b52      	ldr	r3, [pc, #328]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003840:	4b4f      	ldr	r3, [pc, #316]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003848:	4a4d      	ldr	r2, [pc, #308]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 800384a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003854:	4b4a      	ldr	r3, [pc, #296]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f023 0203 	bic.w	r2, r3, #3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4947      	ldr	r1, [pc, #284]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003862:	4313      	orrs	r3, r2
 8003864:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003866:	f7fd fdcf 	bl	8001408 <HAL_GetTick>
 800386a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386c:	e00a      	b.n	8003884 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386e:	f7fd fdcb 	bl	8001408 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e077      	b.n	8003974 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003884:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 020c 	and.w	r2, r3, #12
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	429a      	cmp	r2, r3
 8003894:	d1eb      	bne.n	800386e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b80      	cmp	r3, #128	; 0x80
 800389a:	d105      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800389c:	4b38      	ldr	r3, [pc, #224]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a37      	ldr	r2, [pc, #220]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 80038a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d010      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	4b31      	ldr	r3, [pc, #196]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d208      	bcs.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	492b      	ldr	r1, [pc, #172]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d6:	4b29      	ldr	r3, [pc, #164]	; (800397c <HAL_RCC_ClockConfig+0x25c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d210      	bcs.n	8003906 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e4:	4b25      	ldr	r3, [pc, #148]	; (800397c <HAL_RCC_ClockConfig+0x25c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 020f 	bic.w	r2, r3, #15
 80038ec:	4923      	ldr	r1, [pc, #140]	; (800397c <HAL_RCC_ClockConfig+0x25c>)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f4:	4b21      	ldr	r3, [pc, #132]	; (800397c <HAL_RCC_ClockConfig+0x25c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d001      	beq.n	8003906 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e036      	b.n	8003974 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003912:	4b1b      	ldr	r3, [pc, #108]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4918      	ldr	r1, [pc, #96]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003930:	4b13      	ldr	r3, [pc, #76]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4910      	ldr	r1, [pc, #64]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003944:	f000 f826 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_RCC_ClockConfig+0x260>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	490c      	ldr	r1, [pc, #48]	; (8003988 <HAL_RCC_ClockConfig+0x268>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	4a0a      	ldr	r2, [pc, #40]	; (800398c <HAL_RCC_ClockConfig+0x26c>)
 8003962:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003964:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_RCC_ClockConfig+0x270>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd fcfd 	bl	8001368 <HAL_InitTick>
 800396e:	4603      	mov	r3, r0
 8003970:	73fb      	strb	r3, [r7, #15]

  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40022000 	.word	0x40022000
 8003980:	40021000 	.word	0x40021000
 8003984:	04c4b400 	.word	0x04c4b400
 8003988:	0800509c 	.word	0x0800509c
 800398c:	20000000 	.word	0x20000000
 8003990:	20000004 	.word	0x20000004

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	b089      	sub	sp, #36	; 0x24
 8003998:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039a2:	4b3e      	ldr	r3, [pc, #248]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039ac:	4b3b      	ldr	r3, [pc, #236]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f003 0303 	and.w	r3, r3, #3
 80039b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d005      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x34>
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b0c      	cmp	r3, #12
 80039c0:	d121      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d11e      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039c8:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039d4:	4b31      	ldr	r3, [pc, #196]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80039d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039da:	0a1b      	lsrs	r3, r3, #8
 80039dc:	f003 030f 	and.w	r3, r3, #15
 80039e0:	61fb      	str	r3, [r7, #28]
 80039e2:	e005      	b.n	80039f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039e4:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x108>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	091b      	lsrs	r3, r3, #4
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039f0:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10d      	bne.n	8003a1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a04:	e00a      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d102      	bne.n	8003a12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a0c:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a0e:	61bb      	str	r3, [r7, #24]
 8003a10:	e004      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d134      	bne.n	8003a8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a22:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d003      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0xa6>
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d003      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0xac>
 8003a38:	e005      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a3a:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a3c:	617b      	str	r3, [r7, #20]
      break;
 8003a3e:	e005      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a42:	617b      	str	r3, [r7, #20]
      break;
 8003a44:	e002      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	617b      	str	r3, [r7, #20]
      break;
 8003a4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a4c:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	3301      	adds	r3, #1
 8003a58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	fb03 f202 	mul.w	r2, r3, r2
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	0e5b      	lsrs	r3, r3, #25
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a8c:	69bb      	ldr	r3, [r7, #24]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3724      	adds	r7, #36	; 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	080050ac 	.word	0x080050ac
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	007a1200 	.word	0x007a1200

08003aac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ab0:	4b03      	ldr	r3, [pc, #12]	; (8003ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000000 	.word	0x20000000

08003ac4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ad0:	4b27      	ldr	r3, [pc, #156]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003adc:	f7ff f942 	bl	8002d64 <HAL_PWREx_GetVoltageRange>
 8003ae0:	6178      	str	r0, [r7, #20]
 8003ae2:	e014      	b.n	8003b0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ae4:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae8:	4a21      	ldr	r2, [pc, #132]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aee:	6593      	str	r3, [r2, #88]	; 0x58
 8003af0:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003afc:	f7ff f932 	bl	8002d64 <HAL_PWREx_GetVoltageRange>
 8003b00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b06:	4a1a      	ldr	r2, [pc, #104]	; (8003b70 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b14:	d10b      	bne.n	8003b2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b80      	cmp	r3, #128	; 0x80
 8003b1a:	d913      	bls.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2ba0      	cmp	r3, #160	; 0xa0
 8003b20:	d902      	bls.n	8003b28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b22:	2302      	movs	r3, #2
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	e00d      	b.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b28:	2301      	movs	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	e00a      	b.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b7f      	cmp	r3, #127	; 0x7f
 8003b32:	d902      	bls.n	8003b3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003b34:	2302      	movs	r3, #2
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	e004      	b.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b70      	cmp	r3, #112	; 0x70
 8003b3e:	d101      	bne.n	8003b44 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b40:	2301      	movs	r3, #1
 8003b42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b44:	4b0b      	ldr	r3, [pc, #44]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 020f 	bic.w	r2, r3, #15
 8003b4c:	4909      	ldr	r1, [pc, #36]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b54:	4b07      	ldr	r3, [pc, #28]	; (8003b74 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d001      	beq.n	8003b66 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40022000 	.word	0x40022000

08003b78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b7e:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d00b      	beq.n	8003ba6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d825      	bhi.n	8003be0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d008      	beq.n	8003bac <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d11f      	bne.n	8003be0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003ba0:	4b25      	ldr	r3, [pc, #148]	; (8003c38 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003ba2:	613b      	str	r3, [r7, #16]
    break;
 8003ba4:	e01f      	b.n	8003be6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003ba6:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003ba8:	613b      	str	r3, [r7, #16]
    break;
 8003baa:	e01c      	b.n	8003be6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d107      	bne.n	8003bc8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e005      	b.n	8003bd4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bc8:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	091b      	lsrs	r3, r3, #4
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003bd4:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bdc:	613b      	str	r3, [r7, #16]
    break;
 8003bde:	e002      	b.n	8003be6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
    break;
 8003be4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003be6:	4b13      	ldr	r3, [pc, #76]	; (8003c34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	091b      	lsrs	r3, r3, #4
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	fb03 f202 	mul.w	r2, r3, r2
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	0e5b      	lsrs	r3, r3, #25
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	3301      	adds	r3, #1
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c24:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c26:	683b      	ldr	r3, [r7, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40021000 	.word	0x40021000
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	007a1200 	.word	0x007a1200
 8003c40:	080050ac 	.word	0x080050ac

08003c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c50:	2300      	movs	r3, #0
 8003c52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d040      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d02a      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c68:	2b80      	cmp	r3, #128	; 0x80
 8003c6a:	d825      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c6c:	2b60      	cmp	r3, #96	; 0x60
 8003c6e:	d026      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003c70:	2b60      	cmp	r3, #96	; 0x60
 8003c72:	d821      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d006      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003c78:	2b40      	cmp	r3, #64	; 0x40
 8003c7a:	d81d      	bhi.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d010      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003c84:	e018      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c86:	4b89      	ldr	r3, [pc, #548]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	4a88      	ldr	r2, [pc, #544]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c90:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003c92:	e015      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fb02 	bl	80042a4 <RCCEx_PLLSAI1_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ca4:	e00c      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3320      	adds	r3, #32
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 fbed 	bl	800448c <RCCEx_PLLSAI2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb6:	e003      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	74fb      	strb	r3, [r7, #19]
      break;
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cc0:	7cfb      	ldrb	r3, [r7, #19]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10b      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc6:	4b79      	ldr	r3, [pc, #484]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ccc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd4:	4975      	ldr	r1, [pc, #468]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003cdc:	e001      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d047      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf6:	d030      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003cf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfc:	d82a      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d02:	d02a      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d08:	d824      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d81e      	bhi.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d1e:	d010      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d20:	e018      	b.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d22:	4b62      	ldr	r3, [pc, #392]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	4a61      	ldr	r2, [pc, #388]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d2c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d2e:	e015      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fab4 	bl	80042a4 <RCCEx_PLLSAI1_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d40:	e00c      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3320      	adds	r3, #32
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fb9f 	bl	800448c <RCCEx_PLLSAI2_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d52:	e003      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	74fb      	strb	r3, [r7, #19]
      break;
 8003d58:	e000      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10b      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d62:	4b52      	ldr	r3, [pc, #328]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	494e      	ldr	r1, [pc, #312]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d78:	e001      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7a:	7cfb      	ldrb	r3, [r7, #19]
 8003d7c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 809f 	beq.w	8003eca <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d90:	4b46      	ldr	r3, [pc, #280]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d101      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e000      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003da0:	2300      	movs	r3, #0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	4b41      	ldr	r3, [pc, #260]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	4a40      	ldr	r2, [pc, #256]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	6593      	str	r3, [r2, #88]	; 0x58
 8003db2:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc2:	4b3b      	ldr	r3, [pc, #236]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a3a      	ldr	r2, [pc, #232]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dce:	f7fd fb1b 	bl	8001408 <HAL_GetTick>
 8003dd2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dd4:	e009      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fd fb17 	bl	8001408 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d902      	bls.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	74fb      	strb	r3, [r7, #19]
        break;
 8003de8:	e005      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dea:	4b31      	ldr	r3, [pc, #196]	; (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0ef      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003df6:	7cfb      	ldrb	r3, [r7, #19]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d15b      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003dfc:	4b2b      	ldr	r3, [pc, #172]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01f      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d019      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e1a:	4b24      	ldr	r3, [pc, #144]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e24:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e26:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	4a1f      	ldr	r2, [pc, #124]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e36:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3c:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e46:	4a19      	ldr	r2, [pc, #100]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d016      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e58:	f7fd fad6 	bl	8001408 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e5e:	e00b      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e60:	f7fd fad2 	bl	8001408 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d902      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	74fb      	strb	r3, [r7, #19]
            break;
 8003e76:	e006      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0ec      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003e86:	7cfb      	ldrb	r3, [r7, #19]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10c      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9c:	4903      	ldr	r1, [pc, #12]	; (8003eac <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ea6:	7cfb      	ldrb	r3, [r7, #19]
 8003ea8:	74bb      	strb	r3, [r7, #18]
 8003eaa:	e005      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb4:	7cfb      	ldrb	r3, [r7, #19]
 8003eb6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb8:	7c7b      	ldrb	r3, [r7, #17]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d105      	bne.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebe:	4ba0      	ldr	r3, [pc, #640]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec2:	4a9f      	ldr	r2, [pc, #636]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ec4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ed6:	4b9a      	ldr	r3, [pc, #616]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003edc:	f023 0203 	bic.w	r2, r3, #3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee4:	4996      	ldr	r1, [pc, #600]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ef8:	4b91      	ldr	r3, [pc, #580]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003efe:	f023 020c 	bic.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	498e      	ldr	r1, [pc, #568]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00a      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f1a:	4b89      	ldr	r3, [pc, #548]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f28:	4985      	ldr	r1, [pc, #532]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f3c:	4b80      	ldr	r3, [pc, #512]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f4a:	497d      	ldr	r1, [pc, #500]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f5e:	4b78      	ldr	r3, [pc, #480]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6c:	4974      	ldr	r1, [pc, #464]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f80:	4b6f      	ldr	r3, [pc, #444]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8e:	496c      	ldr	r1, [pc, #432]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fa2:	4b67      	ldr	r3, [pc, #412]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fb0:	4963      	ldr	r1, [pc, #396]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fc4:	4b5e      	ldr	r3, [pc, #376]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd2:	495b      	ldr	r1, [pc, #364]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fe6:	4b56      	ldr	r3, [pc, #344]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff4:	4952      	ldr	r1, [pc, #328]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004008:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	494a      	ldr	r1, [pc, #296]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00a      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402a:	4b45      	ldr	r3, [pc, #276]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004038:	4941      	ldr	r1, [pc, #260]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800404c:	4b3c      	ldr	r3, [pc, #240]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800404e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405a:	4939      	ldr	r1, [pc, #228]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d028      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800406e:	4b34      	ldr	r3, [pc, #208]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004074:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800407c:	4930      	ldr	r1, [pc, #192]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407e:	4313      	orrs	r3, r2
 8004080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800408c:	d106      	bne.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800408e:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	4a2b      	ldr	r2, [pc, #172]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004094:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004098:	60d3      	str	r3, [r2, #12]
 800409a:	e011      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	3304      	adds	r3, #4
 80040aa:	2101      	movs	r1, #1
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f8f9 	bl	80042a4 <RCCEx_PLLSAI1_Config>
 80040b2:	4603      	mov	r3, r0
 80040b4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040b6:	7cfb      	ldrb	r3, [r7, #19]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d04d      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d4:	d108      	bne.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80040d6:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040dc:	4a18      	ldr	r2, [pc, #96]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80040e6:	e012      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80040e8:	4b15      	ldr	r3, [pc, #84]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ee:	4a14      	ldr	r2, [pc, #80]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040f4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004106:	490e      	ldr	r1, [pc, #56]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004116:	d106      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004118:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a08      	ldr	r2, [pc, #32]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800411e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004122:	60d3      	str	r3, [r2, #12]
 8004124:	e020      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800412e:	d109      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a02      	ldr	r2, [pc, #8]	; (8004140 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	60d3      	str	r3, [r2, #12]
 800413c:	e014      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800413e:	bf00      	nop
 8004140:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800414c:	d10c      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3304      	adds	r3, #4
 8004152:	2101      	movs	r1, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f000 f8a5 	bl	80042a4 <RCCEx_PLLSAI1_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800415e:	7cfb      	ldrb	r3, [r7, #19]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d028      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004174:	4b4a      	ldr	r3, [pc, #296]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004182:	4947      	ldr	r1, [pc, #284]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800418e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004192:	d106      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004194:	4b42      	ldr	r3, [pc, #264]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	4a41      	ldr	r2, [pc, #260]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800419e:	60d3      	str	r3, [r2, #12]
 80041a0:	e011      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041aa:	d10c      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	2101      	movs	r1, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 f876 	bl	80042a4 <RCCEx_PLLSAI1_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d01e      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041d2:	4b33      	ldr	r3, [pc, #204]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e2:	492f      	ldr	r1, [pc, #188]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	2102      	movs	r1, #2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f851 	bl	80042a4 <RCCEx_PLLSAI1_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00b      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800421c:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800421e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004222:	f023 0204 	bic.w	r2, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800422c:	491c      	ldr	r1, [pc, #112]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00b      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004240:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004246:	f023 0218 	bic.w	r2, r3, #24
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004250:	4913      	ldr	r1, [pc, #76]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d017      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004264:	4b0e      	ldr	r3, [pc, #56]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800426a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004274:	490a      	ldr	r1, [pc, #40]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004282:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004286:	d105      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004288:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4a04      	ldr	r2, [pc, #16]	; (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800428e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004292:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004294:	7cbb      	ldrb	r3, [r7, #18]
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000

080042a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042b2:	4b72      	ldr	r3, [pc, #456]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0303 	and.w	r3, r3, #3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00e      	beq.n	80042dc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042be:	4b6f      	ldr	r3, [pc, #444]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0203 	and.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d103      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
       ||
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d142      	bne.n	800435c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	e03f      	b.n	800435c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d018      	beq.n	8004316 <RCCEx_PLLSAI1_Config+0x72>
 80042e4:	2b03      	cmp	r3, #3
 80042e6:	d825      	bhi.n	8004334 <RCCEx_PLLSAI1_Config+0x90>
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d002      	beq.n	80042f2 <RCCEx_PLLSAI1_Config+0x4e>
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d009      	beq.n	8004304 <RCCEx_PLLSAI1_Config+0x60>
 80042f0:	e020      	b.n	8004334 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042f2:	4b62      	ldr	r3, [pc, #392]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d11d      	bne.n	800433a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004302:	e01a      	b.n	800433a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004304:	4b5d      	ldr	r3, [pc, #372]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d116      	bne.n	800433e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004314:	e013      	b.n	800433e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004316:	4b59      	ldr	r3, [pc, #356]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004322:	4b56      	ldr	r3, [pc, #344]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004332:	e006      	b.n	8004342 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      break;
 8004338:	e004      	b.n	8004344 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800433a:	bf00      	nop
 800433c:	e002      	b.n	8004344 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800433e:	bf00      	nop
 8004340:	e000      	b.n	8004344 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004342:	bf00      	nop
    }

    if(status == HAL_OK)
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d108      	bne.n	800435c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800434a:	4b4c      	ldr	r3, [pc, #304]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f023 0203 	bic.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4949      	ldr	r1, [pc, #292]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004358:	4313      	orrs	r3, r2
 800435a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	2b00      	cmp	r3, #0
 8004360:	f040 8086 	bne.w	8004470 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004364:	4b45      	ldr	r3, [pc, #276]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a44      	ldr	r2, [pc, #272]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 800436a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800436e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004370:	f7fd f84a 	bl	8001408 <HAL_GetTick>
 8004374:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004376:	e009      	b.n	800438c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004378:	f7fd f846 	bl	8001408 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d902      	bls.n	800438c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	73fb      	strb	r3, [r7, #15]
        break;
 800438a:	e005      	b.n	8004398 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800438c:	4b3b      	ldr	r3, [pc, #236]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ef      	bne.n	8004378 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d168      	bne.n	8004470 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d113      	bne.n	80043cc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a4:	4b35      	ldr	r3, [pc, #212]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	4b35      	ldr	r3, [pc, #212]	; (8004480 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6892      	ldr	r2, [r2, #8]
 80043b0:	0211      	lsls	r1, r2, #8
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	68d2      	ldr	r2, [r2, #12]
 80043b6:	06d2      	lsls	r2, r2, #27
 80043b8:	4311      	orrs	r1, r2
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6852      	ldr	r2, [r2, #4]
 80043be:	3a01      	subs	r2, #1
 80043c0:	0112      	lsls	r2, r2, #4
 80043c2:	430a      	orrs	r2, r1
 80043c4:	492d      	ldr	r1, [pc, #180]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	610b      	str	r3, [r1, #16]
 80043ca:	e02d      	b.n	8004428 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d115      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043d2:	4b2a      	ldr	r3, [pc, #168]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043d4:	691a      	ldr	r2, [r3, #16]
 80043d6:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	0211      	lsls	r1, r2, #8
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6912      	ldr	r2, [r2, #16]
 80043e4:	0852      	lsrs	r2, r2, #1
 80043e6:	3a01      	subs	r2, #1
 80043e8:	0552      	lsls	r2, r2, #21
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6852      	ldr	r2, [r2, #4]
 80043f0:	3a01      	subs	r2, #1
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	430a      	orrs	r2, r1
 80043f6:	4921      	ldr	r1, [pc, #132]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	610b      	str	r3, [r1, #16]
 80043fc:	e014      	b.n	8004428 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043fe:	4b1f      	ldr	r3, [pc, #124]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	4b21      	ldr	r3, [pc, #132]	; (8004488 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004404:	4013      	ands	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6892      	ldr	r2, [r2, #8]
 800440a:	0211      	lsls	r1, r2, #8
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6952      	ldr	r2, [r2, #20]
 8004410:	0852      	lsrs	r2, r2, #1
 8004412:	3a01      	subs	r2, #1
 8004414:	0652      	lsls	r2, r2, #25
 8004416:	4311      	orrs	r1, r2
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6852      	ldr	r2, [r2, #4]
 800441c:	3a01      	subs	r2, #1
 800441e:	0112      	lsls	r2, r2, #4
 8004420:	430a      	orrs	r2, r1
 8004422:	4916      	ldr	r1, [pc, #88]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004424:	4313      	orrs	r3, r2
 8004426:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004428:	4b14      	ldr	r3, [pc, #80]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a13      	ldr	r2, [pc, #76]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 800442e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004432:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004434:	f7fc ffe8 	bl	8001408 <HAL_GetTick>
 8004438:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800443a:	e009      	b.n	8004450 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800443c:	f7fc ffe4 	bl	8001408 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d902      	bls.n	8004450 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	73fb      	strb	r3, [r7, #15]
          break;
 800444e:	e005      	b.n	800445c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d0ef      	beq.n	800443c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	4904      	ldr	r1, [pc, #16]	; (800447c <RCCEx_PLLSAI1_Config+0x1d8>)
 800446c:	4313      	orrs	r3, r2
 800446e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40021000 	.word	0x40021000
 8004480:	07ff800f 	.word	0x07ff800f
 8004484:	ff9f800f 	.word	0xff9f800f
 8004488:	f9ff800f 	.word	0xf9ff800f

0800448c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800449a:	4b72      	ldr	r3, [pc, #456]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00e      	beq.n	80044c4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044a6:	4b6f      	ldr	r3, [pc, #444]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	f003 0203 	and.w	r2, r3, #3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d103      	bne.n	80044be <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
       ||
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d142      	bne.n	8004544 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	73fb      	strb	r3, [r7, #15]
 80044c2:	e03f      	b.n	8004544 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d018      	beq.n	80044fe <RCCEx_PLLSAI2_Config+0x72>
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d825      	bhi.n	800451c <RCCEx_PLLSAI2_Config+0x90>
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d002      	beq.n	80044da <RCCEx_PLLSAI2_Config+0x4e>
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d009      	beq.n	80044ec <RCCEx_PLLSAI2_Config+0x60>
 80044d8:	e020      	b.n	800451c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044da:	4b62      	ldr	r3, [pc, #392]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d11d      	bne.n	8004522 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ea:	e01a      	b.n	8004522 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044ec:	4b5d      	ldr	r3, [pc, #372]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d116      	bne.n	8004526 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044fc:	e013      	b.n	8004526 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044fe:	4b59      	ldr	r3, [pc, #356]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10f      	bne.n	800452a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800450a:	4b56      	ldr	r3, [pc, #344]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800451a:	e006      	b.n	800452a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	73fb      	strb	r3, [r7, #15]
      break;
 8004520:	e004      	b.n	800452c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004522:	bf00      	nop
 8004524:	e002      	b.n	800452c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004526:	bf00      	nop
 8004528:	e000      	b.n	800452c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800452a:	bf00      	nop
    }

    if(status == HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004532:	4b4c      	ldr	r3, [pc, #304]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4949      	ldr	r1, [pc, #292]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004540:	4313      	orrs	r3, r2
 8004542:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 8086 	bne.w	8004658 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800454c:	4b45      	ldr	r3, [pc, #276]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a44      	ldr	r2, [pc, #272]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004558:	f7fc ff56 	bl	8001408 <HAL_GetTick>
 800455c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800455e:	e009      	b.n	8004574 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004560:	f7fc ff52 	bl	8001408 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d902      	bls.n	8004574 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	73fb      	strb	r3, [r7, #15]
        break;
 8004572:	e005      	b.n	8004580 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004574:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1ef      	bne.n	8004560 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d168      	bne.n	8004658 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d113      	bne.n	80045b4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800458c:	4b35      	ldr	r3, [pc, #212]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 800458e:	695a      	ldr	r2, [r3, #20]
 8004590:	4b35      	ldr	r3, [pc, #212]	; (8004668 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004592:	4013      	ands	r3, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6892      	ldr	r2, [r2, #8]
 8004598:	0211      	lsls	r1, r2, #8
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68d2      	ldr	r2, [r2, #12]
 800459e:	06d2      	lsls	r2, r2, #27
 80045a0:	4311      	orrs	r1, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6852      	ldr	r2, [r2, #4]
 80045a6:	3a01      	subs	r2, #1
 80045a8:	0112      	lsls	r2, r2, #4
 80045aa:	430a      	orrs	r2, r1
 80045ac:	492d      	ldr	r1, [pc, #180]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	614b      	str	r3, [r1, #20]
 80045b2:	e02d      	b.n	8004610 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d115      	bne.n	80045e6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045ba:	4b2a      	ldr	r3, [pc, #168]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	4b2b      	ldr	r3, [pc, #172]	; (800466c <RCCEx_PLLSAI2_Config+0x1e0>)
 80045c0:	4013      	ands	r3, r2
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6892      	ldr	r2, [r2, #8]
 80045c6:	0211      	lsls	r1, r2, #8
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6912      	ldr	r2, [r2, #16]
 80045cc:	0852      	lsrs	r2, r2, #1
 80045ce:	3a01      	subs	r2, #1
 80045d0:	0552      	lsls	r2, r2, #21
 80045d2:	4311      	orrs	r1, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6852      	ldr	r2, [r2, #4]
 80045d8:	3a01      	subs	r2, #1
 80045da:	0112      	lsls	r2, r2, #4
 80045dc:	430a      	orrs	r2, r1
 80045de:	4921      	ldr	r1, [pc, #132]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	614b      	str	r3, [r1, #20]
 80045e4:	e014      	b.n	8004610 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e6:	4b1f      	ldr	r3, [pc, #124]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <RCCEx_PLLSAI2_Config+0x1e4>)
 80045ec:	4013      	ands	r3, r2
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6892      	ldr	r2, [r2, #8]
 80045f2:	0211      	lsls	r1, r2, #8
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6952      	ldr	r2, [r2, #20]
 80045f8:	0852      	lsrs	r2, r2, #1
 80045fa:	3a01      	subs	r2, #1
 80045fc:	0652      	lsls	r2, r2, #25
 80045fe:	4311      	orrs	r1, r2
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	6852      	ldr	r2, [r2, #4]
 8004604:	3a01      	subs	r2, #1
 8004606:	0112      	lsls	r2, r2, #4
 8004608:	430a      	orrs	r2, r1
 800460a:	4916      	ldr	r1, [pc, #88]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 800460c:	4313      	orrs	r3, r2
 800460e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004610:	4b14      	ldr	r3, [pc, #80]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fc fef4 	bl	8001408 <HAL_GetTick>
 8004620:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004622:	e009      	b.n	8004638 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004624:	f7fc fef0 	bl	8001408 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d902      	bls.n	8004638 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	73fb      	strb	r3, [r7, #15]
          break;
 8004636:	e005      	b.n	8004644 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004638:	4b0a      	ldr	r3, [pc, #40]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ef      	beq.n	8004624 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d106      	bne.n	8004658 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800464a:	4b06      	ldr	r3, [pc, #24]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	4904      	ldr	r1, [pc, #16]	; (8004664 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004654:	4313      	orrs	r3, r2
 8004656:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	07ff800f 	.word	0x07ff800f
 800466c:	ff9f800f 	.word	0xff9f800f
 8004670:	f9ff800f 	.word	0xf9ff800f

08004674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e049      	b.n	800471a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d106      	bne.n	80046a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fc fd9c 	bl	80011d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f000 fa9a 	bl	8004bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e04f      	b.n	80047dc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d01d      	beq.n	800479a <HAL_TIM_Base_Start_IT+0x76>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d018      	beq.n	800479a <HAL_TIM_Base_Start_IT+0x76>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1f      	ldr	r2, [pc, #124]	; (80047ec <HAL_TIM_Base_Start_IT+0xc8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d013      	beq.n	800479a <HAL_TIM_Base_Start_IT+0x76>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d00e      	beq.n	800479a <HAL_TIM_Base_Start_IT+0x76>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1c      	ldr	r2, [pc, #112]	; (80047f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d009      	beq.n	800479a <HAL_TIM_Base_Start_IT+0x76>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1b      	ldr	r2, [pc, #108]	; (80047f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d004      	beq.n	800479a <HAL_TIM_Base_Start_IT+0x76>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a19      	ldr	r2, [pc, #100]	; (80047fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d115      	bne.n	80047c6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	4b17      	ldr	r3, [pc, #92]	; (8004800 <HAL_TIM_Base_Start_IT+0xdc>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b06      	cmp	r3, #6
 80047aa:	d015      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0xb4>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b2:	d011      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c4:	e008      	b.n	80047d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f042 0201 	orr.w	r2, r2, #1
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e000      	b.n	80047da <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40012c00 	.word	0x40012c00
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40013400 	.word	0x40013400
 80047fc:	40014000 	.word	0x40014000
 8004800:	00010007 	.word	0x00010007

08004804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d020      	beq.n	8004868 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0202 	mvn.w	r2, #2
 8004838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f9ad 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f99f 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f9b0 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0204 	mvn.w	r2, #4
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f987 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f979 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f98a 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d020      	beq.n	8004900 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0208 	mvn.w	r2, #8
 80048d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2204      	movs	r2, #4
 80048d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f961 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f953 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f964 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	d020      	beq.n	800494c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01b      	beq.n	800494c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0210 	mvn.w	r2, #16
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2208      	movs	r2, #8
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f93b 	bl	8004bae <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f92d 	bl	8004b9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f93e 	bl	8004bc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0201 	mvn.w	r2, #1
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc f856 	bl	8000a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00c      	beq.n	8004994 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 faf2 	bl	8004f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 faea 	bl	8004f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8fd 	bl	8004bd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00c      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0320 	and.w	r3, r3, #32
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d007      	beq.n	8004a00 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0220 	mvn.w	r2, #32
 80049f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 fab2 	bl	8004f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a00:	bf00      	nop
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIM_ConfigClockSource+0x1c>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e0b6      	b.n	8004b92 <HAL_TIM_ConfigClockSource+0x18a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a60:	d03e      	beq.n	8004ae0 <HAL_TIM_ConfigClockSource+0xd8>
 8004a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a66:	f200 8087 	bhi.w	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a6e:	f000 8086 	beq.w	8004b7e <HAL_TIM_ConfigClockSource+0x176>
 8004a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a76:	d87f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a78:	2b70      	cmp	r3, #112	; 0x70
 8004a7a:	d01a      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0xaa>
 8004a7c:	2b70      	cmp	r3, #112	; 0x70
 8004a7e:	d87b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a80:	2b60      	cmp	r3, #96	; 0x60
 8004a82:	d050      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0x11e>
 8004a84:	2b60      	cmp	r3, #96	; 0x60
 8004a86:	d877      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a88:	2b50      	cmp	r3, #80	; 0x50
 8004a8a:	d03c      	beq.n	8004b06 <HAL_TIM_ConfigClockSource+0xfe>
 8004a8c:	2b50      	cmp	r3, #80	; 0x50
 8004a8e:	d873      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a90:	2b40      	cmp	r3, #64	; 0x40
 8004a92:	d058      	beq.n	8004b46 <HAL_TIM_ConfigClockSource+0x13e>
 8004a94:	2b40      	cmp	r3, #64	; 0x40
 8004a96:	d86f      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004a98:	2b30      	cmp	r3, #48	; 0x30
 8004a9a:	d064      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15e>
 8004a9c:	2b30      	cmp	r3, #48	; 0x30
 8004a9e:	d86b      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	d060      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15e>
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d867      	bhi.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d05c      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15e>
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d05a      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x15e>
 8004ab0:	e062      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ac2:	f000 f9a7 	bl	8004e14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ad4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	609a      	str	r2, [r3, #8]
      break;
 8004ade:	e04f      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004af0:	f000 f990 	bl	8004e14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b02:	609a      	str	r2, [r3, #8]
      break;
 8004b04:	e03c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b12:	461a      	mov	r2, r3
 8004b14:	f000 f904 	bl	8004d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2150      	movs	r1, #80	; 0x50
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 f95d 	bl	8004dde <TIM_ITRx_SetConfig>
      break;
 8004b24:	e02c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b32:	461a      	mov	r2, r3
 8004b34:	f000 f923 	bl	8004d7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2160      	movs	r1, #96	; 0x60
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 f94d 	bl	8004dde <TIM_ITRx_SetConfig>
      break;
 8004b44:	e01c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b52:	461a      	mov	r2, r3
 8004b54:	f000 f8e4 	bl	8004d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2140      	movs	r1, #64	; 0x40
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 f93d 	bl	8004dde <TIM_ITRx_SetConfig>
      break;
 8004b64:	e00c      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 f934 	bl	8004dde <TIM_ITRx_SetConfig>
      break;
 8004b76:	e003      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e000      	b.n	8004b80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004b7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ba2:	bf00      	nop
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bca:	bf00      	nop
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
	...

08004bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d013      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c0a:	d00f      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3d      	ldr	r2, [pc, #244]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d00b      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d007      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3b      	ldr	r2, [pc, #236]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d003      	beq.n	8004c2c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3a      	ldr	r2, [pc, #232]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d108      	bne.n	8004c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2f      	ldr	r2, [pc, #188]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01f      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4c:	d01b      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2c      	ldr	r2, [pc, #176]	; (8004d04 <TIM_Base_SetConfig+0x118>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d017      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a2b      	ldr	r2, [pc, #172]	; (8004d08 <TIM_Base_SetConfig+0x11c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2a      	ldr	r2, [pc, #168]	; (8004d0c <TIM_Base_SetConfig+0x120>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00f      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a29      	ldr	r2, [pc, #164]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <TIM_Base_SetConfig+0x128>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_Base_SetConfig+0x9a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a26      	ldr	r2, [pc, #152]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a10      	ldr	r2, [pc, #64]	; (8004d00 <TIM_Base_SetConfig+0x114>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a12      	ldr	r2, [pc, #72]	; (8004d10 <TIM_Base_SetConfig+0x124>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a11      	ldr	r2, [pc, #68]	; (8004d14 <TIM_Base_SetConfig+0x128>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a10      	ldr	r2, [pc, #64]	; (8004d18 <TIM_Base_SetConfig+0x12c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0xf8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a0f      	ldr	r2, [pc, #60]	; (8004d1c <TIM_Base_SetConfig+0x130>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d103      	bne.n	8004cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	615a      	str	r2, [r3, #20]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40012c00 	.word	0x40012c00
 8004d04:	40000400 	.word	0x40000400
 8004d08:	40000800 	.word	0x40000800
 8004d0c:	40000c00 	.word	0x40000c00
 8004d10:	40013400 	.word	0x40013400
 8004d14:	40014000 	.word	0x40014000
 8004d18:	40014400 	.word	0x40014400
 8004d1c:	40014800 	.word	0x40014800

08004d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f023 0201 	bic.w	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f023 030a 	bic.w	r3, r3, #10
 8004d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b087      	sub	sp, #28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f023 0210 	bic.w	r2, r3, #16
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004da8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	031b      	lsls	r3, r3, #12
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f043 0307 	orr.w	r3, r3, #7
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	609a      	str	r2, [r3, #8]
}
 8004e08:	bf00      	nop
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b087      	sub	sp, #28
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	021a      	lsls	r2, r3, #8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	431a      	orrs	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	609a      	str	r2, [r3, #8]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e068      	b.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2e      	ldr	r2, [pc, #184]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2d      	ldr	r2, [pc, #180]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d108      	bne.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1e      	ldr	r2, [pc, #120]	; (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01d      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ede:	d018      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1b      	ldr	r2, [pc, #108]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d10c      	bne.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40013400 	.word	0x40013400
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40014000 	.word	0x40014000

08004f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <arm_sin_f32>:
 8004fa0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005020 <arm_sin_f32+0x80>
 8004fa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004fa8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004fb4:	d504      	bpl.n	8004fc0 <arm_sin_f32+0x20>
 8004fb6:	ee17 3a90 	vmov	r3, s15
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	ee07 3a90 	vmov	s15, r3
 8004fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005024 <arm_sin_f32+0x84>
 8004fc8:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004fcc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004fd0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8004fd4:	ee17 3a90 	vmov	r3, s15
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fde:	d21a      	bcs.n	8005016 <arm_sin_f32+0x76>
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	1c59      	adds	r1, r3, #1
 8004fea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004fee:	4a0e      	ldr	r2, [pc, #56]	; (8005028 <arm_sin_f32+0x88>)
 8004ff0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004ff4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004ff8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8004ffc:	ed93 7a00 	vldr	s14, [r3]
 8005000:	edd2 6a00 	vldr	s13, [r2]
 8005004:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005008:	ee20 0a26 	vmul.f32	s0, s0, s13
 800500c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005010:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005014:	4770      	bx	lr
 8005016:	ee30 0a47 	vsub.f32	s0, s0, s14
 800501a:	2101      	movs	r1, #1
 800501c:	2300      	movs	r3, #0
 800501e:	e7e6      	b.n	8004fee <arm_sin_f32+0x4e>
 8005020:	3e22f983 	.word	0x3e22f983
 8005024:	44000000 	.word	0x44000000
 8005028:	080050dc 	.word	0x080050dc

0800502c <memset>:
 800502c:	4402      	add	r2, r0
 800502e:	4603      	mov	r3, r0
 8005030:	4293      	cmp	r3, r2
 8005032:	d100      	bne.n	8005036 <memset+0xa>
 8005034:	4770      	bx	lr
 8005036:	f803 1b01 	strb.w	r1, [r3], #1
 800503a:	e7f9      	b.n	8005030 <memset+0x4>

0800503c <__libc_init_array>:
 800503c:	b570      	push	{r4, r5, r6, lr}
 800503e:	4d0d      	ldr	r5, [pc, #52]	; (8005074 <__libc_init_array+0x38>)
 8005040:	4c0d      	ldr	r4, [pc, #52]	; (8005078 <__libc_init_array+0x3c>)
 8005042:	1b64      	subs	r4, r4, r5
 8005044:	10a4      	asrs	r4, r4, #2
 8005046:	2600      	movs	r6, #0
 8005048:	42a6      	cmp	r6, r4
 800504a:	d109      	bne.n	8005060 <__libc_init_array+0x24>
 800504c:	4d0b      	ldr	r5, [pc, #44]	; (800507c <__libc_init_array+0x40>)
 800504e:	4c0c      	ldr	r4, [pc, #48]	; (8005080 <__libc_init_array+0x44>)
 8005050:	f000 f818 	bl	8005084 <_init>
 8005054:	1b64      	subs	r4, r4, r5
 8005056:	10a4      	asrs	r4, r4, #2
 8005058:	2600      	movs	r6, #0
 800505a:	42a6      	cmp	r6, r4
 800505c:	d105      	bne.n	800506a <__libc_init_array+0x2e>
 800505e:	bd70      	pop	{r4, r5, r6, pc}
 8005060:	f855 3b04 	ldr.w	r3, [r5], #4
 8005064:	4798      	blx	r3
 8005066:	3601      	adds	r6, #1
 8005068:	e7ee      	b.n	8005048 <__libc_init_array+0xc>
 800506a:	f855 3b04 	ldr.w	r3, [r5], #4
 800506e:	4798      	blx	r3
 8005070:	3601      	adds	r6, #1
 8005072:	e7f2      	b.n	800505a <__libc_init_array+0x1e>
 8005074:	080058e0 	.word	0x080058e0
 8005078:	080058e0 	.word	0x080058e0
 800507c:	080058e0 	.word	0x080058e0
 8005080:	080058e4 	.word	0x080058e4

08005084 <_init>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr

08005090 <_fini>:
 8005090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005092:	bf00      	nop
 8005094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005096:	bc08      	pop	{r3}
 8005098:	469e      	mov	lr, r3
 800509a:	4770      	bx	lr
